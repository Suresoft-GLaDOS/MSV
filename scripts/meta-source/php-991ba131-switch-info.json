{
	"switch_num":	122,
	"case_num":	[388, 6, 2, 389, 4, 389, 3, 2, 389, 4, 389, 3, 2, 390, 4, 403, 3, 1, 404, 80, 404, 80, 404, 80, 404, 80, 404, 80, 404, 80, 403, 69, 403, 66, 2, 389, 66, 389, 66, 389, 34, 389, 48, 389, 66, 399, 6, 2, 400, 4, 400, 3, 2, 400, 4, 400, 3, 2, 400, 3, 2, 400, 3, 1, 401, 140, 401, 140, 401, 140, 401, 140, 401, 140, 401, 140, 400, 66, 400, 69, 400, 66, 400, 66, 400, 34, 400, 48, 400, 66, 141, 163, 141, 3, 140, 3, 140, 2, 140, 56, 2, 2, 141, 13, 140, 1, 192, 56, 192, 5, 192, 10, 199, 15, 199, 13, 199, 56, 2, 2, 192, 4],
	"switch_cluster":	[[2, 4, 7, 9, 12, 17, 19, 21, 23, 25, 27, 29, 31, 33, 34, 36, 38, 40, 42, 44, 47, 49, 52, 54, 57, 60, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 97, 99, 100, 101, 103, 105, 107, 113, 115, 117, 118, 119, 121], [1, 6, 11, 14, 16, 46, 51, 56, 59, 62, 93, 95, 109, 111], [0, 3, 5, 8, 10, 13, 15, 18, 20, 22, 24, 26, 28, 30, 32, 35, 37, 39, 41, 43, 45, 48, 50, 53, 55, 58, 61, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 102, 104, 106, 108, 110, 112, 114, 116, 120], []],
	"priority":	[{
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	428,
			"primary_score":	999632,
			"second_score":	3104
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	429,
			"primary_score":	999632,
			"second_score":	3102
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	479,
			"primary_score":	999632,
			"second_score":	3105
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	485,
			"primary_score":	999632,
			"second_score":	2
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	590,
			"primary_score":	999632,
			"second_score":	3101
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	592,
			"primary_score":	999632,
			"second_score":	3100
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	593,
			"primary_score":	999632,
			"second_score":	6
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	594,
			"primary_score":	999632,
			"second_score":	5
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	595,
			"primary_score":	999632,
			"second_score":	658
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	596,
			"primary_score":	999632,
			"second_score":	657
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	597,
			"primary_score":	999632,
			"second_score":	656
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	599,
			"primary_score":	999632,
			"second_score":	4
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	601,
			"primary_score":	999632,
			"second_score":	3
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	692,
			"primary_score":	999632,
			"second_score":	123729
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	697,
			"primary_score":	999632,
			"second_score":	123728
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	699,
			"primary_score":	999632,
			"second_score":	123727
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	812,
			"primary_score":	999632,
			"second_score":	123726
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	816,
			"primary_score":	999632,
			"second_score":	123725
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	819,
			"primary_score":	999632,
			"second_score":	123724
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	820,
			"primary_score":	999632,
			"second_score":	123723
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1897,
			"primary_score":	999632,
			"second_score":	123911
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1898,
			"primary_score":	999632,
			"second_score":	123910
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1901,
			"primary_score":	999632,
			"second_score":	123909
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1902,
			"primary_score":	999632,
			"second_score":	123908
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1903,
			"primary_score":	999632,
			"second_score":	123907
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1904,
			"primary_score":	999632,
			"second_score":	123906
		}, {
			"file":	"Zend/zend.c",
			"line":	227,
			"primary_score":	999632,
			"second_score":	121701
		}, {
			"file":	"Zend/zend.c",
			"line":	228,
			"primary_score":	999632,
			"second_score":	121700
		}, {
			"file":	"Zend/zend.c",
			"line":	229,
			"primary_score":	999632,
			"second_score":	121699
		}, {
			"file":	"Zend/zend.c",
			"line":	305,
			"primary_score":	999632,
			"second_score":	121705
		}, {
			"file":	"Zend/zend.c",
			"line":	311,
			"primary_score":	999632,
			"second_score":	121704
		}, {
			"file":	"Zend/zend.c",
			"line":	312,
			"primary_score":	999632,
			"second_score":	121703
		}, {
			"file":	"Zend/zend.c",
			"line":	314,
			"primary_score":	999632,
			"second_score":	121702
		}, {
			"file":	"Zend/zend.c",
			"line":	315,
			"primary_score":	999632,
			"second_score":	121698
		}, {
			"file":	"Zend/zend.c",
			"line":	318,
			"primary_score":	999632,
			"second_score":	121697
		}, {
			"file":	"Zend/zend.c",
			"line":	319,
			"primary_score":	999632,
			"second_score":	121696
		}, {
			"file":	"Zend/zend.c",
			"line":	322,
			"primary_score":	999632,
			"second_score":	121695
		}, {
			"file":	"Zend/zend.c",
			"line":	324,
			"primary_score":	999632,
			"second_score":	123355
		}, {
			"file":	"Zend/zend.c",
			"line":	325,
			"primary_score":	999632,
			"second_score":	123304
		}, {
			"file":	"Zend/zend.c",
			"line":	328,
			"primary_score":	999632,
			"second_score":	123303
		}, {
			"file":	"Zend/zend.c",
			"line":	797,
			"primary_score":	999632,
			"second_score":	105200
		}, {
			"file":	"Zend/zend.c",
			"line":	798,
			"primary_score":	999632,
			"second_score":	105192
		}, {
			"file":	"Zend/zend.c",
			"line":	800,
			"primary_score":	999632,
			"second_score":	48192
		}, {
			"file":	"Zend/zend.c",
			"line":	801,
			"primary_score":	999632,
			"second_score":	48173
		}, {
			"file":	"Zend/zend.c",
			"line":	803,
			"primary_score":	999632,
			"second_score":	14840
		}, {
			"file":	"Zend/zend.c",
			"line":	804,
			"primary_score":	999632,
			"second_score":	14777
		}, {
			"file":	"Zend/zend.c",
			"line":	806,
			"primary_score":	999632,
			"second_score":	14776
		}, {
			"file":	"Zend/zend.c",
			"line":	807,
			"primary_score":	999632,
			"second_score":	14768
		}, {
			"file":	"Zend/zend.c",
			"line":	809,
			"primary_score":	999632,
			"second_score":	14767
		}, {
			"file":	"Zend/zend.c",
			"line":	810,
			"primary_score":	999632,
			"second_score":	14766
		}, {
			"file":	"Zend/zend.c",
			"line":	812,
			"primary_score":	999632,
			"second_score":	14765
		}, {
			"file":	"Zend/zend.c",
			"line":	813,
			"primary_score":	999632,
			"second_score":	6297
		}, {
			"file":	"Zend/zend.c",
			"line":	814,
			"primary_score":	999632,
			"second_score":	6296
		}, {
			"file":	"Zend/zend.c",
			"line":	822,
			"primary_score":	999632,
			"second_score":	6240
		}, {
			"file":	"Zend/zend.c",
			"line":	824,
			"primary_score":	999632,
			"second_score":	6128
		}, {
			"file":	"Zend/zend.c",
			"line":	898,
			"primary_score":	999632,
			"second_score":	122040
		}, {
			"file":	"Zend/zend.c",
			"line":	899,
			"primary_score":	999632,
			"second_score":	122034
		}, {
			"file":	"Zend/zend.c",
			"line":	900,
			"primary_score":	999632,
			"second_score":	121228
		}, {
			"file":	"Zend/zend.c",
			"line":	907,
			"primary_score":	999632,
			"second_score":	120302
		}, {
			"file":	"Zend/zend.c",
			"line":	908,
			"primary_score":	999632,
			"second_score":	120301
		}, {
			"file":	"Zend/zend.c",
			"line":	910,
			"primary_score":	999632,
			"second_score":	120300
		}, {
			"file":	"Zend/zend.c",
			"line":	911,
			"primary_score":	999632,
			"second_score":	120294
		}, {
			"file":	"Zend/zend.c",
			"line":	912,
			"primary_score":	999632,
			"second_score":	120284
		}, {
			"file":	"Zend/zend.c",
			"line":	915,
			"primary_score":	999632,
			"second_score":	120282
		}, {
			"file":	"Zend/zend.c",
			"line":	917,
			"primary_score":	999632,
			"second_score":	115339
		}, {
			"file":	"Zend/zend.c",
			"line":	918,
			"primary_score":	999632,
			"second_score":	115333
		}, {
			"file":	"Zend/zend.c",
			"line":	919,
			"primary_score":	999632,
			"second_score":	115184
		}, {
			"file":	"Zend/zend.c",
			"line":	921,
			"primary_score":	999632,
			"second_score":	115182
		}, {
			"file":	"Zend/zend.c",
			"line":	924,
			"primary_score":	999632,
			"second_score":	115155
		}, {
			"file":	"Zend/zend.c",
			"line":	925,
			"primary_score":	999632,
			"second_score":	115154
		}, {
			"file":	"Zend/zend.c",
			"line":	943,
			"primary_score":	999632,
			"second_score":	115150
		}, {
			"file":	"Zend/zend.c",
			"line":	944,
			"primary_score":	999632,
			"second_score":	115144
		}, {
			"file":	"Zend/zend.c",
			"line":	945,
			"primary_score":	999632,
			"second_score":	115141
		}, {
			"file":	"Zend/zend.c",
			"line":	1200,
			"primary_score":	999632,
			"second_score":	122088
		}, {
			"file":	"Zend/zend.c",
			"line":	1201,
			"primary_score":	999632,
			"second_score":	122087
		}, {
			"file":	"Zend/zend.c",
			"line":	1202,
			"primary_score":	999632,
			"second_score":	122086
		}, {
			"file":	"Zend/zend.c",
			"line":	1205,
			"primary_score":	999632,
			"second_score":	150683
		}, {
			"file":	"Zend/zend.c",
			"line":	1206,
			"primary_score":	999632,
			"second_score":	150682
		}, {
			"file":	"Zend/zend.c",
			"line":	1207,
			"primary_score":	999632,
			"second_score":	150681
		}, {
			"file":	"Zend/zend.c",
			"line":	1209,
			"primary_score":	999632,
			"second_score":	150576
		}, {
			"file":	"Zend/zend.c",
			"line":	1210,
			"primary_score":	999632,
			"second_score":	150497
		}, {
			"file":	"Zend/zend.c",
			"line":	1211,
			"primary_score":	999632,
			"second_score":	150496
		}, {
			"file":	"Zend/zend.c",
			"line":	1212,
			"primary_score":	999632,
			"second_score":	150495
		}, {
			"file":	"Zend/zend.c",
			"line":	1213,
			"primary_score":	999632,
			"second_score":	122459
		}, {
			"file":	"Zend/zend.c",
			"line":	1214,
			"primary_score":	999632,
			"second_score":	122457
		}, {
			"file":	"Zend/zend.c",
			"line":	1239,
			"primary_score":	999632,
			"second_score":	122456
		}, {
			"file":	"Zend/zend.c",
			"line":	1240,
			"primary_score":	999632,
			"second_score":	122107
		}, {
			"file":	"Zend/zend.c",
			"line":	1248,
			"primary_score":	999632,
			"second_score":	122085
		}, {
			"file":	"Zend/zend.c",
			"line":	1249,
			"primary_score":	999632,
			"second_score":	122084
		}, {
			"file":	"Zend/zend.c",
			"line":	1250,
			"primary_score":	999632,
			"second_score":	122083
		}, {
			"file":	"Zend/zend.c",
			"line":	1252,
			"primary_score":	999632,
			"second_score":	122082
		}, {
			"file":	"Zend/zend.c",
			"line":	1282,
			"primary_score":	999632,
			"second_score":	115252
		}, {
			"file":	"Zend/zend.h",
			"line":	379,
			"primary_score":	999632,
			"second_score":	14857
		}, {
			"file":	"Zend/zend.h",
			"line":	383,
			"primary_score":	999632,
			"second_score":	128757
		}, {
			"file":	"Zend/zend.h",
			"line":	387,
			"primary_score":	999632,
			"second_score":	127027
		}, {
			"file":	"Zend/zend.h",
			"line":	391,
			"primary_score":	999632,
			"second_score":	14859
		}, {
			"file":	"Zend/zend.h",
			"line":	395,
			"primary_score":	999632,
			"second_score":	125260
		}, {
			"file":	"Zend/zend.h",
			"line":	399,
			"primary_score":	999632,
			"second_score":	151225
		}, {
			"file":	"Zend/zend.h",
			"line":	403,
			"primary_score":	999632,
			"second_score":	18652
		}, {
			"file":	"Zend/zend.h",
			"line":	407,
			"primary_score":	999930,
			"second_score":	128759
		}, {
			"file":	"Zend/zend_API.c",
			"line":	241,
			"primary_score":	999858,
			"second_score":	129545
		}, {
			"file":	"Zend/zend_API.c",
			"line":	242,
			"primary_score":	999858,
			"second_score":	129544
		}, {
			"file":	"Zend/zend_API.c",
			"line":	307,
			"primary_score":	999632,
			"second_score":	129557
		}, {
			"file":	"Zend/zend_API.c",
			"line":	308,
			"primary_score":	999632,
			"second_score":	129556
		}, {
			"file":	"Zend/zend_API.c",
			"line":	309,
			"primary_score":	999632,
			"second_score":	129555
		}, {
			"file":	"Zend/zend_API.c",
			"line":	312,
			"primary_score":	999632,
			"second_score":	129554
		}, {
			"file":	"Zend/zend_API.c",
			"line":	313,
			"primary_score":	999632,
			"second_score":	129553
		}, {
			"file":	"Zend/zend_API.c",
			"line":	315,
			"primary_score":	999632,
			"second_score":	129552
		}, {
			"file":	"Zend/zend_API.c",
			"line":	320,
			"primary_score":	999632,
			"second_score":	129551
		}, {
			"file":	"Zend/zend_API.c",
			"line":	325,
			"primary_score":	999632,
			"second_score":	129550
		}, {
			"file":	"Zend/zend_API.c",
			"line":	416,
			"primary_score":	999632,
			"second_score":	131619
		}, {
			"file":	"Zend/zend_API.c",
			"line":	417,
			"primary_score":	999632,
			"second_score":	131618
		}, {
			"file":	"Zend/zend_API.c",
			"line":	418,
			"primary_score":	999632,
			"second_score":	131617
		}, {
			"file":	"Zend/zend_API.c",
			"line":	431,
			"primary_score":	999632,
			"second_score":	131616
		}, {
			"file":	"Zend/zend_API.c",
			"line":	432,
			"primary_score":	999632,
			"second_score":	131615
		}, {
			"file":	"Zend/zend_API.c",
			"line":	438,
			"primary_score":	999632,
			"second_score":	131613
		}, {
			"file":	"Zend/zend_API.c",
			"line":	439,
			"primary_score":	999632,
			"second_score":	131612
		}, {
			"file":	"Zend/zend_API.c",
			"line":	440,
			"primary_score":	999632,
			"second_score":	131611
		}, {
			"file":	"Zend/zend_API.c",
			"line":	453,
			"primary_score":	999632,
			"second_score":	131610
		}, {
			"file":	"Zend/zend_API.c",
			"line":	544,
			"primary_score":	999932,
			"second_score":	129549
		}, {
			"file":	"Zend/zend_API.c",
			"line":	545,
			"primary_score":	999932,
			"second_score":	129548
		}, {
			"file":	"Zend/zend_API.c",
			"line":	547,
			"primary_score":	999932,
			"second_score":	129547
		}, {
			"file":	"Zend/zend_API.c",
			"line":	551,
			"primary_score":	999933,
			"second_score":	129546
		}, {
			"file":	"Zend/zend_API.c",
			"line":	553,
			"primary_score":	999949,
			"second_score":	129533
		}, {
			"file":	"Zend/zend_API.c",
			"line":	562,
			"primary_score":	999949,
			"second_score":	129532
		}, {
			"file":	"Zend/zend_API.c",
			"line":	643,
			"primary_score":	999632,
			"second_score":	124941
		}, {
			"file":	"Zend/zend_API.c",
			"line":	644,
			"primary_score":	999632,
			"second_score":	124940
		}, {
			"file":	"Zend/zend_API.c",
			"line":	647,
			"primary_score":	999632,
			"second_score":	124939
		}, {
			"file":	"Zend/zend_API.c",
			"line":	650,
			"primary_score":	999632,
			"second_score":	124938
		}, {
			"file":	"Zend/zend_API.c",
			"line":	656,
			"primary_score":	999632,
			"second_score":	129531
		}, {
			"file":	"Zend/zend_API.c",
			"line":	658,
			"primary_score":	999632,
			"second_score":	129530
		}, {
			"file":	"Zend/zend_API.c",
			"line":	664,
			"primary_score":	999632,
			"second_score":	129560
		}, {
			"file":	"Zend/zend_API.c",
			"line":	665,
			"primary_score":	999632,
			"second_score":	129559
		}, {
			"file":	"Zend/zend_API.c",
			"line":	667,
			"primary_score":	999632,
			"second_score":	129558
		}, {
			"file":	"Zend/zend_API.c",
			"line":	668,
			"primary_score":	999632,
			"second_score":	129529
		}, {
			"file":	"Zend/zend_API.c",
			"line":	688,
			"primary_score":	999632,
			"second_score":	129528
		}, {
			"file":	"Zend/zend_API.c",
			"line":	694,
			"primary_score":	999632,
			"second_score":	128494
		}, {
			"file":	"Zend/zend_API.c",
			"line":	695,
			"primary_score":	999632,
			"second_score":	128493
		}, {
			"file":	"Zend/zend_API.c",
			"line":	696,
			"primary_score":	999632,
			"second_score":	128492
		}, {
			"file":	"Zend/zend_API.c",
			"line":	697,
			"primary_score":	999632,
			"second_score":	128491
		}, {
			"file":	"Zend/zend_API.c",
			"line":	698,
			"primary_score":	999632,
			"second_score":	128490
		}, {
			"file":	"Zend/zend_API.c",
			"line":	699,
			"primary_score":	999632,
			"second_score":	128489
		}, {
			"file":	"Zend/zend_API.c",
			"line":	700,
			"primary_score":	999632,
			"second_score":	128488
		}, {
			"file":	"Zend/zend_API.c",
			"line":	701,
			"primary_score":	999632,
			"second_score":	128487
		}, {
			"file":	"Zend/zend_API.c",
			"line":	702,
			"primary_score":	999632,
			"second_score":	128486
		}, {
			"file":	"Zend/zend_API.c",
			"line":	703,
			"primary_score":	999632,
			"second_score":	128485
		}, {
			"file":	"Zend/zend_API.c",
			"line":	704,
			"primary_score":	999632,
			"second_score":	128484
		}, {
			"file":	"Zend/zend_API.c",
			"line":	706,
			"primary_score":	999632,
			"second_score":	128483
		}, {
			"file":	"Zend/zend_API.c",
			"line":	707,
			"primary_score":	999632,
			"second_score":	128482
		}, {
			"file":	"Zend/zend_API.c",
			"line":	708,
			"primary_score":	999632,
			"second_score":	128481
		}, {
			"file":	"Zend/zend_API.c",
			"line":	718,
			"primary_score":	999632,
			"second_score":	129575
		}, {
			"file":	"Zend/zend_API.c",
			"line":	722,
			"primary_score":	999632,
			"second_score":	131653
		}, {
			"file":	"Zend/zend_API.c",
			"line":	742,
			"primary_score":	999740,
			"second_score":	128480
		}, {
			"file":	"Zend/zend_API.c",
			"line":	744,
			"primary_score":	999740,
			"second_score":	128479
		}, {
			"file":	"Zend/zend_API.c",
			"line":	745,
			"primary_score":	999740,
			"second_score":	128478
		}, {
			"file":	"Zend/zend_API.c",
			"line":	748,
			"primary_score":	999740,
			"second_score":	128477
		}, {
			"file":	"Zend/zend_API.c",
			"line":	749,
			"primary_score":	999740,
			"second_score":	128476
		}, {
			"file":	"Zend/zend_API.c",
			"line":	764,
			"primary_score":	999632,
			"second_score":	128475
		}, {
			"file":	"Zend/zend_API.c",
			"line":	765,
			"primary_score":	999632,
			"second_score":	128474
		}, {
			"file":	"Zend/zend_API.c",
			"line":	768,
			"primary_score":	999632,
			"second_score":	128473
		}, {
			"file":	"Zend/zend_API.c",
			"line":	770,
			"primary_score":	999740,
			"second_score":	128472
		}, {
			"file":	"Zend/zend_API.c",
			"line":	771,
			"primary_score":	999740,
			"second_score":	128471
		}, {
			"file":	"Zend/zend_API.c",
			"line":	774,
			"primary_score":	999632,
			"second_score":	128470
		}, {
			"file":	"Zend/zend_API.c",
			"line":	790,
			"primary_score":	999632,
			"second_score":	128469
		}, {
			"file":	"Zend/zend_API.c",
			"line":	792,
			"primary_score":	999632,
			"second_score":	128467
		}, {
			"file":	"Zend/zend_API.c",
			"line":	798,
			"primary_score":	999632,
			"second_score":	128466
		}, {
			"file":	"Zend/zend_API.c",
			"line":	799,
			"primary_score":	999632,
			"second_score":	128465
		}, {
			"file":	"Zend/zend_API.c",
			"line":	800,
			"primary_score":	999632,
			"second_score":	128464
		}, {
			"file":	"Zend/zend_API.c",
			"line":	801,
			"primary_score":	999632,
			"second_score":	131635
		}, {
			"file":	"Zend/zend_API.c",
			"line":	804,
			"primary_score":	999632,
			"second_score":	128463
		}, {
			"file":	"Zend/zend_API.c",
			"line":	805,
			"primary_score":	999740,
			"second_score":	128462
		}, {
			"file":	"Zend/zend_API.c",
			"line":	808,
			"primary_score":	999740,
			"second_score":	128461
		}, {
			"file":	"Zend/zend_API.c",
			"line":	809,
			"primary_score":	999740,
			"second_score":	128460
		}, {
			"file":	"Zend/zend_API.c",
			"line":	810,
			"primary_score":	999740,
			"second_score":	128459
		}, {
			"file":	"Zend/zend_API.c",
			"line":	812,
			"primary_score":	999740,
			"second_score":	128458
		}, {
			"file":	"Zend/zend_API.c",
			"line":	813,
			"primary_score":	999740,
			"second_score":	128457
		}, {
			"file":	"Zend/zend_API.c",
			"line":	814,
			"primary_score":	999740,
			"second_score":	128456
		}, {
			"file":	"Zend/zend_API.c",
			"line":	816,
			"primary_score":	999740,
			"second_score":	128454
		}, {
			"file":	"Zend/zend_API.c",
			"line":	819,
			"primary_score":	999740,
			"second_score":	128453
		}, {
			"file":	"Zend/zend_API.c",
			"line":	820,
			"primary_score":	999740,
			"second_score":	128425
		}, {
			"file":	"Zend/zend_API.c",
			"line":	821,
			"primary_score":	999740,
			"second_score":	128424
		}, {
			"file":	"Zend/zend_API.c",
			"line":	825,
			"primary_score":	999740,
			"second_score":	128423
		}, {
			"file":	"Zend/zend_API.c",
			"line":	826,
			"primary_score":	999740,
			"second_score":	128422
		}, {
			"file":	"Zend/zend_API.c",
			"line":	827,
			"primary_score":	999740,
			"second_score":	128421
		}, {
			"file":	"Zend/zend_API.c",
			"line":	834,
			"primary_score":	999632,
			"second_score":	129563
		}, {
			"file":	"Zend/zend_API.c",
			"line":	836,
			"primary_score":	999632,
			"second_score":	129561
		}, {
			"file":	"Zend/zend_API.c",
			"line":	844,
			"primary_score":	999632,
			"second_score":	129527
		}, {
			"file":	"Zend/zend_API.c",
			"line":	847,
			"primary_score":	999632,
			"second_score":	128420
		}, {
			"file":	"Zend/zend_API.c",
			"line":	881,
			"primary_score":	999632,
			"second_score":	128502
		}, {
			"file":	"Zend/zend_API.c",
			"line":	882,
			"primary_score":	999632,
			"second_score":	128501
		}, {
			"file":	"Zend/zend_API.c",
			"line":	884,
			"primary_score":	999632,
			"second_score":	128500
		}, {
			"file":	"Zend/zend_API.c",
			"line":	886,
			"primary_score":	999632,
			"second_score":	128496
		}, {
			"file":	"Zend/zend_API.c",
			"line":	887,
			"primary_score":	999632,
			"second_score":	128495
		}, {
			"file":	"Zend/zend_API.c",
			"line":	888,
			"primary_score":	999632,
			"second_score":	128419
		}, {
			"file":	"Zend/zend_API.c",
			"line":	890,
			"primary_score":	999632,
			"second_score":	128418
		}, {
			"file":	"Zend/zend_API.c",
			"line":	896,
			"primary_score":	999881,
			"second_score":	129618
		}, {
			"file":	"Zend/zend_API.c",
			"line":	897,
			"primary_score":	999881,
			"second_score":	129617
		}, {
			"file":	"Zend/zend_API.c",
			"line":	898,
			"primary_score":	999881,
			"second_score":	129616
		}, {
			"file":	"Zend/zend_API.c",
			"line":	899,
			"primary_score":	999881,
			"second_score":	129615
		}, {
			"file":	"Zend/zend_API.c",
			"line":	900,
			"primary_score":	999881,
			"second_score":	129614
		}, {
			"file":	"Zend/zend_API.c",
			"line":	902,
			"primary_score":	999881,
			"second_score":	129613
		}, {
			"file":	"Zend/zend_API.c",
			"line":	909,
			"primary_score":	999921,
			"second_score":	129612
		}, {
			"file":	"Zend/zend_API.c",
			"line":	910,
			"primary_score":	999922,
			"second_score":	129608
		}, {
			"file":	"Zend/zend_API.c",
			"line":	912,
			"primary_score":	999922,
			"second_score":	129607
		}, {
			"file":	"Zend/zend_API.c",
			"line":	914,
			"primary_score":	999922,
			"second_score":	129606
		}, {
			"file":	"Zend/zend_API.c",
			"line":	915,
			"primary_score":	999922,
			"second_score":	129605
		}, {
			"file":	"Zend/zend_API.c",
			"line":	916,
			"primary_score":	999922,
			"second_score":	129604
		}, {
			"file":	"Zend/zend_API.c",
			"line":	918,
			"primary_score":	999922,
			"second_score":	129603
		}, {
			"file":	"Zend/zend_API.c",
			"line":	923,
			"primary_score":	999922,
			"second_score":	129590
		}, {
			"file":	"Zend/zend_API.c",
			"line":	924,
			"primary_score":	999922,
			"second_score":	129525
		}, {
			"file":	"Zend/zend_API.c",
			"line":	926,
			"primary_score":	999882,
			"second_score":	129524
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1018,
			"primary_score":	999814,
			"second_score":	132080
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1019,
			"primary_score":	999814,
			"second_score":	149316
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1020,
			"primary_score":	999814,
			"second_score":	149315
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1021,
			"primary_score":	999814,
			"second_score":	149314
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1023,
			"primary_score":	999814,
			"second_score":	149313
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1024,
			"primary_score":	999814,
			"second_score":	149312
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1026,
			"primary_score":	999814,
			"second_score":	149160
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1032,
			"primary_score":	999814,
			"second_score":	149159
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1068,
			"primary_score":	999814,
			"second_score":	149158
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1072,
			"primary_score":	999814,
			"second_score":	149157
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1073,
			"primary_score":	999814,
			"second_score":	149156
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1080,
			"primary_score":	999814,
			"second_score":	131962
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1082,
			"primary_score":	999814,
			"second_score":	131961
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1101,
			"primary_score":	999814,
			"second_score":	132083
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1103,
			"primary_score":	999814,
			"second_score":	132082
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1108,
			"primary_score":	999814,
			"second_score":	132081
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1110,
			"primary_score":	999814,
			"second_score":	132079
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1111,
			"primary_score":	999814,
			"second_score":	132078
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1120,
			"primary_score":	999862,
			"second_score":	132077
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1122,
			"primary_score":	999814,
			"second_score":	131941
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1128,
			"primary_score":	999814,
			"second_score":	132084
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1368,
			"primary_score":	999632,
			"second_score":	125681
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1370,
			"primary_score":	999632,
			"second_score":	125680
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1371,
			"primary_score":	999632,
			"second_score":	125570
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1373,
			"primary_score":	999632,
			"second_score":	125455
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1779,
			"primary_score":	999632,
			"second_score":	105191
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1780,
			"primary_score":	999632,
			"second_score":	105190
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1781,
			"primary_score":	999632,
			"second_score":	105189
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2171,
			"primary_score":	999632,
			"second_score":	51137
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2172,
			"primary_score":	999632,
			"second_score":	51136
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2173,
			"primary_score":	999632,
			"second_score":	51135
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2175,
			"primary_score":	999632,
			"second_score":	51134
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2176,
			"primary_score":	999632,
			"second_score":	51133
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2178,
			"primary_score":	999632,
			"second_score":	51132
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2179,
			"primary_score":	999632,
			"second_score":	48253
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2185,
			"primary_score":	999632,
			"second_score":	48252
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2186,
			"primary_score":	999632,
			"second_score":	48204
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2187,
			"primary_score":	999632,
			"second_score":	48203
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2213,
			"primary_score":	999632,
			"second_score":	51144
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2215,
			"primary_score":	999632,
			"second_score":	51143
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2220,
			"primary_score":	999632,
			"second_score":	51142
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2224,
			"primary_score":	999632,
			"second_score":	54384
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2228,
			"primary_score":	999632,
			"second_score":	51141
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2232,
			"primary_score":	999632,
			"second_score":	53701
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2233,
			"primary_score":	999632,
			"second_score":	54769
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2238,
			"primary_score":	999632,
			"second_score":	51140
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2239,
			"primary_score":	999632,
			"second_score":	51139
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2240,
			"primary_score":	999632,
			"second_score":	51138
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2245,
			"primary_score":	999632,
			"second_score":	48202
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2284,
			"primary_score":	999632,
			"second_score":	121191
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2286,
			"primary_score":	999632,
			"second_score":	121190
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2287,
			"primary_score":	999632,
			"second_score":	121184
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2290,
			"primary_score":	999632,
			"second_score":	121183
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2292,
			"primary_score":	999632,
			"second_score":	121182
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2293,
			"primary_score":	999632,
			"second_score":	120600
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2295,
			"primary_score":	999632,
			"second_score":	120599
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2296,
			"primary_score":	999632,
			"second_score":	120497
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2299,
			"primary_score":	999632,
			"second_score":	120496
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2305,
			"primary_score":	999632,
			"second_score":	116359
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2307,
			"primary_score":	999632,
			"second_score":	116358
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2331,
			"primary_score":	999632,
			"second_score":	115132
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2335,
			"primary_score":	999632,
			"second_score":	115131
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2337,
			"primary_score":	999632,
			"second_score":	115130
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3782,
			"primary_score":	999912,
			"second_score":	131683
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3783,
			"primary_score":	999912,
			"second_score":	131682
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3784,
			"primary_score":	999912,
			"second_score":	131681
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3785,
			"primary_score":	999912,
			"second_score":	131680
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3793,
			"primary_score":	999912,
			"second_score":	131685
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3794,
			"primary_score":	999912,
			"second_score":	131684
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3795,
			"primary_score":	999912,
			"second_score":	131679
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3800,
			"primary_score":	999912,
			"second_score":	131678
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3801,
			"primary_score":	999912,
			"second_score":	131677
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3807,
			"primary_score":	999912,
			"second_score":	130436
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3808,
			"primary_score":	999912,
			"second_score":	130435
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3809,
			"primary_score":	999912,
			"second_score":	130434
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3814,
			"primary_score":	999912,
			"second_score":	130433
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3817,
			"primary_score":	999912,
			"second_score":	130432
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	144,
			"primary_score":	999632,
			"second_score":	3188
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	297,
			"primary_score":	999632,
			"second_score":	3191
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	673,
			"primary_score":	999632,
			"second_score":	114654
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	675,
			"primary_score":	999632,
			"second_score":	114653
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	676,
			"primary_score":	999632,
			"second_score":	114652
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	699,
			"primary_score":	999632,
			"second_score":	114712
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	701,
			"primary_score":	999632,
			"second_score":	114711
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	702,
			"primary_score":	999632,
			"second_score":	114710
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	725,
			"primary_score":	999632,
			"second_score":	114661
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	726,
			"primary_score":	999632,
			"second_score":	114660
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	728,
			"primary_score":	999632,
			"second_score":	114659
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	730,
			"primary_score":	999632,
			"second_score":	114658
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	731,
			"primary_score":	999632,
			"second_score":	114657
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	732,
			"primary_score":	999632,
			"second_score":	114656
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	734,
			"primary_score":	999632,
			"second_score":	114655
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	735,
			"primary_score":	999632,
			"second_score":	114651
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	736,
			"primary_score":	999632,
			"second_score":	114650
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	737,
			"primary_score":	999632,
			"second_score":	114649
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	738,
			"primary_score":	999632,
			"second_score":	114648
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	739,
			"primary_score":	999632,
			"second_score":	114647
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	740,
			"primary_score":	999632,
			"second_score":	114646
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	741,
			"primary_score":	999632,
			"second_score":	114645
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	743,
			"primary_score":	999632,
			"second_score":	118544
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	745,
			"primary_score":	999632,
			"second_score":	118543
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	746,
			"primary_score":	999632,
			"second_score":	118542
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	748,
			"primary_score":	999632,
			"second_score":	118541
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	749,
			"primary_score":	999632,
			"second_score":	118540
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	750,
			"primary_score":	999632,
			"second_score":	118539
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	751,
			"primary_score":	999632,
			"second_score":	118538
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	752,
			"primary_score":	999632,
			"second_score":	118537
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	753,
			"primary_score":	999632,
			"second_score":	118536
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	754,
			"primary_score":	999632,
			"second_score":	118535
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	768,
			"primary_score":	999632,
			"second_score":	144898
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	770,
			"primary_score":	999632,
			"second_score":	144897
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	772,
			"primary_score":	999632,
			"second_score":	144896
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	773,
			"primary_score":	999632,
			"second_score":	144895
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	774,
			"primary_score":	999632,
			"second_score":	144894
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	776,
			"primary_score":	999632,
			"second_score":	144893
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	778,
			"primary_score":	999632,
			"second_score":	144892
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	779,
			"primary_score":	999632,
			"second_score":	144891
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	780,
			"primary_score":	999632,
			"second_score":	144890
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	786,
			"primary_score":	999632,
			"second_score":	114698
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	787,
			"primary_score":	999632,
			"second_score":	114697
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	789,
			"primary_score":	999632,
			"second_score":	114696
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	791,
			"primary_score":	999632,
			"second_score":	114695
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	792,
			"primary_score":	999632,
			"second_score":	114694
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	795,
			"primary_score":	999632,
			"second_score":	114693
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	800,
			"primary_score":	999632,
			"second_score":	114692
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	801,
			"primary_score":	999632,
			"second_score":	114691
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	802,
			"primary_score":	999632,
			"second_score":	114690
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	803,
			"primary_score":	999632,
			"second_score":	114689
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	805,
			"primary_score":	999632,
			"second_score":	114685
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	806,
			"primary_score":	999632,
			"second_score":	114683
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	807,
			"primary_score":	999632,
			"second_score":	114682
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	808,
			"primary_score":	999632,
			"second_score":	114681
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	833,
			"primary_score":	999632,
			"second_score":	143551
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	838,
			"primary_score":	999632,
			"second_score":	143550
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	839,
			"primary_score":	999632,
			"second_score":	143549
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	841,
			"primary_score":	999632,
			"second_score":	143548
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	842,
			"primary_score":	999632,
			"second_score":	143547
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	843,
			"primary_score":	999632,
			"second_score":	143546
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	845,
			"primary_score":	999632,
			"second_score":	143545
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	846,
			"primary_score":	999632,
			"second_score":	143544
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	890,
			"primary_score":	999632,
			"second_score":	115036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	891,
			"primary_score":	999632,
			"second_score":	115035
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	893,
			"primary_score":	999632,
			"second_score":	115034
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	894,
			"primary_score":	999632,
			"second_score":	115033
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	896,
			"primary_score":	999632,
			"second_score":	115032
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	897,
			"primary_score":	999632,
			"second_score":	115031
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	904,
			"primary_score":	999632,
			"second_score":	115030
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	905,
			"primary_score":	999632,
			"second_score":	115029
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	906,
			"primary_score":	999632,
			"second_score":	114776
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	907,
			"primary_score":	999632,
			"second_score":	114775
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	908,
			"primary_score":	999632,
			"second_score":	114774
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	909,
			"primary_score":	999632,
			"second_score":	114773
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	911,
			"primary_score":	999632,
			"second_score":	114772
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	912,
			"primary_score":	999632,
			"second_score":	114771
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1599,
			"primary_score":	999632,
			"second_score":	3206
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1600,
			"primary_score":	999632,
			"second_score":	3205
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1601,
			"primary_score":	999632,
			"second_score":	3204
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1602,
			"primary_score":	999632,
			"second_score":	3203
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1604,
			"primary_score":	999632,
			"second_score":	3202
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1608,
			"primary_score":	999632,
			"second_score":	3201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1614,
			"primary_score":	999632,
			"second_score":	3200
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1669,
			"primary_score":	999632,
			"second_score":	3199
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1670,
			"primary_score":	999632,
			"second_score":	3198
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1671,
			"primary_score":	999632,
			"second_score":	3197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1672,
			"primary_score":	999632,
			"second_score":	3196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1673,
			"primary_score":	999632,
			"second_score":	3195
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1674,
			"primary_score":	999632,
			"second_score":	3194
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1675,
			"primary_score":	999632,
			"second_score":	3193
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1676,
			"primary_score":	999632,
			"second_score":	3192
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1678,
			"primary_score":	999632,
			"second_score":	3190
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1679,
			"primary_score":	999632,
			"second_score":	3189
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1680,
			"primary_score":	999632,
			"second_score":	3187
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1681,
			"primary_score":	999632,
			"second_score":	3186
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1684,
			"primary_score":	999632,
			"second_score":	115042
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1686,
			"primary_score":	999632,
			"second_score":	115041
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1687,
			"primary_score":	999632,
			"second_score":	115040
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1692,
			"primary_score":	999632,
			"second_score":	115039
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1705,
			"primary_score":	999632,
			"second_score":	115038
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1709,
			"primary_score":	999632,
			"second_score":	115037
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1710,
			"primary_score":	999632,
			"second_score":	114770
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1711,
			"primary_score":	999632,
			"second_score":	114769
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1712,
			"primary_score":	999632,
			"second_score":	114768
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1717,
			"primary_score":	999632,
			"second_score":	114767
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1718,
			"primary_score":	999632,
			"second_score":	114766
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1719,
			"primary_score":	999632,
			"second_score":	114765
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1721,
			"primary_score":	999632,
			"second_score":	114764
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1722,
			"primary_score":	999632,
			"second_score":	114763
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1724,
			"primary_score":	999632,
			"second_score":	114762
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1725,
			"primary_score":	999632,
			"second_score":	114761
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1726,
			"primary_score":	999632,
			"second_score":	114757
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1727,
			"primary_score":	999632,
			"second_score":	114751
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1729,
			"primary_score":	999632,
			"second_score":	114733
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1730,
			"primary_score":	999632,
			"second_score":	114732
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1732,
			"primary_score":	999632,
			"second_score":	114637
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1802,
			"primary_score":	999632,
			"second_score":	114722
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1803,
			"primary_score":	999632,
			"second_score":	114721
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1804,
			"primary_score":	999632,
			"second_score":	114717
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1805,
			"primary_score":	999632,
			"second_score":	114716
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1807,
			"primary_score":	999632,
			"second_score":	114715
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1811,
			"primary_score":	999632,
			"second_score":	114714
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1864,
			"primary_score":	999632,
			"second_score":	114713
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1865,
			"primary_score":	999632,
			"second_score":	114709
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1870,
			"primary_score":	999632,
			"second_score":	114708
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1875,
			"primary_score":	999632,
			"second_score":	114731
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1876,
			"primary_score":	999632,
			"second_score":	114730
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1877,
			"primary_score":	999632,
			"second_score":	114729
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1878,
			"primary_score":	999632,
			"second_score":	114728
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1879,
			"primary_score":	999632,
			"second_score":	114727
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1880,
			"primary_score":	999632,
			"second_score":	114726
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1881,
			"primary_score":	999632,
			"second_score":	114725
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1883,
			"primary_score":	999632,
			"second_score":	114724
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1884,
			"primary_score":	999632,
			"second_score":	122986
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1885,
			"primary_score":	999632,
			"second_score":	122985
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1887,
			"primary_score":	999632,
			"second_score":	122984
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1891,
			"primary_score":	999632,
			"second_score":	122983
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1897,
			"primary_score":	999632,
			"second_score":	122982
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1898,
			"primary_score":	999632,
			"second_score":	122981
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1899,
			"primary_score":	999632,
			"second_score":	122980
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1900,
			"primary_score":	999632,
			"second_score":	122979
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1901,
			"primary_score":	999632,
			"second_score":	122978
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1902,
			"primary_score":	999632,
			"second_score":	122977
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1909,
			"primary_score":	999632,
			"second_score":	131804
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1910,
			"primary_score":	999632,
			"second_score":	131803
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1912,
			"primary_score":	999632,
			"second_score":	143567
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1913,
			"primary_score":	999632,
			"second_score":	143563
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1917,
			"primary_score":	999632,
			"second_score":	143562
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1925,
			"primary_score":	999632,
			"second_score":	114723
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1927,
			"primary_score":	999632,
			"second_score":	114707
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1944,
			"primary_score":	999632,
			"second_score":	114706
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2005,
			"primary_score":	999632,
			"second_score":	114705
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2007,
			"primary_score":	999632,
			"second_score":	114704
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2008,
			"primary_score":	999632,
			"second_score":	114703
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2009,
			"primary_score":	999632,
			"second_score":	114702
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2010,
			"primary_score":	999632,
			"second_score":	114701
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2011,
			"primary_score":	999632,
			"second_score":	114699
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2013,
			"primary_score":	999632,
			"second_score":	114680
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2016,
			"primary_score":	999632,
			"second_score":	114679
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2018,
			"primary_score":	999632,
			"second_score":	114678
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2019,
			"primary_score":	999632,
			"second_score":	143540
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2020,
			"primary_score":	999632,
			"second_score":	143539
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2022,
			"primary_score":	999632,
			"second_score":	114677
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2025,
			"primary_score":	999632,
			"second_score":	114676
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2026,
			"primary_score":	999632,
			"second_score":	114670
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2027,
			"primary_score":	999632,
			"second_score":	114669
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2030,
			"primary_score":	999632,
			"second_score":	114663
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2031,
			"primary_score":	999632,
			"second_score":	114662
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2037,
			"primary_score":	999632,
			"second_score":	114644
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2039,
			"primary_score":	999632,
			"second_score":	114643
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2040,
			"primary_score":	999632,
			"second_score":	114642
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2041,
			"primary_score":	999632,
			"second_score":	114641
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2044,
			"primary_score":	999632,
			"second_score":	114640
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2046,
			"primary_score":	999632,
			"second_score":	114638
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2052,
			"primary_score":	999632,
			"second_score":	115096
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2053,
			"primary_score":	999632,
			"second_score":	115095
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2054,
			"primary_score":	999632,
			"second_score":	115094
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2056,
			"primary_score":	999632,
			"second_score":	115093
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2060,
			"primary_score":	999632,
			"second_score":	115092
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2061,
			"primary_score":	999632,
			"second_score":	115091
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2062,
			"primary_score":	999632,
			"second_score":	115090
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2069,
			"primary_score":	999632,
			"second_score":	115089
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2070,
			"primary_score":	999632,
			"second_score":	115088
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2071,
			"primary_score":	999632,
			"second_score":	115087
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2073,
			"primary_score":	999632,
			"second_score":	115086
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2074,
			"primary_score":	999632,
			"second_score":	115085
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2075,
			"primary_score":	999632,
			"second_score":	115084
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2076,
			"primary_score":	999632,
			"second_score":	115083
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2082,
			"primary_score":	999632,
			"second_score":	115082
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2086,
			"primary_score":	999632,
			"second_score":	115403
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2088,
			"primary_score":	999632,
			"second_score":	115401
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2090,
			"primary_score":	999632,
			"second_score":	115400
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2091,
			"primary_score":	999632,
			"second_score":	115399
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2095,
			"primary_score":	999632,
			"second_score":	115398
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2096,
			"primary_score":	999632,
			"second_score":	115397
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2097,
			"primary_score":	999632,
			"second_score":	115396
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2098,
			"primary_score":	999632,
			"second_score":	115377
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2100,
			"primary_score":	999632,
			"second_score":	115376
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2104,
			"primary_score":	999632,
			"second_score":	115375
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2105,
			"primary_score":	999632,
			"second_score":	115369
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2107,
			"primary_score":	999632,
			"second_score":	115351
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2112,
			"primary_score":	999632,
			"second_score":	126546
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2113,
			"primary_score":	999632,
			"second_score":	126545
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2114,
			"primary_score":	999632,
			"second_score":	126544
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2115,
			"primary_score":	999632,
			"second_score":	126543
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2116,
			"primary_score":	999632,
			"second_score":	126542
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2118,
			"primary_score":	999632,
			"second_score":	126541
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2119,
			"primary_score":	999632,
			"second_score":	126540
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2121,
			"primary_score":	999632,
			"second_score":	136524
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2122,
			"primary_score":	999632,
			"second_score":	136523
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2123,
			"primary_score":	999632,
			"second_score":	136522
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2124,
			"primary_score":	999632,
			"second_score":	136521
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2126,
			"primary_score":	999632,
			"second_score":	136520
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2130,
			"primary_score":	999632,
			"second_score":	136519
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2131,
			"primary_score":	999632,
			"second_score":	136518
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2133,
			"primary_score":	999632,
			"second_score":	136517
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2134,
			"primary_score":	999632,
			"second_score":	151044
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2136,
			"primary_score":	999632,
			"second_score":	151043
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2137,
			"primary_score":	999632,
			"second_score":	151041
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2138,
			"primary_score":	999632,
			"second_score":	151040
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2139,
			"primary_score":	999632,
			"second_score":	151039
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2140,
			"primary_score":	999632,
			"second_score":	151038
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2144,
			"primary_score":	999632,
			"second_score":	151019
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2145,
			"primary_score":	999632,
			"second_score":	151013
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2147,
			"primary_score":	999632,
			"second_score":	151012
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2150,
			"primary_score":	999632,
			"second_score":	151006
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2151,
			"primary_score":	999632,
			"second_score":	150988
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2152,
			"primary_score":	999632,
			"second_score":	150987
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2154,
			"primary_score":	999632,
			"second_score":	136516
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2155,
			"primary_score":	999632,
			"second_score":	136515
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2163,
			"primary_score":	999632,
			"second_score":	129271
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2164,
			"primary_score":	999632,
			"second_score":	129270
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2170,
			"primary_score":	999632,
			"second_score":	129269
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2171,
			"primary_score":	999632,
			"second_score":	129268
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2172,
			"primary_score":	999632,
			"second_score":	129267
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2173,
			"primary_score":	999632,
			"second_score":	129266
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2175,
			"primary_score":	999632,
			"second_score":	129265
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2180,
			"primary_score":	999632,
			"second_score":	129264
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2183,
			"primary_score":	999632,
			"second_score":	129263
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2185,
			"primary_score":	999632,
			"second_score":	129262
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2186,
			"primary_score":	999632,
			"second_score":	129261
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2188,
			"primary_score":	999632,
			"second_score":	129260
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2189,
			"primary_score":	999632,
			"second_score":	129259
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2190,
			"primary_score":	999632,
			"second_score":	129258
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2197,
			"primary_score":	999632,
			"second_score":	129257
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2205,
			"primary_score":	999632,
			"second_score":	124343
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2206,
			"primary_score":	999632,
			"second_score":	124342
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2207,
			"primary_score":	999632,
			"second_score":	124340
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2208,
			"primary_score":	999632,
			"second_score":	124339
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2209,
			"primary_score":	999632,
			"second_score":	124338
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2211,
			"primary_score":	999632,
			"second_score":	124337
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2212,
			"primary_score":	999632,
			"second_score":	124335
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2214,
			"primary_score":	999632,
			"second_score":	124316
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2218,
			"primary_score":	999632,
			"second_score":	124315
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2221,
			"primary_score":	999632,
			"second_score":	124314
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2222,
			"primary_score":	999632,
			"second_score":	124308
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2223,
			"primary_score":	999632,
			"second_score":	124307
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2226,
			"primary_score":	999632,
			"second_score":	124301
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2230,
			"primary_score":	999632,
			"second_score":	124300
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2233,
			"primary_score":	999632,
			"second_score":	124282
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2234,
			"primary_score":	999632,
			"second_score":	124281
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2235,
			"primary_score":	999632,
			"second_score":	124280
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2236,
			"primary_score":	999632,
			"second_score":	124279
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2238,
			"primary_score":	999632,
			"second_score":	124278
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2239,
			"primary_score":	999632,
			"second_score":	124276
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2408,
			"primary_score":	999632,
			"second_score":	126812
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2410,
			"primary_score":	999632,
			"second_score":	126811
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2413,
			"primary_score":	999632,
			"second_score":	126810
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2418,
			"primary_score":	999632,
			"second_score":	115099
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2420,
			"primary_score":	999632,
			"second_score":	115098
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2424,
			"primary_score":	999632,
			"second_score":	115097
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2429,
			"primary_score":	999632,
			"second_score":	126549
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2431,
			"primary_score":	999632,
			"second_score":	126548
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2434,
			"primary_score":	999632,
			"second_score":	126547
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2469,
			"primary_score":	999632,
			"second_score":	135261
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2470,
			"primary_score":	999632,
			"second_score":	135260
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2472,
			"primary_score":	999632,
			"second_score":	135259
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2478,
			"primary_score":	999632,
			"second_score":	135258
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2482,
			"primary_score":	999632,
			"second_score":	135257
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2517,
			"primary_score":	999632,
			"second_score":	135262
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2527,
			"primary_score":	999632,
			"second_score":	123561
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2538,
			"primary_score":	999632,
			"second_score":	135264
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2540,
			"primary_score":	999632,
			"second_score":	135263
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2541,
			"primary_score":	999632,
			"second_score":	135176
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2544,
			"primary_score":	999632,
			"second_score":	135175
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2545,
			"primary_score":	999632,
			"second_score":	135174
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2564,
			"primary_score":	999632,
			"second_score":	126814
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2566,
			"primary_score":	999632,
			"second_score":	126813
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2567,
			"primary_score":	999632,
			"second_score":	126791
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2570,
			"primary_score":	999632,
			"second_score":	126790
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2571,
			"primary_score":	999632,
			"second_score":	126789
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2572,
			"primary_score":	999632,
			"second_score":	126788
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2625,
			"primary_score":	999632,
			"second_score":	3207
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	346,
			"primary_score":	999632,
			"second_score":	126003
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1335,
			"primary_score":	999632,
			"second_score":	123142
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1336,
			"primary_score":	999632,
			"second_score":	123141
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1337,
			"primary_score":	999632,
			"second_score":	123140
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1338,
			"primary_score":	999632,
			"second_score":	123139
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1339,
			"primary_score":	999632,
			"second_score":	123138
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1341,
			"primary_score":	999632,
			"second_score":	123137
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1345,
			"primary_score":	999632,
			"second_score":	123070
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1348,
			"primary_score":	999632,
			"second_score":	122894
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1349,
			"primary_score":	999632,
			"second_score":	122893
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1354,
			"primary_score":	999632,
			"second_score":	122892
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1356,
			"primary_score":	999632,
			"second_score":	122852
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1362,
			"primary_score":	999632,
			"second_score":	122833
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1367,
			"primary_score":	999632,
			"second_score":	122832
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1891,
			"primary_score":	999632,
			"second_score":	125683
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1892,
			"primary_score":	999632,
			"second_score":	125682
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1893,
			"primary_score":	999632,
			"second_score":	125307
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1921,
			"primary_score":	999632,
			"second_score":	135486
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1923,
			"primary_score":	999632,
			"second_score":	135485
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1927,
			"primary_score":	999632,
			"second_score":	135447
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1929,
			"primary_score":	999632,
			"second_score":	135345
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1932,
			"primary_score":	999632,
			"second_score":	135344
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	131,
			"primary_score":	999632,
			"second_score":	19916
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	208,
			"primary_score":	999632,
			"second_score":	150561
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	210,
			"primary_score":	999632,
			"second_score":	150560
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	229,
			"primary_score":	999632,
			"second_score":	115332
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	230,
			"primary_score":	999632,
			"second_score":	115307
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	231,
			"primary_score":	999632,
			"second_score":	115282
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	232,
			"primary_score":	999632,
			"second_score":	115278
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	233,
			"primary_score":	999632,
			"second_score":	115274
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	234,
			"primary_score":	999632,
			"second_score":	115270
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	235,
			"primary_score":	999632,
			"second_score":	115266
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	236,
			"primary_score":	999632,
			"second_score":	115262
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	237,
			"primary_score":	999632,
			"second_score":	115192
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	238,
			"primary_score":	999632,
			"second_score":	115188
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	262,
			"primary_score":	999632,
			"second_score":	150699
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	283,
			"primary_score":	999632,
			"second_score":	143383
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	296,
			"primary_score":	999697,
			"second_score":	152207
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	297,
			"primary_score":	999697,
			"second_score":	152206
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	299,
			"primary_score":	999697,
			"second_score":	152198
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	300,
			"primary_score":	999697,
			"second_score":	152195
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	304,
			"primary_score":	999697,
			"second_score":	152194
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	305,
			"primary_score":	999697,
			"second_score":	152173
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	307,
			"primary_score":	999764,
			"second_score":	152196
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	309,
			"primary_score":	999697,
			"second_score":	165826
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	310,
			"primary_score":	999697,
			"second_score":	165825
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	311,
			"primary_score":	999697,
			"second_score":	165824
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	312,
			"primary_score":	999697,
			"second_score":	168487
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	313,
			"primary_score":	999697,
			"second_score":	168486
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	315,
			"primary_score":	999697,
			"second_score":	165823
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	316,
			"primary_score":	999697,
			"second_score":	165761
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	317,
			"primary_score":	999697,
			"second_score":	165760
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	318,
			"primary_score":	999697,
			"second_score":	165759
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	335,
			"primary_score":	999632,
			"second_score":	151233
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	336,
			"primary_score":	999632,
			"second_score":	151232
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	337,
			"primary_score":	999632,
			"second_score":	151231
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	341,
			"primary_score":	999632,
			"second_score":	151230
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	348,
			"primary_score":	999632,
			"second_score":	151229
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	349,
			"primary_score":	999632,
			"second_score":	151228
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	350,
			"primary_score":	999632,
			"second_score":	151226
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	351,
			"primary_score":	999632,
			"second_score":	151224
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	352,
			"primary_score":	999632,
			"second_score":	151223
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	353,
			"primary_score":	999632,
			"second_score":	151222
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	359,
			"primary_score":	999911,
			"second_score":	154319
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	360,
			"primary_score":	999911,
			"second_score":	154318
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	361,
			"primary_score":	999911,
			"second_score":	154317
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	362,
			"primary_score":	999911,
			"second_score":	154316
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	364,
			"primary_score":	999911,
			"second_score":	154315
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	370,
			"primary_score":	999911,
			"second_score":	154314
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	373,
			"primary_score":	999911,
			"second_score":	154293
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	374,
			"primary_score":	999911,
			"second_score":	154243
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	375,
			"primary_score":	999911,
			"second_score":	154236
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	376,
			"primary_score":	999911,
			"second_score":	154021
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	378,
			"primary_score":	999911,
			"second_score":	154018
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	417,
			"primary_score":	999831,
			"second_score":	156837
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	418,
			"primary_score":	999831,
			"second_score":	156836
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	419,
			"primary_score":	999831,
			"second_score":	156835
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	420,
			"primary_score":	999831,
			"second_score":	156834
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	421,
			"primary_score":	999831,
			"second_score":	156833
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	423,
			"primary_score":	999831,
			"second_score":	156832
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	429,
			"primary_score":	999831,
			"second_score":	156831
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	432,
			"primary_score":	999831,
			"second_score":	156771
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	436,
			"primary_score":	999831,
			"second_score":	156770
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	437,
			"primary_score":	999831,
			"second_score":	156769
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	439,
			"primary_score":	999831,
			"second_score":	156684
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	440,
			"primary_score":	999831,
			"second_score":	156677
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	441,
			"primary_score":	999831,
			"second_score":	156617
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	443,
			"primary_score":	999831,
			"second_score":	156614
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	445,
			"primary_score":	999831,
			"second_score":	156612
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	632,
			"primary_score":	999697,
			"second_score":	152238
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	633,
			"primary_score":	999697,
			"second_score":	152237
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	634,
			"primary_score":	999697,
			"second_score":	152236
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	636,
			"primary_score":	999697,
			"second_score":	152235
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	637,
			"primary_score":	999697,
			"second_score":	152234
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	640,
			"primary_score":	999697,
			"second_score":	152233
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	645,
			"primary_score":	999697,
			"second_score":	152209
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	646,
			"primary_score":	999697,
			"second_score":	152208
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	647,
			"primary_score":	999697,
			"second_score":	152172
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	648,
			"primary_score":	999697,
			"second_score":	152171
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	649,
			"primary_score":	999697,
			"second_score":	152170
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	685,
			"primary_score":	999697,
			"second_score":	152239
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	841,
			"primary_score":	999632,
			"second_score":	136742
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	843,
			"primary_score":	999632,
			"second_score":	136732
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	844,
			"primary_score":	999632,
			"second_score":	136731
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	845,
			"primary_score":	999632,
			"second_score":	136727
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	884,
			"primary_score":	999833,
			"second_score":	154438
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	890,
			"primary_score":	999833,
			"second_score":	154437
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	897,
			"primary_score":	999697,
			"second_score":	155731
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	898,
			"primary_score":	999697,
			"second_score":	155730
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	900,
			"primary_score":	999697,
			"second_score":	155729
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	927,
			"primary_score":	999697,
			"second_score":	155728
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	929,
			"primary_score":	999697,
			"second_score":	155690
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	930,
			"primary_score":	999697,
			"second_score":	155688
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	932,
			"primary_score":	999697,
			"second_score":	155678
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	933,
			"primary_score":	999697,
			"second_score":	155677
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	989,
			"primary_score":	999697,
			"second_score":	155676
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	990,
			"primary_score":	999697,
			"second_score":	155675
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	991,
			"primary_score":	999697,
			"second_score":	155671
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	992,
			"primary_score":	999697,
			"second_score":	155667
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	993,
			"primary_score":	999697,
			"second_score":	155666
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	994,
			"primary_score":	999697,
			"second_score":	155664
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1251,
			"primary_score":	999697,
			"second_score":	155735
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1253,
			"primary_score":	999697,
			"second_score":	155734
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1256,
			"primary_score":	999697,
			"second_score":	155733
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1286,
			"primary_score":	999833,
			"second_score":	154440
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1287,
			"primary_score":	999833,
			"second_score":	154439
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1310,
			"primary_score":	999833,
			"second_score":	154436
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1311,
			"primary_score":	999833,
			"second_score":	154435
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1312,
			"primary_score":	999833,
			"second_score":	154434
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1320,
			"primary_score":	999833,
			"second_score":	154433
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1321,
			"primary_score":	999833,
			"second_score":	154423
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1322,
			"primary_score":	999833,
			"second_score":	154422
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1327,
			"primary_score":	999833,
			"second_score":	154421
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1332,
			"primary_score":	999838,
			"second_score":	154420
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1333,
			"primary_score":	999838,
			"second_score":	154419
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1356,
			"primary_score":	999833,
			"second_score":	154418
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1358,
			"primary_score":	999833,
			"second_score":	154417
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1421,
			"primary_score":	999643,
			"second_score":	151490
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1427,
			"primary_score":	999643,
			"second_score":	151489
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1428,
			"primary_score":	999643,
			"second_score":	151488
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1430,
			"primary_score":	999643,
			"second_score":	151487
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1433,
			"primary_score":	999643,
			"second_score":	151486
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1435,
			"primary_score":	999643,
			"second_score":	151485
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1446,
			"primary_score":	999643,
			"second_score":	151484
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1952,
			"primary_score":	999916,
			"second_score":	154455
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1953,
			"primary_score":	999916,
			"second_score":	154454
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1954,
			"primary_score":	999916,
			"second_score":	154453
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1956,
			"primary_score":	999916,
			"second_score":	154452
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1957,
			"primary_score":	999916,
			"second_score":	154368
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1959,
			"primary_score":	999916,
			"second_score":	154333
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1960,
			"primary_score":	999916,
			"second_score":	154331
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1962,
			"primary_score":	999916,
			"second_score":	154330
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1967,
			"primary_score":	999916,
			"second_score":	154329
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1968,
			"primary_score":	999916,
			"second_score":	154328
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1969,
			"primary_score":	999916,
			"second_score":	154327
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1971,
			"primary_score":	999916,
			"second_score":	154326
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1972,
			"primary_score":	999916,
			"second_score":	154325
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1975,
			"primary_score":	999916,
			"second_score":	154324
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1976,
			"primary_score":	999916,
			"second_score":	154320
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1978,
			"primary_score":	999916,
			"second_score":	154017
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1980,
			"primary_score":	999916,
			"second_score":	154014
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1981,
			"primary_score":	999916,
			"second_score":	154013
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1982,
			"primary_score":	999916,
			"second_score":	154012
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1996,
			"primary_score":	999916,
			"second_score":	154011
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1997,
			"primary_score":	999916,
			"second_score":	153985
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2098,
			"primary_score":	999831,
			"second_score":	156847
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2099,
			"primary_score":	999831,
			"second_score":	156846
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2100,
			"primary_score":	999831,
			"second_score":	156845
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2101,
			"primary_score":	999831,
			"second_score":	156844
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2102,
			"primary_score":	999831,
			"second_score":	156843
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2104,
			"primary_score":	999831,
			"second_score":	156842
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2105,
			"primary_score":	999831,
			"second_score":	156841
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2147,
			"primary_score":	999831,
			"second_score":	156840
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2172,
			"primary_score":	999838,
			"second_score":	156874
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2173,
			"primary_score":	999838,
			"second_score":	156873
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2175,
			"primary_score":	999838,
			"second_score":	156872
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2184,
			"primary_score":	999838,
			"second_score":	156871
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2185,
			"primary_score":	999838,
			"second_score":	156869
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2187,
			"primary_score":	999838,
			"second_score":	156859
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2188,
			"primary_score":	999838,
			"second_score":	156858
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2189,
			"primary_score":	999838,
			"second_score":	156857
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2190,
			"primary_score":	999838,
			"second_score":	156856
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2191,
			"primary_score":	999838,
			"second_score":	156855
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2192,
			"primary_score":	999838,
			"second_score":	156854
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2194,
			"primary_score":	999838,
			"second_score":	156853
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2195,
			"primary_score":	999838,
			"second_score":	156848
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2205,
			"primary_score":	999838,
			"second_score":	156839
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2206,
			"primary_score":	999838,
			"second_score":	156838
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2208,
			"primary_score":	999838,
			"second_score":	156611
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2213,
			"primary_score":	999838,
			"second_score":	156610
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2214,
			"primary_score":	999838,
			"second_score":	156608
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2215,
			"primary_score":	999838,
			"second_score":	156607
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2216,
			"primary_score":	999838,
			"second_score":	156602
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2315,
			"primary_score":	999632,
			"second_score":	150740
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2319,
			"primary_score":	999632,
			"second_score":	150739
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2430,
			"primary_score":	999824,
			"second_score":	153341
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2431,
			"primary_score":	999824,
			"second_score":	153340
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2488,
			"primary_score":	999899,
			"second_score":	153494
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2493,
			"primary_score":	999632,
			"second_score":	137238
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2494,
			"primary_score":	999632,
			"second_score":	137237
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2516,
			"primary_score":	999632,
			"second_score":	137196
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2519,
			"primary_score":	999752,
			"second_score":	152001
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2521,
			"primary_score":	999957,
			"second_score":	153486
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2523,
			"primary_score":	999730,
			"second_score":	151963
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2533,
			"primary_score":	999632,
			"second_score":	137184
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2534,
			"primary_score":	999632,
			"second_score":	137183
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2542,
			"primary_score":	999899,
			"second_score":	153435
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2601,
			"primary_score":	999632,
			"second_score":	151265
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2602,
			"primary_score":	999632,
			"second_score":	151264
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2604,
			"primary_score":	999632,
			"second_score":	151263
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2612,
			"primary_score":	999632,
			"second_score":	151262
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2618,
			"primary_score":	999632,
			"second_score":	151260
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2619,
			"primary_score":	999632,
			"second_score":	151256
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2622,
			"primary_score":	999632,
			"second_score":	151252
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2623,
			"primary_score":	999632,
			"second_score":	151250
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2628,
			"primary_score":	999632,
			"second_score":	151249
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2630,
			"primary_score":	999632,
			"second_score":	151239
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2632,
			"primary_score":	999632,
			"second_score":	151238
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2633,
			"primary_score":	999632,
			"second_score":	151237
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2635,
			"primary_score":	999632,
			"second_score":	151221
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2639,
			"primary_score":	999632,
			"second_score":	121588
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2640,
			"primary_score":	999632,
			"second_score":	121587
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2643,
			"primary_score":	999632,
			"second_score":	151220
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4833,
			"primary_score":	999960,
			"second_score":	123883
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4835,
			"primary_score":	999960,
			"second_score":	123882
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4837,
			"primary_score":	999960,
			"second_score":	123881
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4838,
			"primary_score":	999960,
			"second_score":	123880
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4839,
			"primary_score":	999960,
			"second_score":	123879
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4935,
			"primary_score":	999913,
			"second_score":	154768
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4936,
			"primary_score":	999913,
			"second_score":	154767
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4938,
			"primary_score":	999913,
			"second_score":	154766
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4940,
			"primary_score":	999913,
			"second_score":	154762
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4941,
			"primary_score":	999916,
			"second_score":	154761
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4982,
			"primary_score":	999913,
			"second_score":	154760
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4992,
			"primary_score":	999913,
			"second_score":	154757
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4993,
			"primary_score":	999913,
			"second_score":	154753
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4994,
			"primary_score":	999913,
			"second_score":	154752
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4995,
			"primary_score":	999913,
			"second_score":	154751
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4996,
			"primary_score":	999913,
			"second_score":	154749
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4997,
			"primary_score":	999913,
			"second_score":	154745
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4998,
			"primary_score":	999913,
			"second_score":	154687
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4999,
			"primary_score":	999913,
			"second_score":	154686
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5000,
			"primary_score":	999913,
			"second_score":	154683
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5002,
			"primary_score":	999913,
			"second_score":	154680
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5004,
			"primary_score":	999913,
			"second_score":	154675
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5023,
			"primary_score":	999913,
			"second_score":	153239
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5029,
			"primary_score":	999913,
			"second_score":	153161
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5030,
			"primary_score":	999913,
			"second_score":	153160
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5032,
			"primary_score":	999913,
			"second_score":	153159
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5033,
			"primary_score":	999913,
			"second_score":	153155
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5035,
			"primary_score":	999913,
			"second_score":	153154
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5041,
			"primary_score":	999839,
			"second_score":	156574
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5042,
			"primary_score":	999839,
			"second_score":	156573
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5044,
			"primary_score":	999839,
			"second_score":	156572
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5045,
			"primary_score":	999839,
			"second_score":	156570
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5046,
			"primary_score":	999839,
			"second_score":	156560
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5047,
			"primary_score":	999839,
			"second_score":	156559
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5048,
			"primary_score":	999839,
			"second_score":	156558
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5049,
			"primary_score":	999839,
			"second_score":	156556
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5050,
			"primary_score":	999839,
			"second_score":	156552
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5052,
			"primary_score":	999839,
			"second_score":	156551
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5058,
			"primary_score":	999839,
			"second_score":	155888
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5060,
			"primary_score":	999839,
			"second_score":	155887
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5061,
			"primary_score":	999839,
			"second_score":	155839
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5063,
			"primary_score":	999839,
			"second_score":	155831
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5064,
			"primary_score":	999839,
			"second_score":	155829
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5070,
			"primary_score":	999632,
			"second_score":	139177
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5072,
			"primary_score":	999632,
			"second_score":	139176
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5085,
			"primary_score":	999632,
			"second_score":	139175
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5097,
			"primary_score":	999632,
			"second_score":	139148
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5100,
			"primary_score":	999632,
			"second_score":	139147
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5105,
			"primary_score":	999632,
			"second_score":	139146
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5113,
			"primary_score":	999632,
			"second_score":	139178
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5115,
			"primary_score":	999632,
			"second_score":	139145
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5116,
			"primary_score":	999632,
			"second_score":	139144
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5117,
			"primary_score":	999632,
			"second_score":	139118
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5118,
			"primary_score":	999632,
			"second_score":	139117
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5119,
			"primary_score":	999632,
			"second_score":	139116
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5120,
			"primary_score":	999632,
			"second_score":	139082
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5121,
			"primary_score":	999632,
			"second_score":	139079
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5129,
			"primary_score":	999632,
			"second_score":	139195
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5130,
			"primary_score":	999632,
			"second_score":	139194
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5131,
			"primary_score":	999632,
			"second_score":	139193
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5132,
			"primary_score":	999632,
			"second_score":	139192
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5133,
			"primary_score":	999632,
			"second_score":	139191
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5135,
			"primary_score":	999632,
			"second_score":	139190
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5182,
			"primary_score":	999632,
			"second_score":	139189
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5203,
			"primary_score":	999632,
			"second_score":	139188
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5205,
			"primary_score":	999632,
			"second_score":	139179
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5206,
			"primary_score":	999632,
			"second_score":	139078
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6095,
			"primary_score":	999632,
			"second_score":	131764
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6096,
			"primary_score":	999632,
			"second_score":	131762
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6098,
			"primary_score":	999632,
			"second_score":	131761
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6100,
			"primary_score":	999632,
			"second_score":	131751
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6101,
			"primary_score":	999632,
			"second_score":	131750
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6102,
			"primary_score":	999632,
			"second_score":	131746
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6103,
			"primary_score":	999632,
			"second_score":	131745
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6104,
			"primary_score":	999632,
			"second_score":	131744
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6106,
			"primary_score":	999632,
			"second_score":	131739
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6112,
			"primary_score":	999632,
			"second_score":	128937
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6114,
			"primary_score":	999632,
			"second_score":	128927
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6116,
			"primary_score":	999632,
			"second_score":	128925
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6117,
			"primary_score":	999632,
			"second_score":	128924
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6118,
			"primary_score":	999632,
			"second_score":	128923
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6119,
			"primary_score":	999632,
			"second_score":	128921
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6120,
			"primary_score":	999632,
			"second_score":	128917
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6122,
			"primary_score":	999632,
			"second_score":	128916
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6123,
			"primary_score":	999632,
			"second_score":	128911
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6125,
			"primary_score":	999632,
			"second_score":	128909
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6126,
			"primary_score":	999632,
			"second_score":	128899
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6127,
			"primary_score":	999632,
			"second_score":	128898
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6128,
			"primary_score":	999632,
			"second_score":	128897
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6134,
			"primary_score":	999632,
			"second_score":	128507
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6136,
			"primary_score":	999632,
			"second_score":	128497
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6137,
			"primary_score":	999632,
			"second_score":	128496
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6138,
			"primary_score":	999632,
			"second_score":	128492
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6139,
			"primary_score":	999632,
			"second_score":	128394
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6141,
			"primary_score":	999632,
			"second_score":	128393
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6143,
			"primary_score":	999632,
			"second_score":	128391
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6145,
			"primary_score":	999632,
			"second_score":	128386
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6220,
			"primary_score":	999697,
			"second_score":	152210
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6279,
			"primary_score":	999632,
			"second_score":	136522
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6282,
			"primary_score":	999632,
			"second_score":	136521
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6283,
			"primary_score":	999632,
			"second_score":	136520
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6372,
			"primary_score":	999831,
			"second_score":	156852
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6375,
			"primary_score":	999831,
			"second_score":	156851
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6378,
			"primary_score":	999831,
			"second_score":	156850
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6382,
			"primary_score":	999831,
			"second_score":	156849
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	32,
			"primary_score":	999632,
			"second_score":	6307
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	33,
			"primary_score":	999632,
			"second_score":	115747
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	35,
			"primary_score":	999632,
			"second_score":	6306
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	60,
			"primary_score":	999632,
			"second_score":	115530
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	171,
			"primary_score":	999632,
			"second_score":	116261
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	174,
			"primary_score":	999632,
			"second_score":	116260
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	73,
			"primary_score":	999632,
			"second_score":	122458
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	71,
			"primary_score":	999632,
			"second_score":	130297
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	72,
			"primary_score":	999632,
			"second_score":	130295
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	73,
			"primary_score":	999632,
			"second_score":	130293
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	74,
			"primary_score":	999632,
			"second_score":	130291
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	177,
			"primary_score":	999632,
			"second_score":	121709
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	182,
			"primary_score":	999632,
			"second_score":	130299
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	184,
			"primary_score":	999632,
			"second_score":	130298
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	185,
			"primary_score":	999632,
			"second_score":	130290
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	273,
			"primary_score":	999697,
			"second_score":	146839
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	275,
			"primary_score":	999697,
			"second_score":	146838
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	279,
			"primary_score":	999697,
			"second_score":	146837
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	280,
			"primary_score":	999697,
			"second_score":	146828
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	281,
			"primary_score":	999697,
			"second_score":	146826
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	283,
			"primary_score":	999697,
			"second_score":	146702
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	298,
			"primary_score":	999699,
			"second_score":	128622
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	300,
			"primary_score":	999699,
			"second_score":	128621
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	303,
			"primary_score":	999699,
			"second_score":	128620
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	439,
			"primary_score":	999697,
			"second_score":	130288
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	441,
			"primary_score":	999697,
			"second_score":	130287
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	442,
			"primary_score":	999697,
			"second_score":	146840
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	444,
			"primary_score":	999815,
			"second_score":	130286
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	602,
			"primary_score":	999632,
			"second_score":	128517
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	603,
			"primary_score":	999632,
			"second_score":	128516
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	604,
			"primary_score":	999632,
			"second_score":	128515
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	606,
			"primary_score":	999632,
			"second_score":	128514
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	611,
			"primary_score":	999632,
			"second_score":	128513
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	613,
			"primary_score":	999632,
			"second_score":	128512
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	629,
			"primary_score":	999632,
			"second_score":	128511
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	638,
			"primary_score":	999632,
			"second_score":	128510
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	868,
			"primary_score":	999732,
			"second_score":	130280
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	869,
			"primary_score":	999732,
			"second_score":	130279
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	871,
			"primary_score":	999732,
			"second_score":	130278
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	877,
			"primary_score":	999732,
			"second_score":	130277
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	878,
			"primary_score":	999733,
			"second_score":	130275
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	879,
			"primary_score":	999950,
			"second_score":	130273
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	881,
			"primary_score":	999950,
			"second_score":	130272
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	882,
			"primary_score":	999950,
			"second_score":	130270
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	883,
			"primary_score":	999950,
			"second_score":	130268
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	884,
			"primary_score":	999950,
			"second_score":	130267
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	885,
			"primary_score":	999950,
			"second_score":	130266
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	886,
			"primary_score":	999950,
			"second_score":	130264
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	887,
			"primary_score":	999950,
			"second_score":	129853
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	891,
			"primary_score":	999950,
			"second_score":	129834
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	896,
			"primary_score":	999733,
			"second_score":	146689
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	897,
			"primary_score":	999733,
			"second_score":	146687
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	898,
			"primary_score":	999733,
			"second_score":	146685
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	905,
			"primary_score":	999733,
			"second_score":	146683
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	906,
			"primary_score":	999733,
			"second_score":	146682
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	907,
			"primary_score":	999733,
			"second_score":	146680
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	908,
			"primary_score":	999733,
			"second_score":	146678
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	82,
			"primary_score":	999632,
			"second_score":	122510
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	83,
			"primary_score":	999632,
			"second_score":	122548
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	85,
			"primary_score":	999632,
			"second_score":	122547
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	86,
			"primary_score":	999632,
			"second_score":	123812
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	87,
			"primary_score":	999632,
			"second_score":	122544
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	88,
			"primary_score":	999632,
			"second_score":	122541
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	91,
			"primary_score":	999632,
			"second_score":	125249
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	93,
			"primary_score":	999632,
			"second_score":	125248
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	94,
			"primary_score":	999632,
			"second_score":	125246
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	97,
			"primary_score":	999632,
			"second_score":	125244
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	103,
			"primary_score":	999632,
			"second_score":	122755
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	105,
			"primary_score":	999632,
			"second_score":	122754
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	113,
			"primary_score":	999632,
			"second_score":	122753
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	155,
			"primary_score":	999632,
			"second_score":	122752
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	199,
			"primary_score":	999632,
			"second_score":	116356
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	201,
			"primary_score":	999632,
			"second_score":	116355
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	202,
			"primary_score":	999632,
			"second_score":	116354
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	203,
			"primary_score":	999632,
			"second_score":	116353
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	204,
			"primary_score":	999632,
			"second_score":	116308
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	217,
			"primary_score":	999632,
			"second_score":	128455
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	245,
			"primary_score":	999632,
			"second_score":	150488
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	247,
			"primary_score":	999632,
			"second_score":	150487
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	250,
			"primary_score":	999632,
			"second_score":	150486
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	265,
			"primary_score":	999632,
			"second_score":	150485
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	267,
			"primary_score":	999632,
			"second_score":	150483
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	268,
			"primary_score":	999632,
			"second_score":	150482
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	269,
			"primary_score":	999632,
			"second_score":	150481
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	274,
			"primary_score":	999632,
			"second_score":	122488
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	280,
			"primary_score":	999632,
			"second_score":	122487
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	286,
			"primary_score":	999632,
			"second_score":	122467
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	293,
			"primary_score":	999632,
			"second_score":	122466
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	297,
			"primary_score":	999632,
			"second_score":	122465
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	305,
			"primary_score":	999632,
			"second_score":	128562
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	327,
			"primary_score":	999632,
			"second_score":	128561
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	328,
			"primary_score":	999632,
			"second_score":	128560
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	333,
			"primary_score":	999632,
			"second_score":	123823
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	334,
			"primary_score":	999632,
			"second_score":	123822
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	336,
			"primary_score":	999632,
			"second_score":	123821
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	337,
			"primary_score":	999632,
			"second_score":	122513
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	338,
			"primary_score":	999632,
			"second_score":	122512
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	339,
			"primary_score":	999632,
			"second_score":	122511
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	341,
			"primary_score":	999632,
			"second_score":	122489
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	367,
			"primary_score":	999632,
			"second_score":	128572
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	369,
			"primary_score":	999632,
			"second_score":	128571
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	371,
			"primary_score":	999632,
			"second_score":	128566
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	372,
			"primary_score":	999632,
			"second_score":	128565
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	373,
			"primary_score":	999632,
			"second_score":	128564
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	107,
			"primary_score":	999632,
			"second_score":	116295
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	119,
			"primary_score":	999632,
			"second_score":	116279
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	203,
			"primary_score":	999632,
			"second_score":	121247
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	204,
			"primary_score":	999874,
			"second_score":	121524
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	206,
			"primary_score":	999632,
			"second_score":	121246
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	213,
			"primary_score":	999632,
			"second_score":	122033
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	214,
			"primary_score":	999632,
			"second_score":	122027
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	215,
			"primary_score":	999632,
			"second_score":	122026
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	216,
			"primary_score":	999632,
			"second_score":	121301
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	217,
			"primary_score":	999632,
			"second_score":	121298
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	219,
			"primary_score":	999632,
			"second_score":	121236
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	223,
			"primary_score":	999632,
			"second_score":	121230
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	229,
			"primary_score":	999632,
			"second_score":	120281
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	246,
			"primary_score":	999632,
			"second_score":	120275
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	247,
			"primary_score":	999632,
			"second_score":	120272
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	248,
			"primary_score":	999632,
			"second_score":	116441
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	250,
			"primary_score":	999632,
			"second_score":	116439
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	251,
			"primary_score":	999632,
			"second_score":	116433
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	254,
			"primary_score":	999632,
			"second_score":	116432
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	261,
			"primary_score":	999632,
			"second_score":	116431
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	268,
			"primary_score":	999632,
			"second_score":	116430
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	269,
			"primary_score":	999632,
			"second_score":	116426
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	270,
			"primary_score":	999632,
			"second_score":	116421
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	271,
			"primary_score":	999632,
			"second_score":	116412
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	272,
			"primary_score":	999632,
			"second_score":	116403
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	274,
			"primary_score":	999632,
			"second_score":	116401
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	284,
			"primary_score":	999632,
			"second_score":	116395
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	288,
			"primary_score":	999632,
			"second_score":	116394
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	289,
			"primary_score":	999632,
			"second_score":	116377
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	290,
			"primary_score":	999632,
			"second_score":	116360
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	293,
			"primary_score":	999632,
			"second_score":	116357
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	295,
			"primary_score":	999632,
			"second_score":	116307
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	298,
			"primary_score":	999632,
			"second_score":	116304
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	302,
			"primary_score":	999632,
			"second_score":	116303
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	303,
			"primary_score":	999632,
			"second_score":	116287
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	306,
			"primary_score":	999632,
			"second_score":	116271
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	311,
			"primary_score":	999632,
			"second_score":	116270
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	313,
			"primary_score":	999632,
			"second_score":	116268
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	314,
			"primary_score":	999632,
			"second_score":	116262
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	315,
			"primary_score":	999632,
			"second_score":	115522
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	317,
			"primary_score":	999632,
			"second_score":	115520
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	322,
			"primary_score":	999632,
			"second_score":	115514
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	324,
			"primary_score":	999632,
			"second_score":	115445
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	325,
			"primary_score":	999632,
			"second_score":	115424
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	326,
			"primary_score":	999632,
			"second_score":	115420
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	327,
			"primary_score":	999632,
			"second_score":	115418
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	328,
			"primary_score":	999632,
			"second_score":	115416
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	329,
			"primary_score":	999632,
			"second_score":	115348
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	333,
			"primary_score":	999632,
			"second_score":	115347
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	335,
			"primary_score":	999632,
			"second_score":	115345
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	337,
			"primary_score":	999632,
			"second_score":	115340
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	397,
			"primary_score":	999632,
			"second_score":	143379
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	398,
			"primary_score":	999632,
			"second_score":	143378
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	407,
			"primary_score":	999632,
			"second_score":	143376
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	411,
			"primary_score":	999632,
			"second_score":	143375
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	412,
			"primary_score":	999632,
			"second_score":	143374
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	421,
			"primary_score":	999632,
			"second_score":	143381
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	430,
			"primary_score":	999632,
			"second_score":	116557
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	431,
			"primary_score":	999632,
			"second_score":	116555
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	432,
			"primary_score":	999632,
			"second_score":	116553
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	434,
			"primary_score":	999632,
			"second_score":	116552
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	435,
			"primary_score":	999632,
			"second_score":	116551
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	436,
			"primary_score":	999632,
			"second_score":	116538
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	437,
			"primary_score":	999632,
			"second_score":	116504
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	440,
			"primary_score":	999632,
			"second_score":	117311
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	442,
			"primary_score":	999632,
			"second_score":	117310
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	443,
			"primary_score":	999632,
			"second_score":	117308
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	446,
			"primary_score":	999632,
			"second_score":	117306
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	456,
			"primary_score":	999632,
			"second_score":	14860
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	457,
			"primary_score":	999632,
			"second_score":	14858
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	458,
			"primary_score":	999632,
			"second_score":	14856
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	459,
			"primary_score":	999632,
			"second_score":	14854
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	460,
			"primary_score":	999632,
			"second_score":	18655
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	461,
			"primary_score":	999632,
			"second_score":	18653
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	494,
			"primary_score":	999863,
			"second_score":	149173
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	495,
			"primary_score":	999863,
			"second_score":	149172
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	496,
			"primary_score":	999863,
			"second_score":	149171
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	497,
			"primary_score":	999863,
			"second_score":	149170
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	499,
			"primary_score":	999863,
			"second_score":	149169
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	501,
			"primary_score":	999863,
			"second_score":	149168
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	582,
			"primary_score":	999863,
			"second_score":	149167
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	683,
			"primary_score":	999863,
			"second_score":	149166
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	701,
			"primary_score":	999863,
			"second_score":	149174
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1032,
			"primary_score":	999831,
			"second_score":	132153
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1033,
			"primary_score":	999831,
			"second_score":	132152
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1034,
			"primary_score":	999831,
			"second_score":	132151
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1035,
			"primary_score":	999831,
			"second_score":	132150
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1036,
			"primary_score":	999831,
			"second_score":	132149
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1037,
			"primary_score":	999831,
			"second_score":	132148
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1038,
			"primary_score":	999831,
			"second_score":	132147
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1039,
			"primary_score":	999831,
			"second_score":	132146
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1040,
			"primary_score":	999831,
			"second_score":	132145
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1041,
			"primary_score":	999831,
			"second_score":	132144
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1042,
			"primary_score":	999831,
			"second_score":	132143
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1043,
			"primary_score":	999831,
			"second_score":	132142
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1045,
			"primary_score":	999831,
			"second_score":	132141
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1046,
			"primary_score":	999831,
			"second_score":	132140
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1047,
			"primary_score":	999831,
			"second_score":	132139
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1048,
			"primary_score":	999831,
			"second_score":	132138
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1066,
			"primary_score":	999831,
			"second_score":	132137
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1067,
			"primary_score":	999831,
			"second_score":	132124
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1070,
			"primary_score":	999831,
			"second_score":	132123
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1155,
			"primary_score":	999632,
			"second_score":	123835
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1156,
			"primary_score":	999632,
			"second_score":	123834
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1157,
			"primary_score":	999632,
			"second_score":	123833
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1158,
			"primary_score":	999632,
			"second_score":	123832
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1159,
			"primary_score":	999632,
			"second_score":	123831
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1161,
			"primary_score":	999632,
			"second_score":	123830
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1169,
			"primary_score":	999632,
			"second_score":	123829
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1170,
			"primary_score":	999632,
			"second_score":	123828
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1172,
			"primary_score":	999632,
			"second_score":	123827
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1176,
			"primary_score":	999632,
			"second_score":	123826
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1177,
			"primary_score":	999632,
			"second_score":	123825
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1178,
			"primary_score":	999632,
			"second_score":	123824
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1179,
			"primary_score":	999632,
			"second_score":	121337
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1181,
			"primary_score":	999632,
			"second_score":	121336
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1182,
			"primary_score":	999632,
			"second_score":	121335
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1183,
			"primary_score":	999632,
			"second_score":	121334
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1184,
			"primary_score":	999632,
			"second_score":	121333
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1185,
			"primary_score":	999632,
			"second_score":	121332
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1187,
			"primary_score":	999632,
			"second_score":	121331
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1188,
			"primary_score":	999632,
			"second_score":	121330
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1189,
			"primary_score":	999632,
			"second_score":	121329
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1190,
			"primary_score":	999632,
			"second_score":	121328
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1193,
			"primary_score":	999632,
			"second_score":	121327
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1195,
			"primary_score":	999632,
			"second_score":	121326
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1197,
			"primary_score":	999632,
			"second_score":	120958
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1198,
			"primary_score":	999632,
			"second_score":	120957
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1199,
			"primary_score":	999632,
			"second_score":	120956
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1202,
			"primary_score":	999632,
			"second_score":	120955
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1210,
			"primary_score":	999632,
			"second_score":	120924
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1211,
			"primary_score":	999632,
			"second_score":	120923
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1212,
			"primary_score":	999632,
			"second_score":	120922
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1213,
			"primary_score":	999632,
			"second_score":	120921
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1214,
			"primary_score":	999632,
			"second_score":	120832
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1215,
			"primary_score":	999632,
			"second_score":	120813
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1216,
			"primary_score":	999632,
			"second_score":	120812
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1220,
			"primary_score":	999632,
			"second_score":	120811
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1223,
			"primary_score":	999632,
			"second_score":	120810
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1235,
			"primary_score":	999632,
			"second_score":	123837
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1237,
			"primary_score":	999632,
			"second_score":	123836
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1238,
			"primary_score":	999632,
			"second_score":	120809
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1242,
			"primary_score":	999632,
			"second_score":	120808
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1248,
			"primary_score":	999632,
			"second_score":	123838
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1510,
			"primary_score":	999632,
			"second_score":	105219
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1583,
			"primary_score":	999831,
			"second_score":	132156
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1584,
			"primary_score":	999831,
			"second_score":	132155
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1586,
			"primary_score":	999831,
			"second_score":	132154
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1600,
			"primary_score":	999831,
			"second_score":	132122
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	182,
			"primary_score":	999632,
			"second_score":	14775
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	183,
			"primary_score":	999632,
			"second_score":	14772
		}, {
			"file":	"Zend/zend_float.c",
			"line":	44,
			"primary_score":	999632,
			"second_score":	115344
		}, {
			"file":	"Zend/zend_float.c",
			"line":	45,
			"primary_score":	999632,
			"second_score":	115343
		}, {
			"file":	"Zend/zend_float.c",
			"line":	48,
			"primary_score":	999632,
			"second_score":	115341
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	35,
			"primary_score":	999632,
			"second_score":	3133
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	36,
			"primary_score":	999632,
			"second_score":	3132
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	37,
			"primary_score":	999632,
			"second_score":	3131
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	84,
			"primary_score":	999632,
			"second_score":	3134
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	132,
			"primary_score":	999632,
			"second_score":	117343
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	142,
			"primary_score":	999632,
			"second_score":	117342
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	143,
			"primary_score":	999815,
			"second_score":	122498
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	144,
			"primary_score":	999815,
			"second_score":	122490
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	147,
			"primary_score":	999632,
			"second_score":	117341
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	149,
			"primary_score":	999632,
			"second_score":	117340
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	150,
			"primary_score":	999632,
			"second_score":	120324
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	152,
			"primary_score":	999632,
			"second_score":	120323
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	153,
			"primary_score":	999632,
			"second_score":	120322
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	155,
			"primary_score":	999632,
			"second_score":	120321
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	156,
			"primary_score":	999632,
			"second_score":	120383
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	157,
			"primary_score":	999632,
			"second_score":	120320
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	158,
			"primary_score":	999632,
			"second_score":	120319
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	159,
			"primary_score":	999632,
			"second_score":	120318
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	176,
			"primary_score":	999632,
			"second_score":	120317
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	177,
			"primary_score":	999632,
			"second_score":	120316
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	178,
			"primary_score":	999632,
			"second_score":	120315
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	179,
			"primary_score":	999632,
			"second_score":	120314
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	181,
			"primary_score":	999632,
			"second_score":	120313
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	183,
			"primary_score":	999632,
			"second_score":	120312
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	184,
			"primary_score":	999632,
			"second_score":	120311
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	186,
			"primary_score":	999632,
			"second_score":	120310
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	187,
			"primary_score":	999632,
			"second_score":	120309
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	188,
			"primary_score":	999632,
			"second_score":	120308
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	195,
			"primary_score":	999815,
			"second_score":	122495
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	197,
			"primary_score":	999815,
			"second_score":	122494
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	202,
			"primary_score":	999815,
			"second_score":	122493
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	204,
			"primary_score":	999815,
			"second_score":	122492
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	205,
			"primary_score":	999815,
			"second_score":	122491
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	206,
			"primary_score":	999815,
			"second_score":	130375
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	207,
			"primary_score":	999815,
			"second_score":	130374
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	208,
			"primary_score":	999815,
			"second_score":	130373
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	210,
			"primary_score":	999815,
			"second_score":	130372
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	212,
			"primary_score":	999816,
			"second_score":	130371
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	213,
			"primary_score":	999816,
			"second_score":	130370
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	214,
			"primary_score":	999816,
			"second_score":	130369
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	232,
			"primary_score":	999815,
			"second_score":	130368
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	233,
			"primary_score":	999815,
			"second_score":	130367
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	234,
			"primary_score":	999815,
			"second_score":	130366
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	235,
			"primary_score":	999815,
			"second_score":	130365
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	237,
			"primary_score":	999815,
			"second_score":	130364
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	239,
			"primary_score":	999815,
			"second_score":	130363
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	240,
			"primary_score":	999815,
			"second_score":	130362
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	242,
			"primary_score":	999815,
			"second_score":	130361
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	243,
			"primary_score":	999815,
			"second_score":	130360
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	244,
			"primary_score":	999815,
			"second_score":	130359
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	251,
			"primary_score":	999632,
			"second_score":	116549
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	253,
			"primary_score":	999632,
			"second_score":	116548
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	264,
			"primary_score":	999632,
			"second_score":	116547
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	265,
			"primary_score":	999632,
			"second_score":	116546
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	266,
			"primary_score":	999632,
			"second_score":	116540
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	653,
			"primary_score":	999632,
			"second_score":	115153
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	655,
			"primary_score":	999632,
			"second_score":	115152
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	728,
			"primary_score":	999632,
			"second_score":	115151
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	182,
			"primary_score":	999632,
			"second_score":	117305
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	183,
			"primary_score":	999632,
			"second_score":	117344
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	189,
			"primary_score":	999632,
			"second_score":	116545
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	190,
			"primary_score":	999632,
			"second_score":	116544
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	191,
			"primary_score":	999632,
			"second_score":	116543
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	192,
			"primary_score":	999632,
			"second_score":	116542
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	193,
			"primary_score":	999632,
			"second_score":	116541
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	197,
			"primary_score":	999632,
			"second_score":	135998
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	198,
			"primary_score":	999632,
			"second_score":	135997
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	199,
			"primary_score":	999632,
			"second_score":	135996
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	201,
			"primary_score":	999632,
			"second_score":	135995
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	203,
			"primary_score":	999632,
			"second_score":	135994
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	210,
			"primary_score":	999632,
			"second_score":	145696
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	212,
			"primary_score":	999632,
			"second_score":	135991
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	213,
			"primary_score":	999632,
			"second_score":	135901
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	215,
			"primary_score":	999632,
			"second_score":	135900
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	216,
			"primary_score":	999632,
			"second_score":	135899
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	217,
			"primary_score":	999632,
			"second_score":	136595
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	220,
			"primary_score":	999632,
			"second_score":	150577
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	243,
			"primary_score":	999632,
			"second_score":	145487
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	250,
			"primary_score":	999632,
			"second_score":	145486
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	251,
			"primary_score":	999632,
			"second_score":	145382
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	254,
			"primary_score":	999632,
			"second_score":	145381
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	255,
			"primary_score":	999632,
			"second_score":	145380
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	257,
			"primary_score":	999632,
			"second_score":	145379
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	258,
			"primary_score":	999632,
			"second_score":	147812
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	259,
			"primary_score":	999632,
			"second_score":	145373
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	260,
			"primary_score":	999632,
			"second_score":	145372
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	261,
			"primary_score":	999632,
			"second_score":	145368
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	265,
			"primary_score":	999632,
			"second_score":	145366
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	266,
			"primary_score":	999632,
			"second_score":	148879
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	267,
			"primary_score":	999632,
			"second_score":	145355
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	268,
			"primary_score":	999632,
			"second_score":	145354
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	270,
			"primary_score":	999632,
			"second_score":	145352
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	271,
			"primary_score":	999632,
			"second_score":	145351
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	272,
			"primary_score":	999632,
			"second_score":	145349
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	376,
			"primary_score":	999632,
			"second_score":	129432
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	401,
			"primary_score":	999632,
			"second_score":	129431
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	415,
			"primary_score":	999632,
			"second_score":	129313
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	426,
			"primary_score":	999632,
			"second_score":	129294
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	476,
			"primary_score":	999632,
			"second_score":	48251
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	477,
			"primary_score":	999632,
			"second_score":	48250
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	479,
			"primary_score":	999632,
			"second_score":	48249
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	481,
			"primary_score":	999632,
			"second_score":	48248
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	482,
			"primary_score":	999632,
			"second_score":	48247
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	484,
			"primary_score":	999632,
			"second_score":	48231
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	486,
			"primary_score":	999632,
			"second_score":	48230
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	487,
			"primary_score":	999632,
			"second_score":	48229
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	488,
			"primary_score":	999632,
			"second_score":	48228
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	492,
			"primary_score":	999632,
			"second_score":	48227
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	493,
			"primary_score":	999632,
			"second_score":	48225
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	494,
			"primary_score":	999632,
			"second_score":	48224
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	496,
			"primary_score":	999632,
			"second_score":	48275
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	498,
			"primary_score":	999632,
			"second_score":	48223
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	499,
			"primary_score":	999632,
			"second_score":	52602
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	501,
			"primary_score":	999632,
			"second_score":	48222
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	502,
			"primary_score":	999632,
			"second_score":	51189
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	505,
			"primary_score":	999632,
			"second_score":	48221
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	507,
			"primary_score":	999632,
			"second_score":	48220
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	508,
			"primary_score":	999632,
			"second_score":	48219
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	510,
			"primary_score":	999632,
			"second_score":	63021
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	512,
			"primary_score":	999632,
			"second_score":	48218
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	513,
			"primary_score":	999632,
			"second_score":	48217
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	515,
			"primary_score":	999632,
			"second_score":	48216
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	516,
			"primary_score":	999632,
			"second_score":	48215
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	518,
			"primary_score":	999632,
			"second_score":	48211
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	519,
			"primary_score":	999632,
			"second_score":	48210
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	521,
			"primary_score":	999632,
			"second_score":	48209
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	522,
			"primary_score":	999632,
			"second_score":	48208
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	523,
			"primary_score":	999632,
			"second_score":	48206
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	524,
			"primary_score":	999632,
			"second_score":	48205
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	526,
			"primary_score":	999632,
			"second_score":	48280
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	534,
			"primary_score":	999632,
			"second_score":	3127
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	536,
			"primary_score":	999632,
			"second_score":	3126
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	538,
			"primary_score":	999632,
			"second_score":	3125
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	540,
			"primary_score":	999632,
			"second_score":	3124
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	541,
			"primary_score":	999632,
			"second_score":	3123
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	542,
			"primary_score":	999632,
			"second_score":	3116
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	543,
			"primary_score":	999632,
			"second_score":	3115
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	544,
			"primary_score":	999632,
			"second_score":	3114
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	545,
			"primary_score":	999632,
			"second_score":	3251
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	547,
			"primary_score":	999632,
			"second_score":	3113
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	548,
			"primary_score":	999632,
			"second_score":	3112
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	550,
			"primary_score":	999632,
			"second_score":	3111
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	552,
			"primary_score":	999632,
			"second_score":	3110
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	553,
			"primary_score":	999632,
			"second_score":	3109
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	556,
			"primary_score":	999632,
			"second_score":	3108
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	599,
			"primary_score":	999632,
			"second_score":	3615
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	601,
			"primary_score":	999632,
			"second_score":	3614
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	602,
			"primary_score":	999632,
			"second_score":	3612
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	603,
			"primary_score":	999632,
			"second_score":	3928
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	605,
			"primary_score":	999632,
			"second_score":	3611
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	607,
			"primary_score":	999632,
			"second_score":	3610
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	608,
			"primary_score":	999632,
			"second_score":	3609
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	610,
			"primary_score":	999632,
			"second_score":	3608
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	611,
			"primary_score":	999632,
			"second_score":	53796
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	616,
			"primary_score":	999632,
			"second_score":	3607
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	617,
			"primary_score":	999632,
			"second_score":	53738
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	620,
			"primary_score":	999632,
			"second_score":	3606
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	622,
			"primary_score":	999632,
			"second_score":	3605
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	623,
			"primary_score":	999632,
			"second_score":	3604
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	625,
			"primary_score":	999632,
			"second_score":	51152
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	627,
			"primary_score":	999632,
			"second_score":	3603
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	628,
			"primary_score":	999632,
			"second_score":	3602
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	630,
			"primary_score":	999632,
			"second_score":	3601
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	631,
			"primary_score":	999632,
			"second_score":	3600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	633,
			"primary_score":	999632,
			"second_score":	3598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	634,
			"primary_score":	999632,
			"second_score":	51145
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	636,
			"primary_score":	999632,
			"second_score":	3597
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	637,
			"primary_score":	999632,
			"second_score":	3596
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	639,
			"primary_score":	999632,
			"second_score":	3595
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	640,
			"primary_score":	999632,
			"second_score":	3594
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	642,
			"primary_score":	999632,
			"second_score":	3593
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	665,
			"primary_score":	999632,
			"second_score":	105188
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	667,
			"primary_score":	999632,
			"second_score":	105187
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	669,
			"primary_score":	999632,
			"second_score":	105186
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	670,
			"primary_score":	999632,
			"second_score":	105185
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	671,
			"primary_score":	999632,
			"second_score":	51164
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	672,
			"primary_score":	999632,
			"second_score":	48196
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	675,
			"primary_score":	999632,
			"second_score":	48195
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	676,
			"primary_score":	999632,
			"second_score":	48194
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	679,
			"primary_score":	999632,
			"second_score":	48193
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	693,
			"primary_score":	999632,
			"second_score":	121135
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	695,
			"primary_score":	999632,
			"second_score":	121134
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	697,
			"primary_score":	999632,
			"second_score":	121133
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	698,
			"primary_score":	999632,
			"second_score":	121131
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	699,
			"primary_score":	999632,
			"second_score":	121130
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	711,
			"primary_score":	999632,
			"second_score":	121129
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	717,
			"primary_score":	999632,
			"second_score":	6028
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	719,
			"primary_score":	999632,
			"second_score":	6027
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	721,
			"primary_score":	999632,
			"second_score":	6026
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	722,
			"primary_score":	999632,
			"second_score":	6024
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	723,
			"primary_score":	999632,
			"second_score":	6023
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	724,
			"primary_score":	999632,
			"second_score":	3579
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	726,
			"primary_score":	999632,
			"second_score":	3576
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	727,
			"primary_score":	999632,
			"second_score":	3616
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	729,
			"primary_score":	999632,
			"second_score":	3575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	731,
			"primary_score":	999632,
			"second_score":	3574
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	735,
			"primary_score":	999632,
			"second_score":	3573
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	741,
			"primary_score":	999923,
			"second_score":	126294
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	742,
			"primary_score":	999923,
			"second_score":	126293
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	743,
			"primary_score":	999923,
			"second_score":	126292
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	745,
			"primary_score":	999923,
			"second_score":	126291
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	747,
			"primary_score":	999923,
			"second_score":	126290
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	749,
			"primary_score":	999923,
			"second_score":	126287
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	750,
			"primary_score":	999923,
			"second_score":	126286
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	751,
			"primary_score":	999926,
			"second_score":	123894
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	752,
			"primary_score":	999926,
			"second_score":	123893
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	753,
			"primary_score":	999926,
			"second_score":	123892
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	754,
			"primary_score":	999926,
			"second_score":	123891
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	755,
			"primary_score":	999926,
			"second_score":	123890
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	756,
			"primary_score":	999926,
			"second_score":	123889
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	758,
			"primary_score":	999926,
			"second_score":	122633
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	761,
			"primary_score":	999926,
			"second_score":	122632
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	763,
			"primary_score":	999926,
			"second_score":	122631
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	766,
			"primary_score":	999926,
			"second_score":	122630
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	769,
			"primary_score":	999923,
			"second_score":	122629
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	775,
			"primary_score":	999632,
			"second_score":	116259
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	777,
			"primary_score":	999632,
			"second_score":	116258
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	779,
			"primary_score":	999632,
			"second_score":	121294
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	780,
			"primary_score":	999632,
			"second_score":	116255
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	781,
			"primary_score":	999632,
			"second_score":	116254
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	782,
			"primary_score":	999632,
			"second_score":	115531
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	784,
			"primary_score":	999632,
			"second_score":	115529
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	785,
			"primary_score":	999632,
			"second_score":	115528
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	786,
			"primary_score":	999632,
			"second_score":	115527
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	787,
			"primary_score":	999632,
			"second_score":	115768
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	789,
			"primary_score":	999632,
			"second_score":	115526
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	790,
			"primary_score":	999632,
			"second_score":	115525
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	793,
			"primary_score":	999632,
			"second_score":	121240
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	898,
			"primary_score":	999632,
			"second_score":	98519
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	899,
			"primary_score":	999632,
			"second_score":	98518
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	900,
			"primary_score":	999632,
			"second_score":	98517
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	902,
			"primary_score":	999632,
			"second_score":	98516
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	904,
			"primary_score":	999632,
			"second_score":	98515
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	905,
			"primary_score":	999632,
			"second_score":	98501
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	907,
			"primary_score":	999632,
			"second_score":	98500
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	908,
			"primary_score":	999632,
			"second_score":	98499
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	909,
			"primary_score":	999632,
			"second_score":	98496
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	911,
			"primary_score":	999632,
			"second_score":	98495
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	912,
			"primary_score":	999632,
			"second_score":	98494
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	914,
			"primary_score":	999632,
			"second_score":	98497
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	916,
			"primary_score":	999632,
			"second_score":	148197
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	948,
			"primary_score":	999632,
			"second_score":	99006
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	949,
			"primary_score":	999632,
			"second_score":	99005
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	950,
			"primary_score":	999632,
			"second_score":	99004
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	952,
			"primary_score":	999632,
			"second_score":	99003
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	954,
			"primary_score":	999632,
			"second_score":	99002
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	955,
			"primary_score":	999632,
			"second_score":	98993
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	957,
			"primary_score":	999632,
			"second_score":	98992
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	958,
			"primary_score":	999632,
			"second_score":	98991
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	959,
			"primary_score":	999632,
			"second_score":	98990
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	961,
			"primary_score":	999632,
			"second_score":	98989
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	997,
			"primary_score":	999632,
			"second_score":	115703
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	998,
			"primary_score":	999632,
			"second_score":	115702
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1000,
			"primary_score":	999632,
			"second_score":	115701
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1002,
			"primary_score":	999632,
			"second_score":	115700
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1004,
			"primary_score":	999632,
			"second_score":	115699
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1005,
			"primary_score":	999632,
			"second_score":	115698
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1006,
			"primary_score":	999632,
			"second_score":	115697
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1007,
			"primary_score":	999632,
			"second_score":	115696
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1008,
			"primary_score":	999632,
			"second_score":	115695
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1038,
			"primary_score":	999632,
			"second_score":	121238
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1040,
			"primary_score":	999632,
			"second_score":	121237
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	263,
			"primary_score":	999632,
			"second_score":	48246
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	266,
			"primary_score":	999632,
			"second_score":	48245
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	267,
			"primary_score":	999632,
			"second_score":	48244
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	268,
			"primary_score":	999632,
			"second_score":	48243
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	269,
			"primary_score":	999632,
			"second_score":	48242
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	270,
			"primary_score":	999632,
			"second_score":	48241
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	271,
			"primary_score":	999632,
			"second_score":	48240
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	272,
			"primary_score":	999632,
			"second_score":	48239
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	273,
			"primary_score":	999632,
			"second_score":	48238
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	274,
			"primary_score":	999632,
			"second_score":	48237
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	276,
			"primary_score":	999632,
			"second_score":	48236
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	278,
			"primary_score":	999632,
			"second_score":	49695
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	279,
			"primary_score":	999632,
			"second_score":	48450
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	280,
			"primary_score":	999632,
			"second_score":	48449
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	281,
			"primary_score":	999632,
			"second_score":	48448
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	282,
			"primary_score":	999632,
			"second_score":	48235
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	283,
			"primary_score":	999632,
			"second_score":	48234
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	287,
			"primary_score":	999632,
			"second_score":	48232
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	39,
			"primary_score":	999632,
			"second_score":	3578
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	40,
			"primary_score":	999632,
			"second_score":	3618
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	42,
			"primary_score":	999632,
			"second_score":	3577
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	105,
			"primary_score":	999632,
			"second_score":	3237
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	106,
			"primary_score":	999632,
			"second_score":	3210
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	107,
			"primary_score":	999632,
			"second_score":	3209
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	121,
			"primary_score":	999632,
			"second_score":	115143
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	127,
			"primary_score":	999632,
			"second_score":	115142
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	226,
			"primary_score":	999632,
			"second_score":	6029
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	384,
			"primary_score":	999632,
			"second_score":	98522
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	385,
			"primary_score":	999632,
			"second_score":	98521
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	387,
			"primary_score":	999632,
			"second_score":	98520
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	388,
			"primary_score":	999632,
			"second_score":	98493
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	392,
			"primary_score":	999632,
			"second_score":	98492
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	395,
			"primary_score":	999632,
			"second_score":	98491
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3151,
			"primary_score":	999632,
			"second_score":	151274
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3153,
			"primary_score":	999632,
			"second_score":	151273
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3155,
			"primary_score":	999632,
			"second_score":	151272
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3157,
			"primary_score":	999632,
			"second_score":	151271
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3732,
			"primary_score":	999643,
			"second_score":	151491
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3733,
			"primary_score":	999643,
			"second_score":	151483
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4147,
			"primary_score":	999632,
			"second_score":	137786
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4148,
			"primary_score":	999632,
			"second_score":	137785
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4167,
			"primary_score":	999632,
			"second_score":	130797
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4168,
			"primary_score":	999632,
			"second_score":	130683
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4172,
			"primary_score":	999632,
			"second_score":	137257
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4173,
			"primary_score":	999632,
			"second_score":	137175
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4412,
			"primary_score":	999632,
			"second_score":	128233
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4413,
			"primary_score":	999632,
			"second_score":	128216
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4417,
			"primary_score":	999632,
			"second_score":	144415
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4418,
			"primary_score":	999632,
			"second_score":	144203
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4457,
			"primary_score":	999697,
			"second_score":	155736
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4458,
			"primary_score":	999697,
			"second_score":	155659
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4477,
			"primary_score":	999839,
			"second_score":	156579
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4478,
			"primary_score":	999839,
			"second_score":	156525
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4482,
			"primary_score":	999839,
			"second_score":	155889
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4483,
			"primary_score":	999839,
			"second_score":	155820
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4732,
			"primary_score":	999632,
			"second_score":	128318
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4733,
			"primary_score":	999632,
			"second_score":	128317
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4737,
			"primary_score":	999632,
			"second_score":	131765
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4738,
			"primary_score":	999632,
			"second_score":	131737
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4742,
			"primary_score":	999632,
			"second_score":	128938
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4743,
			"primary_score":	999632,
			"second_score":	128896
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4747,
			"primary_score":	999632,
			"second_score":	128508
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4748,
			"primary_score":	999632,
			"second_score":	128384
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4977,
			"primary_score":	999831,
			"second_score":	156904
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4978,
			"primary_score":	999831,
			"second_score":	156903
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5007,
			"primary_score":	999838,
			"second_score":	156875
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5008,
			"primary_score":	999838,
			"second_score":	156601
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5077,
			"primary_score":	999840,
			"second_score":	155912
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5078,
			"primary_score":	999840,
			"second_score":	155911
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5197,
			"primary_score":	999632,
			"second_score":	139196
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5198,
			"primary_score":	999632,
			"second_score":	139077
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5284,
			"primary_score":	999913,
			"second_score":	155009
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5285,
			"primary_score":	999913,
			"second_score":	154982
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5289,
			"primary_score":	999913,
			"second_score":	154556
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5290,
			"primary_score":	999913,
			"second_score":	154529
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5294,
			"primary_score":	999913,
			"second_score":	153162
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5295,
			"primary_score":	999913,
			"second_score":	153131
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5309,
			"primary_score":	999913,
			"second_score":	153191
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5310,
			"primary_score":	999913,
			"second_score":	153190
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5334,
			"primary_score":	999916,
			"second_score":	154486
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5335,
			"primary_score":	999916,
			"second_score":	153981
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5339,
			"primary_score":	999916,
			"second_score":	153355
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5340,
			"primary_score":	999916,
			"second_score":	153303
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5344,
			"primary_score":	999916,
			"second_score":	153242
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5345,
			"primary_score":	999916,
			"second_score":	153213
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5399,
			"primary_score":	999697,
			"second_score":	152084
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5400,
			"primary_score":	999697,
			"second_score":	152083
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5414,
			"primary_score":	999697,
			"second_score":	152108
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5415,
			"primary_score":	999697,
			"second_score":	152106
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5439,
			"primary_score":	999697,
			"second_score":	152275
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5440,
			"primary_score":	999697,
			"second_score":	152169
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5444,
			"primary_score":	999697,
			"second_score":	152298
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5445,
			"primary_score":	999697,
			"second_score":	152297
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5464,
			"primary_score":	999913,
			"second_score":	154579
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5465,
			"primary_score":	999913,
			"second_score":	154578
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5489,
			"primary_score":	999913,
			"second_score":	154800
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5490,
			"primary_score":	999913,
			"second_score":	154645
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5494,
			"primary_score":	999913,
			"second_score":	154823
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5495,
			"primary_score":	999913,
			"second_score":	154822
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5911,
			"primary_score":	999632,
			"second_score":	151275
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5913,
			"primary_score":	999632,
			"second_score":	151270
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5916,
			"primary_score":	999632,
			"second_score":	151269
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5920,
			"primary_score":	999632,
			"second_score":	151268
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5923,
			"primary_score":	999632,
			"second_score":	151267
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	154,
			"primary_score":	999784,
			"second_score":	155122
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	155,
			"primary_score":	999784,
			"second_score":	155096
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	162,
			"primary_score":	999784,
			"second_score":	154916
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	163,
			"primary_score":	999784,
			"second_score":	154915
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	164,
			"primary_score":	999784,
			"second_score":	154911
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	165,
			"primary_score":	999784,
			"second_score":	154910
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	173,
			"primary_score":	999632,
			"second_score":	123457
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	188,
			"primary_score":	999632,
			"second_score":	120293
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	192,
			"primary_score":	999632,
			"second_score":	120292
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	193,
			"primary_score":	999632,
			"second_score":	120288
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	224,
			"primary_score":	999632,
			"second_score":	150735
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	225,
			"primary_score":	999632,
			"second_score":	150734
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	226,
			"primary_score":	999632,
			"second_score":	150733
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	227,
			"primary_score":	999632,
			"second_score":	150732
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	228,
			"primary_score":	999632,
			"second_score":	150731
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	229,
			"primary_score":	999632,
			"second_score":	150730
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	231,
			"primary_score":	999632,
			"second_score":	150729
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	232,
			"primary_score":	999632,
			"second_score":	150704
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	234,
			"primary_score":	999632,
			"second_score":	150703
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	235,
			"primary_score":	999632,
			"second_score":	150702
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	236,
			"primary_score":	999632,
			"second_score":	150701
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	237,
			"primary_score":	999632,
			"second_score":	150700
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	239,
			"primary_score":	999632,
			"second_score":	150698
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	243,
			"primary_score":	999632,
			"second_score":	150697
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	244,
			"primary_score":	999632,
			"second_score":	150696
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	245,
			"primary_score":	999632,
			"second_score":	150695
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	246,
			"primary_score":	999632,
			"second_score":	150694
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	247,
			"primary_score":	999632,
			"second_score":	150693
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	248,
			"primary_score":	999632,
			"second_score":	150692
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	249,
			"primary_score":	999632,
			"second_score":	150691
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	251,
			"primary_score":	999632,
			"second_score":	150690
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	260,
			"primary_score":	999632,
			"second_score":	150575
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	262,
			"primary_score":	999632,
			"second_score":	150499
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	263,
			"primary_score":	999632,
			"second_score":	150498
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	580,
			"primary_score":	999632,
			"second_score":	151266
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	581,
			"primary_score":	999632,
			"second_score":	151219
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	582,
			"primary_score":	999632,
			"second_score":	151218
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	585,
			"primary_score":	999632,
			"second_score":	151217
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	588,
			"primary_score":	999632,
			"second_score":	151216
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	589,
			"primary_score":	999632,
			"second_score":	151215
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	590,
			"primary_score":	999632,
			"second_score":	151214
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	591,
			"primary_score":	999632,
			"second_score":	151213
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	592,
			"primary_score":	999632,
			"second_score":	150741
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	598,
			"primary_score":	999632,
			"second_score":	150736
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	599,
			"primary_score":	999632,
			"second_score":	150689
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	646,
			"primary_score":	999632,
			"second_score":	123565
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	647,
			"primary_score":	999632,
			"second_score":	123564
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	650,
			"primary_score":	999632,
			"second_score":	123563
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	655,
			"primary_score":	999632,
			"second_score":	123562
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	658,
			"primary_score":	999632,
			"second_score":	123467
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	660,
			"primary_score":	999632,
			"second_score":	123466
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	661,
			"primary_score":	999632,
			"second_score":	123465
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	663,
			"primary_score":	999632,
			"second_score":	123464
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	664,
			"primary_score":	999632,
			"second_score":	123463
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	666,
			"primary_score":	999632,
			"second_score":	123462
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	683,
			"primary_score":	999632,
			"second_score":	123461
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	685,
			"primary_score":	999632,
			"second_score":	123456
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	686,
			"primary_score":	999632,
			"second_score":	123020
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	687,
			"primary_score":	999632,
			"second_score":	123019
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	688,
			"primary_score":	999632,
			"second_score":	123018
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	716,
			"primary_score":	999632,
			"second_score":	123823
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	717,
			"primary_score":	999632,
			"second_score":	123822
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	718,
			"primary_score":	999632,
			"second_score":	123718
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	719,
			"primary_score":	999632,
			"second_score":	123717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	720,
			"primary_score":	999632,
			"second_score":	123716
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	721,
			"primary_score":	999632,
			"second_score":	123715
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	722,
			"primary_score":	999632,
			"second_score":	123714
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	724,
			"primary_score":	999632,
			"second_score":	123713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	729,
			"primary_score":	999632,
			"second_score":	123712
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	731,
			"primary_score":	999632,
			"second_score":	123711
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	732,
			"primary_score":	999632,
			"second_score":	123710
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	733,
			"primary_score":	999632,
			"second_score":	123594
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	734,
			"primary_score":	999632,
			"second_score":	123592
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	736,
			"primary_score":	999632,
			"second_score":	123591
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	737,
			"primary_score":	999632,
			"second_score":	123566
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	741,
			"primary_score":	999632,
			"second_score":	123017
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	743,
			"primary_score":	999632,
			"second_score":	123016
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	744,
			"primary_score":	999632,
			"second_score":	123015
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	745,
			"primary_score":	999632,
			"second_score":	122771
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	746,
			"primary_score":	999632,
			"second_score":	122770
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	747,
			"primary_score":	999632,
			"second_score":	122769
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	748,
			"primary_score":	999632,
			"second_score":	122762
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	749,
			"primary_score":	999632,
			"second_score":	122761
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	751,
			"primary_score":	999632,
			"second_score":	121619
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	756,
			"primary_score":	999632,
			"second_score":	121618
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	761,
			"primary_score":	999632,
			"second_score":	121617
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	762,
			"primary_score":	999632,
			"second_score":	121569
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	763,
			"primary_score":	999632,
			"second_score":	121568
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	764,
			"primary_score":	999632,
			"second_score":	121397
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	765,
			"primary_score":	999632,
			"second_score":	121392
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	768,
			"primary_score":	999632,
			"second_score":	121391
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	769,
			"primary_score":	999632,
			"second_score":	121365
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	770,
			"primary_score":	999632,
			"second_score":	121339
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	771,
			"primary_score":	999632,
			"second_score":	121338
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	868,
			"primary_score":	999632,
			"second_score":	139198
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	869,
			"primary_score":	999632,
			"second_score":	139197
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	871,
			"primary_score":	999632,
			"second_score":	139196
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	874,
			"primary_score":	999632,
			"second_score":	139080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	875,
			"primary_score":	999632,
			"second_score":	139079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	876,
			"primary_score":	999632,
			"second_score":	139078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	877,
			"primary_score":	999632,
			"second_score":	139077
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	878,
			"primary_score":	999632,
			"second_score":	131319
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	879,
			"primary_score":	999632,
			"second_score":	131318
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	884,
			"primary_score":	999632,
			"second_score":	131317
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	887,
			"primary_score":	999632,
			"second_score":	131316
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	888,
			"primary_score":	999632,
			"second_score":	131315
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	959,
			"primary_score":	999632,
			"second_score":	139076
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	962,
			"primary_score":	999632,
			"second_score":	139075
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	963,
			"primary_score":	999632,
			"second_score":	134190
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	965,
			"primary_score":	999632,
			"second_score":	139074
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	967,
			"primary_score":	999632,
			"second_score":	139073
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	968,
			"primary_score":	999632,
			"second_score":	139072
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	995,
			"primary_score":	999913,
			"second_score":	154952
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1068,
			"primary_score":	999632,
			"second_score":	136347
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1084,
			"primary_score":	999632,
			"second_score":	136344
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1086,
			"primary_score":	999632,
			"second_score":	136343
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1087,
			"primary_score":	999632,
			"second_score":	136342
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1088,
			"primary_score":	999632,
			"second_score":	136341
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1148,
			"primary_score":	999632,
			"second_score":	136346
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1149,
			"primary_score":	999632,
			"second_score":	136345
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1469,
			"primary_score":	999634,
			"second_score":	169095
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1470,
			"primary_score":	999634,
			"second_score":	169094
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1472,
			"primary_score":	999632,
			"second_score":	144989
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1473,
			"primary_score":	999632,
			"second_score":	144988
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1486,
			"primary_score":	999634,
			"second_score":	169083
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2367,
			"primary_score":	999632,
			"second_score":	144956
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2368,
			"primary_score":	999632,
			"second_score":	144955
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2369,
			"primary_score":	999632,
			"second_score":	144954
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2396,
			"primary_score":	999668,
			"second_score":	157101
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2397,
			"primary_score":	999668,
			"second_score":	157100
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2407,
			"primary_score":	999668,
			"second_score":	157099
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2408,
			"primary_score":	999668,
			"second_score":	157098
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2409,
			"primary_score":	999668,
			"second_score":	157097
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2418,
			"primary_score":	999632,
			"second_score":	133647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2419,
			"primary_score":	999632,
			"second_score":	133646
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2430,
			"primary_score":	999632,
			"second_score":	133645
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2435,
			"primary_score":	999632,
			"second_score":	133644
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2439,
			"primary_score":	999632,
			"second_score":	133643
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2468,
			"primary_score":	999632,
			"second_score":	136798
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2469,
			"primary_score":	999632,
			"second_score":	136797
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2470,
			"primary_score":	999632,
			"second_score":	136796
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2545,
			"primary_score":	999632,
			"second_score":	131897
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2546,
			"primary_score":	999632,
			"second_score":	131896
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2556,
			"primary_score":	999632,
			"second_score":	131895
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2560,
			"primary_score":	999632,
			"second_score":	131894
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2605,
			"primary_score":	999632,
			"second_score":	138606
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2606,
			"primary_score":	999632,
			"second_score":	138605
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2611,
			"primary_score":	999632,
			"second_score":	138604
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2612,
			"primary_score":	999632,
			"second_score":	138603
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2621,
			"primary_score":	999632,
			"second_score":	130587
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2622,
			"primary_score":	999632,
			"second_score":	130586
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2623,
			"primary_score":	999632,
			"second_score":	139406
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2624,
			"primary_score":	999632,
			"second_score":	139405
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2627,
			"primary_score":	999632,
			"second_score":	130585
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2628,
			"primary_score":	999632,
			"second_score":	130584
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2637,
			"primary_score":	999819,
			"second_score":	155132
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2638,
			"primary_score":	999819,
			"second_score":	155131
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2641,
			"primary_score":	999912,
			"second_score":	155130
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2642,
			"primary_score":	999913,
			"second_score":	155128
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2665,
			"primary_score":	999636,
			"second_score":	151357
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2671,
			"primary_score":	999632,
			"second_score":	129160
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2672,
			"primary_score":	999632,
			"second_score":	129159
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2673,
			"primary_score":	999632,
			"second_score":	129158
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2686,
			"primary_score":	999835,
			"second_score":	157201
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2687,
			"primary_score":	999835,
			"second_score":	157200
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2697,
			"primary_score":	999835,
			"second_score":	157199
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2701,
			"primary_score":	999839,
			"second_score":	157197
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2708,
			"primary_score":	999740,
			"second_score":	152842
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2709,
			"primary_score":	999740,
			"second_score":	152841
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2710,
			"primary_score":	999740,
			"second_score":	152840
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2739,
			"primary_score":	999632,
			"second_score":	133720
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2740,
			"primary_score":	999632,
			"second_score":	133719
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2745,
			"primary_score":	999632,
			"second_score":	133718
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2746,
			"primary_score":	999632,
			"second_score":	133717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2747,
			"primary_score":	999632,
			"second_score":	133716
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2750,
			"primary_score":	999632,
			"second_score":	136638
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2751,
			"primary_score":	999632,
			"second_score":	136637
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2752,
			"primary_score":	999632,
			"second_score":	136636
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2788,
			"primary_score":	999696,
			"second_score":	157374
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2789,
			"primary_score":	999698,
			"second_score":	157372
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2911,
			"primary_score":	999697,
			"second_score":	152390
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2912,
			"primary_score":	999697,
			"second_score":	152389
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2918,
			"primary_score":	999697,
			"second_score":	152388
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2919,
			"primary_score":	999697,
			"second_score":	152387
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2929,
			"primary_score":	999632,
			"second_score":	136537
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2930,
			"primary_score":	999632,
			"second_score":	136536
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2931,
			"primary_score":	999632,
			"second_score":	132170
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3020,
			"primary_score":	999632,
			"second_score":	141005
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3021,
			"primary_score":	999632,
			"second_score":	141004
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3140,
			"primary_score":	999632,
			"second_score":	139207
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3141,
			"primary_score":	999632,
			"second_score":	139206
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3143,
			"primary_score":	999632,
			"second_score":	139205
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3145,
			"primary_score":	999632,
			"second_score":	139204
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3146,
			"primary_score":	999632,
			"second_score":	139203
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3148,
			"primary_score":	999632,
			"second_score":	139202
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3149,
			"primary_score":	999632,
			"second_score":	139200
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3152,
			"primary_score":	999632,
			"second_score":	139199
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3153,
			"primary_score":	999632,
			"second_score":	139071
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3166,
			"primary_score":	999632,
			"second_score":	131363
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3169,
			"primary_score":	999632,
			"second_score":	131362
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3275,
			"primary_score":	999632,
			"second_score":	133704
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3276,
			"primary_score":	999632,
			"second_score":	133703
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3277,
			"primary_score":	999632,
			"second_score":	133702
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3278,
			"primary_score":	999632,
			"second_score":	133701
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3281,
			"primary_score":	999632,
			"second_score":	133700
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3353,
			"primary_score":	999632,
			"second_score":	136534
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3354,
			"primary_score":	999632,
			"second_score":	136533
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3355,
			"primary_score":	999632,
			"second_score":	136532
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3356,
			"primary_score":	999632,
			"second_score":	136531
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3358,
			"primary_score":	999632,
			"second_score":	136530
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3360,
			"primary_score":	999632,
			"second_score":	136529
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3361,
			"primary_score":	999632,
			"second_score":	136528
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3362,
			"primary_score":	999632,
			"second_score":	136527
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3363,
			"primary_score":	999632,
			"second_score":	136526
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3364,
			"primary_score":	999632,
			"second_score":	136525
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3365,
			"primary_score":	999632,
			"second_score":	136524
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3379,
			"primary_score":	999697,
			"second_score":	152375
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3380,
			"primary_score":	999697,
			"second_score":	152374
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3381,
			"primary_score":	999697,
			"second_score":	152371
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3382,
			"primary_score":	999697,
			"second_score":	152370
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3383,
			"primary_score":	999697,
			"second_score":	152369
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3384,
			"primary_score":	999697,
			"second_score":	152368
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3385,
			"primary_score":	999697,
			"second_score":	152367
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3391,
			"primary_score":	999713,
			"second_score":	152378
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3394,
			"primary_score":	999713,
			"second_score":	152377
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3398,
			"primary_score":	999697,
			"second_score":	152366
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3400,
			"primary_score":	999697,
			"second_score":	152365
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3402,
			"primary_score":	999697,
			"second_score":	152364
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3403,
			"primary_score":	999697,
			"second_score":	152363
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3404,
			"primary_score":	999697,
			"second_score":	152332
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3405,
			"primary_score":	999697,
			"second_score":	152331
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4759,
			"primary_score":	999632,
			"second_score":	133715
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4792,
			"primary_score":	999632,
			"second_score":	133714
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4793,
			"primary_score":	999632,
			"second_score":	133713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4798,
			"primary_score":	999632,
			"second_score":	133712
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4802,
			"primary_score":	999632,
			"second_score":	133711
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4803,
			"primary_score":	999632,
			"second_score":	133710
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4804,
			"primary_score":	999632,
			"second_score":	133709
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4890,
			"primary_score":	999632,
			"second_score":	133708
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4891,
			"primary_score":	999632,
			"second_score":	133707
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4892,
			"primary_score":	999632,
			"second_score":	133706
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4893,
			"primary_score":	999632,
			"second_score":	133705
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5293,
			"primary_score":	999740,
			"second_score":	152838
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5294,
			"primary_score":	999740,
			"second_score":	152837
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5295,
			"primary_score":	999740,
			"second_score":	152836
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5296,
			"primary_score":	999740,
			"second_score":	152835
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5298,
			"primary_score":	999740,
			"second_score":	152834
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5299,
			"primary_score":	999740,
			"second_score":	152833
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5300,
			"primary_score":	999740,
			"second_score":	152832
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5317,
			"primary_score":	999839,
			"second_score":	157196
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5318,
			"primary_score":	999839,
			"second_score":	157195
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5319,
			"primary_score":	999839,
			"second_score":	157194
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5430,
			"primary_score":	999839,
			"second_score":	157192
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5431,
			"primary_score":	999839,
			"second_score":	157191
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5434,
			"primary_score":	999839,
			"second_score":	157190
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5435,
			"primary_score":	999839,
			"second_score":	157189
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5437,
			"primary_score":	999839,
			"second_score":	157188
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5438,
			"primary_score":	999839,
			"second_score":	157187
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5496,
			"primary_score":	999670,
			"second_score":	155467
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5497,
			"primary_score":	999670,
			"second_score":	155466
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5498,
			"primary_score":	999670,
			"second_score":	155463
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5499,
			"primary_score":	999670,
			"second_score":	155462
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5502,
			"primary_score":	999993,
			"second_score":	151367
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5503,
			"primary_score":	999674,
			"second_score":	155469
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5532,
			"primary_score":	999913,
			"second_score":	155127
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5533,
			"primary_score":	999913,
			"second_score":	155126
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5534,
			"primary_score":	999913,
			"second_score":	155125
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5536,
			"primary_score":	999913,
			"second_score":	155124
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5537,
			"primary_score":	999913,
			"second_score":	155123
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5538,
			"primary_score":	999913,
			"second_score":	155095
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6065,
			"primary_score":	999632,
			"second_score":	131892
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6066,
			"primary_score":	999632,
			"second_score":	131891
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6071,
			"primary_score":	999632,
			"second_score":	131890
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6075,
			"primary_score":	999632,
			"second_score":	131889
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6120,
			"primary_score":	999632,
			"second_score":	131887
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6121,
			"primary_score":	999632,
			"second_score":	131886
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6122,
			"primary_score":	999632,
			"second_score":	131885
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6862,
			"primary_score":	999632,
			"second_score":	136794
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6863,
			"primary_score":	999632,
			"second_score":	136793
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6873,
			"primary_score":	999632,
			"second_score":	136792
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6874,
			"primary_score":	999632,
			"second_score":	136791
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6896,
			"primary_score":	999632,
			"second_score":	136789
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6897,
			"primary_score":	999632,
			"second_score":	136788
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6898,
			"primary_score":	999632,
			"second_score":	136787
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7009,
			"primary_score":	999632,
			"second_score":	136785
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7010,
			"primary_score":	999632,
			"second_score":	136784
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7011,
			"primary_score":	999632,
			"second_score":	136783
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7012,
			"primary_score":	999632,
			"second_score":	136782
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7399,
			"primary_score":	999632,
			"second_score":	133641
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7400,
			"primary_score":	999632,
			"second_score":	133640
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7401,
			"primary_score":	999632,
			"second_score":	133639
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7402,
			"primary_score":	999632,
			"second_score":	133638
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7404,
			"primary_score":	999632,
			"second_score":	133637
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7405,
			"primary_score":	999632,
			"second_score":	133636
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7406,
			"primary_score":	999632,
			"second_score":	133635
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7407,
			"primary_score":	999632,
			"second_score":	133634
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7409,
			"primary_score":	999632,
			"second_score":	133633
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7410,
			"primary_score":	999632,
			"second_score":	133632
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7411,
			"primary_score":	999632,
			"second_score":	133631
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7412,
			"primary_score":	999632,
			"second_score":	133630
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7414,
			"primary_score":	999632,
			"second_score":	133629
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7415,
			"primary_score":	999632,
			"second_score":	133628
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7416,
			"primary_score":	999632,
			"second_score":	133627
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7417,
			"primary_score":	999632,
			"second_score":	133626
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7419,
			"primary_score":	999632,
			"second_score":	133625
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7420,
			"primary_score":	999632,
			"second_score":	133624
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7421,
			"primary_score":	999632,
			"second_score":	133623
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7422,
			"primary_score":	999632,
			"second_score":	133622
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7424,
			"primary_score":	999632,
			"second_score":	133621
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7425,
			"primary_score":	999632,
			"second_score":	133620
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7426,
			"primary_score":	999632,
			"second_score":	133619
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7427,
			"primary_score":	999632,
			"second_score":	133618
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7429,
			"primary_score":	999632,
			"second_score":	133617
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7430,
			"primary_score":	999632,
			"second_score":	133616
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7431,
			"primary_score":	999632,
			"second_score":	133615
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7678,
			"primary_score":	999632,
			"second_score":	144953
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7679,
			"primary_score":	999632,
			"second_score":	144952
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7680,
			"primary_score":	999632,
			"second_score":	144951
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8086,
			"primary_score":	999632,
			"second_score":	144949
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8087,
			"primary_score":	999632,
			"second_score":	144948
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8088,
			"primary_score":	999632,
			"second_score":	144947
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8089,
			"primary_score":	999632,
			"second_score":	144946
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8091,
			"primary_score":	999632,
			"second_score":	144945
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8092,
			"primary_score":	999632,
			"second_score":	144944
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8095,
			"primary_score":	999632,
			"second_score":	144943
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8096,
			"primary_score":	999632,
			"second_score":	144942
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8098,
			"primary_score":	999632,
			"second_score":	144941
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8099,
			"primary_score":	999632,
			"second_score":	144940
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8106,
			"primary_score":	999913,
			"second_score":	154951
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8140,
			"primary_score":	999913,
			"second_score":	154950
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8141,
			"primary_score":	999913,
			"second_score":	154949
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8142,
			"primary_score":	999913,
			"second_score":	154946
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8143,
			"primary_score":	999913,
			"second_score":	154945
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8154,
			"primary_score":	999913,
			"second_score":	154944
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8160,
			"primary_score":	999913,
			"second_score":	154943
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8161,
			"primary_score":	999913,
			"second_score":	154942
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8199,
			"primary_score":	999913,
			"second_score":	154940
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8200,
			"primary_score":	999913,
			"second_score":	154939
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8201,
			"primary_score":	999913,
			"second_score":	154938
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8204,
			"primary_score":	999913,
			"second_score":	154919
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8206,
			"primary_score":	999913,
			"second_score":	154918
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8207,
			"primary_score":	999913,
			"second_score":	154917
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8208,
			"primary_score":	999913,
			"second_score":	154888
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8209,
			"primary_score":	999913,
			"second_score":	154857
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8210,
			"primary_score":	999913,
			"second_score":	154856
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8219,
			"primary_score":	999913,
			"second_score":	154927
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8220,
			"primary_score":	999913,
			"second_score":	154926
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8221,
			"primary_score":	999913,
			"second_score":	154923
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8222,
			"primary_score":	999913,
			"second_score":	154922
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8224,
			"primary_score":	999913,
			"second_score":	154921
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8225,
			"primary_score":	999913,
			"second_score":	154928
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8227,
			"primary_score":	999913,
			"second_score":	154920
		}, {
			"file":	"Zend/zend_list.c",
			"line":	52,
			"primary_score":	999632,
			"second_score":	115741
		}, {
			"file":	"Zend/zend_list.c",
			"line":	54,
			"primary_score":	999632,
			"second_score":	115740
		}, {
			"file":	"Zend/zend_list.c",
			"line":	56,
			"primary_score":	999632,
			"second_score":	115730
		}, {
			"file":	"Zend/zend_list.c",
			"line":	57,
			"primary_score":	999632,
			"second_score":	115729
		}, {
			"file":	"Zend/zend_list.c",
			"line":	170,
			"primary_score":	999632,
			"second_score":	115707
		}, {
			"file":	"Zend/zend_list.c",
			"line":	171,
			"primary_score":	999632,
			"second_score":	115706
		}, {
			"file":	"Zend/zend_list.c",
			"line":	172,
			"primary_score":	999632,
			"second_score":	115705
		}, {
			"file":	"Zend/zend_list.c",
			"line":	174,
			"primary_score":	999632,
			"second_score":	115704
		}, {
			"file":	"Zend/zend_list.c",
			"line":	175,
			"primary_score":	999632,
			"second_score":	115694
		}, {
			"file":	"Zend/zend_list.c",
			"line":	183,
			"primary_score":	999632,
			"second_score":	115693
		}, {
			"file":	"Zend/zend_list.c",
			"line":	185,
			"primary_score":	999632,
			"second_score":	115585
		}, {
			"file":	"Zend/zend_list.c",
			"line":	239,
			"primary_score":	999632,
			"second_score":	105199
		}, {
			"file":	"Zend/zend_list.c",
			"line":	347,
			"primary_score":	999632,
			"second_score":	6239
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	93,
			"primary_score":	999632,
			"second_score":	150574
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	94,
			"primary_score":	999632,
			"second_score":	150573
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	96,
			"primary_score":	999632,
			"second_score":	150572
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	97,
			"primary_score":	999632,
			"second_score":	150571
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	98,
			"primary_score":	999632,
			"second_score":	150570
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	99,
			"primary_score":	999632,
			"second_score":	150567
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	100,
			"primary_score":	999632,
			"second_score":	150500
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	109,
			"primary_score":	999632,
			"second_score":	3138
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	111,
			"primary_score":	999632,
			"second_score":	3137
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	112,
			"primary_score":	999812,
			"second_score":	154413
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	113,
			"primary_score":	999812,
			"second_score":	154412
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	116,
			"primary_score":	999812,
			"second_score":	154411
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	117,
			"primary_score":	999812,
			"second_score":	154392
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	120,
			"primary_score":	999632,
			"second_score":	3136
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	126,
			"primary_score":	999632,
			"second_score":	122062
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	127,
			"primary_score":	999632,
			"second_score":	122058
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	190,
			"primary_score":	999632,
			"second_score":	14774
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	192,
			"primary_score":	999632,
			"second_score":	14773
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	233,
			"primary_score":	999632,
			"second_score":	122110
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	235,
			"primary_score":	999632,
			"second_score":	122109
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	57,
			"primary_score":	999950,
			"second_score":	128397
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	58,
			"primary_score":	999950,
			"second_score":	128396
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	59,
			"primary_score":	999950,
			"second_score":	128395
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	60,
			"primary_score":	999950,
			"second_score":	128394
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	62,
			"primary_score":	999950,
			"second_score":	128393
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	63,
			"primary_score":	999950,
			"second_score":	128371
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	64,
			"primary_score":	999950,
			"second_score":	128353
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	96,
			"primary_score":	999956,
			"second_score":	128401
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	97,
			"primary_score":	999956,
			"second_score":	128400
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	98,
			"primary_score":	999956,
			"second_score":	128399
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	99,
			"primary_score":	999956,
			"second_score":	128398
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	101,
			"primary_score":	999956,
			"second_score":	128352
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	961,
			"primary_score":	999916,
			"second_score":	129773
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	962,
			"primary_score":	999916,
			"second_score":	129772
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	963,
			"primary_score":	999916,
			"second_score":	129771
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	964,
			"primary_score":	999916,
			"second_score":	129770
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	965,
			"primary_score":	999916,
			"second_score":	129769
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	966,
			"primary_score":	999916,
			"second_score":	129768
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	968,
			"primary_score":	999916,
			"second_score":	129767
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	969,
			"primary_score":	999916,
			"second_score":	129766
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	970,
			"primary_score":	999916,
			"second_score":	129765
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	978,
			"primary_score":	999916,
			"second_score":	129764
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	990,
			"primary_score":	999916,
			"second_score":	129751
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1010,
			"primary_score":	999916,
			"second_score":	129750
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1021,
			"primary_score":	999916,
			"second_score":	129749
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1035,
			"primary_score":	999916,
			"second_score":	129748
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1038,
			"primary_score":	999916,
			"second_score":	129747
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1251,
			"primary_score":	999839,
			"second_score":	131936
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1252,
			"primary_score":	999839,
			"second_score":	131935
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1254,
			"primary_score":	999839,
			"second_score":	131934
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1255,
			"primary_score":	999910,
			"second_score":	131933
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1282,
			"primary_score":	999839,
			"second_score":	131932
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1431,
			"primary_score":	999858,
			"second_score":	129543
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1432,
			"primary_score":	999858,
			"second_score":	129542
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1434,
			"primary_score":	999858,
			"second_score":	129541
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1440,
			"primary_score":	999956,
			"second_score":	126821
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1441,
			"primary_score":	999956,
			"second_score":	126820
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1442,
			"primary_score":	999956,
			"second_score":	126819
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1444,
			"primary_score":	999956,
			"second_score":	126818
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1450,
			"primary_score":	999956,
			"second_score":	126817
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1453,
			"primary_score":	999956,
			"second_score":	126816
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1454,
			"primary_score":	999956,
			"second_score":	126815
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1455,
			"primary_score":	999956,
			"second_score":	126787
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	31,
			"primary_score":	999862,
			"second_score":	131967
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	32,
			"primary_score":	999862,
			"second_score":	131966
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	33,
			"primary_score":	999862,
			"second_score":	131965
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	34,
			"primary_score":	999862,
			"second_score":	131964
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	39,
			"primary_score":	999814,
			"second_score":	121432
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	43,
			"primary_score":	999814,
			"second_score":	121431
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	44,
			"primary_score":	999950,
			"second_score":	121913
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	45,
			"primary_score":	999950,
			"second_score":	121621
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	46,
			"primary_score":	999950,
			"second_score":	121602
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	49,
			"primary_score":	999831,
			"second_score":	121430
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	63,
			"primary_score":	999817,
			"second_score":	121463
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	65,
			"primary_score":	999817,
			"second_score":	121462
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	41,
			"primary_score":	999632,
			"second_score":	115415
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	42,
			"primary_score":	999632,
			"second_score":	115349
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	47,
			"primary_score":	999632,
			"second_score":	121235
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	49,
			"primary_score":	999632,
			"second_score":	121234
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	50,
			"primary_score":	999814,
			"second_score":	121231
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	82,
			"primary_score":	999632,
			"second_score":	116306
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	84,
			"primary_score":	999632,
			"second_score":	116305
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	85,
			"primary_score":	999814,
			"second_score":	116292
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	104,
			"primary_score":	999814,
			"second_score":	131959
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	105,
			"primary_score":	999814,
			"second_score":	131958
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	107,
			"primary_score":	999814,
			"second_score":	131957
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	111,
			"primary_score":	999814,
			"second_score":	131956
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	115,
			"primary_score":	999814,
			"second_score":	131955
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	117,
			"primary_score":	999814,
			"second_score":	131954
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	118,
			"primary_score":	999814,
			"second_score":	131953
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	119,
			"primary_score":	999814,
			"second_score":	131952
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	121,
			"primary_score":	999814,
			"second_score":	131951
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	122,
			"primary_score":	999814,
			"second_score":	131950
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	123,
			"primary_score":	999814,
			"second_score":	131949
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	124,
			"primary_score":	999814,
			"second_score":	131948
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	125,
			"primary_score":	999814,
			"second_score":	131947
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	126,
			"primary_score":	999814,
			"second_score":	131946
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	127,
			"primary_score":	999814,
			"second_score":	131945
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	132,
			"primary_score":	999814,
			"second_score":	131944
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	144,
			"primary_score":	999931,
			"second_score":	128764
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	146,
			"primary_score":	999931,
			"second_score":	128763
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	167,
			"primary_score":	999815,
			"second_score":	121486
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	169,
			"primary_score":	999815,
			"second_score":	121485
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	171,
			"primary_score":	999815,
			"second_score":	121484
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	172,
			"primary_score":	999815,
			"second_score":	121482
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	173,
			"primary_score":	999815,
			"second_score":	121402
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	175,
			"primary_score":	999931,
			"second_score":	128723
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	183,
			"primary_score":	999815,
			"second_score":	121481
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	184,
			"primary_score":	999815,
			"second_score":	121480
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	186,
			"primary_score":	999815,
			"second_score":	121479
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	190,
			"primary_score":	999815,
			"second_score":	121478
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	196,
			"primary_score":	999815,
			"second_score":	121477
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	197,
			"primary_score":	999815,
			"second_score":	121476
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	198,
			"primary_score":	999815,
			"second_score":	121475
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	199,
			"primary_score":	999866,
			"second_score":	121474
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	201,
			"primary_score":	999866,
			"second_score":	121473
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	202,
			"primary_score":	999866,
			"second_score":	121472
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	203,
			"primary_score":	999866,
			"second_score":	121471
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	205,
			"primary_score":	999866,
			"second_score":	121470
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	206,
			"primary_score":	999866,
			"second_score":	121464
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	209,
			"primary_score":	999866,
			"second_score":	121461
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	214,
			"primary_score":	999815,
			"second_score":	121459
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	216,
			"primary_score":	999815,
			"second_score":	121458
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	217,
			"primary_score":	999819,
			"second_score":	121455
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	218,
			"primary_score":	999815,
			"second_score":	121447
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	219,
			"primary_score":	999815,
			"second_score":	121446
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	220,
			"primary_score":	999815,
			"second_score":	121440
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	223,
			"primary_score":	999815,
			"second_score":	121410
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	225,
			"primary_score":	999815,
			"second_score":	121406
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	230,
			"primary_score":	999815,
			"second_score":	121404
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	239,
			"primary_score":	999815,
			"second_score":	121403
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	270,
			"primary_score":	999865,
			"second_score":	128404
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	272,
			"primary_score":	999865,
			"second_score":	128403
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	110,
			"primary_score":	999632,
			"second_score":	15501
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	122,
			"primary_score":	999632,
			"second_score":	15503
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	124,
			"primary_score":	999632,
			"second_score":	15502
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	136,
			"primary_score":	999632,
			"second_score":	116386
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	140,
			"primary_score":	999632,
			"second_score":	116385
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	197,
			"primary_score":	999632,
			"second_score":	116369
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	201,
			"primary_score":	999632,
			"second_score":	116368
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	266,
			"primary_score":	999632,
			"second_score":	15816
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	268,
			"primary_score":	999632,
			"second_score":	15815
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	271,
			"primary_score":	999632,
			"second_score":	15814
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	312,
			"primary_score":	999632,
			"second_score":	20055
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	314,
			"primary_score":	999632,
			"second_score":	20054
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	315,
			"primary_score":	999632,
			"second_score":	19991
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	316,
			"primary_score":	999632,
			"second_score":	19990
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	319,
			"primary_score":	999632,
			"second_score":	19982
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	321,
			"primary_score":	999632,
			"second_score":	15813
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	329,
			"primary_score":	999632,
			"second_score":	15812
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	330,
			"primary_score":	999632,
			"second_score":	15804
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	333,
			"primary_score":	999632,
			"second_score":	15803
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	334,
			"primary_score":	999632,
			"second_score":	15494
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	335,
			"primary_score":	999632,
			"second_score":	14848
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	336,
			"primary_score":	999632,
			"second_score":	17329
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	338,
			"primary_score":	999632,
			"second_score":	14847
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	339,
			"primary_score":	999632,
			"second_score":	14846
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	350,
			"primary_score":	999632,
			"second_score":	122455
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	351,
			"primary_score":	999632,
			"second_score":	122454
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	352,
			"primary_score":	999632,
			"second_score":	122453
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	354,
			"primary_score":	999632,
			"second_score":	122452
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	359,
			"primary_score":	999632,
			"second_score":	122451
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	360,
			"primary_score":	999632,
			"second_score":	122450
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	363,
			"primary_score":	999632,
			"second_score":	122431
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	367,
			"primary_score":	999632,
			"second_score":	122430
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	369,
			"primary_score":	999632,
			"second_score":	122411
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	370,
			"primary_score":	999699,
			"second_score":	122410
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	371,
			"primary_score":	999699,
			"second_score":	122409
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	372,
			"primary_score":	999699,
			"second_score":	122405
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	373,
			"primary_score":	999699,
			"second_score":	122404
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	375,
			"primary_score":	999699,
			"second_score":	122402
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	378,
			"primary_score":	999632,
			"second_score":	122383
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	379,
			"primary_score":	999632,
			"second_score":	122382
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	380,
			"primary_score":	999632,
			"second_score":	122381
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	381,
			"primary_score":	999632,
			"second_score":	122236
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	382,
			"primary_score":	999632,
			"second_score":	122233
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	384,
			"primary_score":	999632,
			"second_score":	122232
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	386,
			"primary_score":	999632,
			"second_score":	122167
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	388,
			"primary_score":	999632,
			"second_score":	122116
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	391,
			"primary_score":	999632,
			"second_score":	122115
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	394,
			"primary_score":	999632,
			"second_score":	122114
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	397,
			"primary_score":	999632,
			"second_score":	122113
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	400,
			"primary_score":	999632,
			"second_score":	122112
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	401,
			"primary_score":	999632,
			"second_score":	122111
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	403,
			"primary_score":	999632,
			"second_score":	122108
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	416,
			"primary_score":	999632,
			"second_score":	151243
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	417,
			"primary_score":	999632,
			"second_score":	151242
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	418,
			"primary_score":	999632,
			"second_score":	151241
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	423,
			"primary_score":	999632,
			"second_score":	151248
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	424,
			"primary_score":	999632,
			"second_score":	151247
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	426,
			"primary_score":	999632,
			"second_score":	151246
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	437,
			"primary_score":	999632,
			"second_score":	151245
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	439,
			"primary_score":	999632,
			"second_score":	151244
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	441,
			"primary_score":	999632,
			"second_score":	151240
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	446,
			"primary_score":	999632,
			"second_score":	151251
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	488,
			"primary_score":	999632,
			"second_score":	151212
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	490,
			"primary_score":	999632,
			"second_score":	151211
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	493,
			"primary_score":	999632,
			"second_score":	151210
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	496,
			"primary_score":	999632,
			"second_score":	151209
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	497,
			"primary_score":	999632,
			"second_score":	151208
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	500,
			"primary_score":	999632,
			"second_score":	151205
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	501,
			"primary_score":	999697,
			"second_score":	151204
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	502,
			"primary_score":	999697,
			"second_score":	151125
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	504,
			"primary_score":	999632,
			"second_score":	151124
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	505,
			"primary_score":	999632,
			"second_score":	151123
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	506,
			"primary_score":	999632,
			"second_score":	151064
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	508,
			"primary_score":	999632,
			"second_score":	151063
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	509,
			"primary_score":	999632,
			"second_score":	151062
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	510,
			"primary_score":	999632,
			"second_score":	150983
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	513,
			"primary_score":	999632,
			"second_score":	150982
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	514,
			"primary_score":	999632,
			"second_score":	150981
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	515,
			"primary_score":	999632,
			"second_score":	150980
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	516,
			"primary_score":	999632,
			"second_score":	150752
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	517,
			"primary_score":	999632,
			"second_score":	150751
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	519,
			"primary_score":	999632,
			"second_score":	150750
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	520,
			"primary_score":	999700,
			"second_score":	150792
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	522,
			"primary_score":	999632,
			"second_score":	150749
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	530,
			"primary_score":	999632,
			"second_score":	127302
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	537,
			"primary_score":	999632,
			"second_score":	127363
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	539,
			"primary_score":	999632,
			"second_score":	150748
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	540,
			"primary_score":	999632,
			"second_score":	150744
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	543,
			"primary_score":	999632,
			"second_score":	150743
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	544,
			"primary_score":	999632,
			"second_score":	150742
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	522,
			"primary_score":	999632,
			"second_score":	122048
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	529,
			"primary_score":	999632,
			"second_score":	122016
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	575,
			"primary_score":	999632,
			"second_score":	122045
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	582,
			"primary_score":	999632,
			"second_score":	122017
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	78,
			"primary_score":	999632,
			"second_score":	115417
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	79,
			"primary_score":	999632,
			"second_score":	115443
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	86,
			"primary_score":	999632,
			"second_score":	116410
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	88,
			"primary_score":	999632,
			"second_score":	116409
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	96,
			"primary_score":	999632,
			"second_score":	116411
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	97,
			"primary_score":	999632,
			"second_score":	116408
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	98,
			"primary_score":	999632,
			"second_score":	116407
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	100,
			"primary_score":	999632,
			"second_score":	116406
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	104,
			"primary_score":	999632,
			"second_score":	116405
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	105,
			"primary_score":	999632,
			"second_score":	116404
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	62,
			"primary_score":	999632,
			"second_score":	150164
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	64,
			"primary_score":	999632,
			"second_score":	128600
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	65,
			"primary_score":	999632,
			"second_score":	128599
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	66,
			"primary_score":	999632,
			"second_score":	128598
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	67,
			"primary_score":	999632,
			"second_score":	128597
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	87,
			"primary_score":	999632,
			"second_score":	128570
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	88,
			"primary_score":	999632,
			"second_score":	128569
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	89,
			"primary_score":	999632,
			"second_score":	128568
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	90,
			"primary_score":	999632,
			"second_score":	128567
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	27,
			"primary_score":	999632,
			"second_score":	116425
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	28,
			"primary_score":	999632,
			"second_score":	116424
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	29,
			"primary_score":	999632,
			"second_score":	116423
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	30,
			"primary_score":	999632,
			"second_score":	116422
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	83,
			"primary_score":	999632,
			"second_score":	150738
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	84,
			"primary_score":	999632,
			"second_score":	150737
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	93,
			"primary_score":	999632,
			"second_score":	115187
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	95,
			"primary_score":	999632,
			"second_score":	115186
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	103,
			"primary_score":	999632,
			"second_score":	115185
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	121,
			"primary_score":	999632,
			"second_score":	151255
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	123,
			"primary_score":	999632,
			"second_score":	151254
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	130,
			"primary_score":	999632,
			"second_score":	151253
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	46,
			"primary_score":	999632,
			"second_score":	150547
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	47,
			"primary_score":	999632,
			"second_score":	150546
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	67,
			"primary_score":	999632,
			"second_score":	150556
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	68,
			"primary_score":	999632,
			"second_score":	150555
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	74,
			"primary_score":	999632,
			"second_score":	150554
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	75,
			"primary_score":	999632,
			"second_score":	150553
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	76,
			"primary_score":	999632,
			"second_score":	150552
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	77,
			"primary_score":	999632,
			"second_score":	150551
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	78,
			"primary_score":	999632,
			"second_score":	150550
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	83,
			"primary_score":	999632,
			"second_score":	150557
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	84,
			"primary_score":	999632,
			"second_score":	150549
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	85,
			"primary_score":	999632,
			"second_score":	150548
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	289,
			"primary_score":	999632,
			"second_score":	150559
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	299,
			"primary_score":	999632,
			"second_score":	150558
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	301,
			"primary_score":	999632,
			"second_score":	150545
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	302,
			"primary_score":	999632,
			"second_score":	150544
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	309,
			"primary_score":	999632,
			"second_score":	150543
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	310,
			"primary_score":	999632,
			"second_score":	150542
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	311,
			"primary_score":	999632,
			"second_score":	150523
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	313,
			"primary_score":	999632,
			"second_score":	150522
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	322,
			"primary_score":	999632,
			"second_score":	150569
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	325,
			"primary_score":	999632,
			"second_score":	150568
		}, {
			"file":	"Zend/zend_string.c",
			"line":	77,
			"primary_score":	999632,
			"second_score":	6127
		}, {
			"file":	"Zend/zend_string.c",
			"line":	78,
			"primary_score":	999632,
			"second_score":	6126
		}, {
			"file":	"Zend/zend_string.c",
			"line":	90,
			"primary_score":	999911,
			"second_score":	154302
		}, {
			"file":	"Zend/zend_string.c",
			"line":	188,
			"primary_score":	999632,
			"second_score":	114633
		}, {
			"file":	"Zend/zend_string.c",
			"line":	189,
			"primary_score":	999632,
			"second_score":	114632
		}, {
			"file":	"Zend/zend_string.c",
			"line":	192,
			"primary_score":	999632,
			"second_score":	114631
		}, {
			"file":	"Zend/zend_string.c",
			"line":	199,
			"primary_score":	999632,
			"second_score":	114630
		}, {
			"file":	"Zend/zend_string.c",
			"line":	200,
			"primary_score":	999632,
			"second_score":	105231
		}, {
			"file":	"Zend/zend_string.c",
			"line":	201,
			"primary_score":	999632,
			"second_score":	105230
		}, {
			"file":	"Zend/zend_string.c",
			"line":	202,
			"primary_score":	999632,
			"second_score":	111811
		}, {
			"file":	"Zend/zend_string.c",
			"line":	203,
			"primary_score":	999632,
			"second_score":	111810
		}, {
			"file":	"Zend/zend_string.c",
			"line":	204,
			"primary_score":	999632,
			"second_score":	111809
		}, {
			"file":	"Zend/zend_string.c",
			"line":	208,
			"primary_score":	999632,
			"second_score":	111808
		}, {
			"file":	"Zend/zend_string.c",
			"line":	209,
			"primary_score":	999632,
			"second_score":	109429
		}, {
			"file":	"Zend/zend_string.c",
			"line":	211,
			"primary_score":	999632,
			"second_score":	111807
		}, {
			"file":	"Zend/zend_string.c",
			"line":	213,
			"primary_score":	999632,
			"second_score":	111806
		}, {
			"file":	"Zend/zend_string.c",
			"line":	215,
			"primary_score":	999632,
			"second_score":	105229
		}, {
			"file":	"Zend/zend_string.c",
			"line":	216,
			"primary_score":	999632,
			"second_score":	105228
		}, {
			"file":	"Zend/zend_string.c",
			"line":	218,
			"primary_score":	999632,
			"second_score":	105227
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	459,
			"primary_score":	999632,
			"second_score":	6295
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	467,
			"primary_score":	999632,
			"second_score":	6241
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1379,
			"primary_score":	999632,
			"second_score":	6294
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1380,
			"primary_score":	999632,
			"second_score":	6293
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1382,
			"primary_score":	999632,
			"second_score":	6292
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1383,
			"primary_score":	999632,
			"second_score":	6291
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1384,
			"primary_score":	999632,
			"second_score":	6245
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1385,
			"primary_score":	999632,
			"second_score":	6244
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1389,
			"primary_score":	999632,
			"second_score":	6243
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1391,
			"primary_score":	999632,
			"second_score":	6242
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	32,
			"primary_score":	999632,
			"second_score":	115744
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	37,
			"primary_score":	999632,
			"second_score":	117063
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	38,
			"primary_score":	999632,
			"second_score":	117042
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	41,
			"primary_score":	999632,
			"second_score":	116534
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	43,
			"primary_score":	999632,
			"second_score":	116533
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	44,
			"primary_score":	999632,
			"second_score":	116532
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	45,
			"primary_score":	999632,
			"second_score":	116524
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	48,
			"primary_score":	999632,
			"second_score":	116505
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	51,
			"primary_score":	999815,
			"second_score":	121488
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	53,
			"primary_score":	999815,
			"second_score":	121487
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	55,
			"primary_score":	999815,
			"second_score":	121398
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	58,
			"primary_score":	999632,
			"second_score":	115743
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	61,
			"primary_score":	999632,
			"second_score":	115742
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	63,
			"primary_score":	999632,
			"second_score":	115541
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	77,
			"primary_score":	999632,
			"second_score":	14855
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	81,
			"primary_score":	999632,
			"second_score":	20032
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	82,
			"primary_score":	999632,
			"second_score":	20029
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	107,
			"primary_score":	999632,
			"second_score":	135699
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	121,
			"primary_score":	999632,
			"second_score":	135698
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	124,
			"primary_score":	999632,
			"second_score":	135697
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	143,
			"primary_score":	999931,
			"second_score":	128766
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	144,
			"primary_score":	999931,
			"second_score":	128765
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	146,
			"primary_score":	999931,
			"second_score":	128762
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	153,
			"primary_score":	999632,
			"second_score":	121706
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	32,
			"primary_score":	999632,
			"second_score":	115746
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	33,
			"primary_score":	999632,
			"second_score":	117172
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	35,
			"primary_score":	999632,
			"second_score":	115745
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	42,
			"primary_score":	999632,
			"second_score":	135701
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	43,
			"primary_score":	999632,
			"second_score":	120976
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	45,
			"primary_score":	999632,
			"second_score":	135700
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	345,
			"primary_score":	999632,
			"second_score":	150494
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	346,
			"primary_score":	999632,
			"second_score":	150493
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	347,
			"primary_score":	999632,
			"second_score":	150492
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	350,
			"primary_score":	999632,
			"second_score":	150491
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	354,
			"primary_score":	999632,
			"second_score":	150490
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	356,
			"primary_score":	999632,
			"second_score":	150489
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	363,
			"primary_score":	999632,
			"second_score":	150480
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	364,
			"primary_score":	999632,
			"second_score":	150479
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	365,
			"primary_score":	999632,
			"second_score":	150478
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	366,
			"primary_score":	999632,
			"second_score":	150477
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	367,
			"primary_score":	999632,
			"second_score":	150476
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	368,
			"primary_score":	999632,
			"second_score":	150475
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	369,
			"primary_score":	999632,
			"second_score":	150474
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	370,
			"primary_score":	999632,
			"second_score":	150473
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	371,
			"primary_score":	999632,
			"second_score":	150472
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	372,
			"primary_score":	999632,
			"second_score":	150471
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	373,
			"primary_score":	999632,
			"second_score":	150470
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	374,
			"primary_score":	999632,
			"second_score":	150469
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	375,
			"primary_score":	999632,
			"second_score":	150468
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	377,
			"primary_score":	999632,
			"second_score":	150467
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	379,
			"primary_score":	999632,
			"second_score":	150466
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	380,
			"primary_score":	999632,
			"second_score":	150465
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	383,
			"primary_score":	999632,
			"second_score":	150351
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	395,
			"primary_score":	999632,
			"second_score":	150350
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	396,
			"primary_score":	999632,
			"second_score":	150349
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	397,
			"primary_score":	999632,
			"second_score":	150348
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	399,
			"primary_score":	999632,
			"second_score":	150347
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	400,
			"primary_score":	999632,
			"second_score":	150346
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	402,
			"primary_score":	999632,
			"second_score":	150345
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	403,
			"primary_score":	999632,
			"second_score":	122483
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	410,
			"primary_score":	999632,
			"second_score":	122482
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	411,
			"primary_score":	999632,
			"second_score":	122461
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	414,
			"primary_score":	999632,
			"second_score":	122460
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	431,
			"primary_score":	999632,
			"second_score":	121720
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	436,
			"primary_score":	999632,
			"second_score":	121719
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	437,
			"primary_score":	999632,
			"second_score":	121718
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	458,
			"primary_score":	999632,
			"second_score":	122474
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	459,
			"primary_score":	999632,
			"second_score":	122473
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	461,
			"primary_score":	999632,
			"second_score":	122472
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	462,
			"primary_score":	999632,
			"second_score":	122471
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	463,
			"primary_score":	999632,
			"second_score":	122470
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	474,
			"primary_score":	999632,
			"second_score":	122469
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	476,
			"primary_score":	999632,
			"second_score":	122468
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	478,
			"primary_score":	999632,
			"second_score":	122464
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	481,
			"primary_score":	999632,
			"second_score":	122463
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	566,
			"primary_score":	999632,
			"second_score":	122462
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	571,
			"primary_score":	999632,
			"second_score":	128580
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	572,
			"primary_score":	999632,
			"second_score":	128579
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	573,
			"primary_score":	999632,
			"second_score":	128578
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	575,
			"primary_score":	999632,
			"second_score":	128577
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	576,
			"primary_score":	999632,
			"second_score":	128576
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	589,
			"primary_score":	999632,
			"second_score":	128575
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	603,
			"primary_score":	999632,
			"second_score":	128574
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	604,
			"primary_score":	999893,
			"second_score":	129697
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	605,
			"primary_score":	999893,
			"second_score":	129696
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	606,
			"primary_score":	999893,
			"second_score":	129695
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	607,
			"primary_score":	999893,
			"second_score":	129694
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	608,
			"primary_score":	999893,
			"second_score":	129693
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	609,
			"primary_score":	999893,
			"second_score":	129692
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	610,
			"primary_score":	999893,
			"second_score":	129691
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	613,
			"primary_score":	999632,
			"second_score":	128573
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	614,
			"primary_score":	999632,
			"second_score":	128563
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	615,
			"primary_score":	999632,
			"second_score":	128559
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	617,
			"primary_score":	999632,
			"second_score":	128558
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	618,
			"primary_score":	999632,
			"second_score":	128557
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	620,
			"primary_score":	999632,
			"second_score":	128556
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	621,
			"primary_score":	999632,
			"second_score":	128528
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	622,
			"primary_score":	999632,
			"second_score":	128525
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	623,
			"primary_score":	999632,
			"second_score":	128524
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	625,
			"primary_score":	999632,
			"second_score":	128523
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	626,
			"primary_score":	999632,
			"second_score":	128522
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	627,
			"primary_score":	999632,
			"second_score":	128521
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	628,
			"primary_score":	999632,
			"second_score":	128520
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	630,
			"primary_score":	999632,
			"second_score":	128519
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	631,
			"primary_score":	999632,
			"second_score":	128518
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	632,
			"primary_score":	999632,
			"second_score":	128509
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	636,
			"primary_score":	999632,
			"second_score":	128508
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	638,
			"primary_score":	999632,
			"second_score":	128507
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	643,
			"primary_score":	999632,
			"second_score":	123830
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	644,
			"primary_score":	999650,
			"second_score":	122551
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	709,
			"primary_score":	999632,
			"second_score":	123829
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	710,
			"primary_score":	999632,
			"second_score":	123828
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	712,
			"primary_score":	999632,
			"second_score":	123827
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	713,
			"primary_score":	999894,
			"second_score":	128694
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	714,
			"primary_score":	999898,
			"second_score":	128693
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	722,
			"primary_score":	999898,
			"second_score":	128692
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	724,
			"primary_score":	999894,
			"second_score":	128670
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	725,
			"primary_score":	999894,
			"second_score":	128669
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	726,
			"primary_score":	999894,
			"second_score":	128668
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	729,
			"primary_score":	999632,
			"second_score":	123826
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	730,
			"primary_score":	999632,
			"second_score":	123825
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	732,
			"primary_score":	999632,
			"second_score":	123824
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	734,
			"primary_score":	999632,
			"second_score":	122486
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	742,
			"primary_score":	999632,
			"second_score":	122485
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	747,
			"primary_score":	999893,
			"second_score":	129706
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	748,
			"primary_score":	999893,
			"second_score":	129705
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	794,
			"primary_score":	999839,
			"second_score":	132114
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	795,
			"primary_score":	999839,
			"second_score":	132113
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	796,
			"primary_score":	999839,
			"second_score":	132112
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	798,
			"primary_score":	999839,
			"second_score":	132111
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	799,
			"primary_score":	999839,
			"second_score":	132110
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	808,
			"primary_score":	999839,
			"second_score":	132109
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	809,
			"primary_score":	999839,
			"second_score":	132085
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	810,
			"primary_score":	999839,
			"second_score":	131940
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	812,
			"primary_score":	999839,
			"second_score":	131937
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	814,
			"primary_score":	999839,
			"second_score":	131931
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	822,
			"primary_score":	999910,
			"second_score":	131930
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	823,
			"primary_score":	999911,
			"second_score":	131929
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	824,
			"primary_score":	999911,
			"second_score":	131927
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	827,
			"primary_score":	999910,
			"second_score":	131923
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	830,
			"primary_score":	999910,
			"second_score":	131917
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	831,
			"primary_score":	999910,
			"second_score":	131916
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	832,
			"primary_score":	999910,
			"second_score":	131915
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	834,
			"primary_score":	999910,
			"second_score":	131914
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	835,
			"primary_score":	999910,
			"second_score":	131913
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1151,
			"primary_score":	999838,
			"second_score":	132164
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1153,
			"primary_score":	999838,
			"second_score":	132163
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1154,
			"primary_score":	999838,
			"second_score":	132162
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1155,
			"primary_score":	999838,
			"second_score":	132161
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1161,
			"primary_score":	999838,
			"second_score":	132160
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1163,
			"primary_score":	999838,
			"second_score":	132159
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1164,
			"primary_score":	999838,
			"second_score":	132158
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1167,
			"primary_score":	999838,
			"second_score":	132157
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1168,
			"primary_score":	999838,
			"second_score":	132121
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1178,
			"primary_score":	999838,
			"second_score":	132119
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1179,
			"primary_score":	999838,
			"second_score":	132118
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1731,
			"primary_score":	999632,
			"second_score":	123372
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1733,
			"primary_score":	999632,
			"second_score":	123371
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1734,
			"primary_score":	999632,
			"second_score":	123370
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1736,
			"primary_score":	999632,
			"second_score":	123369
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1737,
			"primary_score":	999632,
			"second_score":	123368
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1739,
			"primary_score":	999632,
			"second_score":	123367
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1746,
			"primary_score":	999632,
			"second_score":	123366
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1749,
			"primary_score":	999632,
			"second_score":	123302
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1750,
			"primary_score":	999632,
			"second_score":	123301
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1919,
			"primary_score":	999632,
			"second_score":	128604
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1921,
			"primary_score":	999632,
			"second_score":	128603
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1923,
			"primary_score":	999632,
			"second_score":	128602
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1925,
			"primary_score":	999632,
			"second_score":	128596
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1927,
			"primary_score":	999632,
			"second_score":	128595
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1931,
			"primary_score":	999632,
			"second_score":	128584
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1933,
			"primary_score":	999632,
			"second_score":	128582
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1935,
			"primary_score":	999632,
			"second_score":	128581
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1940,
			"primary_score":	999632,
			"second_score":	122481
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1941,
			"primary_score":	999632,
			"second_score":	122480
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1944,
			"primary_score":	999632,
			"second_score":	122479
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1945,
			"primary_score":	999632,
			"second_score":	122478
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1947,
			"primary_score":	999632,
			"second_score":	122477
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1948,
			"primary_score":	999632,
			"second_score":	122476
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1951,
			"primary_score":	999632,
			"second_score":	121013
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1952,
			"primary_score":	999632,
			"second_score":	121012
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1954,
			"primary_score":	999632,
			"second_score":	121011
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1956,
			"primary_score":	999632,
			"second_score":	121010
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1957,
			"primary_score":	999632,
			"second_score":	120986
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1958,
			"primary_score":	999632,
			"second_score":	120978
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1959,
			"primary_score":	999632,
			"second_score":	120975
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1978,
			"primary_score":	999632,
			"second_score":	122475
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2077,
			"primary_score":	999632,
			"second_score":	135742
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2079,
			"primary_score":	999632,
			"second_score":	135741
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2080,
			"primary_score":	999632,
			"second_score":	135740
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2084,
			"primary_score":	999632,
			"second_score":	135739
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2085,
			"primary_score":	999632,
			"second_score":	135738
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2086,
			"primary_score":	999632,
			"second_score":	135737
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2089,
			"primary_score":	999632,
			"second_score":	135736
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2091,
			"primary_score":	999632,
			"second_score":	135735
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2092,
			"primary_score":	999632,
			"second_score":	135711
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2093,
			"primary_score":	999632,
			"second_score":	135703
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2094,
			"primary_score":	999632,
			"second_score":	135702
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2096,
			"primary_score":	999632,
			"second_score":	135696
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2099,
			"primary_score":	999632,
			"second_score":	135692
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2100,
			"primary_score":	999632,
			"second_score":	135691
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6005,
			"primary_score":	999632,
			"second_score":	121715
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6006,
			"primary_score":	999632,
			"second_score":	121714
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6007,
			"primary_score":	999632,
			"second_score":	121713
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6008,
			"primary_score":	999632,
			"second_score":	121712
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6010,
			"primary_score":	999632,
			"second_score":	121711
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6011,
			"primary_score":	999632,
			"second_score":	121710
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6013,
			"primary_score":	999632,
			"second_score":	121708
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6020,
			"primary_score":	999632,
			"second_score":	121707
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6023,
			"primary_score":	999632,
			"second_score":	121694
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6024,
			"primary_score":	999632,
			"second_score":	121668
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6025,
			"primary_score":	999632,
			"second_score":	121667
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10190,
			"primary_score":	999632,
			"second_score":	123512
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10191,
			"primary_score":	999632,
			"second_score":	123511
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10192,
			"primary_score":	999632,
			"second_score":	123510
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10193,
			"primary_score":	999632,
			"second_score":	123509
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10195,
			"primary_score":	999632,
			"second_score":	123508
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10196,
			"primary_score":	999632,
			"second_score":	123507
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10198,
			"primary_score":	999632,
			"second_score":	123496
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10205,
			"primary_score":	999632,
			"second_score":	123495
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10208,
			"primary_score":	999632,
			"second_score":	123431
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10209,
			"primary_score":	999632,
			"second_score":	123377
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10210,
			"primary_score":	999632,
			"second_score":	123376
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10223,
			"primary_score":	999632,
			"second_score":	122773
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10224,
			"primary_score":	999632,
			"second_score":	122772
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10225,
			"primary_score":	999632,
			"second_score":	122771
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10226,
			"primary_score":	999632,
			"second_score":	122770
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10228,
			"primary_score":	999632,
			"second_score":	122769
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10229,
			"primary_score":	999632,
			"second_score":	122768
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10231,
			"primary_score":	999632,
			"second_score":	122757
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10234,
			"primary_score":	999632,
			"second_score":	122756
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10235,
			"primary_score":	999632,
			"second_score":	122751
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10236,
			"primary_score":	999632,
			"second_score":	122720
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10240,
			"primary_score":	999632,
			"second_score":	122719
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10248,
			"primary_score":	999632,
			"second_score":	122718
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10531,
			"primary_score":	999632,
			"second_score":	125276
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10532,
			"primary_score":	999632,
			"second_score":	125275
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10533,
			"primary_score":	999632,
			"second_score":	125274
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10534,
			"primary_score":	999632,
			"second_score":	125273
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10536,
			"primary_score":	999632,
			"second_score":	125262
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10540,
			"primary_score":	999632,
			"second_score":	125261
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10549,
			"primary_score":	999632,
			"second_score":	125259
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10550,
			"primary_score":	999632,
			"second_score":	125257
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10551,
			"primary_score":	999632,
			"second_score":	125253
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10553,
			"primary_score":	999632,
			"second_score":	125219
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10554,
			"primary_score":	999632,
			"second_score":	125218
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10559,
			"primary_score":	999632,
			"second_score":	125283
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10560,
			"primary_score":	999632,
			"second_score":	125282
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10561,
			"primary_score":	999632,
			"second_score":	125281
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10563,
			"primary_score":	999632,
			"second_score":	125280
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10564,
			"primary_score":	999632,
			"second_score":	125279
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10565,
			"primary_score":	999632,
			"second_score":	125278
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10566,
			"primary_score":	999632,
			"second_score":	125277
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11273,
			"primary_score":	999632,
			"second_score":	121832
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11274,
			"primary_score":	999632,
			"second_score":	121831
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11275,
			"primary_score":	999632,
			"second_score":	121830
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11277,
			"primary_score":	999632,
			"second_score":	121829
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11278,
			"primary_score":	999632,
			"second_score":	121828
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11280,
			"primary_score":	999632,
			"second_score":	121817
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11281,
			"primary_score":	999632,
			"second_score":	121814
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11282,
			"primary_score":	999632,
			"second_score":	121813
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11284,
			"primary_score":	999632,
			"second_score":	121779
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11285,
			"primary_score":	999632,
			"second_score":	121725
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11286,
			"primary_score":	999632,
			"second_score":	121724
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26220,
			"primary_score":	999732,
			"second_score":	128625
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26221,
			"primary_score":	999732,
			"second_score":	128624
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26223,
			"primary_score":	999732,
			"second_score":	128623
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26225,
			"primary_score":	999732,
			"second_score":	128619
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26229,
			"primary_score":	999732,
			"second_score":	128618
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26238,
			"primary_score":	999732,
			"second_score":	128616
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26239,
			"primary_score":	999732,
			"second_score":	128614
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26240,
			"primary_score":	999732,
			"second_score":	128610
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26242,
			"primary_score":	999732,
			"second_score":	128609
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26243,
			"primary_score":	999732,
			"second_score":	128608
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26334,
			"primary_score":	999732,
			"second_score":	128629
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26336,
			"primary_score":	999732,
			"second_score":	128628
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26340,
			"primary_score":	999732,
			"second_score":	128627
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26341,
			"primary_score":	999732,
			"second_score":	128626
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28310,
			"primary_score":	999919,
			"second_score":	129803
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28311,
			"primary_score":	999919,
			"second_score":	129802
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28312,
			"primary_score":	999919,
			"second_score":	129801
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28313,
			"primary_score":	999919,
			"second_score":	129800
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28316,
			"primary_score":	999919,
			"second_score":	129799
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28317,
			"primary_score":	999919,
			"second_score":	129798
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28319,
			"primary_score":	999919,
			"second_score":	129792
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28321,
			"primary_score":	999919,
			"second_score":	129791
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28326,
			"primary_score":	999919,
			"second_score":	129790
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28327,
			"primary_score":	999919,
			"second_score":	129789
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28329,
			"primary_score":	999919,
			"second_score":	129788
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28331,
			"primary_score":	999919,
			"second_score":	129784
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28333,
			"primary_score":	999919,
			"second_score":	129783
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28335,
			"primary_score":	999919,
			"second_score":	129777
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28337,
			"primary_score":	999919,
			"second_score":	129776
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28339,
			"primary_score":	999919,
			"second_score":	129775
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28344,
			"primary_score":	999919,
			"second_score":	129774
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28345,
			"primary_score":	999919,
			"second_score":	129746
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28348,
			"primary_score":	999919,
			"second_score":	129745
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28351,
			"primary_score":	999919,
			"second_score":	129744
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28358,
			"primary_score":	999919,
			"second_score":	129741
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28361,
			"primary_score":	999919,
			"second_score":	129740
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28362,
			"primary_score":	999919,
			"second_score":	129738
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28373,
			"primary_score":	999919,
			"second_score":	129736
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28374,
			"primary_score":	999919,
			"second_score":	129735
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32112,
			"primary_score":	999733,
			"second_score":	130305
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32113,
			"primary_score":	999733,
			"second_score":	130304
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32114,
			"primary_score":	999733,
			"second_score":	130303
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32115,
			"primary_score":	999733,
			"second_score":	130302
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32117,
			"primary_score":	999733,
			"second_score":	130301
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32118,
			"primary_score":	999733,
			"second_score":	130300
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32119,
			"primary_score":	999733,
			"second_score":	130289
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32121,
			"primary_score":	999733,
			"second_score":	130285
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32135,
			"primary_score":	999733,
			"second_score":	130284
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32144,
			"primary_score":	999733,
			"second_score":	130283
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32146,
			"primary_score":	999733,
			"second_score":	130282
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32149,
			"primary_score":	999733,
			"second_score":	130281
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32151,
			"primary_score":	999733,
			"second_score":	129833
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32158,
			"primary_score":	999761,
			"second_score":	129831
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32160,
			"primary_score":	999733,
			"second_score":	129808
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32161,
			"primary_score":	999733,
			"second_score":	129807
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39418,
			"primary_score":	999632,
			"second_score":	150746
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39437,
			"primary_score":	999632,
			"second_score":	150745
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39442,
			"primary_score":	999632,
			"second_score":	150747
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	28,
			"primary_score":	999794,
			"second_score":	128259
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	29,
			"primary_score":	999794,
			"second_score":	128258
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	31,
			"primary_score":	999794,
			"second_score":	128257
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	36,
			"primary_score":	999794,
			"second_score":	128261
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	44,
			"primary_score":	999794,
			"second_score":	128260
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	45,
			"primary_score":	999794,
			"second_score":	128256
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	46,
			"primary_score":	999794,
			"second_score":	128255
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	47,
			"primary_score":	999794,
			"second_score":	128254
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	48,
			"primary_score":	999794,
			"second_score":	128253
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	53,
			"primary_score":	999794,
			"second_score":	128252
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	58,
			"primary_score":	999794,
			"second_score":	128262
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	74,
			"primary_score":	999796,
			"second_score":	128277
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	79,
			"primary_score":	999831,
			"second_score":	131345
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	84,
			"primary_score":	999839,
			"second_score":	128281
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	86,
			"primary_score":	999839,
			"second_score":	128280
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	87,
			"primary_score":	999839,
			"second_score":	128279
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	88,
			"primary_score":	999839,
			"second_score":	128278
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	89,
			"primary_score":	999839,
			"second_score":	128276
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	92,
			"primary_score":	999839,
			"second_score":	128275
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	93,
			"primary_score":	999839,
			"second_score":	128263
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	94,
			"primary_score":	999839,
			"second_score":	128251
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	95,
			"primary_score":	999839,
			"second_score":	128250
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	97,
			"primary_score":	999839,
			"second_score":	128249
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	98,
			"primary_score":	999990,
			"second_score":	128248
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	99,
			"primary_score":	999990,
			"second_score":	128247
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	102,
			"primary_score":	999994,
			"second_score":	128246
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	108,
			"primary_score":	999839,
			"second_score":	128245
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	119,
			"primary_score":	999839,
			"second_score":	128244
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	153,
			"primary_score":	999835,
			"second_score":	131346
		}, {
			"file":	"ext/date/lib/dow.c",
			"line":	156,
			"primary_score":	999837,
			"second_score":	131344
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	437,
			"primary_score":	999818,
			"second_score":	131466
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	438,
			"primary_score":	999818,
			"second_score":	131465
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	440,
			"primary_score":	999818,
			"second_score":	131464
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	445,
			"primary_score":	999824,
			"second_score":	131398
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	446,
			"primary_score":	999824,
			"second_score":	131397
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	447,
			"primary_score":	999824,
			"second_score":	131396
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	449,
			"primary_score":	999824,
			"second_score":	131395
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	450,
			"primary_score":	999844,
			"second_score":	131394
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	453,
			"primary_score":	999844,
			"second_score":	131393
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	455,
			"primary_score":	999824,
			"second_score":	131392
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	456,
			"primary_score":	999824,
			"second_score":	131391
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	457,
			"primary_score":	999824,
			"second_score":	131384
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	458,
			"primary_score":	999824,
			"second_score":	131383
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	460,
			"primary_score":	999824,
			"second_score":	131382
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	461,
			"primary_score":	999824,
			"second_score":	131381
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	462,
			"primary_score":	999824,
			"second_score":	131380
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	463,
			"primary_score":	999824,
			"second_score":	131379
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	464,
			"primary_score":	999824,
			"second_score":	131378
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	465,
			"primary_score":	999824,
			"second_score":	131377
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	595,
			"primary_score":	999971,
			"second_score":	131455
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	596,
			"primary_score":	999971,
			"second_score":	131454
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	597,
			"primary_score":	999971,
			"second_score":	131453
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	598,
			"primary_score":	999971,
			"second_score":	131452
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	600,
			"primary_score":	999971,
			"second_score":	131451
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	601,
			"primary_score":	999971,
			"second_score":	131444
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	603,
			"primary_score":	999971,
			"second_score":	131443
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	604,
			"primary_score":	999971,
			"second_score":	131442
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	605,
			"primary_score":	999971,
			"second_score":	131441
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	607,
			"primary_score":	999971,
			"second_score":	131440
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	608,
			"primary_score":	999971,
			"second_score":	131402
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	609,
			"primary_score":	999971,
			"second_score":	131413
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	613,
			"primary_score":	999971,
			"second_score":	131401
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	614,
			"primary_score":	999971,
			"second_score":	131400
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	619,
			"primary_score":	999972,
			"second_score":	131457
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	622,
			"primary_score":	999972,
			"second_score":	131456
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	841,
			"primary_score":	999818,
			"second_score":	131368
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	842,
			"primary_score":	999818,
			"second_score":	131367
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	844,
			"primary_score":	999818,
			"second_score":	131366
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	846,
			"primary_score":	999818,
			"second_score":	131354
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	852,
			"primary_score":	999818,
			"second_score":	131353
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	853,
			"primary_score":	999818,
			"second_score":	131352
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	854,
			"primary_score":	999818,
			"second_score":	131351
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	856,
			"primary_score":	999818,
			"second_score":	131350
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	857,
			"primary_score":	999818,
			"second_score":	131360
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	858,
			"primary_score":	999818,
			"second_score":	131359
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	936,
			"primary_score":	999999,
			"second_score":	131527
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	937,
			"primary_score":	999999,
			"second_score":	131526
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	938,
			"primary_score":	999999,
			"second_score":	131520
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	941,
			"primary_score":	999999,
			"second_score":	131517
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	944,
			"primary_score":	999999,
			"second_score":	131516
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	947,
			"primary_score":	999999,
			"second_score":	131515
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	948,
			"primary_score":	999999,
			"second_score":	131514
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	1536,
			"primary_score":	999996,
			"second_score":	131541
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	2671,
			"primary_score":	999996,
			"second_score":	131492
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	3482,
			"primary_score":	999862,
			"second_score":	131502
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	3483,
			"primary_score":	999862,
			"second_score":	131501
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	3501,
			"primary_score":	999862,
			"second_score":	131500
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	3510,
			"primary_score":	999818,
			"second_score":	131358
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	3511,
			"primary_score":	999818,
			"second_score":	131357
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	3512,
			"primary_score":	999818,
			"second_score":	131355
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	6377,
			"primary_score":	999986,
			"second_score":	131479
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	6378,
			"primary_score":	999986,
			"second_score":	131478
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	6379,
			"primary_score":	999986,
			"second_score":	131477
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	6408,
			"primary_score":	999987,
			"second_score":	131476
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	6409,
			"primary_score":	999987,
			"second_score":	131475
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	8883,
			"primary_score":	999996,
			"second_score":	131469
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	8884,
			"primary_score":	999996,
			"second_score":	131468
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	8885,
			"primary_score":	999996,
			"second_score":	131462
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	8886,
			"primary_score":	999996,
			"second_score":	131458
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	8887,
			"primary_score":	999996,
			"second_score":	131399
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	8888,
			"primary_score":	999996,
			"second_score":	131376
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	8889,
			"primary_score":	999996,
			"second_score":	131375
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	8890,
			"primary_score":	999996,
			"second_score":	131371
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	8891,
			"primary_score":	999996,
			"second_score":	131370
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	8930,
			"primary_score":	999994,
			"second_score":	131474
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	8931,
			"primary_score":	999994,
			"second_score":	131473
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9007,
			"primary_score":	999999,
			"second_score":	131472
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9049,
			"primary_score":	999996,
			"second_score":	131471
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	9050,
			"primary_score":	999996,
			"second_score":	131470
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	11115,
			"primary_score":	999996,
			"second_score":	131481
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	11116,
			"primary_score":	999996,
			"second_score":	131480
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	13743,
			"primary_score":	999997,
			"second_score":	131491
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	13744,
			"primary_score":	999997,
			"second_score":	131490
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	13805,
			"primary_score":	999997,
			"second_score":	131489
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	13806,
			"primary_score":	999997,
			"second_score":	131488
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	13880,
			"primary_score":	999998,
			"second_score":	131487
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	13881,
			"primary_score":	999998,
			"second_score":	131486
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	13942,
			"primary_score":	999998,
			"second_score":	131485
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	13943,
			"primary_score":	999998,
			"second_score":	131484
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14004,
			"primary_score":	999998,
			"second_score":	131483
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	14005,
			"primary_score":	999998,
			"second_score":	131482
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	29099,
			"primary_score":	999999,
			"second_score":	131528
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	29348,
			"primary_score":	999996,
			"second_score":	131540
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	30155,
			"primary_score":	999996,
			"second_score":	131539
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	30329,
			"primary_score":	999996,
			"second_score":	131538
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	30387,
			"primary_score":	999996,
			"second_score":	131537
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	30388,
			"primary_score":	999996,
			"second_score":	131536
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	30448,
			"primary_score":	999996,
			"second_score":	131535
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	30455,
			"primary_score":	999999,
			"second_score":	131534
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	30462,
			"primary_score":	999999,
			"second_score":	131533
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	30469,
			"primary_score":	999999,
			"second_score":	131532
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	30470,
			"primary_score":	999999,
			"second_score":	131531
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	30478,
			"primary_score":	999999,
			"second_score":	131530
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	30485,
			"primary_score":	999999,
			"second_score":	131529
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39251,
			"primary_score":	999818,
			"second_score":	131588
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39252,
			"primary_score":	999818,
			"second_score":	131587
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39253,
			"primary_score":	999818,
			"second_score":	131586
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39255,
			"primary_score":	999818,
			"second_score":	131585
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39256,
			"primary_score":	999818,
			"second_score":	131584
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39257,
			"primary_score":	999818,
			"second_score":	131583
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39258,
			"primary_score":	999818,
			"second_score":	131582
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39259,
			"primary_score":	999818,
			"second_score":	131581
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39260,
			"primary_score":	999818,
			"second_score":	131580
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39262,
			"primary_score":	999818,
			"second_score":	131579
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39263,
			"primary_score":	999818,
			"second_score":	131578
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39266,
			"primary_score":	999818,
			"second_score":	131577
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39270,
			"primary_score":	999818,
			"second_score":	131576
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39282,
			"primary_score":	999818,
			"second_score":	131575
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39284,
			"primary_score":	999818,
			"second_score":	131574
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39285,
			"primary_score":	999818,
			"second_score":	131573
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39286,
			"primary_score":	999818,
			"second_score":	131572
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39287,
			"primary_score":	999818,
			"second_score":	131571
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39288,
			"primary_score":	999818,
			"second_score":	131570
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39289,
			"primary_score":	999818,
			"second_score":	131569
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39290,
			"primary_score":	999818,
			"second_score":	131565
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39291,
			"primary_score":	999818,
			"second_score":	131564
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39292,
			"primary_score":	999818,
			"second_score":	131563
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39293,
			"primary_score":	999818,
			"second_score":	131562
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39294,
			"primary_score":	999818,
			"second_score":	131561
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39295,
			"primary_score":	999818,
			"second_score":	131560
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39296,
			"primary_score":	999818,
			"second_score":	131559
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39297,
			"primary_score":	999818,
			"second_score":	131558
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39298,
			"primary_score":	999818,
			"second_score":	131557
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39299,
			"primary_score":	999818,
			"second_score":	131556
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39300,
			"primary_score":	999818,
			"second_score":	131555
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39301,
			"primary_score":	999818,
			"second_score":	131554
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39303,
			"primary_score":	999818,
			"second_score":	131553
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39304,
			"primary_score":	999818,
			"second_score":	131369
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39311,
			"primary_score":	999818,
			"second_score":	131348
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39315,
			"primary_score":	999818,
			"second_score":	131347
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39319,
			"primary_score":	999818,
			"second_score":	131343
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39320,
			"primary_score":	999818,
			"second_score":	131342
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39321,
			"primary_score":	999818,
			"second_score":	131341
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39325,
			"primary_score":	999818,
			"second_score":	131340
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39658,
			"primary_score":	999823,
			"second_score":	130939
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39659,
			"primary_score":	999965,
			"second_score":	130938
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39660,
			"primary_score":	999965,
			"second_score":	130937
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39661,
			"primary_score":	999965,
			"second_score":	130936
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39662,
			"primary_score":	999965,
			"second_score":	130935
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39664,
			"primary_score":	999823,
			"second_score":	130934
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39665,
			"primary_score":	999823,
			"second_score":	130933
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39666,
			"primary_score":	999823,
			"second_score":	130932
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39667,
			"primary_score":	999823,
			"second_score":	130931
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39668,
			"primary_score":	999823,
			"second_score":	130930
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39669,
			"primary_score":	999823,
			"second_score":	130929
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39670,
			"primary_score":	999823,
			"second_score":	130928
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39671,
			"primary_score":	999857,
			"second_score":	130926
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39672,
			"primary_score":	999848,
			"second_score":	130924
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39674,
			"primary_score":	999823,
			"second_score":	130923
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39675,
			"primary_score":	999832,
			"second_score":	130922
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39677,
			"primary_score":	999823,
			"second_score":	130921
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39678,
			"primary_score":	999826,
			"second_score":	130920
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39680,
			"primary_score":	999823,
			"second_score":	130919
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39681,
			"primary_score":	999854,
			"second_score":	130918
		}, {
			"file":	"ext/date/lib/parse_date.c",
			"line":	39684,
			"primary_score":	999854,
			"second_score":	130917
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	129,
			"primary_score":	999992,
			"second_score":	149793
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	130,
			"primary_score":	999992,
			"second_score":	149792
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	132,
			"primary_score":	999992,
			"second_score":	149791
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	137,
			"primary_score":	999992,
			"second_score":	149780
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	138,
			"primary_score":	999992,
			"second_score":	149779
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	139,
			"primary_score":	999992,
			"second_score":	149778
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	141,
			"primary_score":	999992,
			"second_score":	149777
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	147,
			"primary_score":	999992,
			"second_score":	149776
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	148,
			"primary_score":	999992,
			"second_score":	149775
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	149,
			"primary_score":	999992,
			"second_score":	149774
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	150,
			"primary_score":	999992,
			"second_score":	149773
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	152,
			"primary_score":	999992,
			"second_score":	149772
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	153,
			"primary_score":	999992,
			"second_score":	149771
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	154,
			"primary_score":	999992,
			"second_score":	149770
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	155,
			"primary_score":	999992,
			"second_score":	149769
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	156,
			"primary_score":	999992,
			"second_score":	149768
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	157,
			"primary_score":	999992,
			"second_score":	149767
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	162,
			"primary_score":	999993,
			"second_score":	149784
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	164,
			"primary_score":	999993,
			"second_score":	149783
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	171,
			"primary_score":	999993,
			"second_score":	149782
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	178,
			"primary_score":	999993,
			"second_score":	149781
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	280,
			"primary_score":	999991,
			"second_score":	149759
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	281,
			"primary_score":	999991,
			"second_score":	149758
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	283,
			"primary_score":	999991,
			"second_score":	149757
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	285,
			"primary_score":	999991,
			"second_score":	149738
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	291,
			"primary_score":	999991,
			"second_score":	149737
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	292,
			"primary_score":	999991,
			"second_score":	149736
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	293,
			"primary_score":	999991,
			"second_score":	149735
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	294,
			"primary_score":	999991,
			"second_score":	149734
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	329,
			"primary_score":	999991,
			"second_score":	149733
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	330,
			"primary_score":	999991,
			"second_score":	149732
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	331,
			"primary_score":	999991,
			"second_score":	149749
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	332,
			"primary_score":	999991,
			"second_score":	149748
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	333,
			"primary_score":	999991,
			"second_score":	149747
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	334,
			"primary_score":	999991,
			"second_score":	149746
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	344,
			"primary_score":	999991,
			"second_score":	149815
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	350,
			"primary_score":	999993,
			"second_score":	149813
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	375,
			"primary_score":	999993,
			"second_score":	149812
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	376,
			"primary_score":	999993,
			"second_score":	149811
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	377,
			"primary_score":	999993,
			"second_score":	149810
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	378,
			"primary_score":	999993,
			"second_score":	149809
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	383,
			"primary_score":	999993,
			"second_score":	149799
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	384,
			"primary_score":	999993,
			"second_score":	149798
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	385,
			"primary_score":	999993,
			"second_score":	149797
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	386,
			"primary_score":	999993,
			"second_score":	149796
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	387,
			"primary_score":	999993,
			"second_score":	149795
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	388,
			"primary_score":	999993,
			"second_score":	149789
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	389,
			"primary_score":	999993,
			"second_score":	149788
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	390,
			"primary_score":	999993,
			"second_score":	149787
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	394,
			"primary_score":	999993,
			"second_score":	149786
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	399,
			"primary_score":	999993,
			"second_score":	149785
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	400,
			"primary_score":	999993,
			"second_score":	149766
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	403,
			"primary_score":	999993,
			"second_score":	149765
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	417,
			"primary_score":	999993,
			"second_score":	149764
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	419,
			"primary_score":	999993,
			"second_score":	149763
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	420,
			"primary_score":	999993,
			"second_score":	149762
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	421,
			"primary_score":	999993,
			"second_score":	149761
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	435,
			"primary_score":	999991,
			"second_score":	149744
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	436,
			"primary_score":	999991,
			"second_score":	149743
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	438,
			"primary_score":	999991,
			"second_score":	149742
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	439,
			"primary_score":	999991,
			"second_score":	149741
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	440,
			"primary_score":	999991,
			"second_score":	149739
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	449,
			"primary_score":	999993,
			"second_score":	149807
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	450,
			"primary_score":	999993,
			"second_score":	149806
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	451,
			"primary_score":	999994,
			"second_score":	149805
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	454,
			"primary_score":	999995,
			"second_score":	149804
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	540,
			"primary_score":	999993,
			"second_score":	149802
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	541,
			"primary_score":	999993,
			"second_score":	149801
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	542,
			"primary_score":	999994,
			"second_score":	149800
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1047,
			"primary_score":	999991,
			"second_score":	149893
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1048,
			"primary_score":	999991,
			"second_score":	149892
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1049,
			"primary_score":	999991,
			"second_score":	149891
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1051,
			"primary_score":	999991,
			"second_score":	149890
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1052,
			"primary_score":	999991,
			"second_score":	149889
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1053,
			"primary_score":	999991,
			"second_score":	149888
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1054,
			"primary_score":	999991,
			"second_score":	149887
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1055,
			"primary_score":	999991,
			"second_score":	149886
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1056,
			"primary_score":	999991,
			"second_score":	149885
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1058,
			"primary_score":	999991,
			"second_score":	149884
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1059,
			"primary_score":	999991,
			"second_score":	149883
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1062,
			"primary_score":	999991,
			"second_score":	149882
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1066,
			"primary_score":	999991,
			"second_score":	149881
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1075,
			"primary_score":	999991,
			"second_score":	149880
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1078,
			"primary_score":	999991,
			"second_score":	149879
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1079,
			"primary_score":	999991,
			"second_score":	149878
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1080,
			"primary_score":	999991,
			"second_score":	149877
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1081,
			"primary_score":	999991,
			"second_score":	149876
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1082,
			"primary_score":	999991,
			"second_score":	149875
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1085,
			"primary_score":	999991,
			"second_score":	149874
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1086,
			"primary_score":	999991,
			"second_score":	149870
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1087,
			"primary_score":	999991,
			"second_score":	149869
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1088,
			"primary_score":	999991,
			"second_score":	149868
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1089,
			"primary_score":	999991,
			"second_score":	149867
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1090,
			"primary_score":	999991,
			"second_score":	149866
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1091,
			"primary_score":	999991,
			"second_score":	149865
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1092,
			"primary_score":	999991,
			"second_score":	149864
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1093,
			"primary_score":	999991,
			"second_score":	149863
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1094,
			"primary_score":	999991,
			"second_score":	149862
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1095,
			"primary_score":	999991,
			"second_score":	149861
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1096,
			"primary_score":	999991,
			"second_score":	149860
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1098,
			"primary_score":	999991,
			"second_score":	149859
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1099,
			"primary_score":	999991,
			"second_score":	149855
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1100,
			"primary_score":	999991,
			"second_score":	149854
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1101,
			"primary_score":	999991,
			"second_score":	149853
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1102,
			"primary_score":	999991,
			"second_score":	149852
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1103,
			"primary_score":	999991,
			"second_score":	149851
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1104,
			"primary_score":	999991,
			"second_score":	149850
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1105,
			"primary_score":	999991,
			"second_score":	149849
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1106,
			"primary_score":	999991,
			"second_score":	149848
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1107,
			"primary_score":	999991,
			"second_score":	149847
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1108,
			"primary_score":	999991,
			"second_score":	149846
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1109,
			"primary_score":	999991,
			"second_score":	149845
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1111,
			"primary_score":	999991,
			"second_score":	149844
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1112,
			"primary_score":	999991,
			"second_score":	149840
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1113,
			"primary_score":	999991,
			"second_score":	149839
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1114,
			"primary_score":	999991,
			"second_score":	149838
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1115,
			"primary_score":	999991,
			"second_score":	149837
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1116,
			"primary_score":	999991,
			"second_score":	149836
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1117,
			"primary_score":	999991,
			"second_score":	149835
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1118,
			"primary_score":	999991,
			"second_score":	149834
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1119,
			"primary_score":	999991,
			"second_score":	149833
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1120,
			"primary_score":	999991,
			"second_score":	149832
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1121,
			"primary_score":	999991,
			"second_score":	149831
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1123,
			"primary_score":	999991,
			"second_score":	149830
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1125,
			"primary_score":	999991,
			"second_score":	149829
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1126,
			"primary_score":	999991,
			"second_score":	149760
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1132,
			"primary_score":	999991,
			"second_score":	149730
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1133,
			"primary_score":	999991,
			"second_score":	149729
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1134,
			"primary_score":	999991,
			"second_score":	149728
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1138,
			"primary_score":	999991,
			"second_score":	149727
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1141,
			"primary_score":	999993,
			"second_score":	149726
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1143,
			"primary_score":	999991,
			"second_score":	149719
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1146,
			"primary_score":	999991,
			"second_score":	149718
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1148,
			"primary_score":	999991,
			"second_score":	149711
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1149,
			"primary_score":	999993,
			"second_score":	149710
		}, {
			"file":	"ext/date/lib/parse_iso_intervals.c",
			"line":	1153,
			"primary_score":	999991,
			"second_score":	149709
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	55,
			"primary_score":	999713,
			"second_score":	148131
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	58,
			"primary_score":	999713,
			"second_score":	148130
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	59,
			"primary_score":	999713,
			"second_score":	148129
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	62,
			"primary_score":	999713,
			"second_score":	148128
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	63,
			"primary_score":	999713,
			"second_score":	148127
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	64,
			"primary_score":	999713,
			"second_score":	148126
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	67,
			"primary_score":	999713,
			"second_score":	148125
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	72,
			"primary_score":	999713,
			"second_score":	148123
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	74,
			"primary_score":	999713,
			"second_score":	148122
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	75,
			"primary_score":	999713,
			"second_score":	148121
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	76,
			"primary_score":	999713,
			"second_score":	148120
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	77,
			"primary_score":	999713,
			"second_score":	148119
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	78,
			"primary_score":	999713,
			"second_score":	148118
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	79,
			"primary_score":	999713,
			"second_score":	148117
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	80,
			"primary_score":	999713,
			"second_score":	148116
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	81,
			"primary_score":	999713,
			"second_score":	148115
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	86,
			"primary_score":	999713,
			"second_score":	148113
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	87,
			"primary_score":	999713,
			"second_score":	148112
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	88,
			"primary_score":	999713,
			"second_score":	148111
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	90,
			"primary_score":	999713,
			"second_score":	148110
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	109,
			"primary_score":	999713,
			"second_score":	148109
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	110,
			"primary_score":	999713,
			"second_score":	148108
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	115,
			"primary_score":	999713,
			"second_score":	148106
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	116,
			"primary_score":	999713,
			"second_score":	148105
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	117,
			"primary_score":	999713,
			"second_score":	148104
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	119,
			"primary_score":	999713,
			"second_score":	148103
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	120,
			"primary_score":	999713,
			"second_score":	148102
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	123,
			"primary_score":	999713,
			"second_score":	148101
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	124,
			"primary_score":	999713,
			"second_score":	148100
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	126,
			"primary_score":	999713,
			"second_score":	148099
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	127,
			"primary_score":	999713,
			"second_score":	148098
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	131,
			"primary_score":	999713,
			"second_score":	148097
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	132,
			"primary_score":	999713,
			"second_score":	148096
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	133,
			"primary_score":	999713,
			"second_score":	148095
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	134,
			"primary_score":	999713,
			"second_score":	148094
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	135,
			"primary_score":	999713,
			"second_score":	148093
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	137,
			"primary_score":	999713,
			"second_score":	148092
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	139,
			"primary_score":	999713,
			"second_score":	148091
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	140,
			"primary_score":	999713,
			"second_score":	148090
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	143,
			"primary_score":	999713,
			"second_score":	148089
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	144,
			"primary_score":	999713,
			"second_score":	148088
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	146,
			"primary_score":	999713,
			"second_score":	148087
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	165,
			"primary_score":	999713,
			"second_score":	148086
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	166,
			"primary_score":	999713,
			"second_score":	148085
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	167,
			"primary_score":	999713,
			"second_score":	148084
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	170,
			"primary_score":	999713,
			"second_score":	148083
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	171,
			"primary_score":	999713,
			"second_score":	148082
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	173,
			"primary_score":	999713,
			"second_score":	148081
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	174,
			"primary_score":	999713,
			"second_score":	148080
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	176,
			"primary_score":	999713,
			"second_score":	148079
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	179,
			"primary_score":	999713,
			"second_score":	148078
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	180,
			"primary_score":	999713,
			"second_score":	148077
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	181,
			"primary_score":	999713,
			"second_score":	148076
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	184,
			"primary_score":	999713,
			"second_score":	148075
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	185,
			"primary_score":	999713,
			"second_score":	148074
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	187,
			"primary_score":	999713,
			"second_score":	148073
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	188,
			"primary_score":	999713,
			"second_score":	148072
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	190,
			"primary_score":	999713,
			"second_score":	148071
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	196,
			"primary_score":	999713,
			"second_score":	148069
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	197,
			"primary_score":	999713,
			"second_score":	148068
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	199,
			"primary_score":	999713,
			"second_score":	148067
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	200,
			"primary_score":	999713,
			"second_score":	148066
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	201,
			"primary_score":	999713,
			"second_score":	148065
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	202,
			"primary_score":	999713,
			"second_score":	148064
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	203,
			"primary_score":	999713,
			"second_score":	148063
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	204,
			"primary_score":	999713,
			"second_score":	148062
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	205,
			"primary_score":	999713,
			"second_score":	148061
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	207,
			"primary_score":	999713,
			"second_score":	148060
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	208,
			"primary_score":	999713,
			"second_score":	148059
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	209,
			"primary_score":	999713,
			"second_score":	148058
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	210,
			"primary_score":	999713,
			"second_score":	148057
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	258,
			"primary_score":	999668,
			"second_score":	131311
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	260,
			"primary_score":	999668,
			"second_score":	131310
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	262,
			"primary_score":	999668,
			"second_score":	131309
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	263,
			"primary_score":	999668,
			"second_score":	131308
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	264,
			"primary_score":	999668,
			"second_score":	131307
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	266,
			"primary_score":	999668,
			"second_score":	131306
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	269,
			"primary_score":	999668,
			"second_score":	131305
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	270,
			"primary_score":	999668,
			"second_score":	131265
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	271,
			"primary_score":	999668,
			"second_score":	131264
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	273,
			"primary_score":	999668,
			"second_score":	131263
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	274,
			"primary_score":	999669,
			"second_score":	131266
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	275,
			"primary_score":	999669,
			"second_score":	131262
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	276,
			"primary_score":	999669,
			"second_score":	131270
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	278,
			"primary_score":	999670,
			"second_score":	131261
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	280,
			"primary_score":	999670,
			"second_score":	131260
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	281,
			"primary_score":	999670,
			"second_score":	131259
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	283,
			"primary_score":	999670,
			"second_score":	131257
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	297,
			"primary_score":	999665,
			"second_score":	131254
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	308,
			"primary_score":	999674,
			"second_score":	131313
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	309,
			"primary_score":	999674,
			"second_score":	131312
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	314,
			"primary_score":	999711,
			"second_score":	148195
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	315,
			"primary_score":	999711,
			"second_score":	148194
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	317,
			"primary_score":	999711,
			"second_score":	148193
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	318,
			"primary_score":	999713,
			"second_score":	148137
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	320,
			"primary_score":	999713,
			"second_score":	148132
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	321,
			"primary_score":	999713,
			"second_score":	148124
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	322,
			"primary_score":	999713,
			"second_score":	148114
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	323,
			"primary_score":	999713,
			"second_score":	148107
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	324,
			"primary_score":	999713,
			"second_score":	148070
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	329,
			"primary_score":	999711,
			"second_score":	148056
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	334,
			"primary_score":	999730,
			"second_score":	128299
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	338,
			"primary_score":	999730,
			"second_score":	128298
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	339,
			"primary_score":	999887,
			"second_score":	128297
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	340,
			"primary_score":	999887,
			"second_score":	128296
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	341,
			"primary_score":	999887,
			"second_score":	128295
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	378,
			"primary_score":	999730,
			"second_score":	128289
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	380,
			"primary_score":	999730,
			"second_score":	128288
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	381,
			"primary_score":	999730,
			"second_score":	128287
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	405,
			"primary_score":	999730,
			"second_score":	128309
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	406,
			"primary_score":	999730,
			"second_score":	128308
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	407,
			"primary_score":	999730,
			"second_score":	128307
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	408,
			"primary_score":	999730,
			"second_score":	128306
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	409,
			"primary_score":	999730,
			"second_score":	128305
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	410,
			"primary_score":	999730,
			"second_score":	128301
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	412,
			"primary_score":	999730,
			"second_score":	128300
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	413,
			"primary_score":	999730,
			"second_score":	128294
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	414,
			"primary_score":	999730,
			"second_score":	128293
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	415,
			"primary_score":	999730,
			"second_score":	128292
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	416,
			"primary_score":	999730,
			"second_score":	128291
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	424,
			"primary_score":	999730,
			"second_score":	128290
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	428,
			"primary_score":	999730,
			"second_score":	128286
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	429,
			"primary_score":	999730,
			"second_score":	128285
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	430,
			"primary_score":	999730,
			"second_score":	128284
		}, {
			"file":	"ext/date/lib/parse_tz.c",
			"line":	432,
			"primary_score":	999730,
			"second_score":	128283
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	35,
			"primary_score":	999692,
			"second_score":	131227
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	36,
			"primary_score":	999692,
			"second_score":	131226
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	38,
			"primary_score":	999692,
			"second_score":	131225
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	43,
			"primary_score":	999988,
			"second_score":	149843
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	44,
			"primary_score":	999988,
			"second_score":	149842
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	46,
			"primary_score":	999988,
			"second_score":	149841
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	71,
			"primary_score":	999731,
			"second_score":	130972
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	73,
			"primary_score":	999731,
			"second_score":	130971
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	74,
			"primary_score":	999731,
			"second_score":	130969
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	75,
			"primary_score":	999731,
			"second_score":	130968
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	76,
			"primary_score":	999731,
			"second_score":	130957
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	82,
			"primary_score":	999731,
			"second_score":	121923
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	83,
			"primary_score":	999692,
			"second_score":	121920
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	88,
			"primary_score":	999988,
			"second_score":	121436
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	93,
			"primary_score":	999729,
			"second_score":	128304
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	94,
			"primary_score":	999729,
			"second_score":	128303
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	96,
			"primary_score":	999729,
			"second_score":	128302
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	101,
			"primary_score":	999729,
			"second_score":	127279
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	102,
			"primary_score":	999729,
			"second_score":	127275
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	107,
			"primary_score":	999713,
			"second_score":	148136
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	108,
			"primary_score":	999713,
			"second_score":	148135
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	109,
			"primary_score":	999713,
			"second_score":	148134
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	111,
			"primary_score":	999713,
			"second_score":	148133
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	143,
			"primary_score":	999714,
			"second_score":	120583
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	144,
			"primary_score":	999714,
			"second_score":	120579
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	145,
			"primary_score":	999714,
			"second_score":	120577
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	146,
			"primary_score":	999714,
			"second_score":	120575
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	147,
			"primary_score":	999714,
			"second_score":	120571
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	148,
			"primary_score":	999714,
			"second_score":	120567
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	149,
			"primary_score":	999714,
			"second_score":	120565
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	150,
			"primary_score":	999714,
			"second_score":	120561
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	151,
			"primary_score":	999714,
			"second_score":	120557
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	164,
			"primary_score":	999809,
			"second_score":	120493
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	166,
			"primary_score":	999809,
			"second_score":	120492
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	169,
			"primary_score":	999809,
			"second_score":	120491
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	170,
			"primary_score":	999809,
			"second_score":	120490
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	173,
			"primary_score":	999809,
			"second_score":	120489
		}, {
			"file":	"ext/date/lib/timelib.c",
			"line":	174,
			"primary_score":	999809,
			"second_score":	120488
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	33,
			"primary_score":	999729,
			"second_score":	129319
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	37,
			"primary_score":	999729,
			"second_score":	129318
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	41,
			"primary_score":	999729,
			"second_score":	129317
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	106,
			"primary_score":	999729,
			"second_score":	129340
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	107,
			"primary_score":	999729,
			"second_score":	129339
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	108,
			"primary_score":	999729,
			"second_score":	129338
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	109,
			"primary_score":	999729,
			"second_score":	129337
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	112,
			"primary_score":	999729,
			"second_score":	129336
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	117,
			"primary_score":	999729,
			"second_score":	129335
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	119,
			"primary_score":	999729,
			"second_score":	129331
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	120,
			"primary_score":	999729,
			"second_score":	129330
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	121,
			"primary_score":	999729,
			"second_score":	129329
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	123,
			"primary_score":	999729,
			"second_score":	129328
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	124,
			"primary_score":	999895,
			"second_score":	129327
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	125,
			"primary_score":	999895,
			"second_score":	129326
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	129,
			"primary_score":	999729,
			"second_score":	129325
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	130,
			"primary_score":	999729,
			"second_score":	129324
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	132,
			"primary_score":	999729,
			"second_score":	129323
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	137,
			"primary_score":	999729,
			"second_score":	129322
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	142,
			"primary_score":	999729,
			"second_score":	129321
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	184,
			"primary_score":	999729,
			"second_score":	129357
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	185,
			"primary_score":	999729,
			"second_score":	129353
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	186,
			"primary_score":	999729,
			"second_score":	129349
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	187,
			"primary_score":	999729,
			"second_score":	129345
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	189,
			"primary_score":	999729,
			"second_score":	129341
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	190,
			"primary_score":	999729,
			"second_score":	129320
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	195,
			"primary_score":	999729,
			"second_score":	129454
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	198,
			"primary_score":	999729,
			"second_score":	129453
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	200,
			"primary_score":	999729,
			"second_score":	129411
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	201,
			"primary_score":	999937,
			"second_score":	129410
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	202,
			"primary_score":	999937,
			"second_score":	129409
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	203,
			"primary_score":	999937,
			"second_score":	129408
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	205,
			"primary_score":	999937,
			"second_score":	129407
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	206,
			"primary_score":	999937,
			"second_score":	129406
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	207,
			"primary_score":	999937,
			"second_score":	129405
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	209,
			"primary_score":	999729,
			"second_score":	129404
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	212,
			"primary_score":	999999,
			"second_score":	129403
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	218,
			"primary_score":	999729,
			"second_score":	129402
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	276,
			"primary_score":	999729,
			"second_score":	129359
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	283,
			"primary_score":	999729,
			"second_score":	129358
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	284,
			"primary_score":	999729,
			"second_score":	129316
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	289,
			"primary_score":	999729,
			"second_score":	129498
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	303,
			"primary_score":	999729,
			"second_score":	129497
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	308,
			"primary_score":	999729,
			"second_score":	129314
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	309,
			"primary_score":	999729,
			"second_score":	129313
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	310,
			"primary_score":	999729,
			"second_score":	129312
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	312,
			"primary_score":	999729,
			"second_score":	129311
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	313,
			"primary_score":	999729,
			"second_score":	129310
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	318,
			"primary_score":	999729,
			"second_score":	129309
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	319,
			"primary_score":	999738,
			"second_score":	129308
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	320,
			"primary_score":	999739,
			"second_score":	129227
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	321,
			"primary_score":	999739,
			"second_score":	129230
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	323,
			"primary_score":	999739,
			"second_score":	129226
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	335,
			"primary_score":	999729,
			"second_score":	129225
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	340,
			"primary_score":	999729,
			"second_score":	129223
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	343,
			"primary_score":	999808,
			"second_score":	129222
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	349,
			"primary_score":	999729,
			"second_score":	129220
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	354,
			"primary_score":	999729,
			"second_score":	129218
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	356,
			"primary_score":	999729,
			"second_score":	129217
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	357,
			"primary_score":	999729,
			"second_score":	129216
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	358,
			"primary_score":	999729,
			"second_score":	129215
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	359,
			"primary_score":	999729,
			"second_score":	129214
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	364,
			"primary_score":	999729,
			"second_score":	129211
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	386,
			"primary_score":	999779,
			"second_score":	129210
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	389,
			"primary_score":	999779,
			"second_score":	129209
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	390,
			"primary_score":	999779,
			"second_score":	129208
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	391,
			"primary_score":	999779,
			"second_score":	129207
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	393,
			"primary_score":	999779,
			"second_score":	129206
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	394,
			"primary_score":	999779,
			"second_score":	129205
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	395,
			"primary_score":	999779,
			"second_score":	129177
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	396,
			"primary_score":	999779,
			"second_score":	129149
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	398,
			"primary_score":	999779,
			"second_score":	129102
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	403,
			"primary_score":	999779,
			"second_score":	129101
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	406,
			"primary_score":	999779,
			"second_score":	129100
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	408,
			"primary_score":	999779,
			"second_score":	129099
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	409,
			"primary_score":	999779,
			"second_score":	129090
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	411,
			"primary_score":	999779,
			"second_score":	129081
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	412,
			"primary_score":	999779,
			"second_score":	129080
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	414,
			"primary_score":	999779,
			"second_score":	129079
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	415,
			"primary_score":	999779,
			"second_score":	129051
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	417,
			"primary_score":	999779,
			"second_score":	129050
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	418,
			"primary_score":	999779,
			"second_score":	129049
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	419,
			"primary_score":	999779,
			"second_score":	129048
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	421,
			"primary_score":	999779,
			"second_score":	129047
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	422,
			"primary_score":	999779,
			"second_score":	129046
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	424,
			"primary_score":	999779,
			"second_score":	129037
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	432,
			"primary_score":	999729,
			"second_score":	129500
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	434,
			"primary_score":	999729,
			"second_score":	129499
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	435,
			"primary_score":	999729,
			"second_score":	129455
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	436,
			"primary_score":	999729,
			"second_score":	129360
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	437,
			"primary_score":	999729,
			"second_score":	129315
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	438,
			"primary_score":	999729,
			"second_score":	129224
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	439,
			"primary_score":	999729,
			"second_score":	129221
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	440,
			"primary_score":	999729,
			"second_score":	129219
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	441,
			"primary_score":	999729,
			"second_score":	129213
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	443,
			"primary_score":	999729,
			"second_score":	129212
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	444,
			"primary_score":	999729,
			"second_score":	129036
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	446,
			"primary_score":	999729,
			"second_score":	129035
		}, {
			"file":	"ext/date/lib/tm2unixtime.c",
			"line":	447,
			"primary_score":	999729,
			"second_score":	129034
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	42,
			"primary_score":	999704,
			"second_score":	128999
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	43,
			"primary_score":	999704,
			"second_score":	128998
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	44,
			"primary_score":	999704,
			"second_score":	128997
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	45,
			"primary_score":	999704,
			"second_score":	128996
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	46,
			"primary_score":	999704,
			"second_score":	128995
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	48,
			"primary_score":	999704,
			"second_score":	128994
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	49,
			"primary_score":	999704,
			"second_score":	128993
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	50,
			"primary_score":	999704,
			"second_score":	128992
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	54,
			"primary_score":	999704,
			"second_score":	128991
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	56,
			"primary_score":	999704,
			"second_score":	128989
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	57,
			"primary_score":	999704,
			"second_score":	128988
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	59,
			"primary_score":	999704,
			"second_score":	128987
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	64,
			"primary_score":	999704,
			"second_score":	128986
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	65,
			"primary_score":	999717,
			"second_score":	128865
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	66,
			"primary_score":	999717,
			"second_score":	128864
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	67,
			"primary_score":	999717,
			"second_score":	128872
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	69,
			"primary_score":	999717,
			"second_score":	128863
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	101,
			"primary_score":	999704,
			"second_score":	128862
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	103,
			"primary_score":	999704,
			"second_score":	128860
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	104,
			"primary_score":	999704,
			"second_score":	128859
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	107,
			"primary_score":	999704,
			"second_score":	128858
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	108,
			"primary_score":	999704,
			"second_score":	128857
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	109,
			"primary_score":	999704,
			"second_score":	128816
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	110,
			"primary_score":	999704,
			"second_score":	128814
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	111,
			"primary_score":	999711,
			"second_score":	130997
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	113,
			"primary_score":	999704,
			"second_score":	128813
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	115,
			"primary_score":	999704,
			"second_score":	128812
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	118,
			"primary_score":	999704,
			"second_score":	128810
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	119,
			"primary_score":	999704,
			"second_score":	128809
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	120,
			"primary_score":	999704,
			"second_score":	128808
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	121,
			"primary_score":	999704,
			"second_score":	128807
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	123,
			"primary_score":	999704,
			"second_score":	128805
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	124,
			"primary_score":	999704,
			"second_score":	128804
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	125,
			"primary_score":	999704,
			"second_score":	128803
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	126,
			"primary_score":	999704,
			"second_score":	128802
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	127,
			"primary_score":	999704,
			"second_score":	128801
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	128,
			"primary_score":	999704,
			"second_score":	128800
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	129,
			"primary_score":	999704,
			"second_score":	128799
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	130,
			"primary_score":	999704,
			"second_score":	128798
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	131,
			"primary_score":	999704,
			"second_score":	128797
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	132,
			"primary_score":	999704,
			"second_score":	128796
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	133,
			"primary_score":	999704,
			"second_score":	128795
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	134,
			"primary_score":	999704,
			"second_score":	128794
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	139,
			"primary_score":	999981,
			"second_score":	129032
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	141,
			"primary_score":	999981,
			"second_score":	129031
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	143,
			"primary_score":	999981,
			"second_score":	129030
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	157,
			"primary_score":	999983,
			"second_score":	129029
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	159,
			"primary_score":	999983,
			"second_score":	129028
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	160,
			"primary_score":	999983,
			"second_score":	129000
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	161,
			"primary_score":	999983,
			"second_score":	128793
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	163,
			"primary_score":	999983,
			"second_score":	128784
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	172,
			"primary_score":	999981,
			"second_score":	128783
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	173,
			"primary_score":	999981,
			"second_score":	128782
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	178,
			"primary_score":	999732,
			"second_score":	131220
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	179,
			"primary_score":	999732,
			"second_score":	131219
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	181,
			"primary_score":	999732,
			"second_score":	131218
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	196,
			"primary_score":	999732,
			"second_score":	131190
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	199,
			"primary_score":	999732,
			"second_score":	130977
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	200,
			"primary_score":	999732,
			"second_score":	130976
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	201,
			"primary_score":	999732,
			"second_score":	130975
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	202,
			"primary_score":	999732,
			"second_score":	130974
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	204,
			"primary_score":	999732,
			"second_score":	130973
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	205,
			"primary_score":	999732,
			"second_score":	130952
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	206,
			"primary_score":	999732,
			"second_score":	130943
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	214,
			"primary_score":	999732,
			"second_score":	130942
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	215,
			"primary_score":	999732,
			"second_score":	130941
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	220,
			"primary_score":	999778,
			"second_score":	129148
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	222,
			"primary_score":	999778,
			"second_score":	129147
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	223,
			"primary_score":	999778,
			"second_score":	129119
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	230,
			"primary_score":	999778,
			"second_score":	129118
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	231,
			"primary_score":	999778,
			"second_score":	129117
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	232,
			"primary_score":	999778,
			"second_score":	129116
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	233,
			"primary_score":	999778,
			"second_score":	129115
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	235,
			"primary_score":	999778,
			"second_score":	129114
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	236,
			"primary_score":	999778,
			"second_score":	129113
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	238,
			"primary_score":	999778,
			"second_score":	129104
		}, {
			"file":	"ext/date/lib/unixtime2tm.c",
			"line":	239,
			"primary_score":	999778,
			"second_score":	129103
		}, {
			"file":	"ext/date/php_date.c",
			"line":	39,
			"primary_score":	999877,
			"second_score":	128240
		}, {
			"file":	"ext/date/php_date.c",
			"line":	604,
			"primary_score":	999714,
			"second_score":	120585
		}, {
			"file":	"ext/date/php_date.c",
			"line":	606,
			"primary_score":	999714,
			"second_score":	120584
		}, {
			"file":	"ext/date/php_date.c",
			"line":	626,
			"primary_score":	999632,
			"second_score":	120598
		}, {
			"file":	"ext/date/php_date.c",
			"line":	629,
			"primary_score":	999632,
			"second_score":	120597
		}, {
			"file":	"ext/date/php_date.c",
			"line":	630,
			"primary_score":	999632,
			"second_score":	120596
		}, {
			"file":	"ext/date/php_date.c",
			"line":	631,
			"primary_score":	999712,
			"second_score":	120595
		}, {
			"file":	"ext/date/php_date.c",
			"line":	632,
			"primary_score":	999712,
			"second_score":	120515
		}, {
			"file":	"ext/date/php_date.c",
			"line":	633,
			"primary_score":	999712,
			"second_score":	120496
		}, {
			"file":	"ext/date/php_date.c",
			"line":	635,
			"primary_score":	999632,
			"second_score":	120499
		}, {
			"file":	"ext/date/php_date.c",
			"line":	636,
			"primary_score":	999889,
			"second_score":	120494
		}, {
			"file":	"ext/date/php_date.c",
			"line":	637,
			"primary_score":	999889,
			"second_score":	120487
		}, {
			"file":	"ext/date/php_date.c",
			"line":	640,
			"primary_score":	999632,
			"second_score":	120498
		}, {
			"file":	"ext/date/php_date.c",
			"line":	789,
			"primary_score":	999632,
			"second_score":	54383
		}, {
			"file":	"ext/date/php_date.c",
			"line":	791,
			"primary_score":	999632,
			"second_score":	53704
		}, {
			"file":	"ext/date/php_date.c",
			"line":	795,
			"primary_score":	999632,
			"second_score":	53703
		}, {
			"file":	"ext/date/php_date.c",
			"line":	818,
			"primary_score":	999712,
			"second_score":	131253
		}, {
			"file":	"ext/date/php_date.c",
			"line":	820,
			"primary_score":	999712,
			"second_score":	131252
		}, {
			"file":	"ext/date/php_date.c",
			"line":	821,
			"primary_score":	999712,
			"second_score":	148335
		}, {
			"file":	"ext/date/php_date.c",
			"line":	822,
			"primary_score":	999712,
			"second_score":	148232
		}, {
			"file":	"ext/date/php_date.c",
			"line":	825,
			"primary_score":	999712,
			"second_score":	131251
		}, {
			"file":	"ext/date/php_date.c",
			"line":	826,
			"primary_score":	999826,
			"second_score":	131231
		}, {
			"file":	"ext/date/php_date.c",
			"line":	829,
			"primary_score":	999712,
			"second_score":	148196
		}, {
			"file":	"ext/date/php_date.c",
			"line":	830,
			"primary_score":	999712,
			"second_score":	148055
		}, {
			"file":	"ext/date/php_date.c",
			"line":	831,
			"primary_score":	999714,
			"second_score":	148054
		}, {
			"file":	"ext/date/php_date.c",
			"line":	833,
			"primary_score":	999712,
			"second_score":	147785
		}, {
			"file":	"ext/date/php_date.c",
			"line":	840,
			"primary_score":	999730,
			"second_score":	131319
		}, {
			"file":	"ext/date/php_date.c",
			"line":	843,
			"primary_score":	999730,
			"second_score":	131318
		}, {
			"file":	"ext/date/php_date.c",
			"line":	847,
			"primary_score":	999966,
			"second_score":	131317
		}, {
			"file":	"ext/date/php_date.c",
			"line":	848,
			"primary_score":	999966,
			"second_score":	131316
		}, {
			"file":	"ext/date/php_date.c",
			"line":	852,
			"primary_score":	999971,
			"second_score":	131315
		}, {
			"file":	"ext/date/php_date.c",
			"line":	862,
			"primary_score":	999971,
			"second_score":	131314
		}, {
			"file":	"ext/date/php_date.c",
			"line":	863,
			"primary_score":	999975,
			"second_score":	131256
		}, {
			"file":	"ext/date/php_date.c",
			"line":	937,
			"primary_score":	999730,
			"second_score":	131323
		}, {
			"file":	"ext/date/php_date.c",
			"line":	938,
			"primary_score":	999730,
			"second_score":	131322
		}, {
			"file":	"ext/date/php_date.c",
			"line":	940,
			"primary_score":	999730,
			"second_score":	131321
		}, {
			"file":	"ext/date/php_date.c",
			"line":	941,
			"primary_score":	999730,
			"second_score":	131255
		}, {
			"file":	"ext/date/php_date.c",
			"line":	942,
			"primary_score":	999730,
			"second_score":	131230
		}, {
			"file":	"ext/date/php_date.c",
			"line":	945,
			"primary_score":	999730,
			"second_score":	131229
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1009,
			"primary_score":	999844,
			"second_score":	128320
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1010,
			"primary_score":	999844,
			"second_score":	128319
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1011,
			"primary_score":	999844,
			"second_score":	128318
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1012,
			"primary_score":	999844,
			"second_score":	128317
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1013,
			"primary_score":	999844,
			"second_score":	128316
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1014,
			"primary_score":	999844,
			"second_score":	128315
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1016,
			"primary_score":	999844,
			"second_score":	128314
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1020,
			"primary_score":	999845,
			"second_score":	128313
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1021,
			"primary_score":	999866,
			"second_score":	128312
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1027,
			"primary_score":	999869,
			"second_score":	128311
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1038,
			"primary_score":	999875,
			"second_score":	128310
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1041,
			"primary_score":	999845,
			"second_score":	128282
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1043,
			"primary_score":	999845,
			"second_score":	128243
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1044,
			"primary_score":	999845,
			"second_score":	127298
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1045,
			"primary_score":	999845,
			"second_score":	127297
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1047,
			"primary_score":	999876,
			"second_score":	127749
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1062,
			"primary_score":	999893,
			"second_score":	127896
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1070,
			"primary_score":	999877,
			"second_score":	128073
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1087,
			"primary_score":	999885,
			"second_score":	127602
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1088,
			"primary_score":	999877,
			"second_score":	127455
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1089,
			"primary_score":	999880,
			"second_score":	127308
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1147,
			"primary_score":	999866,
			"second_score":	127296
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1149,
			"primary_score":	999866,
			"second_score":	127287
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1152,
			"primary_score":	999845,
			"second_score":	127284
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1154,
			"primary_score":	999845,
			"second_score":	127281
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1155,
			"primary_score":	999866,
			"second_score":	127280
		}, {
			"file":	"ext/date/php_date.c",
			"line":	1158,
			"primary_score":	999845,
			"second_score":	127271
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2018,
			"primary_score":	999887,
			"second_score":	132075
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2019,
			"primary_score":	999887,
			"second_score":	132074
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2021,
			"primary_score":	999887,
			"second_score":	132073
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2022,
			"primary_score":	999887,
			"second_score":	131970
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2023,
			"primary_score":	999887,
			"second_score":	131969
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2027,
			"primary_score":	999887,
			"second_score":	131968
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2028,
			"primary_score":	999887,
			"second_score":	131963
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2030,
			"primary_score":	999887,
			"second_score":	131960
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2031,
			"primary_score":	999887,
			"second_score":	131943
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2033,
			"primary_score":	999887,
			"second_score":	131942
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2038,
			"primary_score":	999887,
			"second_score":	132076
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2085,
			"primary_score":	999966,
			"second_score":	128408
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2086,
			"primary_score":	999966,
			"second_score":	128407
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2087,
			"primary_score":	999966,
			"second_score":	128406
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2090,
			"primary_score":	999966,
			"second_score":	128405
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2092,
			"primary_score":	999966,
			"second_score":	128402
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2094,
			"primary_score":	999966,
			"second_score":	128351
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2099,
			"primary_score":	999967,
			"second_score":	128350
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2100,
			"primary_score":	999967,
			"second_score":	128322
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2101,
			"primary_score":	999967,
			"second_score":	127266
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2104,
			"primary_score":	999967,
			"second_score":	127132
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2105,
			"primary_score":	999967,
			"second_score":	127131
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2106,
			"primary_score":	999967,
			"second_score":	127103
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2107,
			"primary_score":	999967,
			"second_score":	127098
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2109,
			"primary_score":	999967,
			"second_score":	126990
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2110,
			"primary_score":	999967,
			"second_score":	126962
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2112,
			"primary_score":	999970,
			"second_score":	126961
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2113,
			"primary_score":	999970,
			"second_score":	126929
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2130,
			"primary_score":	999967,
			"second_score":	126928
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2133,
			"primary_score":	999967,
			"second_score":	126825
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2189,
			"primary_score":	999989,
			"second_score":	150237
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2190,
			"primary_score":	999989,
			"second_score":	150236
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2192,
			"primary_score":	999989,
			"second_score":	150235
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2193,
			"primary_score":	999989,
			"second_score":	150213
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2194,
			"primary_score":	999989,
			"second_score":	150212
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2198,
			"primary_score":	999989,
			"second_score":	150211
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2199,
			"primary_score":	999989,
			"second_score":	150206
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2201,
			"primary_score":	999989,
			"second_score":	150203
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2202,
			"primary_score":	999989,
			"second_score":	150186
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2204,
			"primary_score":	999989,
			"second_score":	150185
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2209,
			"primary_score":	999989,
			"second_score":	150238
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2301,
			"primary_score":	999887,
			"second_score":	121927
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2303,
			"primary_score":	999887,
			"second_score":	121926
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2304,
			"primary_score":	999888,
			"second_score":	121925
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2307,
			"primary_score":	999887,
			"second_score":	121916
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2308,
			"primary_score":	999887,
			"second_score":	121601
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2324,
			"primary_score":	999989,
			"second_score":	121439
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2326,
			"primary_score":	999989,
			"second_score":	121438
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2327,
			"primary_score":	999989,
			"second_score":	121433
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2328,
			"primary_score":	999989,
			"second_score":	121429
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2366,
			"primary_score":	999889,
			"second_score":	131338
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2367,
			"primary_score":	999960,
			"second_score":	131337
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2368,
			"primary_score":	999960,
			"second_score":	131330
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2370,
			"primary_score":	999889,
			"second_score":	131329
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2375,
			"primary_score":	999889,
			"second_score":	131598
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2376,
			"primary_score":	999889,
			"second_score":	131597
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2377,
			"primary_score":	999889,
			"second_score":	131596
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2378,
			"primary_score":	999889,
			"second_score":	131595
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2379,
			"primary_score":	999889,
			"second_score":	131594
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2380,
			"primary_score":	999889,
			"second_score":	131593
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2382,
			"primary_score":	999889,
			"second_score":	131592
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2385,
			"primary_score":	999889,
			"second_score":	131591
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2388,
			"primary_score":	999892,
			"second_score":	131590
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2392,
			"primary_score":	999889,
			"second_score":	131339
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2395,
			"primary_score":	999889,
			"second_score":	131328
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2400,
			"primary_score":	999889,
			"second_score":	131327
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2404,
			"primary_score":	999890,
			"second_score":	131326
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2422,
			"primary_score":	999892,
			"second_score":	131325
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2425,
			"primary_score":	999893,
			"second_score":	131324
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2428,
			"primary_score":	999890,
			"second_score":	131228
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2429,
			"primary_score":	999890,
			"second_score":	131224
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2430,
			"primary_score":	999890,
			"second_score":	131223
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2433,
			"primary_score":	999890,
			"second_score":	131222
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2443,
			"primary_score":	999890,
			"second_score":	131221
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2445,
			"primary_score":	999890,
			"second_score":	130940
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2446,
			"primary_score":	999890,
			"second_score":	130916
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2448,
			"primary_score":	999890,
			"second_score":	130448
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2450,
			"primary_score":	999890,
			"second_score":	130447
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2452,
			"primary_score":	999890,
			"second_score":	130438
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2500,
			"primary_score":	999938,
			"second_score":	131690
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2501,
			"primary_score":	999938,
			"second_score":	131689
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2502,
			"primary_score":	999938,
			"second_score":	131688
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2503,
			"primary_score":	999938,
			"second_score":	131687
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2505,
			"primary_score":	999938,
			"second_score":	131686
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2506,
			"primary_score":	999938,
			"second_score":	131676
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2507,
			"primary_score":	999939,
			"second_score":	131601
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2509,
			"primary_score":	999938,
			"second_score":	130437
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2838,
			"primary_score":	999998,
			"second_score":	139310
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2839,
			"primary_score":	999998,
			"second_score":	139309
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2840,
			"primary_score":	999998,
			"second_score":	139308
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2841,
			"primary_score":	999998,
			"second_score":	139307
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2843,
			"primary_score":	999998,
			"second_score":	139306
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2846,
			"primary_score":	999998,
			"second_score":	139210
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2847,
			"primary_score":	999998,
			"second_score":	139207
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2848,
			"primary_score":	999998,
			"second_score":	139205
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2849,
			"primary_score":	999998,
			"second_score":	139202
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2852,
			"primary_score":	999998,
			"second_score":	139200
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2855,
			"primary_score":	999998,
			"second_score":	139199
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2858,
			"primary_score":	999998,
			"second_score":	139198
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2859,
			"primary_score":	999998,
			"second_score":	139197
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2860,
			"primary_score":	999998,
			"second_score":	139196
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2861,
			"primary_score":	999998,
			"second_score":	139195
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2862,
			"primary_score":	999998,
			"second_score":	139194
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2863,
			"primary_score":	999998,
			"second_score":	139193
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2864,
			"primary_score":	999998,
			"second_score":	139192
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2865,
			"primary_score":	999998,
			"second_score":	139191
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2867,
			"primary_score":	999998,
			"second_score":	139190
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2868,
			"primary_score":	999998,
			"second_score":	139189
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2870,
			"primary_score":	999998,
			"second_score":	139188
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2871,
			"primary_score":	999998,
			"second_score":	138720
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2872,
			"primary_score":	999998,
			"second_score":	138468
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2874,
			"primary_score":	999998,
			"second_score":	138467
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2883,
			"primary_score":	999998,
			"second_score":	129623
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2884,
			"primary_score":	999998,
			"second_score":	129622
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2885,
			"primary_score":	999998,
			"second_score":	129621
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2886,
			"primary_score":	999998,
			"second_score":	129620
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2888,
			"primary_score":	999998,
			"second_score":	129619
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2891,
			"primary_score":	999998,
			"second_score":	129523
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2892,
			"primary_score":	999998,
			"second_score":	129520
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2893,
			"primary_score":	999998,
			"second_score":	129518
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2894,
			"primary_score":	999998,
			"second_score":	129515
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2896,
			"primary_score":	999998,
			"second_score":	129513
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2901,
			"primary_score":	999998,
			"second_score":	129512
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2905,
			"primary_score":	999998,
			"second_score":	129511
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2906,
			"primary_score":	999998,
			"second_score":	129510
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2907,
			"primary_score":	999998,
			"second_score":	129509
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2908,
			"primary_score":	999998,
			"second_score":	129508
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2909,
			"primary_score":	999998,
			"second_score":	129507
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2910,
			"primary_score":	999998,
			"second_score":	129506
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2911,
			"primary_score":	999998,
			"second_score":	129505
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2912,
			"primary_score":	999998,
			"second_score":	129504
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2913,
			"primary_score":	999998,
			"second_score":	129503
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2914,
			"primary_score":	999998,
			"second_score":	129502
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2916,
			"primary_score":	999998,
			"second_score":	129501
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2917,
			"primary_score":	999998,
			"second_score":	129033
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2919,
			"primary_score":	999998,
			"second_score":	128781
		}, {
			"file":	"ext/date/php_date.c",
			"line":	2921,
			"primary_score":	999998,
			"second_score":	128780
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3448,
			"primary_score":	999993,
			"second_score":	149899
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3449,
			"primary_score":	999993,
			"second_score":	149898
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3450,
			"primary_score":	999993,
			"second_score":	149897
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3451,
			"primary_score":	999993,
			"second_score":	149896
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3452,
			"primary_score":	999993,
			"second_score":	149895
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3454,
			"primary_score":	999993,
			"second_score":	149894
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3456,
			"primary_score":	999993,
			"second_score":	149708
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3460,
			"primary_score":	999993,
			"second_score":	149707
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3461,
			"primary_score":	999994,
			"second_score":	149706
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3462,
			"primary_score":	999994,
			"second_score":	149705
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3475,
			"primary_score":	999993,
			"second_score":	149704
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3476,
			"primary_score":	999993,
			"second_score":	149697
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3586,
			"primary_score":	999993,
			"second_score":	149982
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3587,
			"primary_score":	999993,
			"second_score":	149981
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3588,
			"primary_score":	999993,
			"second_score":	149980
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3589,
			"primary_score":	999993,
			"second_score":	149979
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3590,
			"primary_score":	999993,
			"second_score":	149978
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3592,
			"primary_score":	999993,
			"second_score":	149977
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3593,
			"primary_score":	999993,
			"second_score":	149967
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3594,
			"primary_score":	999993,
			"second_score":	149900
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3595,
			"primary_score":	999993,
			"second_score":	149696
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3596,
			"primary_score":	999993,
			"second_score":	149693
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3597,
			"primary_score":	999993,
			"second_score":	149692
		}, {
			"file":	"ext/date/php_date.c",
			"line":	3602,
			"primary_score":	999993,
			"second_score":	149691
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	910,
			"primary_score":	999632,
			"second_score":	59447
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	911,
			"primary_score":	999632,
			"second_score":	59432
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	912,
			"primary_score":	999632,
			"second_score":	59417
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	913,
			"primary_score":	999632,
			"second_score":	59402
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	914,
			"primary_score":	999632,
			"second_score":	59183
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	915,
			"primary_score":	999632,
			"second_score":	59078
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	916,
			"primary_score":	999632,
			"second_score":	59021
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	917,
			"primary_score":	999632,
			"second_score":	59006
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	918,
			"primary_score":	999632,
			"second_score":	58991
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	919,
			"primary_score":	999632,
			"second_score":	58874
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	920,
			"primary_score":	999632,
			"second_score":	58739
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	921,
			"primary_score":	999632,
			"second_score":	58622
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	922,
			"primary_score":	999632,
			"second_score":	58499
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	923,
			"primary_score":	999632,
			"second_score":	58478
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	924,
			"primary_score":	999632,
			"second_score":	58433
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	925,
			"primary_score":	999632,
			"second_score":	58394
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	926,
			"primary_score":	999632,
			"second_score":	58253
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	927,
			"primary_score":	999632,
			"second_score":	58136
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	928,
			"primary_score":	999632,
			"second_score":	57995
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	930,
			"primary_score":	999632,
			"second_score":	57878
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	932,
			"primary_score":	999632,
			"second_score":	57863
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	939,
			"primary_score":	999632,
			"second_score":	57710
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	230,
			"primary_score":	999632,
			"second_score":	54768
		}, {
			"file":	"ext/filter/filter.c",
			"line":	287,
			"primary_score":	999632,
			"second_score":	60855
		}, {
			"file":	"ext/filter/filter.c",
			"line":	289,
			"primary_score":	999632,
			"second_score":	60214
		}, {
			"file":	"ext/filter/filter.c",
			"line":	303,
			"primary_score":	999632,
			"second_score":	121091
		}, {
			"file":	"ext/filter/filter.c",
			"line":	304,
			"primary_score":	999632,
			"second_score":	121090
		}, {
			"file":	"ext/filter/filter.c",
			"line":	305,
			"primary_score":	999632,
			"second_score":	121089
		}, {
			"file":	"ext/filter/filter.c",
			"line":	306,
			"primary_score":	999632,
			"second_score":	121088
		}, {
			"file":	"ext/filter/filter.c",
			"line":	307,
			"primary_score":	999632,
			"second_score":	120620
		}, {
			"file":	"ext/filter/filter.c",
			"line":	308,
			"primary_score":	999632,
			"second_score":	120619
		}, {
			"file":	"ext/filter/filter.c",
			"line":	309,
			"primary_score":	999632,
			"second_score":	120618
		}, {
			"file":	"ext/hash/hash.c",
			"line":	889,
			"primary_score":	999632,
			"second_score":	61734
		}, {
			"file":	"ext/hash/hash.c",
			"line":	891,
			"primary_score":	999632,
			"second_score":	61455
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	289,
			"primary_score":	999632,
			"second_score":	63061
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	290,
			"primary_score":	999632,
			"second_score":	63010
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	291,
			"primary_score":	999632,
			"second_score":	62327
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2852,
			"primary_score":	999632,
			"second_score":	63060
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2856,
			"primary_score":	999632,
			"second_score":	63011
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	581,
			"primary_score":	999632,
			"second_score":	55212
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	583,
			"primary_score":	999632,
			"second_score":	55211
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	585,
			"primary_score":	999632,
			"second_score":	55210
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	586,
			"primary_score":	999632,
			"second_score":	55209
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	587,
			"primary_score":	999632,
			"second_score":	55190
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	683,
			"primary_score":	999632,
			"second_score":	55214
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	690,
			"primary_score":	999632,
			"second_score":	55213
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	692,
			"primary_score":	999632,
			"second_score":	55189
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	699,
			"primary_score":	999632,
			"second_score":	120614
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	700,
			"primary_score":	999632,
			"second_score":	120613
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	701,
			"primary_score":	999632,
			"second_score":	120612
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	703,
			"primary_score":	999632,
			"second_score":	120611
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	704,
			"primary_score":	999632,
			"second_score":	120610
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	707,
			"primary_score":	999632,
			"second_score":	120609
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	711,
			"primary_score":	999632,
			"second_score":	120608
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	712,
			"primary_score":	999632,
			"second_score":	120604
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	717,
			"primary_score":	999632,
			"second_score":	120603
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	719,
			"primary_score":	999632,
			"second_score":	120602
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	113,
			"primary_score":	999632,
			"second_score":	55734
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	163,
			"primary_score":	999632,
			"second_score":	56362
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	165,
			"primary_score":	999632,
			"second_score":	55738
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	199,
			"primary_score":	999632,
			"second_score":	99007
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	203,
			"primary_score":	999632,
			"second_score":	98988
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	389,
			"primary_score":	999632,
			"second_score":	65481
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	390,
			"primary_score":	999632,
			"second_score":	65472
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	391,
			"primary_score":	999632,
			"second_score":	64132
		}, {
			"file":	"ext/pdo/pdo_sqlstate.c",
			"line":	309,
			"primary_score":	999632,
			"second_score":	65471
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	87,
			"primary_score":	999632,
			"second_score":	99008
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	88,
			"primary_score":	999632,
			"second_score":	98950
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1102,
			"primary_score":	999632,
			"second_score":	99911
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1104,
			"primary_score":	999632,
			"second_score":	99910
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1105,
			"primary_score":	999632,
			"second_score":	99885
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1106,
			"primary_score":	999632,
			"second_score":	99848
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1107,
			"primary_score":	999632,
			"second_score":	99821
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1108,
			"primary_score":	999632,
			"second_score":	99795
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1109,
			"primary_score":	999632,
			"second_score":	99768
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1110,
			"primary_score":	999632,
			"second_score":	99737
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1111,
			"primary_score":	999632,
			"second_score":	99708
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1112,
			"primary_score":	999632,
			"second_score":	99679
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1113,
			"primary_score":	999632,
			"second_score":	99651
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1114,
			"primary_score":	999632,
			"second_score":	99622
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1115,
			"primary_score":	999632,
			"second_score":	99593
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1116,
			"primary_score":	999632,
			"second_score":	99564
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1117,
			"primary_score":	999632,
			"second_score":	99535
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1118,
			"primary_score":	999632,
			"second_score":	99506
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1119,
			"primary_score":	999632,
			"second_score":	99478
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1120,
			"primary_score":	999632,
			"second_score":	99447
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1121,
			"primary_score":	999632,
			"second_score":	99416
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1122,
			"primary_score":	999632,
			"second_score":	99383
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1123,
			"primary_score":	999632,
			"second_score":	99358
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1124,
			"primary_score":	999632,
			"second_score":	99334
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1125,
			"primary_score":	999632,
			"second_score":	99304
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3394,
			"primary_score":	999632,
			"second_score":	150688
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3396,
			"primary_score":	999632,
			"second_score":	150686
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3400,
			"primary_score":	999632,
			"second_score":	150685
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3404,
			"primary_score":	999632,
			"second_score":	150684
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3527,
			"primary_score":	999632,
			"second_score":	99296
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3557,
			"primary_score":	999632,
			"second_score":	99949
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3559,
			"primary_score":	999632,
			"second_score":	99912
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3561,
			"primary_score":	999632,
			"second_score":	99303
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3562,
			"primary_score":	999632,
			"second_score":	99302
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3570,
			"primary_score":	999632,
			"second_score":	99301
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3575,
			"primary_score":	999632,
			"second_score":	99300
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3617,
			"primary_score":	999632,
			"second_score":	121179
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3619,
			"primary_score":	999632,
			"second_score":	121178
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3621,
			"primary_score":	999632,
			"second_score":	121177
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3657,
			"primary_score":	999632,
			"second_score":	121176
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3658,
			"primary_score":	999632,
			"second_score":	121175
		}, {
			"file":	"ext/session/session.c",
			"line":	93,
			"primary_score":	999632,
			"second_score":	121112
		}, {
			"file":	"ext/session/session.c",
			"line":	98,
			"primary_score":	999632,
			"second_score":	121111
		}, {
			"file":	"ext/session/session.c",
			"line":	103,
			"primary_score":	999632,
			"second_score":	121110
		}, {
			"file":	"ext/session/session.c",
			"line":	1441,
			"primary_score":	999632,
			"second_score":	121114
		}, {
			"file":	"ext/session/session.c",
			"line":	1958,
			"primary_score":	999632,
			"second_score":	121116
		}, {
			"file":	"ext/session/session.c",
			"line":	1960,
			"primary_score":	999632,
			"second_score":	121115
		}, {
			"file":	"ext/session/session.c",
			"line":	1961,
			"primary_score":	999632,
			"second_score":	121113
		}, {
			"file":	"ext/session/session.c",
			"line":	1964,
			"primary_score":	999632,
			"second_score":	121109
		}, {
			"file":	"ext/session/session.c",
			"line":	1965,
			"primary_score":	999632,
			"second_score":	121103
		}, {
			"file":	"ext/session/session.c",
			"line":	1971,
			"primary_score":	999632,
			"second_score":	121102
		}, {
			"file":	"ext/session/session.c",
			"line":	2013,
			"primary_score":	999632,
			"second_score":	67941
		}, {
			"file":	"ext/session/session.c",
			"line":	2019,
			"primary_score":	999632,
			"second_score":	66509
		}, {
			"file":	"ext/session/session.c",
			"line":	2020,
			"primary_score":	999632,
			"second_score":	66508
		}, {
			"file":	"ext/session/session.c",
			"line":	2022,
			"primary_score":	999632,
			"second_score":	66507
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2600,
			"primary_score":	999632,
			"second_score":	98909
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2601,
			"primary_score":	999632,
			"second_score":	98908
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	919,
			"primary_score":	999632,
			"second_score":	121098
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	924,
			"primary_score":	999632,
			"second_score":	121097
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	929,
			"primary_score":	999632,
			"second_score":	121096
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	932,
			"primary_score":	999632,
			"second_score":	121095
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2140,
			"primary_score":	999632,
			"second_score":	57006
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2142,
			"primary_score":	999632,
			"second_score":	56397
		}, {
			"file":	"ext/standard/array.c",
			"line":	138,
			"primary_score":	999632,
			"second_score":	98487
		}, {
			"file":	"ext/standard/assert.c",
			"line":	114,
			"primary_score":	999632,
			"second_score":	98485
		}, {
			"file":	"ext/standard/assert.c",
			"line":	118,
			"primary_score":	999632,
			"second_score":	98484
		}, {
			"file":	"ext/standard/assert.c",
			"line":	124,
			"primary_score":	999632,
			"second_score":	121150
		}, {
			"file":	"ext/standard/assert.c",
			"line":	129,
			"primary_score":	999632,
			"second_score":	121149
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3470,
			"primary_score":	999632,
			"second_score":	98681
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3471,
			"primary_score":	999632,
			"second_score":	98680
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3472,
			"primary_score":	999632,
			"second_score":	98641
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3645,
			"primary_score":	999632,
			"second_score":	98685
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3653,
			"primary_score":	999632,
			"second_score":	98682
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3659,
			"primary_score":	999632,
			"second_score":	98640
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3661,
			"primary_score":	999632,
			"second_score":	98599
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3662,
			"primary_score":	999632,
			"second_score":	98561
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3665,
			"primary_score":	999632,
			"second_score":	98524
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3666,
			"primary_score":	999632,
			"second_score":	98488
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3667,
			"primary_score":	999632,
			"second_score":	98486
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3668,
			"primary_score":	999632,
			"second_score":	98483
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3669,
			"primary_score":	999632,
			"second_score":	97406
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3670,
			"primary_score":	999632,
			"second_score":	97403
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3675,
			"primary_score":	999632,
			"second_score":	97081
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3678,
			"primary_score":	999632,
			"second_score":	97078
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3726,
			"primary_score":	999632,
			"second_score":	121171
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3729,
			"primary_score":	999632,
			"second_score":	121170
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3730,
			"primary_score":	999632,
			"second_score":	121169
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3732,
			"primary_score":	999632,
			"second_score":	121168
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3735,
			"primary_score":	999632,
			"second_score":	121160
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3741,
			"primary_score":	999632,
			"second_score":	121159
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3746,
			"primary_score":	999632,
			"second_score":	121158
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3747,
			"primary_score":	999632,
			"second_score":	121156
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3752,
			"primary_score":	999632,
			"second_score":	121155
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3758,
			"primary_score":	999632,
			"second_score":	121151
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3759,
			"primary_score":	999632,
			"second_score":	121148
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3760,
			"primary_score":	999632,
			"second_score":	121137
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3765,
			"primary_score":	999632,
			"second_score":	121126
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3771,
			"primary_score":	999632,
			"second_score":	121125
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3773,
			"primary_score":	999632,
			"second_score":	121122
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3774,
			"primary_score":	999632,
			"second_score":	121121
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3775,
			"primary_score":	999632,
			"second_score":	121120
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4526,
			"primary_score":	999632,
			"second_score":	124334
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4527,
			"primary_score":	999632,
			"second_score":	124333
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4528,
			"primary_score":	999632,
			"second_score":	124332
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4530,
			"primary_score":	999632,
			"second_score":	124331
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4534,
			"primary_score":	999632,
			"second_score":	124264
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4536,
			"primary_score":	999632,
			"second_score":	124233
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4545,
			"primary_score":	999632,
			"second_score":	124232
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5006,
			"primary_score":	999632,
			"second_score":	122050
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5018,
			"primary_score":	999632,
			"second_score":	120493
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5024,
			"primary_score":	999632,
			"second_score":	120492
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	234,
			"primary_score":	999632,
			"second_score":	98523
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	235,
			"primary_score":	999632,
			"second_score":	98490
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	238,
			"primary_score":	999632,
			"second_score":	98489
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	130,
			"primary_score":	999632,
			"second_score":	97080
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	133,
			"primary_score":	999632,
			"second_score":	97079
		}, {
			"file":	"ext/standard/file.c",
			"line":	318,
			"primary_score":	999632,
			"second_score":	97405
		}, {
			"file":	"ext/standard/file.c",
			"line":	320,
			"primary_score":	999632,
			"second_score":	97404
		}, {
			"file":	"ext/standard/file.c",
			"line":	2342,
			"primary_score":	999632,
			"second_score":	124028
		}, {
			"file":	"ext/standard/file.c",
			"line":	2343,
			"primary_score":	999632,
			"second_score":	124027
		}, {
			"file":	"ext/standard/file.c",
			"line":	2344,
			"primary_score":	999632,
			"second_score":	124026
		}, {
			"file":	"ext/standard/file.c",
			"line":	2346,
			"primary_score":	999632,
			"second_score":	124025
		}, {
			"file":	"ext/standard/file.c",
			"line":	2350,
			"primary_score":	999632,
			"second_score":	123915
		}, {
			"file":	"ext/standard/file.c",
			"line":	2351,
			"primary_score":	999632,
			"second_score":	123704
		}, {
			"file":	"ext/standard/file.c",
			"line":	2360,
			"primary_score":	999632,
			"second_score":	123700
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	110,
			"primary_score":	999632,
			"second_score":	121154
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	114,
			"primary_score":	999632,
			"second_score":	121153
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	118,
			"primary_score":	999632,
			"second_score":	121152
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2148,
			"primary_score":	999632,
			"second_score":	97402
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2150,
			"primary_score":	999632,
			"second_score":	97401
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2151,
			"primary_score":	999632,
			"second_score":	97122
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2153,
			"primary_score":	999632,
			"second_score":	97082
		}, {
			"file":	"ext/standard/head.c",
			"line":	68,
			"primary_score":	999632,
			"second_score":	143603
		}, {
			"file":	"ext/standard/head.c",
			"line":	71,
			"primary_score":	999632,
			"second_score":	143385
		}, {
			"file":	"ext/standard/info.c",
			"line":	527,
			"primary_score":	999632,
			"second_score":	125451
		}, {
			"file":	"ext/standard/info.c",
			"line":	528,
			"primary_score":	999632,
			"second_score":	125450
		}, {
			"file":	"ext/standard/info.c",
			"line":	577,
			"primary_score":	999632,
			"second_score":	125449
		}, {
			"file":	"ext/standard/info.c",
			"line":	578,
			"primary_score":	999632,
			"second_score":	125448
		}, {
			"file":	"ext/standard/info.c",
			"line":	605,
			"primary_score":	999632,
			"second_score":	125447
		}, {
			"file":	"ext/standard/info.c",
			"line":	607,
			"primary_score":	999632,
			"second_score":	125446
		}, {
			"file":	"ext/standard/info.c",
			"line":	609,
			"primary_score":	999632,
			"second_score":	125445
		}, {
			"file":	"ext/standard/info.c",
			"line":	611,
			"primary_score":	999632,
			"second_score":	125444
		}, {
			"file":	"ext/standard/info.c",
			"line":	613,
			"primary_score":	999632,
			"second_score":	125443
		}, {
			"file":	"ext/standard/info.c",
			"line":	616,
			"primary_score":	999632,
			"second_score":	125442
		}, {
			"file":	"ext/standard/info.c",
			"line":	619,
			"primary_score":	999632,
			"second_score":	124759
		}, {
			"file":	"ext/standard/info.c",
			"line":	627,
			"primary_score":	999632,
			"second_score":	124758
		}, {
			"file":	"ext/standard/info.c",
			"line":	1153,
			"primary_score":	999632,
			"second_score":	126400
		}, {
			"file":	"ext/standard/info.c",
			"line":	1154,
			"primary_score":	999632,
			"second_score":	126399
		}, {
			"file":	"ext/standard/info.c",
			"line":	1156,
			"primary_score":	999632,
			"second_score":	126398
		}, {
			"file":	"ext/standard/info.c",
			"line":	1160,
			"primary_score":	999632,
			"second_score":	126360
		}, {
			"file":	"ext/standard/info.c",
			"line":	1161,
			"primary_score":	999632,
			"second_score":	126359
		}, {
			"file":	"ext/standard/info.c",
			"line":	1280,
			"primary_score":	999632,
			"second_score":	125494
		}, {
			"file":	"ext/standard/info.c",
			"line":	1281,
			"primary_score":	999632,
			"second_score":	125493
		}, {
			"file":	"ext/standard/info.c",
			"line":	1283,
			"primary_score":	999632,
			"second_score":	125492
		}, {
			"file":	"ext/standard/info.c",
			"line":	1286,
			"primary_score":	999632,
			"second_score":	125454
		}, {
			"file":	"ext/standard/info.c",
			"line":	1295,
			"primary_score":	999632,
			"second_score":	122514
		}, {
			"file":	"ext/standard/info.c",
			"line":	1299,
			"primary_score":	999632,
			"second_score":	122481
		}, {
			"file":	"ext/standard/info.c",
			"line":	1302,
			"primary_score":	999632,
			"second_score":	122480
		}, {
			"file":	"ext/standard/string.c",
			"line":	1058,
			"primary_score":	999632,
			"second_score":	124921
		}, {
			"file":	"ext/standard/string.c",
			"line":	1059,
			"primary_score":	999632,
			"second_score":	124920
		}, {
			"file":	"ext/standard/string.c",
			"line":	1060,
			"primary_score":	999632,
			"second_score":	124919
		}, {
			"file":	"ext/standard/string.c",
			"line":	1061,
			"primary_score":	999632,
			"second_score":	124918
		}, {
			"file":	"ext/standard/string.c",
			"line":	1062,
			"primary_score":	999632,
			"second_score":	124917
		}, {
			"file":	"ext/standard/string.c",
			"line":	1063,
			"primary_score":	999632,
			"second_score":	124916
		}, {
			"file":	"ext/standard/string.c",
			"line":	1065,
			"primary_score":	999632,
			"second_score":	124915
		}, {
			"file":	"ext/standard/string.c",
			"line":	1067,
			"primary_score":	999632,
			"second_score":	124912
		}, {
			"file":	"ext/standard/string.c",
			"line":	1071,
			"primary_score":	999632,
			"second_score":	124911
		}, {
			"file":	"ext/standard/string.c",
			"line":	1073,
			"primary_score":	999632,
			"second_score":	124907
		}, {
			"file":	"ext/standard/string.c",
			"line":	1074,
			"primary_score":	999632,
			"second_score":	123866
		}, {
			"file":	"ext/standard/string.c",
			"line":	1076,
			"primary_score":	999632,
			"second_score":	124895
		}, {
			"file":	"ext/standard/string.c",
			"line":	1077,
			"primary_score":	999632,
			"second_score":	123857
		}, {
			"file":	"ext/standard/string.c",
			"line":	1124,
			"primary_score":	999632,
			"second_score":	123856
		}, {
			"file":	"ext/standard/string.c",
			"line":	1125,
			"primary_score":	999632,
			"second_score":	123887
		}, {
			"file":	"ext/standard/string.c",
			"line":	1127,
			"primary_score":	999632,
			"second_score":	123855
		}, {
			"file":	"ext/standard/string.c",
			"line":	1129,
			"primary_score":	999632,
			"second_score":	123844
		}, {
			"file":	"ext/standard/string.c",
			"line":	1131,
			"primary_score":	999632,
			"second_score":	123841
		}, {
			"file":	"ext/standard/string.c",
			"line":	1132,
			"primary_score":	999632,
			"second_score":	123840
		}, {
			"file":	"ext/standard/string.c",
			"line":	1144,
			"primary_score":	999632,
			"second_score":	125022
		}, {
			"file":	"ext/standard/string.c",
			"line":	1146,
			"primary_score":	999632,
			"second_score":	125021
		}, {
			"file":	"ext/standard/string.c",
			"line":	1150,
			"primary_score":	999632,
			"second_score":	124929
		}, {
			"file":	"ext/standard/string.c",
			"line":	1163,
			"primary_score":	999632,
			"second_score":	124928
		}, {
			"file":	"ext/standard/string.c",
			"line":	1167,
			"primary_score":	999632,
			"second_score":	124927
		}, {
			"file":	"ext/standard/string.c",
			"line":	1168,
			"primary_score":	999632,
			"second_score":	124926
		}, {
			"file":	"ext/standard/string.c",
			"line":	1169,
			"primary_score":	999632,
			"second_score":	124925
		}, {
			"file":	"ext/standard/string.c",
			"line":	1170,
			"primary_score":	999632,
			"second_score":	124923
		}, {
			"file":	"ext/standard/string.c",
			"line":	1177,
			"primary_score":	999632,
			"second_score":	124922
		}, {
			"file":	"ext/standard/string.c",
			"line":	1179,
			"primary_score":	999632,
			"second_score":	123831
		}, {
			"file":	"ext/standard/string.c",
			"line":	3536,
			"primary_score":	999632,
			"second_score":	122060
		}, {
			"file":	"ext/standard/string.c",
			"line":	3539,
			"primary_score":	999632,
			"second_score":	122059
		}, {
			"file":	"ext/standard/string.c",
			"line":	3540,
			"primary_score":	999632,
			"second_score":	122058
		}, {
			"file":	"ext/standard/string.c",
			"line":	3543,
			"primary_score":	999632,
			"second_score":	122057
		}, {
			"file":	"ext/standard/string.c",
			"line":	3544,
			"primary_score":	999632,
			"second_score":	122012
		}, {
			"file":	"ext/standard/string.c",
			"line":	3545,
			"primary_score":	999632,
			"second_score":	122011
		}, {
			"file":	"ext/standard/string.c",
			"line":	3546,
			"primary_score":	999632,
			"second_score":	122010
		}, {
			"file":	"ext/standard/string.c",
			"line":	3547,
			"primary_score":	999632,
			"second_score":	121976
		}, {
			"file":	"ext/standard/string.c",
			"line":	3647,
			"primary_score":	999632,
			"second_score":	122205
		}, {
			"file":	"ext/standard/string.c",
			"line":	3648,
			"primary_score":	999632,
			"second_score":	122204
		}, {
			"file":	"ext/standard/string.c",
			"line":	3649,
			"primary_score":	999632,
			"second_score":	122203
		}, {
			"file":	"ext/standard/string.c",
			"line":	3650,
			"primary_score":	999632,
			"second_score":	122202
		}, {
			"file":	"ext/standard/string.c",
			"line":	3651,
			"primary_score":	999632,
			"second_score":	122201
		}, {
			"file":	"ext/standard/string.c",
			"line":	3652,
			"primary_score":	999632,
			"second_score":	122200
		}, {
			"file":	"ext/standard/string.c",
			"line":	3653,
			"primary_score":	999632,
			"second_score":	122199
		}, {
			"file":	"ext/standard/string.c",
			"line":	3655,
			"primary_score":	999632,
			"second_score":	122198
		}, {
			"file":	"ext/standard/string.c",
			"line":	3659,
			"primary_score":	999632,
			"second_score":	122076
		}, {
			"file":	"ext/standard/string.c",
			"line":	3660,
			"primary_score":	999632,
			"second_score":	122073
		}, {
			"file":	"ext/standard/string.c",
			"line":	3661,
			"primary_score":	999632,
			"second_score":	122070
		}, {
			"file":	"ext/standard/string.c",
			"line":	3664,
			"primary_score":	999632,
			"second_score":	122067
		}, {
			"file":	"ext/standard/string.c",
			"line":	3665,
			"primary_score":	999632,
			"second_score":	122066
		}, {
			"file":	"ext/standard/string.c",
			"line":	3666,
			"primary_score":	999632,
			"second_score":	122064
		}, {
			"file":	"ext/standard/string.c",
			"line":	3672,
			"primary_score":	999632,
			"second_score":	122062
		}, {
			"file":	"ext/standard/string.c",
			"line":	3703,
			"primary_score":	999632,
			"second_score":	122061
		}, {
			"file":	"ext/standard/string.c",
			"line":	3705,
			"primary_score":	999632,
			"second_score":	121975
		}, {
			"file":	"ext/standard/string.c",
			"line":	3716,
			"primary_score":	999632,
			"second_score":	122206
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	121,
			"primary_score":	999632,
			"second_score":	98684
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	125,
			"primary_score":	999632,
			"second_score":	98683
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1083,
			"primary_score":	999632,
			"second_score":	98482
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1085,
			"primary_score":	999632,
			"second_score":	97407
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1097,
			"primary_score":	999632,
			"second_score":	121147
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1102,
			"primary_score":	999632,
			"second_score":	121146
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1103,
			"primary_score":	999632,
			"second_score":	121142
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1105,
			"primary_score":	999632,
			"second_score":	121138
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	129,
			"primary_score":	999632,
			"second_score":	121124
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	135,
			"primary_score":	999632,
			"second_score":	121123
		}, {
			"file":	"ext/standard/var.c",
			"line":	58,
			"primary_score":	999962,
			"second_score":	123888
		}, {
			"file":	"ext/standard/var.c",
			"line":	59,
			"primary_score":	999962,
			"second_score":	123887
		}, {
			"file":	"ext/standard/var.c",
			"line":	61,
			"primary_score":	999962,
			"second_score":	123886
		}, {
			"file":	"ext/standard/var.c",
			"line":	63,
			"primary_score":	999962,
			"second_score":	123885
		}, {
			"file":	"ext/standard/var.c",
			"line":	66,
			"primary_score":	999962,
			"second_score":	123884
		}, {
			"file":	"ext/standard/var.c",
			"line":	67,
			"primary_score":	999962,
			"second_score":	123878
		}, {
			"file":	"ext/standard/var.c",
			"line":	69,
			"primary_score":	999962,
			"second_score":	123672
		}, {
			"file":	"ext/standard/var.c",
			"line":	76,
			"primary_score":	999962,
			"second_score":	123671
		}, {
			"file":	"ext/standard/var.c",
			"line":	77,
			"primary_score":	999962,
			"second_score":	123520
		}, {
			"file":	"ext/standard/var.c",
			"line":	78,
			"primary_score":	999962,
			"second_score":	123471
		}, {
			"file":	"ext/standard/var.c",
			"line":	80,
			"primary_score":	999962,
			"second_score":	123320
		}, {
			"file":	"ext/standard/var.c",
			"line":	82,
			"primary_score":	999962,
			"second_score":	123269
		}, {
			"file":	"ext/standard/var.c",
			"line":	83,
			"primary_score":	999962,
			"second_score":	122634
		}, {
			"file":	"ext/standard/var.c",
			"line":	89,
			"primary_score":	999743,
			"second_score":	123268
		}, {
			"file":	"ext/standard/var.c",
			"line":	90,
			"primary_score":	999743,
			"second_score":	123267
		}, {
			"file":	"ext/standard/var.c",
			"line":	91,
			"primary_score":	999743,
			"second_score":	123266
		}, {
			"file":	"ext/standard/var.c",
			"line":	92,
			"primary_score":	999743,
			"second_score":	123265
		}, {
			"file":	"ext/standard/var.c",
			"line":	93,
			"primary_score":	999743,
			"second_score":	123264
		}, {
			"file":	"ext/standard/var.c",
			"line":	95,
			"primary_score":	999743,
			"second_score":	123263
		}, {
			"file":	"ext/standard/var.c",
			"line":	96,
			"primary_score":	999929,
			"second_score":	123262
		}, {
			"file":	"ext/standard/var.c",
			"line":	99,
			"primary_score":	999743,
			"second_score":	123067
		}, {
			"file":	"ext/standard/var.c",
			"line":	108,
			"primary_score":	999886,
			"second_score":	123900
		}, {
			"file":	"ext/standard/var.c",
			"line":	114,
			"primary_score":	999852,
			"second_score":	122735
		}, {
			"file":	"ext/standard/var.c",
			"line":	115,
			"primary_score":	999852,
			"second_score":	122686
		}, {
			"file":	"ext/standard/var.c",
			"line":	116,
			"primary_score":	999852,
			"second_score":	122635
		}, {
			"file":	"ext/standard/var.c",
			"line":	130,
			"primary_score":	999959,
			"second_score":	126824
		}, {
			"file":	"ext/standard/var.c",
			"line":	136,
			"primary_score":	999959,
			"second_score":	126823
		}, {
			"file":	"ext/standard/var.c",
			"line":	137,
			"primary_score":	999959,
			"second_score":	126822
		}, {
			"file":	"ext/standard/var.c",
			"line":	138,
			"primary_score":	999959,
			"second_score":	126786
		}, {
			"file":	"ext/standard/var.c",
			"line":	139,
			"primary_score":	999959,
			"second_score":	126316
		}, {
			"file":	"ext/standard/var.c",
			"line":	143,
			"primary_score":	999959,
			"second_score":	126297
		}, {
			"file":	"ext/standard/var.c",
			"line":	144,
			"primary_score":	999959,
			"second_score":	126296
		}, {
			"file":	"ext/standard/var.c",
			"line":	146,
			"primary_score":	999926,
			"second_score":	126295
		}, {
			"file":	"ext/standard/var.c",
			"line":	147,
			"primary_score":	999926,
			"second_score":	122626
		}, {
			"file":	"ext/standard/var.c",
			"line":	148,
			"primary_score":	999926,
			"second_score":	122625
		}, {
			"file":	"ext/standard/var.c",
			"line":	153,
			"primary_score":	999926,
			"second_score":	122624
		}, {
			"file":	"ext/standard/var.c",
			"line":	156,
			"primary_score":	999926,
			"second_score":	122623
		}, {
			"file":	"ext/standard/var.c",
			"line":	157,
			"primary_score":	999926,
			"second_score":	122572
		}, {
			"file":	"ext/standard/var.c",
			"line":	174,
			"primary_score":	999743,
			"second_score":	128506
		}, {
			"file":	"ext/standard/var.c",
			"line":	175,
			"primary_score":	999743,
			"second_score":	128505
		}, {
			"file":	"ext/standard/var.c",
			"line":	176,
			"primary_score":	999743,
			"second_score":	128504
		}, {
			"file":	"ext/standard/var.c",
			"line":	178,
			"primary_score":	999743,
			"second_score":	128503
		}, {
			"file":	"ext/standard/var.c",
			"line":	182,
			"primary_score":	999743,
			"second_score":	128417
		}, {
			"file":	"ext/standard/var.c",
			"line":	183,
			"primary_score":	999743,
			"second_score":	128416
		}, {
			"file":	"ext/standard/var.c",
			"line":	185,
			"primary_score":	999743,
			"second_score":	122571
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1378,
			"primary_score":	999632,
			"second_score":	101794
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1379,
			"primary_score":	999632,
			"second_score":	101701
		}, {
			"file":	"ext/xmlwriter/php_xmlwriter.c",
			"line":	1972,
			"primary_score":	999632,
			"second_score":	104484
		}, {
			"file":	"ext/zip/php_zip.c",
			"line":	2827,
			"primary_score":	999632,
			"second_score":	105160
		}, {
			"file":	"ext/zip/php_zip.c",
			"line":	2828,
			"primary_score":	999632,
			"second_score":	105121
		}, {
			"file":	"ext/zip/php_zip.c",
			"line":	2830,
			"primary_score":	999632,
			"second_score":	105084
		}, {
			"file":	"main/SAPI.c",
			"line":	69,
			"primary_score":	999632,
			"second_score":	3128
		}, {
			"file":	"main/SAPI.c",
			"line":	104,
			"primary_score":	999632,
			"second_score":	3129
		}, {
			"file":	"main/SAPI.c",
			"line":	107,
			"primary_score":	999632,
			"second_score":	3107
		}, {
			"file":	"main/SAPI.c",
			"line":	109,
			"primary_score":	999632,
			"second_score":	3106
		}, {
			"file":	"main/SAPI.c",
			"line":	119,
			"primary_score":	999632,
			"second_score":	143415
		}, {
			"file":	"main/SAPI.c",
			"line":	286,
			"primary_score":	999632,
			"second_score":	143595
		}, {
			"file":	"main/SAPI.c",
			"line":	287,
			"primary_score":	999632,
			"second_score":	143594
		}, {
			"file":	"main/SAPI.c",
			"line":	289,
			"primary_score":	999632,
			"second_score":	143593
		}, {
			"file":	"main/SAPI.c",
			"line":	290,
			"primary_score":	999632,
			"second_score":	143592
		}, {
			"file":	"main/SAPI.c",
			"line":	291,
			"primary_score":	999632,
			"second_score":	143591
		}, {
			"file":	"main/SAPI.c",
			"line":	296,
			"primary_score":	999632,
			"second_score":	143590
		}, {
			"file":	"main/SAPI.c",
			"line":	297,
			"primary_score":	999632,
			"second_score":	143589
		}, {
			"file":	"main/SAPI.c",
			"line":	298,
			"primary_score":	999632,
			"second_score":	143588
		}, {
			"file":	"main/SAPI.c",
			"line":	304,
			"primary_score":	999632,
			"second_score":	143587
		}, {
			"file":	"main/SAPI.c",
			"line":	316,
			"primary_score":	999632,
			"second_score":	143586
		}, {
			"file":	"main/SAPI.c",
			"line":	317,
			"primary_score":	999632,
			"second_score":	143585
		}, {
			"file":	"main/SAPI.c",
			"line":	318,
			"primary_score":	999632,
			"second_score":	143527
		}, {
			"file":	"main/SAPI.c",
			"line":	320,
			"primary_score":	999632,
			"second_score":	143526
		}, {
			"file":	"main/SAPI.c",
			"line":	482,
			"primary_score":	999632,
			"second_score":	115079
		}, {
			"file":	"main/SAPI.c",
			"line":	490,
			"primary_score":	999632,
			"second_score":	115120
		}, {
			"file":	"main/SAPI.c",
			"line":	491,
			"primary_score":	999632,
			"second_score":	115116
		}, {
			"file":	"main/SAPI.c",
			"line":	494,
			"primary_score":	999632,
			"second_score":	115115
		}, {
			"file":	"main/SAPI.c",
			"line":	496,
			"primary_score":	999632,
			"second_score":	115114
		}, {
			"file":	"main/SAPI.c",
			"line":	507,
			"primary_score":	999632,
			"second_score":	115113
		}, {
			"file":	"main/SAPI.c",
			"line":	510,
			"primary_score":	999632,
			"second_score":	115112
		}, {
			"file":	"main/SAPI.c",
			"line":	513,
			"primary_score":	999632,
			"second_score":	115111
		}, {
			"file":	"main/SAPI.c",
			"line":	516,
			"primary_score":	999632,
			"second_score":	115110
		}, {
			"file":	"main/SAPI.c",
			"line":	519,
			"primary_score":	999632,
			"second_score":	115109
		}, {
			"file":	"main/SAPI.c",
			"line":	522,
			"primary_score":	999632,
			"second_score":	115108
		}, {
			"file":	"main/SAPI.c",
			"line":	525,
			"primary_score":	999632,
			"second_score":	115107
		}, {
			"file":	"main/SAPI.c",
			"line":	526,
			"primary_score":	999632,
			"second_score":	115106
		}, {
			"file":	"main/SAPI.c",
			"line":	528,
			"primary_score":	999632,
			"second_score":	115102
		}, {
			"file":	"main/SAPI.c",
			"line":	531,
			"primary_score":	999632,
			"second_score":	115101
		}, {
			"file":	"main/SAPI.c",
			"line":	532,
			"primary_score":	999632,
			"second_score":	115100
		}, {
			"file":	"main/SAPI.c",
			"line":	533,
			"primary_score":	999632,
			"second_score":	115081
		}, {
			"file":	"main/SAPI.c",
			"line":	535,
			"primary_score":	999632,
			"second_score":	115080
		}, {
			"file":	"main/SAPI.c",
			"line":	536,
			"primary_score":	999632,
			"second_score":	115078
		}, {
			"file":	"main/SAPI.c",
			"line":	537,
			"primary_score":	999632,
			"second_score":	115077
		}, {
			"file":	"main/SAPI.c",
			"line":	538,
			"primary_score":	999632,
			"second_score":	115076
		}, {
			"file":	"main/SAPI.c",
			"line":	539,
			"primary_score":	999632,
			"second_score":	115075
		}, {
			"file":	"main/SAPI.c",
			"line":	608,
			"primary_score":	999632,
			"second_score":	143418
		}, {
			"file":	"main/SAPI.c",
			"line":	623,
			"primary_score":	999632,
			"second_score":	143416
		}, {
			"file":	"main/SAPI.c",
			"line":	812,
			"primary_score":	999632,
			"second_score":	121199
		}, {
			"file":	"main/SAPI.c",
			"line":	813,
			"primary_score":	999632,
			"second_score":	121198
		}, {
			"file":	"main/SAPI.c",
			"line":	815,
			"primary_score":	999632,
			"second_score":	121197
		}, {
			"file":	"main/SAPI.c",
			"line":	816,
			"primary_score":	999632,
			"second_score":	121196
		}, {
			"file":	"main/SAPI.c",
			"line":	822,
			"primary_score":	999632,
			"second_score":	143599
		}, {
			"file":	"main/SAPI.c",
			"line":	823,
			"primary_score":	999632,
			"second_score":	143598
		}, {
			"file":	"main/SAPI.c",
			"line":	824,
			"primary_score":	999632,
			"second_score":	143597
		}, {
			"file":	"main/SAPI.c",
			"line":	826,
			"primary_score":	999632,
			"second_score":	143596
		}, {
			"file":	"main/SAPI.c",
			"line":	827,
			"primary_score":	999632,
			"second_score":	143525
		}, {
			"file":	"main/SAPI.c",
			"line":	828,
			"primary_score":	999632,
			"second_score":	143524
		}, {
			"file":	"main/SAPI.c",
			"line":	829,
			"primary_score":	999632,
			"second_score":	143421
		}, {
			"file":	"main/SAPI.c",
			"line":	830,
			"primary_score":	999632,
			"second_score":	143420
		}, {
			"file":	"main/SAPI.c",
			"line":	831,
			"primary_score":	999632,
			"second_score":	143419
		}, {
			"file":	"main/SAPI.c",
			"line":	832,
			"primary_score":	999632,
			"second_score":	143396
		}, {
			"file":	"main/SAPI.c",
			"line":	835,
			"primary_score":	999632,
			"second_score":	143395
		}, {
			"file":	"main/SAPI.c",
			"line":	840,
			"primary_score":	999632,
			"second_score":	143394
		}, {
			"file":	"main/SAPI.c",
			"line":	842,
			"primary_score":	999632,
			"second_score":	143393
		}, {
			"file":	"main/SAPI.c",
			"line":	843,
			"primary_score":	999632,
			"second_score":	143392
		}, {
			"file":	"main/SAPI.c",
			"line":	848,
			"primary_score":	999632,
			"second_score":	143390
		}, {
			"file":	"main/SAPI.c",
			"line":	851,
			"primary_score":	999632,
			"second_score":	143389
		}, {
			"file":	"main/SAPI.c",
			"line":	882,
			"primary_score":	999632,
			"second_score":	143388
		}, {
			"file":	"main/SAPI.c",
			"line":	884,
			"primary_score":	999632,
			"second_score":	143386
		}, {
			"file":	"main/SAPI.c",
			"line":	953,
			"primary_score":	999632,
			"second_score":	105205
		}, {
			"file":	"main/SAPI.c",
			"line":	954,
			"primary_score":	999632,
			"second_score":	105204
		}, {
			"file":	"main/SAPI.c",
			"line":	955,
			"primary_score":	999632,
			"second_score":	105202
		}, {
			"file":	"main/main.c",
			"line":	591,
			"primary_score":	999735,
			"second_score":	123065
		}, {
			"file":	"main/main.c",
			"line":	592,
			"primary_score":	999735,
			"second_score":	123064
		}, {
			"file":	"main/main.c",
			"line":	593,
			"primary_score":	999735,
			"second_score":	123063
		}, {
			"file":	"main/main.c",
			"line":	594,
			"primary_score":	999735,
			"second_score":	123062
		}, {
			"file":	"main/main.c",
			"line":	595,
			"primary_score":	999735,
			"second_score":	123061
		}, {
			"file":	"main/main.c",
			"line":	597,
			"primary_score":	999735,
			"second_score":	123060
		}, {
			"file":	"main/main.c",
			"line":	598,
			"primary_score":	999735,
			"second_score":	123059
		}, {
			"file":	"main/main.c",
			"line":	599,
			"primary_score":	999735,
			"second_score":	122805
		}, {
			"file":	"main/main.c",
			"line":	600,
			"primary_score":	999735,
			"second_score":	122756
		}, {
			"file":	"main/main.c",
			"line":	601,
			"primary_score":	999735,
			"second_score":	122737
		}, {
			"file":	"main/main.c",
			"line":	603,
			"primary_score":	999735,
			"second_score":	122736
		}, {
			"file":	"main/main.c",
			"line":	1599,
			"primary_score":	999632,
			"second_score":	122069
		}, {
			"file":	"main/main.c",
			"line":	1600,
			"primary_score":	999632,
			"second_score":	122068
		}, {
			"file":	"main/main.c",
			"line":	1602,
			"primary_score":	999632,
			"second_score":	122067
		}, {
			"file":	"main/main.c",
			"line":	1607,
			"primary_score":	999632,
			"second_score":	122066
		}, {
			"file":	"main/main.c",
			"line":	1608,
			"primary_score":	999632,
			"second_score":	122065
		}, {
			"file":	"main/main.c",
			"line":	1610,
			"primary_score":	999632,
			"second_score":	122064
		}, {
			"file":	"main/main.c",
			"line":	1613,
			"primary_score":	999632,
			"second_score":	122057
		}, {
			"file":	"main/main.c",
			"line":	1614,
			"primary_score":	999632,
			"second_score":	122051
		}, {
			"file":	"main/main.c",
			"line":	1615,
			"primary_score":	999632,
			"second_score":	122049
		}, {
			"file":	"main/main.c",
			"line":	1618,
			"primary_score":	999632,
			"second_score":	122047
		}, {
			"file":	"main/main.c",
			"line":	1619,
			"primary_score":	999632,
			"second_score":	122041
		}, {
			"file":	"main/main.c",
			"line":	1620,
			"primary_score":	999632,
			"second_score":	121226
		}, {
			"file":	"main/main.c",
			"line":	1623,
			"primary_score":	999632,
			"second_score":	121224
		}, {
			"file":	"main/main.c",
			"line":	1624,
			"primary_score":	999632,
			"second_score":	121218
		}, {
			"file":	"main/main.c",
			"line":	1626,
			"primary_score":	999632,
			"second_score":	121217
		}, {
			"file":	"main/main.c",
			"line":	1632,
			"primary_score":	999632,
			"second_score":	121216
		}, {
			"file":	"main/main.c",
			"line":	1635,
			"primary_score":	999632,
			"second_score":	121215
		}, {
			"file":	"main/main.c",
			"line":	1637,
			"primary_score":	999632,
			"second_score":	121213
		}, {
			"file":	"main/main.c",
			"line":	1638,
			"primary_score":	999632,
			"second_score":	121208
		}, {
			"file":	"main/main.c",
			"line":	1641,
			"primary_score":	999632,
			"second_score":	121206
		}, {
			"file":	"main/main.c",
			"line":	1642,
			"primary_score":	999632,
			"second_score":	121200
		}, {
			"file":	"main/main.c",
			"line":	1643,
			"primary_score":	999632,
			"second_score":	121195
		}, {
			"file":	"main/main.c",
			"line":	1646,
			"primary_score":	999632,
			"second_score":	121193
		}, {
			"file":	"main/main.c",
			"line":	1647,
			"primary_score":	999632,
			"second_score":	121192
		}, {
			"file":	"main/main.c",
			"line":	1648,
			"primary_score":	999632,
			"second_score":	120494
		}, {
			"file":	"main/main.c",
			"line":	1652,
			"primary_score":	999632,
			"second_score":	120491
		}, {
			"file":	"main/main.c",
			"line":	1653,
			"primary_score":	999632,
			"second_score":	120485
		}, {
			"file":	"main/main.c",
			"line":	1655,
			"primary_score":	999632,
			"second_score":	120484
		}, {
			"file":	"main/main.c",
			"line":	1656,
			"primary_score":	999632,
			"second_score":	120342
		}, {
			"file":	"main/main.c",
			"line":	1657,
			"primary_score":	999632,
			"second_score":	120341
		}, {
			"file":	"main/main.c",
			"line":	1660,
			"primary_score":	999632,
			"second_score":	120307
		}, {
			"file":	"main/main.c",
			"line":	1663,
			"primary_score":	999632,
			"second_score":	120305
		}, {
			"file":	"main/main.c",
			"line":	1667,
			"primary_score":	999632,
			"second_score":	120304
		}, {
			"file":	"main/main.c",
			"line":	1673,
			"primary_score":	999632,
			"second_score":	120303
		}, {
			"file":	"main/main.c",
			"line":	1676,
			"primary_score":	999632,
			"second_score":	115139
		}, {
			"file":	"main/main.c",
			"line":	1677,
			"primary_score":	999632,
			"second_score":	115133
		}, {
			"file":	"main/main.c",
			"line":	1678,
			"primary_score":	999632,
			"second_score":	115129
		}, {
			"file":	"main/main.c",
			"line":	1681,
			"primary_score":	999632,
			"second_score":	115127
		}, {
			"file":	"main/main.c",
			"line":	1682,
			"primary_score":	999632,
			"second_score":	115121
		}, {
			"file":	"main/main.c",
			"line":	1683,
			"primary_score":	999632,
			"second_score":	115074
		}, {
			"file":	"main/main.c",
			"line":	1686,
			"primary_score":	999632,
			"second_score":	115072
		}, {
			"file":	"main/main.c",
			"line":	1687,
			"primary_score":	999632,
			"second_score":	115066
		}, {
			"file":	"main/main.c",
			"line":	1688,
			"primary_score":	999632,
			"second_score":	115063
		}, {
			"file":	"main/main.c",
			"line":	1691,
			"primary_score":	999632,
			"second_score":	115061
		}, {
			"file":	"main/main.c",
			"line":	1692,
			"primary_score":	999632,
			"second_score":	115055
		}, {
			"file":	"main/main.c",
			"line":	1693,
			"primary_score":	999632,
			"second_score":	114636
		}, {
			"file":	"main/main.c",
			"line":	1694,
			"primary_score":	999632,
			"second_score":	114634
		}, {
			"file":	"main/main.c",
			"line":	1697,
			"primary_score":	999632,
			"second_score":	105226
		}, {
			"file":	"main/main.c",
			"line":	1698,
			"primary_score":	999632,
			"second_score":	105220
		}, {
			"file":	"main/main.c",
			"line":	1699,
			"primary_score":	999632,
			"second_score":	105218
		}, {
			"file":	"main/main.c",
			"line":	1732,
			"primary_score":	999632,
			"second_score":	123354
		}, {
			"file":	"main/main.c",
			"line":	1733,
			"primary_score":	999632,
			"second_score":	123353
		}, {
			"file":	"main/main.c",
			"line":	1753,
			"primary_score":	999632,
			"second_score":	3144
		}, {
			"file":	"main/main.c",
			"line":	1756,
			"primary_score":	999632,
			"second_score":	3143
		}, {
			"file":	"main/main.c",
			"line":	1759,
			"primary_score":	999632,
			"second_score":	3142
		}, {
			"file":	"main/main.c",
			"line":	1762,
			"primary_score":	999632,
			"second_score":	3141
		}, {
			"file":	"main/main.c",
			"line":	1766,
			"primary_score":	999632,
			"second_score":	3140
		}, {
			"file":	"main/main.c",
			"line":	2198,
			"primary_score":	999632,
			"second_score":	105209
		}, {
			"file":	"main/main.c",
			"line":	2200,
			"primary_score":	999632,
			"second_score":	105208
		}, {
			"file":	"main/main.c",
			"line":	2202,
			"primary_score":	999632,
			"second_score":	105207
		}, {
			"file":	"main/main.c",
			"line":	2215,
			"primary_score":	999632,
			"second_score":	105206
		}, {
			"file":	"main/main.c",
			"line":	2217,
			"primary_score":	999632,
			"second_score":	105201
		}, {
			"file":	"main/main.c",
			"line":	2220,
			"primary_score":	999632,
			"second_score":	6125
		}, {
			"file":	"main/main.c",
			"line":	2222,
			"primary_score":	999632,
			"second_score":	6059
		}, {
			"file":	"main/main.c",
			"line":	2223,
			"primary_score":	999632,
			"second_score":	6030
		}, {
			"file":	"main/main.c",
			"line":	2226,
			"primary_score":	999632,
			"second_score":	3571
		}, {
			"file":	"main/main.c",
			"line":	2229,
			"primary_score":	999632,
			"second_score":	3238
		}, {
			"file":	"main/main.c",
			"line":	2230,
			"primary_score":	999632,
			"second_score":	3208
		}, {
			"file":	"main/main.c",
			"line":	2235,
			"primary_score":	999632,
			"second_score":	3185
		}, {
			"file":	"main/main.c",
			"line":	2236,
			"primary_score":	999632,
			"second_score":	3148
		}, {
			"file":	"main/main.c",
			"line":	2238,
			"primary_score":	999632,
			"second_score":	3146
		}, {
			"file":	"main/main.c",
			"line":	2241,
			"primary_score":	999632,
			"second_score":	3145
		}, {
			"file":	"main/main.c",
			"line":	2242,
			"primary_score":	999632,
			"second_score":	3135
		}, {
			"file":	"main/main.c",
			"line":	2346,
			"primary_score":	999632,
			"second_score":	122081
		}, {
			"file":	"main/main.c",
			"line":	2354,
			"primary_score":	999632,
			"second_score":	122079
		}, {
			"file":	"main/main.c",
			"line":	2357,
			"primary_score":	999632,
			"second_score":	122078
		}, {
			"file":	"main/main.c",
			"line":	2359,
			"primary_score":	999632,
			"second_score":	122076
		}, {
			"file":	"main/output.c",
			"line":	103,
			"primary_score":	999632,
			"second_score":	3184
		}, {
			"file":	"main/output.c",
			"line":	104,
			"primary_score":	999632,
			"second_score":	3170
		}, {
			"file":	"main/output.c",
			"line":	105,
			"primary_score":	999632,
			"second_score":	3156
		}, {
			"file":	"main/output.c",
			"line":	129,
			"primary_score":	999632,
			"second_score":	121212
		}, {
			"file":	"main/output.c",
			"line":	131,
			"primary_score":	999632,
			"second_score":	121211
		}, {
			"file":	"main/output.c",
			"line":	132,
			"primary_score":	999632,
			"second_score":	121210
		}, {
			"file":	"main/output.c",
			"line":	135,
			"primary_score":	999632,
			"second_score":	121209
		}, {
			"file":	"main/output.c",
			"line":	198,
			"primary_score":	999632,
			"second_score":	123352
		}, {
			"file":	"main/output.c",
			"line":	201,
			"primary_score":	999632,
			"second_score":	123351
		}, {
			"file":	"main/output.c",
			"line":	202,
			"primary_score":	999632,
			"second_score":	123305
		}, {
			"file":	"main/output.c",
			"line":	281,
			"primary_score":	999632,
			"second_score":	121214
		}, {
			"file":	"main/output.c",
			"line":	697,
			"primary_score":	999632,
			"second_score":	123346
		}, {
			"file":	"main/output.c",
			"line":	703,
			"primary_score":	999632,
			"second_score":	123345
		}, {
			"file":	"main/output.c",
			"line":	711,
			"primary_score":	999632,
			"second_score":	123343
		}, {
			"file":	"main/output.c",
			"line":	715,
			"primary_score":	999632,
			"second_score":	123342
		}, {
			"file":	"main/output.c",
			"line":	716,
			"primary_score":	999632,
			"second_score":	123341
		}, {
			"file":	"main/output.c",
			"line":	717,
			"primary_score":	999632,
			"second_score":	123340
		}, {
			"file":	"main/output.c",
			"line":	719,
			"primary_score":	999632,
			"second_score":	123339
		}, {
			"file":	"main/output.c",
			"line":	785,
			"primary_score":	999632,
			"second_score":	123307
		}, {
			"file":	"main/output.c",
			"line":	789,
			"primary_score":	999632,
			"second_score":	123306
		}, {
			"file":	"main/output.c",
			"line":	975,
			"primary_score":	999632,
			"second_score":	123350
		}, {
			"file":	"main/output.c",
			"line":	976,
			"primary_score":	999632,
			"second_score":	123349
		}, {
			"file":	"main/output.c",
			"line":	977,
			"primary_score":	999632,
			"second_score":	123348
		}, {
			"file":	"main/output.c",
			"line":	979,
			"primary_score":	999632,
			"second_score":	123347
		}, {
			"file":	"main/output.c",
			"line":	983,
			"primary_score":	999632,
			"second_score":	123344
		}, {
			"file":	"main/output.c",
			"line":	990,
			"primary_score":	999632,
			"second_score":	123338
		}, {
			"file":	"main/output.c",
			"line":	1002,
			"primary_score":	999632,
			"second_score":	123337
		}, {
			"file":	"main/output.c",
			"line":	1003,
			"primary_score":	999632,
			"second_score":	123336
		}, {
			"file":	"main/output.c",
			"line":	1006,
			"primary_score":	999632,
			"second_score":	123335
		}, {
			"file":	"main/output.c",
			"line":	1010,
			"primary_score":	999632,
			"second_score":	123334
		}, {
			"file":	"main/output.c",
			"line":	1011,
			"primary_score":	999632,
			"second_score":	143384
		}, {
			"file":	"main/output.c",
			"line":	1014,
			"primary_score":	999632,
			"second_score":	143382
		}, {
			"file":	"main/output.c",
			"line":	1015,
			"primary_score":	999632,
			"second_score":	143380
		}, {
			"file":	"main/output.c",
			"line":	1016,
			"primary_score":	999632,
			"second_score":	143377
		}, {
			"file":	"main/output.c",
			"line":	1022,
			"primary_score":	999632,
			"second_score":	123333
		}, {
			"file":	"main/output.c",
			"line":	1023,
			"primary_score":	999632,
			"second_score":	123315
		}, {
			"file":	"main/output.c",
			"line":	1024,
			"primary_score":	999632,
			"second_score":	123314
		}, {
			"file":	"main/output.c",
			"line":	1026,
			"primary_score":	999632,
			"second_score":	123309
		}, {
			"file":	"main/output.c",
			"line":	1028,
			"primary_score":	999632,
			"second_score":	123308
		}, {
			"file":	"main/php_ini.c",
			"line":	194,
			"primary_score":	999632,
			"second_score":	3250
		}, {
			"file":	"main/php_ini.c",
			"line":	197,
			"primary_score":	999632,
			"second_score":	3249
		}, {
			"file":	"main/php_ini.c",
			"line":	198,
			"primary_score":	999632,
			"second_score":	3248
		}, {
			"file":	"main/php_ini.c",
			"line":	729,
			"primary_score":	999632,
			"second_score":	3570
		}, {
			"file":	"main/php_ini.c",
			"line":	730,
			"primary_score":	999632,
			"second_score":	3241
		}, {
			"file":	"main/php_ini.c",
			"line":	734,
			"primary_score":	999632,
			"second_score":	3240
		}, {
			"file":	"main/php_ini.c",
			"line":	738,
			"primary_score":	999632,
			"second_score":	3239
		}, {
			"file":	"main/php_logos.c",
			"line":	67,
			"primary_score":	999632,
			"second_score":	6058
		}, {
			"file":	"main/php_logos.c",
			"line":	68,
			"primary_score":	999632,
			"second_score":	6031
		}, {
			"file":	"main/php_open_temporary_file.c",
			"line":	183,
			"primary_score":	999632,
			"second_score":	3147
		}, {
			"file":	"main/php_ticks.c",
			"line":	32,
			"primary_score":	999632,
			"second_score":	122063
		}, {
			"file":	"main/php_ticks.c",
			"line":	37,
			"primary_score":	999632,
			"second_score":	3139
		}, {
			"file":	"main/snprintf.c",
			"line":	317,
			"primary_score":	999648,
			"second_score":	122879
		}, {
			"file":	"main/snprintf.c",
			"line":	318,
			"primary_score":	999648,
			"second_score":	122878
		}, {
			"file":	"main/snprintf.c",
			"line":	320,
			"primary_score":	999648,
			"second_score":	122877
		}, {
			"file":	"main/snprintf.c",
			"line":	324,
			"primary_score":	999648,
			"second_score":	122876
		}, {
			"file":	"main/snprintf.c",
			"line":	335,
			"primary_score":	999648,
			"second_score":	122875
		}, {
			"file":	"main/snprintf.c",
			"line":	339,
			"primary_score":	999648,
			"second_score":	122874
		}, {
			"file":	"main/snprintf.c",
			"line":	346,
			"primary_score":	999648,
			"second_score":	122873
		}, {
			"file":	"main/snprintf.c",
			"line":	347,
			"primary_score":	999648,
			"second_score":	122872
		}, {
			"file":	"main/snprintf.c",
			"line":	349,
			"primary_score":	999648,
			"second_score":	122871
		}, {
			"file":	"main/snprintf.c",
			"line":	350,
			"primary_score":	999648,
			"second_score":	122870
		}, {
			"file":	"main/snprintf.c",
			"line":	354,
			"primary_score":	999648,
			"second_score":	122869
		}, {
			"file":	"main/snprintf.c",
			"line":	355,
			"primary_score":	999648,
			"second_score":	122868
		}, {
			"file":	"main/snprintf.c",
			"line":	646,
			"primary_score":	999845,
			"second_score":	127382
		}, {
			"file":	"main/snprintf.c",
			"line":	647,
			"primary_score":	999845,
			"second_score":	127375
		}, {
			"file":	"main/snprintf.c",
			"line":	649,
			"primary_score":	999845,
			"second_score":	127374
		}, {
			"file":	"main/snprintf.c",
			"line":	651,
			"primary_score":	999845,
			"second_score":	127373
		}, {
			"file":	"main/snprintf.c",
			"line":	653,
			"primary_score":	999845,
			"second_score":	127372
		}, {
			"file":	"main/snprintf.c",
			"line":	655,
			"primary_score":	999845,
			"second_score":	127371
		}, {
			"file":	"main/snprintf.c",
			"line":	656,
			"primary_score":	999846,
			"second_score":	127376
		}, {
			"file":	"main/snprintf.c",
			"line":	658,
			"primary_score":	999845,
			"second_score":	127370
		}, {
			"file":	"main/snprintf.c",
			"line":	664,
			"primary_score":	999845,
			"second_score":	127369
		}, {
			"file":	"main/snprintf.c",
			"line":	665,
			"primary_score":	999846,
			"second_score":	127368
		}, {
			"file":	"main/snprintf.c",
			"line":	666,
			"primary_score":	999846,
			"second_score":	127365
		}, {
			"file":	"main/snprintf.c",
			"line":	681,
			"primary_score":	999845,
			"second_score":	127364
		}, {
			"file":	"main/snprintf.c",
			"line":	698,
			"primary_score":	999846,
			"second_score":	127363
		}, {
			"file":	"main/snprintf.c",
			"line":	732,
			"primary_score":	999871,
			"second_score":	128148
		}, {
			"file":	"main/snprintf.c",
			"line":	733,
			"primary_score":	999875,
			"second_score":	128147
		}, {
			"file":	"main/snprintf.c",
			"line":	734,
			"primary_score":	999875,
			"second_score":	128146
		}, {
			"file":	"main/snprintf.c",
			"line":	738,
			"primary_score":	999871,
			"second_score":	128145
		}, {
			"file":	"main/snprintf.c",
			"line":	833,
			"primary_score":	999841,
			"second_score":	127359
		}, {
			"file":	"main/snprintf.c",
			"line":	836,
			"primary_score":	999844,
			"second_score":	127358
		}, {
			"file":	"main/snprintf.c",
			"line":	852,
			"primary_score":	999875,
			"second_score":	128142
		}, {
			"file":	"main/snprintf.c",
			"line":	866,
			"primary_score":	999841,
			"second_score":	127357
		}, {
			"file":	"main/snprintf.c",
			"line":	868,
			"primary_score":	999841,
			"second_score":	127344
		}, {
			"file":	"main/snprintf.c",
			"line":	870,
			"primary_score":	999841,
			"second_score":	127342
		}, {
			"file":	"main/snprintf.c",
			"line":	871,
			"primary_score":	999841,
			"second_score":	127341
		}, {
			"file":	"main/snprintf.c",
			"line":	873,
			"primary_score":	999841,
			"second_score":	127340
		}, {
			"file":	"main/snprintf.c",
			"line":	875,
			"primary_score":	999841,
			"second_score":	127339
		}, {
			"file":	"main/snprintf.c",
			"line":	879,
			"primary_score":	999841,
			"second_score":	127338
		}, {
			"file":	"main/snprintf.c",
			"line":	1157,
			"primary_score":	999856,
			"second_score":	127335
		}, {
			"file":	"main/snprintf.c",
			"line":	1163,
			"primary_score":	999856,
			"second_score":	127334
		}, {
			"file":	"main/snprintf.c",
			"line":	1223,
			"primary_score":	999843,
			"second_score":	127429
		}, {
			"file":	"main/snprintf.c",
			"line":	1224,
			"primary_score":	999843,
			"second_score":	127428
		}, {
			"file":	"main/snprintf.c",
			"line":	1226,
			"primary_score":	999843,
			"second_score":	127427
		}, {
			"file":	"main/snprintf.c",
			"line":	1227,
			"primary_score":	999843,
			"second_score":	127426
		}, {
			"file":	"main/snprintf.c",
			"line":	1228,
			"primary_score":	999843,
			"second_score":	127311
		}, {
			"file":	"main/snprintf.c",
			"line":	1229,
			"primary_score":	999843,
			"second_score":	127310
		}, {
			"file":	"main/snprintf.c",
			"line":	1233,
			"primary_score":	999843,
			"second_score":	127309
		}, {
			"file":	"main/spprintf.c",
			"line":	254,
			"primary_score":	999894,
			"second_score":	123221
		}, {
			"file":	"main/spprintf.c",
			"line":	255,
			"primary_score":	999894,
			"second_score":	123220
		}, {
			"file":	"main/spprintf.c",
			"line":	257,
			"primary_score":	999894,
			"second_score":	123219
		}, {
			"file":	"main/spprintf.c",
			"line":	259,
			"primary_score":	999894,
			"second_score":	123218
		}, {
			"file":	"main/spprintf.c",
			"line":	261,
			"primary_score":	999894,
			"second_score":	123217
		}, {
			"file":	"main/spprintf.c",
			"line":	263,
			"primary_score":	999894,
			"second_score":	123216
		}, {
			"file":	"main/spprintf.c",
			"line":	266,
			"primary_score":	999894,
			"second_score":	123215
		}, {
			"file":	"main/spprintf.c",
			"line":	272,
			"primary_score":	999894,
			"second_score":	123214
		}, {
			"file":	"main/spprintf.c",
			"line":	275,
			"primary_score":	999899,
			"second_score":	123213
		}, {
			"file":	"main/spprintf.c",
			"line":	276,
			"primary_score":	999929,
			"second_score":	123212
		}, {
			"file":	"main/spprintf.c",
			"line":	277,
			"primary_score":	999929,
			"second_score":	123211
		}, {
			"file":	"main/spprintf.c",
			"line":	278,
			"primary_score":	999929,
			"second_score":	123210
		}, {
			"file":	"main/spprintf.c",
			"line":	279,
			"primary_score":	999929,
			"second_score":	123209
		}, {
			"file":	"main/spprintf.c",
			"line":	289,
			"primary_score":	999894,
			"second_score":	123208
		}, {
			"file":	"main/spprintf.c",
			"line":	306,
			"primary_score":	999913,
			"second_score":	123207
		}, {
			"file":	"main/spprintf.c",
			"line":	340,
			"primary_score":	999819,
			"second_score":	124040
		}, {
			"file":	"main/spprintf.c",
			"line":	345,
			"primary_score":	999819,
			"second_score":	124039
		}, {
			"file":	"main/spprintf.c",
			"line":	346,
			"primary_score":	999819,
			"second_score":	124038
		}, {
			"file":	"main/spprintf.c",
			"line":	441,
			"primary_score":	999718,
			"second_score":	122882
		}, {
			"file":	"main/spprintf.c",
			"line":	444,
			"primary_score":	999759,
			"second_score":	122881
		}, {
			"file":	"main/spprintf.c",
			"line":	449,
			"primary_score":	999819,
			"second_score":	124035
		}, {
			"file":	"main/spprintf.c",
			"line":	474,
			"primary_score":	999718,
			"second_score":	122880
		}, {
			"file":	"main/spprintf.c",
			"line":	476,
			"primary_score":	999718,
			"second_score":	122867
		}, {
			"file":	"main/spprintf.c",
			"line":	478,
			"primary_score":	999718,
			"second_score":	122865
		}, {
			"file":	"main/spprintf.c",
			"line":	479,
			"primary_score":	999718,
			"second_score":	122864
		}, {
			"file":	"main/spprintf.c",
			"line":	481,
			"primary_score":	999718,
			"second_score":	122863
		}, {
			"file":	"main/spprintf.c",
			"line":	483,
			"primary_score":	999718,
			"second_score":	122862
		}, {
			"file":	"main/spprintf.c",
			"line":	486,
			"primary_score":	999718,
			"second_score":	122861
		}, {
			"file":	"main/spprintf.c",
			"line":	686,
			"primary_score":	999927,
			"second_score":	123203
		}, {
			"file":	"main/spprintf.c",
			"line":	687,
			"primary_score":	999927,
			"second_score":	123202
		}, {
			"file":	"main/spprintf.c",
			"line":	688,
			"primary_score":	999927,
			"second_score":	123201
		}, {
			"file":	"main/spprintf.c",
			"line":	689,
			"primary_score":	999927,
			"second_score":	123200
		}, {
			"file":	"main/spprintf.c",
			"line":	764,
			"primary_score":	999918,
			"second_score":	123197
		}, {
			"file":	"main/spprintf.c",
			"line":	770,
			"primary_score":	999919,
			"second_score":	123191
		}, {
			"file":	"main/spprintf.c",
			"line":	775,
			"primary_score":	999706,
			"second_score":	123008
		}, {
			"file":	"main/streams/filter.c",
			"line":	37,
			"primary_score":	999632,
			"second_score":	6099
		}, {
			"file":	"main/streams/filter.c",
			"line":	54,
			"primary_score":	999632,
			"second_score":	63059
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	287,
			"primary_score":	999632,
			"second_score":	149282
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	371,
			"primary_score":	999632,
			"second_score":	115666
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	372,
			"primary_score":	999632,
			"second_score":	115665
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	374,
			"primary_score":	999632,
			"second_score":	115664
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	377,
			"primary_score":	999632,
			"second_score":	115663
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	392,
			"primary_score":	999632,
			"second_score":	115662
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	393,
			"primary_score":	999632,
			"second_score":	115661
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	394,
			"primary_score":	999632,
			"second_score":	115660
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	404,
			"primary_score":	999632,
			"second_score":	115659
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	405,
			"primary_score":	999632,
			"second_score":	115658
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	413,
			"primary_score":	999632,
			"second_score":	115657
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	425,
			"primary_score":	999632,
			"second_score":	115656
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	427,
			"primary_score":	999632,
			"second_score":	115637
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	432,
			"primary_score":	999632,
			"second_score":	115676
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	434,
			"primary_score":	999632,
			"second_score":	115675
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	441,
			"primary_score":	999632,
			"second_score":	115674
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	442,
			"primary_score":	999632,
			"second_score":	115673
		}, {
			"file":	"main/streams/streams.c",
			"line":	104,
			"primary_score":	999632,
			"second_score":	121136
		}, {
			"file":	"main/streams/streams.c",
			"line":	105,
			"primary_score":	999632,
			"second_score":	121127
		}, {
			"file":	"main/streams/streams.c",
			"line":	333,
			"primary_score":	999632,
			"second_score":	115690
		}, {
			"file":	"main/streams/streams.c",
			"line":	334,
			"primary_score":	999632,
			"second_score":	115689
		}, {
			"file":	"main/streams/streams.c",
			"line":	335,
			"primary_score":	999632,
			"second_score":	115688
		}, {
			"file":	"main/streams/streams.c",
			"line":	336,
			"primary_score":	999632,
			"second_score":	115687
		}, {
			"file":	"main/streams/streams.c",
			"line":	338,
			"primary_score":	999632,
			"second_score":	115686
		}, {
			"file":	"main/streams/streams.c",
			"line":	351,
			"primary_score":	999632,
			"second_score":	115685
		}, {
			"file":	"main/streams/streams.c",
			"line":	360,
			"primary_score":	999632,
			"second_score":	115684
		}, {
			"file":	"main/streams/streams.c",
			"line":	364,
			"primary_score":	999632,
			"second_score":	115683
		}, {
			"file":	"main/streams/streams.c",
			"line":	382,
			"primary_score":	999632,
			"second_score":	115682
		}, {
			"file":	"main/streams/streams.c",
			"line":	402,
			"primary_score":	999632,
			"second_score":	115681
		}, {
			"file":	"main/streams/streams.c",
			"line":	405,
			"primary_score":	999632,
			"second_score":	115671
		}, {
			"file":	"main/streams/streams.c",
			"line":	415,
			"primary_score":	999632,
			"second_score":	115670
		}, {
			"file":	"main/streams/streams.c",
			"line":	419,
			"primary_score":	999632,
			"second_score":	115669
		}, {
			"file":	"main/streams/streams.c",
			"line":	420,
			"primary_score":	999632,
			"second_score":	115668
		}, {
			"file":	"main/streams/streams.c",
			"line":	432,
			"primary_score":	999632,
			"second_score":	115667
		}, {
			"file":	"main/streams/streams.c",
			"line":	433,
			"primary_score":	999632,
			"second_score":	115636
		}, {
			"file":	"main/streams/streams.c",
			"line":	436,
			"primary_score":	999632,
			"second_score":	115635
		}, {
			"file":	"main/streams/streams.c",
			"line":	443,
			"primary_score":	999632,
			"second_score":	115634
		}, {
			"file":	"main/streams/streams.c",
			"line":	444,
			"primary_score":	999632,
			"second_score":	115633
		}, {
			"file":	"main/streams/streams.c",
			"line":	447,
			"primary_score":	999632,
			"second_score":	115632
		}, {
			"file":	"main/streams/streams.c",
			"line":	451,
			"primary_score":	999632,
			"second_score":	115631
		}, {
			"file":	"main/streams/streams.c",
			"line":	456,
			"primary_score":	999632,
			"second_score":	115630
		}, {
			"file":	"main/streams/streams.c",
			"line":	461,
			"primary_score":	999632,
			"second_score":	115629
		}, {
			"file":	"main/streams/streams.c",
			"line":	466,
			"primary_score":	999632,
			"second_score":	115628
		}, {
			"file":	"main/streams/streams.c",
			"line":	498,
			"primary_score":	999632,
			"second_score":	115627
		}, {
			"file":	"main/streams/streams.c",
			"line":	499,
			"primary_score":	999632,
			"second_score":	115626
		}, {
			"file":	"main/streams/streams.c",
			"line":	500,
			"primary_score":	999632,
			"second_score":	115607
		}, {
			"file":	"main/streams/streams.c",
			"line":	503,
			"primary_score":	999632,
			"second_score":	115606
		}, {
			"file":	"main/streams/streams.c",
			"line":	507,
			"primary_score":	999632,
			"second_score":	115587
		}, {
			"file":	"main/streams/streams.c",
			"line":	511,
			"primary_score":	999632,
			"second_score":	115586
		}, {
			"file":	"main/streams/streams.c",
			"line":	1123,
			"primary_score":	999632,
			"second_score":	115680
		}, {
			"file":	"main/streams/streams.c",
			"line":	1125,
			"primary_score":	999632,
			"second_score":	115679
		}, {
			"file":	"main/streams/streams.c",
			"line":	1129,
			"primary_score":	999632,
			"second_score":	115678
		}, {
			"file":	"main/streams/streams.c",
			"line":	1130,
			"primary_score":	999632,
			"second_score":	115677
		}, {
			"file":	"main/streams/streams.c",
			"line":	1133,
			"primary_score":	999632,
			"second_score":	115672
		}, {
			"file":	"main/streams/streams.c",
			"line":	1507,
			"primary_score":	999632,
			"second_score":	115692
		}, {
			"file":	"main/streams/streams.c",
			"line":	1509,
			"primary_score":	999632,
			"second_score":	115691
		}, {
			"file":	"main/streams/streams.c",
			"line":	1520,
			"primary_score":	999632,
			"second_score":	115065
		}, {
			"file":	"main/streams/streams.c",
			"line":	1526,
			"primary_score":	999632,
			"second_score":	115064
		}, {
			"file":	"main/streams/streams.c",
			"line":	1562,
			"primary_score":	999632,
			"second_score":	6124
		}, {
			"file":	"main/streams/streams.c",
			"line":	1563,
			"primary_score":	999632,
			"second_score":	6100
		}, {
			"file":	"main/streams/streams.c",
			"line":	1564,
			"primary_score":	999632,
			"second_score":	6090
		}, {
			"file":	"main/streams/streams.c",
			"line":	1565,
			"primary_score":	999632,
			"second_score":	6060
		}, {
			"file":	"main/streams/streams.c",
			"line":	1601,
			"primary_score":	999632,
			"second_score":	98560
		}, {
			"file":	"main/streams/transports.c",
			"line":	29,
			"primary_score":	999632,
			"second_score":	6089
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	255,
			"primary_score":	999632,
			"second_score":	123325
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	260,
			"primary_score":	999632,
			"second_score":	123324
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	269,
			"primary_score":	999632,
			"second_score":	123323
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	270,
			"primary_score":	999632,
			"second_score":	123322
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	273,
			"primary_score":	999632,
			"second_score":	123321
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	277,
			"primary_score":	999632,
			"second_score":	123320
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	287,
			"primary_score":	999632,
			"second_score":	123332
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	288,
			"primary_score":	999632,
			"second_score":	123331
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	289,
			"primary_score":	999632,
			"second_score":	123330
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	291,
			"primary_score":	999632,
			"second_score":	123329
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	295,
			"primary_score":	999632,
			"second_score":	123328
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	303,
			"primary_score":	999632,
			"second_score":	123327
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	305,
			"primary_score":	999632,
			"second_score":	123326
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	306,
			"primary_score":	999632,
			"second_score":	123319
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	312,
			"primary_score":	999632,
			"second_score":	123318
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	313,
			"primary_score":	999632,
			"second_score":	123317
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	316,
			"primary_score":	999632,
			"second_score":	123316
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	325,
			"primary_score":	999632,
			"second_score":	105203
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	378,
			"primary_score":	999632,
			"second_score":	115105
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	379,
			"primary_score":	999632,
			"second_score":	115104
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	383,
			"primary_score":	999632,
			"second_score":	115103
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	395,
			"primary_score":	999632,
			"second_score":	143417
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	403,
			"primary_score":	999632,
			"second_score":	143391
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1137,
			"primary_score":	999632,
			"second_score":	122075
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1140,
			"primary_score":	999632,
			"second_score":	122074
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1177,
			"primary_score":	999632,
			"second_score":	123839
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1180,
			"primary_score":	999632,
			"second_score":	120807
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1319,
			"primary_score":	999632,
			"second_score":	122073
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1321,
			"primary_score":	999632,
			"second_score":	122071
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1323,
			"primary_score":	999632,
			"second_score":	122070
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1325,
			"primary_score":	999632,
			"second_score":	105216
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1326,
			"primary_score":	999632,
			"second_score":	105215
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1328,
			"primary_score":	999632,
			"second_score":	105214
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1332,
			"primary_score":	999632,
			"second_score":	105213
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1333,
			"primary_score":	999632,
			"second_score":	105212
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1336,
			"primary_score":	999632,
			"second_score":	105211
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1337,
			"primary_score":	999632,
			"second_score":	105210
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1339,
			"primary_score":	999632,
			"second_score":	3130
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1344,
			"primary_score":	999632,
			"second_score":	1
		}],
	"mutation_info":	[{
			"file":	"ext/date/php_date.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"ext/date/php_date.c",
			"lines":	[{
					"line":	2838,
					"switches":	[]
				}, {
					"line":	2839,
					"switches":	[]
				}, {
					"line":	2840,
					"switches":	[]
				}, {
					"line":	2841,
					"switches":	[]
				}, {
					"line":	2843,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [388], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [], [], [], [291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387], [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], [], [], [], [], [], []],
							"begin_line":	2844,
							"begin_column":	0,
							"end_line":	2844,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2844\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	2,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	3,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	4,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	5,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	6,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	7,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	8,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	9,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	10,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	11,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	12,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	13,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	14,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	15,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	16,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	17,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	18,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	19,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	20,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	21,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	22,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	23,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	24,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	25,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	26,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	27,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	28,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	29,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	30,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	31,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	32,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	33,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	34,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	35,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	36,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	37,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	38,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	39,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	40,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	41,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	42,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	43,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	44,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	45,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	46,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	47,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	48,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	49,
									"scores":	[-5.9524964444976121]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	246,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	247,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	248,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	249,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	250,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	251,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	252,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	253,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	254,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	255,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	256,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	257,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	258,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	259,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	260,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	261,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	262,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	263,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	264,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	265,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	266,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	267,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	268,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	269,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	270,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	271,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	272,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	273,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	274,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	275,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	276,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	277,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	278,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	279,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	280,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	281,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	282,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	283,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	284,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	285,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	286,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	287,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	288,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	289,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	290,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	291,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	292,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	293,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	294,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	295,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	296,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	297,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	298,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	299,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	300,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	301,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	302,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	303,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	304,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	305,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	306,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	307,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	308,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	309,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	310,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	311,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	312,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	313,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	314,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	315,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	316,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	317,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	318,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	319,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	320,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	321,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	322,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	323,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	324,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	325,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	326,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	327,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	328,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	329,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	330,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	331,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	332,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	333,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	334,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	335,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	336,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	337,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	338,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	339,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	340,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	341,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	342,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	343,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	344,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	345,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	346,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	347,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	348,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	349,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	350,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	351,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	352,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	353,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	354,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	355,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	356,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	357,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	358,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	359,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	360,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	361,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	362,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	363,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	364,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	365,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	366,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	367,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	368,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	369,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	370,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	371,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	372,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	373,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	374,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	375,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	376,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	377,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	378,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	379,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	380,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	381,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	382,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	383,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	384,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	385,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	386,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	387,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	388,
									"scores":	[-8.87253467149761, -9.11857358529761, -9.50573813729761, -10.180824484297613, -9.34054539329761, -9.34054539329761, -9.9738815542976127, -10.771885931197613, -9.9367811542976128, -9.69074224049761, -10.504888414497611, -10.715777531497611, -10.003953414497612, -10.750927328297612, -10.504888414497611, -10.504888414497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.504888414497611, -10.504888414497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.504888414497611, -10.504888414497611, -10.504888414497611, -10.504888414497611, -10.504888414497611, -10.504888414497611, -10.715777531497611, -10.504888414497611, -10.715777531497611, -10.504888414497611, -10.715777531497611, -10.715777531497611, -10.504888414497611, -10.715777531497611, -10.003953414497612, -10.750927328297612, -10.504888414497611, -10.504888414497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.504888414497611, -10.504888414497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.715777531497611, -10.504888414497611, -10.504888414497611, -10.504888414497611, -10.504888414497611, -10.504888414497611, -10.504888414497611, -10.715777531497611, -10.504888414497611, -10.715777531497611, -10.504888414497611, -10.715777531497611, -10.715777531497611]
								}]
						}, {
							"switch":	1,
							"types":	[[6], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5], []],
							"begin_line":	2844,
							"begin_column":	2,
							"end_line":	2846,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L2844\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) || __is_neg(\"\", \"L2844\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (dprintf((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_get_parameters_ex((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_parse_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) && !__is_neg(\"\", \"L2844\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.8627493644281445, -2.6206374644281443, -1.9065308334281452, -2.5843710644281441, -2.6433418044281445, -2.6433418044281445, -3.3340727644281447, -3.3103796433281452, -3.0397219644281446, -2.2818338644281448, -2.8066786744281447, -3.2759386744281449, -2.4846676444281446, -3.5645667744281448, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.4846676444281446, -3.5645667744281448, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449]
								}, {
									"case":	2,
									"scores":	[-4.5662482103281468, -5.3241363103281465, -4.6100296793281457, -5.2878699103281459, -5.3468406503281471, -5.3468406503281471, -6.0375716103281469, -6.0138784892281461, -5.7432208103281468, -4.9853327103281462, -5.5101775203281464, -5.9794375203281458, -5.1881664903281468, -6.2680656203281462, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.1881664903281468, -6.2680656203281462, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-4.5662482103281468, -5.3241363103281465, -4.6100296793281457, -5.2878699103281459, -5.3468406503281471, -5.3468406503281471, -6.0375716103281469, -6.0138784892281461, -5.7432208103281468, -4.9853327103281462, -5.5101775203281464, -5.9794375203281458, -5.1881664903281468, -6.2680656203281462, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.1881664903281468, -6.2680656203281462, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.9794375203281458, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.5101775203281464, -5.9794375203281458, -5.9794375203281458]
								}]
						}, {
							"switch":	2,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2844,
							"begin_column":	2,
							"end_line":	2846,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L2844\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences)))\n    if (zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) {\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L2844\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences)) && (zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1)) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9620466044976119, -7.7199347044976117, -7.0058280734976117, -7.683668304497612, -7.7426390444976114, -7.7426390444976114, -8.43337000449761, -8.40967688339761, -8.13901920449761, -7.3811311044976122, -7.9059759144976116, -8.37523591449761, -7.583964884497612, -8.66386401449761, -7.9059759144976116, -7.9059759144976116, -8.37523591449761, -8.37523591449761, -8.37523591449761, -7.9059759144976116, -7.9059759144976116, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -7.9059759144976116, -7.9059759144976116, -7.9059759144976116, -7.9059759144976116, -7.9059759144976116, -7.9059759144976116, -8.37523591449761, -7.9059759144976116, -8.37523591449761, -7.9059759144976116, -8.37523591449761, -8.37523591449761, -7.9059759144976116, -8.37523591449761, -7.583964884497612, -8.66386401449761, -7.9059759144976116, -7.9059759144976116, -8.37523591449761, -8.37523591449761, -8.37523591449761, -7.9059759144976116, -7.9059759144976116, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -8.37523591449761, -7.9059759144976116, -7.9059759144976116, -7.9059759144976116, -7.9059759144976116, -7.9059759144976116, -7.9059759144976116, -8.37523591449761, -7.9059759144976116, -8.37523591449761, -7.9059759144976116, -8.37523591449761, -8.37523591449761]
								}, {
									"case":	2,
									"scores":	[-7.7844335393976127, -8.54232163939761, -7.8282150083976116, -8.50605523939761, -8.56502597939761, -8.56502597939761, -9.25575693939761, -9.23206381829761, -8.96140613939761, -8.20351803939761, -8.72836284939761, -9.19762284939761, -8.40635181939761, -9.48625094939761, -8.72836284939761, -8.72836284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -8.72836284939761, -8.72836284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -8.72836284939761, -8.72836284939761, -8.72836284939761, -8.72836284939761, -8.72836284939761, -8.72836284939761, -9.19762284939761, -8.72836284939761, -9.19762284939761, -8.72836284939761, -9.19762284939761, -9.19762284939761, -8.72836284939761, -9.19762284939761, -8.40635181939761, -9.48625094939761, -8.72836284939761, -8.72836284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -8.72836284939761, -8.72836284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -9.19762284939761, -8.72836284939761, -8.72836284939761, -8.72836284939761, -8.72836284939761, -8.72836284939761, -8.72836284939761, -9.19762284939761, -8.72836284939761, -9.19762284939761, -8.72836284939761, -9.19762284939761, -9.19762284939761]
								}]
						}]
				}, {
					"line":	2846,
					"switches":	[{
							"switch":	3,
							"types":	[[], [], [], [], [389], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	2847,
							"begin_column":	0,
							"end_line":	2847,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2847\", 32, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	2,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	3,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	4,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	5,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	6,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	7,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	8,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	9,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	10,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	11,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	12,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	13,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	14,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	15,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	16,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	17,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	18,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	19,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	20,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	21,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	22,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	23,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	24,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	25,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	26,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	27,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	28,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	29,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	30,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	31,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	32,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	33,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	34,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	35,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	36,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	37,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	38,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	39,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	40,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	41,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	42,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	43,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	44,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	45,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	46,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	47,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	48,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	49,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	50,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	51,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	52,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	53,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	54,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	55,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	56,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	57,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	58,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	59,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	60,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	61,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	62,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	63,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	64,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	65,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	66,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	67,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	68,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	69,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	70,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	71,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	72,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	73,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	74,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	75,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	76,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	77,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	78,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	79,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	80,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	81,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	82,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	83,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	84,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	85,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	86,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	87,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	88,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	89,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	90,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	91,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	92,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	93,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	94,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	95,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	96,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	97,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	98,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	99,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	100,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	101,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	102,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	103,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	104,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	105,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	106,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	107,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	108,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	109,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	110,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	111,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	112,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	113,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	114,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	115,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	116,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	117,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	118,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	119,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	120,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	121,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	122,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	123,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	124,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	125,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	126,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	127,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	128,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	129,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	130,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	131,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	132,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	133,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	134,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	135,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	136,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	137,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	138,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	139,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	140,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	141,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	142,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	143,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	144,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	145,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	146,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	147,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	148,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	149,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	150,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	151,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	152,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	153,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	154,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	155,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	156,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	157,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	158,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	159,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	160,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	161,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	162,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	163,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	164,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	165,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	166,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	167,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	168,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	169,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	170,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	171,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	172,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	173,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	174,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	175,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	176,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	177,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	178,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	179,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	180,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	181,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	182,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	183,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	184,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	185,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	186,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	187,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	188,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	189,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	190,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	191,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	192,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	193,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	194,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	195,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	196,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	197,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	198,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	199,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	200,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	201,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	202,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	203,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	204,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	205,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	206,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	207,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	208,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	209,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	210,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	211,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	212,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	213,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	214,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	215,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	216,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	217,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	218,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	219,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	220,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	221,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	222,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	223,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	224,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	225,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	226,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	227,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	228,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	229,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	230,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	231,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	232,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	233,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	234,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	235,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	236,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	237,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	238,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	239,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	240,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	241,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	242,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	243,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	244,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	245,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	246,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	247,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	248,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	249,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	250,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	251,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	252,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	253,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	254,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	255,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	256,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	257,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	258,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	259,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	260,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	261,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	262,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	263,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	264,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	265,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	266,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	267,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	268,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	269,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	270,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	271,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	272,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	273,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	274,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	275,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	276,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	277,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	278,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	279,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	280,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	281,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	282,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	283,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	284,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	285,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	286,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	287,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	288,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	289,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	290,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	291,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	292,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	293,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	294,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	295,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	296,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	297,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	298,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	299,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	300,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	301,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	302,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	303,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	304,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	305,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	306,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	307,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	308,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	309,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	310,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	311,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	312,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	313,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	314,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	315,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	316,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	317,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	318,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	319,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	320,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	321,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	322,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	323,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	324,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	325,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	326,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	327,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	328,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	329,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	330,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	331,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	332,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	333,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	334,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	335,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	336,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	337,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	338,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	339,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	340,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	341,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	342,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	343,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	344,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	345,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	346,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	347,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	348,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	349,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	350,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	351,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	352,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	353,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	354,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	355,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	356,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	357,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	358,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	359,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	360,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	361,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	362,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	363,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	364,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	365,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	366,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	367,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	368,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	369,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	370,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	371,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	372,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	373,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	374,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	375,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	376,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	377,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	378,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	379,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	380,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	381,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	382,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	383,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	384,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	385,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	386,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	387,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	388,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	389,
									"scores":	[-6.517496517980093, -9.40743334488009, -9.4680572469800932, -10.245103020980093, -8.69191813998009, -9.39955836698009, -9.24213241318009, -9.48817132698009, -9.7101431349800933, -9.7101431349800933, -9.18491793318009, -9.999064107180093, -9.999064107180093, -10.245103020980093, -9.999064107180093, -9.999064107180093, -9.999064107180093, -9.999064107180093, -9.999064107180093, -9.999064107180093, -9.999064107180093, -10.209953224180092, -10.245103020980093, -9.999064107180093, -9.999064107180093, -9.999064107180093, -9.999064107180093, -9.999064107180093, -9.999064107180093, -9.999064107180093, -9.999064107180093, -9.999064107180093]
								}]
						}, {
							"switch":	4,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2847,
							"begin_column":	2,
							"end_line":	2847,
							"end_column":	74,
							"patch_codes":	["if (!__is_neg(\"\", \"L2847\", 32, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj = (php_date_obj *)zend_object_store_get_object(object);\n", "{\n}\n", "dateobj = (dateobj)", "dateobj = (php_date_obj *)zend_object_store_get_object(object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8871458311800922, -8.8025931560800927, -8.5858136971800931, -8.81630770718009, -8.0098911801800927, -8.15835631718009, -7.9169084431800929, -8.67479654318009, -8.69750088318009, -8.69750088318009, -7.5335747971800924, -8.05841960718009, -8.05841960718009, -8.81630770718009, -8.05841960718009, -8.05841960718009, -8.05841960718009, -8.05841960718009, -8.05841960718009, -8.05841960718009, -8.05841960718009, -8.52767960718009, -8.81630770718009, -8.05841960718009, -8.05841960718009, -8.05841960718009, -8.05841960718009, -8.05841960718009, -8.05841960718009, -8.05841960718009, -8.05841960718009, -8.05841960718009]
								}, {
									"case":	2,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	3,
									"scores":	[-5.9322937371800926]
								}, {
									"case":	4,
									"scores":	[-5.9322937371800926]
								}]
						}]
				}, {
					"line":	2847,
					"switches":	[{
							"switch":	5,
							"types":	[[], [], [], [], [389], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	2848,
							"begin_column":	0,
							"end_line":	2848,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2848\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	2,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	3,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	4,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	5,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	6,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	7,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	8,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	9,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	10,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	11,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	12,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	13,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	14,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	15,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	16,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	17,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	18,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	19,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	20,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	21,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	22,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	23,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	24,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	25,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	26,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	27,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	28,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	29,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	30,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	31,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	32,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	33,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	34,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	35,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	36,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	37,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	38,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	39,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	40,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	41,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	42,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	43,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	44,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	45,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	46,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	47,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	48,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	49,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	50,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	51,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	52,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	53,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	54,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	55,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	56,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	57,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	58,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	59,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	60,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	61,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	62,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	63,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	64,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	65,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	66,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	67,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	68,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	69,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	70,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	71,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	72,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	73,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	74,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	75,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	76,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	77,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	78,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	79,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	80,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	81,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	82,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	83,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	84,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	85,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	86,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	87,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	88,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	89,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	90,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	91,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	92,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	93,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	94,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	95,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	96,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	97,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	98,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	99,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	100,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	101,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	102,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	103,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	104,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	105,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	106,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	107,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	108,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	109,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	110,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	111,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	112,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	113,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	114,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	115,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	116,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	117,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	118,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	119,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	120,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	121,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	122,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	123,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	124,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	125,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	126,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	127,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	128,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	129,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	130,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	131,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	132,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	133,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	134,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	135,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	136,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	137,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	138,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	139,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	140,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	141,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	142,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	143,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	144,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	145,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	146,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	147,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	148,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	149,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	150,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	151,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	152,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	153,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	154,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	155,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	156,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	157,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	158,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	159,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	160,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	161,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	162,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	163,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	164,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	165,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	166,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	167,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	168,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	169,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	170,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	171,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	172,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	173,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	174,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	175,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	176,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	177,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	178,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	179,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	180,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	181,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	182,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	183,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	184,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	185,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	186,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	187,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	188,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	189,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	190,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	191,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	192,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	193,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	194,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	195,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	196,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	197,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	198,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	199,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	200,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	201,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	202,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	203,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	204,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	205,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	206,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	207,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	208,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	209,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	210,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	211,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	212,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	213,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	214,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	215,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	216,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	217,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	218,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	219,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	220,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	221,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	222,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	223,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	224,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	225,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	226,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	227,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	228,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	229,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	230,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	231,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	232,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	233,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	234,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	235,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	236,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	237,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	238,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	239,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	240,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	241,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	242,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	243,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	244,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	245,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	246,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	247,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	248,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	249,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	250,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	251,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	252,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	253,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	254,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	255,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	256,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	257,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	258,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	259,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	260,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	261,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	262,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	263,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	264,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	265,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	266,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	267,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	268,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	269,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	270,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	271,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	272,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	273,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	274,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	275,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	276,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	277,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	278,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	279,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	280,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	281,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	282,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	283,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	284,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	285,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	286,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	287,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	288,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	289,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	290,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	291,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	292,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	293,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	294,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	295,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	296,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	297,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	298,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	299,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	300,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	301,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	302,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	303,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	304,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	305,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	306,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	307,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	308,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	309,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	310,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	311,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	312,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	313,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	314,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	315,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	316,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	317,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	318,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	319,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	320,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	321,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	322,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	323,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	324,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	325,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	326,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	327,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	328,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	329,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	330,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	331,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	332,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	333,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	334,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	335,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	336,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	337,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	338,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	339,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	340,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	341,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	342,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	343,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	344,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	345,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	346,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	347,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	348,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	349,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	350,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	351,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	352,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	353,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	354,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	355,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	356,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	357,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	358,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	359,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	360,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	361,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	362,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	363,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	364,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	365,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	366,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	367,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	368,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	369,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	370,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	371,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	372,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	373,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	374,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	375,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	376,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	377,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	378,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	379,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	380,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	381,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	382,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	383,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	384,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	385,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	386,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	387,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	388,
									"scores":	[-5.9120910298625731]
								}, {
									"case":	389,
									"scores":	[-10.958511539662574, -10.387744450562572, -11.735557313662571, -10.370099339662573, -10.182372432662573, -11.756515916562574, -11.489518399862572, -10.732586705862573, -10.978625619662573, -11.200597427662572, -11.200597427662572, -11.735557313662571, -10.675372225862573, -11.489518399862572, -11.489518399862572, -11.735557313662571, -11.735557313662571, -11.489518399862572, -11.489518399862572, -11.489518399862572, -11.489518399862572, -11.489518399862572, -11.489518399862572, -11.489518399862572, -11.700407516862573, -11.735557313662571, -11.489518399862572, -11.489518399862572, -11.489518399862572, -11.489518399862572, -11.489518399862572, -11.489518399862572, -11.489518399862572, -11.489518399862572, -11.489518399862572]
								}]
						}, {
							"switch":	6,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	2848,
							"begin_column":	2,
							"end_line":	2848,
							"end_column":	48,
							"patch_codes":	["if (__is_neg(\"\", \"L2848\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) || __is_neg(\"\", \"L2848\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) && !__is_neg(\"\", \"L2848\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5590847884281462, -3.4914231284281461, -4.7895787984281455, -3.7029072584281457, -3.9831622714281458, -4.668449146328145, -4.0316906984281458, -3.890179534428146, -4.6480676344281466, -4.6707719744281455, -4.6707719744281455, -4.7895787984281455, -3.5068458884281455, -4.0316906984281458, -4.0316906984281458, -4.7895787984281455, -4.7895787984281455, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.500950698428146, -4.7895787984281455, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458]
								}, {
									"case":	2,
									"scores":	[-4.9185664634281459, -3.8509048034281457, -5.149060473428146, -4.0623889334281458, -4.3426439464281463, -5.0279308213281455, -4.3911723734281463, -4.2496612094281456, -5.0075493094281462, -5.030253649428146, -5.030253649428146, -5.149060473428146, -3.866327563428146, -4.3911723734281463, -4.3911723734281463, -5.149060473428146, -5.149060473428146, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.8604323734281456, -5.149060473428146, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463]
								}, {
									"case":	3,
									"scores":	[-4.9185664634281459, -3.8509048034281457, -5.149060473428146, -4.0623889334281458, -4.3426439464281463, -5.0279308213281455, -4.3911723734281463, -4.2496612094281456, -5.0075493094281462, -5.030253649428146, -5.030253649428146, -5.149060473428146, -3.866327563428146, -4.3911723734281463, -4.3911723734281463, -5.149060473428146, -5.149060473428146, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.8604323734281456, -5.149060473428146, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463, -4.3911723734281463]
								}]
						}, {
							"switch":	7,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2848,
							"begin_column":	2,
							"end_line":	2848,
							"end_column":	48,
							"patch_codes":	["if (!__is_neg(\"\", \"L2848\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    if (!(dateobj->time)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L2848\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)) && (!(dateobj->time))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.2437449898625736, -8.176083329862573, -9.4742389998625729, -8.3875674598625736, -8.6678224728625732, -9.35310934776257, -8.71635089986257, -8.57483973586257, -9.33272783586257, -9.3554321758625729, -9.3554321758625729, -9.4742389998625729, -8.1915060898625729, -8.71635089986257, -8.71635089986257, -9.4742389998625729, -9.4742389998625729, -8.71635089986257, -8.71635089986257, -8.71635089986257, -8.71635089986257, -8.71635089986257, -8.71635089986257, -8.71635089986257, -9.18561089986257, -9.4742389998625729, -8.71635089986257, -8.71635089986257, -8.71635089986257, -8.71635089986257, -8.71635089986257, -8.71635089986257, -8.71635089986257, -8.71635089986257, -8.71635089986257]
								}, {
									"case":	2,
									"scores":	[-8.0918026778625727, -7.0241410178625729, -8.32229668786257, -7.2356251478625726, -7.5158801608625732, -8.2011670357625732, -7.5644085878625722, -7.4228974238625725, -8.18078552386257, -8.20348986386257, -8.20348986386257, -8.32229668786257, -7.0395637778625728, -7.5644085878625722, -7.5644085878625722, -8.32229668786257, -8.32229668786257, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722, -8.03366858786257, -8.32229668786257, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722, -7.5644085878625722]
								}]
						}]
				}, {
					"line":	2848,
					"switches":	[{
							"switch":	8,
							"types":	[[], [], [], [], [389], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	2849,
							"begin_column":	0,
							"end_line":	2849,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2849\", 35, &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj->initialized), sizeof (intobj->initialized), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(intobj->diff), sizeof (intobj->diff), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	2,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	3,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	4,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	5,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	6,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	7,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	8,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	9,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	10,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	11,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	12,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	13,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	14,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	15,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	16,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	17,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	18,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	19,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	20,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	21,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	22,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	23,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	24,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	25,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	26,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	27,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	28,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	29,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	30,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	31,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	32,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	33,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	34,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	35,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	36,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	37,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	38,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	39,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	40,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	41,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	42,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	43,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	44,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	45,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	46,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	47,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	48,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	49,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	50,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	51,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	52,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	53,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	54,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	55,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	56,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	57,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	58,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	59,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	60,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	61,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	62,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	63,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	64,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	65,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	66,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	67,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	68,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	69,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	70,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	71,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	72,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	73,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	74,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	75,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	76,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	77,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	78,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	79,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	80,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	81,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	82,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	83,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	84,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	85,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	86,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	87,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	88,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	89,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	90,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	91,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	92,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	93,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	94,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	95,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	96,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	97,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	98,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	99,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	100,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	101,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	102,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	103,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	104,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	105,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	106,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	107,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	108,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	109,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	110,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	111,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	112,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	113,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	114,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	115,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	116,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	117,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	118,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	119,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	120,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	121,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	122,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	123,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	124,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	125,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	126,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	127,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	128,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	129,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	130,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	131,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	132,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	133,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	134,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	135,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	136,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	137,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	138,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	139,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	140,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	141,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	142,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	143,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	144,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	145,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	146,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	147,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	148,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	149,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	150,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	151,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	152,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	153,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	154,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	155,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	156,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	157,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	158,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	159,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	160,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	161,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	162,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	163,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	164,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	165,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	166,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	167,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	168,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	169,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	170,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	171,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	172,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	173,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	174,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	175,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	176,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	177,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	178,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	179,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	180,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	181,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	182,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	183,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	184,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	185,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	186,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	187,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	188,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	189,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	190,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	191,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	192,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	193,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	194,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	195,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	196,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	197,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	198,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	199,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	200,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	201,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	202,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	203,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	204,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	205,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	206,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	207,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	208,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	209,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	210,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	211,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	212,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	213,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	214,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	215,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	216,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	217,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	218,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	219,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	220,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	221,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	222,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	223,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	224,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	225,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	226,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	227,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	228,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	229,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	230,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	231,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	232,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	233,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	234,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	235,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	236,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	237,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	238,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	239,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	240,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	241,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	242,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	243,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	244,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	245,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	246,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	247,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	248,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	249,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	250,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	251,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	252,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	253,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	254,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	255,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	256,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	257,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	258,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	259,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	260,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	261,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	262,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	263,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	264,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	265,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	266,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	267,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	268,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	269,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	270,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	271,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	272,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	273,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	274,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	275,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	276,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	277,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	278,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	279,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	280,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	281,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	282,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	283,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	284,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	285,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	286,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	287,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	288,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	289,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	290,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	291,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	292,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	293,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	294,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	295,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	296,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	297,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	298,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	299,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	300,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	301,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	302,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	303,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	304,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	305,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	306,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	307,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	308,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	309,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	310,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	311,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	312,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	313,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	314,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	315,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	316,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	317,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	318,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	319,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	320,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	321,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	322,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	323,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	324,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	325,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	326,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	327,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	328,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	329,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	330,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	331,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	332,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	333,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	334,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	335,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	336,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	337,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	338,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	339,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	340,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	341,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	342,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	343,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	344,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	345,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	346,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	347,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	348,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	349,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	350,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	351,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	352,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	353,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	354,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	355,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	356,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	357,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	358,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	359,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	360,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	361,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	362,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	363,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	364,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	365,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	366,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	367,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	368,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	369,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	370,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	371,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	372,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	373,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	374,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	375,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	376,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	377,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	378,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	379,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	380,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	381,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	382,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	383,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	384,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	385,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	386,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	387,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	388,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	389,
									"scores":	[-7.4058267560275342, -10.231811222927533, -10.014703125027534, -9.3092332019275332, -10.545709985227532, -11.392947155927533, -9.7836415250275337, -11.260897808927533, -9.7686642112275344, -10.014703125027534, -10.236674933027533, -10.236674933027533, -9.832226924227534, -10.545709985227532, -10.545709985227532, -10.791748899027533, -10.791748899027533, -10.545709985227532, -10.545709985227532, -10.545709985227532, -10.545709985227532, -10.545709985227532, -10.545709985227532, -10.545709985227532, -10.756599102227533, -10.791748899027533, -10.545709985227532, -10.545709985227532, -10.545709985227532, -10.545709985227532, -10.545709985227532, -10.545709985227532, -10.545709985227532, -10.545709985227532, -10.545709985227532]
								}]
						}, {
							"switch":	9,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2849,
							"begin_column":	2,
							"end_line":	2849,
							"end_column":	79,
							"patch_codes":	["if (!__is_neg(\"\", \"L2849\", 35, &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj->initialized), sizeof (intobj->initialized), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(intobj->diff), sizeof (intobj->diff), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    intobj = (php_interval_obj *)zend_object_store_get_object(interval);\n", "{\n}\n", "intobj = (intobj)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7620404852275344, -9.52746789412753, -9.2647355752275331, -8.914270003627534, -8.7373414852275335, -10.078004183127533, -8.6888046212275327, -9.94645238212753, -8.5068474752275343, -9.2647355752275331, -9.2874399152275338, -9.2874399152275338, -8.2102106118275344, -8.7373414852275335, -8.7373414852275335, -9.4952295852275341, -9.4952295852275341, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335, -9.2066014852275337, -9.4952295852275341, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335, -8.7373414852275335]
								}, {
									"case":	2,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	3,
									"scores":	[-5.8716856152275341]
								}, {
									"case":	4,
									"scores":	[-5.8716856152275341]
								}]
						}]
				}, {
					"line":	2849,
					"switches":	[{
							"switch":	10,
							"types":	[[], [], [], [], [389], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	2850,
							"begin_column":	0,
							"end_line":	2850,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2850\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff), sizeof (intobj->diff), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	2,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	3,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	4,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	5,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	6,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	7,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	8,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	9,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	10,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	11,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	12,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	13,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	14,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	15,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	16,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	17,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	18,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	19,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	20,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	21,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	22,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	23,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	24,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	25,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	26,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	27,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	28,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	29,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	30,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	31,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	32,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	33,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	34,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	35,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	36,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	37,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	38,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	39,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	40,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	41,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	42,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	43,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	44,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	45,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	46,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	47,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	48,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	49,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	50,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	51,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	52,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	53,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	54,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	55,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	56,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	57,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	58,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	59,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	60,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	61,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	62,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	63,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	64,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	65,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	66,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	67,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	68,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	69,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	70,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	71,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	72,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	73,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	74,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	75,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	76,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	77,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	78,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	79,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	80,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	81,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	82,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	83,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	84,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	85,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	86,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	87,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	88,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	89,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	90,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	91,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	92,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	93,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	94,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	95,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	96,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	97,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	98,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	99,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	100,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	101,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	102,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	103,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	104,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	105,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	106,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	107,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	108,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	109,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	110,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	111,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	112,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	113,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	114,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	115,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	116,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	117,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	118,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	119,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	120,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	121,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	122,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	123,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	124,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	125,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	126,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	127,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	128,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	129,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	130,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	131,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	132,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	133,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	134,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	135,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	136,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	137,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	138,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	139,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	140,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	141,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	142,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	143,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	144,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	145,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	146,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	147,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	148,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	149,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	150,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	151,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	152,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	153,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	154,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	155,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	156,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	157,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	158,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	159,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	160,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	161,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	162,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	163,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	164,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	165,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	166,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	167,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	168,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	169,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	170,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	171,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	172,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	173,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	174,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	175,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	176,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	177,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	178,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	179,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	180,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	181,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	182,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	183,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	184,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	185,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	186,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	187,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	188,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	189,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	190,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	191,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	192,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	193,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	194,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	195,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	196,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	197,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	198,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	199,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	200,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	201,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	202,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	203,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	204,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	205,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	206,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	207,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	208,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	209,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	210,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	211,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	212,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	213,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	214,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	215,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	216,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	217,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	218,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	219,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	220,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	221,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	222,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	223,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	224,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	225,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	226,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	227,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	228,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	229,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	230,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	231,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	232,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	233,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	234,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	235,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	236,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	237,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	238,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	239,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	240,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	241,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	242,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	243,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	244,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	245,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	246,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	247,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	248,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	249,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	250,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	251,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	252,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	253,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	254,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	255,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	256,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	257,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	258,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	259,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	260,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	261,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	262,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	263,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	264,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	265,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	266,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	267,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	268,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	269,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	270,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	271,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	272,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	273,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	274,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	275,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	276,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	277,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	278,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	279,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	280,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	281,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	282,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	283,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	284,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	285,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	286,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	287,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	288,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	289,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	290,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	291,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	292,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	293,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	294,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	295,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	296,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	297,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	298,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	299,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	300,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	301,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	302,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	303,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	304,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	305,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	306,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	307,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	308,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	309,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	310,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	311,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	312,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	313,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	314,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	315,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	316,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	317,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	318,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	319,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	320,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	321,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	322,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	323,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	324,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	325,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	326,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	327,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	328,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	329,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	330,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	331,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	332,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	333,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	334,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	335,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	336,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	337,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	338,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	339,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	340,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	341,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	342,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	343,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	344,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	345,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	346,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	347,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	348,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	349,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	350,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	351,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	352,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	353,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	354,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	355,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	356,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	357,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	358,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	359,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	360,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	361,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	362,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	363,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	364,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	365,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	366,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	367,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	368,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	369,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	370,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	371,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	372,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	373,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	374,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	375,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	376,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	377,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	378,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	379,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	380,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	381,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	382,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	383,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	384,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	385,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	386,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	387,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	388,
									"scores":	[-5.8514829079100146]
								}, {
									"case":	389,
									"scores":	[-10.897903417710015, -10.061831328610015, -11.428910277910013, -10.666841817710015, -11.997264974610015, -10.860803017710015, -12.144098101610016, -10.651864503910014, -10.897903417710015, -11.119875225710015, -11.119875225710015, -10.715427216910017, -11.674949191710013]
								}]
						}, {
							"switch":	11,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	2850,
							"begin_column":	2,
							"end_line":	2850,
							"end_column":	58,
							"patch_codes":	["if (__is_neg(\"\", \"L2850\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff), sizeof (intobj->diff), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(intobj->initialized)) || __is_neg(\"\", \"L2850\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff), sizeof (intobj->diff), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(intobj->initialized)) && !__is_neg(\"\", \"L2850\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff), sizeof (intobj->diff), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9034405004281449, -5.4185534383281455, -5.3760464104281454, -5.3275095464281463, -6.4336517888281453, -5.6090897004281457, -6.5851573073281457, -5.1455524004281461, -5.9034405004281449, -5.9261448404281456, -5.9261448404281456, -4.8489155370281463, -6.133934510428146]
								}, {
									"case":	2,
									"scores":	[-4.6228848734281458, -4.1379978113281464, -4.0954907834281453, -4.0469539194281463, -5.1530961618281461, -4.3285340734281457, -5.3046016803281457, -3.8649967734281456, -4.6228848734281458, -4.6455892134281456, -4.6455892134281456, -3.5683599100281458, -4.8533788834281459]
								}, {
									"case":	3,
									"scores":	[-4.6228848734281458, -4.1379978113281464, -4.0954907834281453, -4.0469539194281463, -5.1530961618281461, -4.3285340734281457, -5.3046016803281457, -3.8649967734281456, -4.6228848734281458, -4.6455892134281456, -4.6455892134281456, -3.5683599100281458, -4.8533788834281459]
								}]
						}, {
							"switch":	12,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2850,
							"begin_column":	2,
							"end_line":	2850,
							"end_column":	58,
							"patch_codes":	["if (!__is_neg(\"\", \"L2850\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff), sizeof (intobj->diff), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props)))\n    if (!(intobj->initialized)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\");\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L2850\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff), sizeof (intobj->diff), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props)) && (!(intobj->initialized))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.1831368679100152, -8.6982498058100148, -8.6557427779100138, -8.6072059139100148, -9.7133481563100137, -8.888786067910015, -9.8648536748100142, -8.4252487679100145, -9.1831368679100152, -9.205841207910014, -9.205841207910014, -8.1286119045100147, -9.4136308779100144]
								}, {
									"case":	2,
									"scores":	[-7.7355129659100141, -7.2506259038100138, -7.2081188759100137, -7.1595820119100138, -8.2657242543100153, -7.441162165910014, -8.4172297728100141, -6.9776248659100144, -7.7355129659100141, -7.7582173059100139, -7.7582173059100139, -6.6809880025100137, -7.9660069759100143]
								}]
						}]
				}, {
					"line":	2855,
					"switches":	[{
							"switch":	15,
							"types":	[[], [], [], [], [403], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], [], [], [], [], [], []],
							"begin_line":	2856,
							"begin_column":	1,
							"end_line":	2856,
							"end_column":	1,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2856\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(dateobj), sizeof (dateobj), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->h), sizeof (intobj->diff->h), &(interval), sizeof (interval), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	2,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	3,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	4,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	5,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	6,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	7,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	8,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	9,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	10,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	11,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	12,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	13,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	14,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	15,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	16,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	17,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	18,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	19,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	20,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	21,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	22,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	23,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	24,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	25,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	26,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	27,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	28,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	29,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	30,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	31,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	32,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	33,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	34,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	35,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	36,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	37,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	38,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	39,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	40,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	41,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	42,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	43,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	44,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	45,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	46,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	47,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	48,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	49,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	50,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	51,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	52,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	53,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	54,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	55,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	56,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	57,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	58,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	59,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	60,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	61,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	62,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	63,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	64,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	65,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	66,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	67,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	68,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	69,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	70,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	71,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	72,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	73,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	74,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	75,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	76,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	77,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	78,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	79,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	80,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	81,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	82,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	83,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	84,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	85,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	86,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	87,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	88,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	89,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	90,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	91,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	92,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	93,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	94,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	95,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	96,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	97,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	98,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	99,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	100,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	101,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	102,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	103,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	104,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	105,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	106,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	107,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	108,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	109,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	110,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	111,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	112,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	113,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	114,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	115,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	116,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	117,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	118,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	119,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	120,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	121,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	122,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	123,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	124,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	125,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	126,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	127,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	128,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	129,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	130,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	131,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	132,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	133,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	134,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	135,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	136,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	137,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	138,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	139,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	140,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	141,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	142,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	143,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	144,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	145,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	146,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	147,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	148,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	149,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	150,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	151,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	152,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	153,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	154,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	155,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	156,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	157,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	158,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	159,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	160,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	161,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	162,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	163,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	164,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	165,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	166,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	167,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	168,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	169,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	170,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	171,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	172,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	173,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	174,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	175,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	176,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	177,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	178,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	179,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	180,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	181,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	182,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	183,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	184,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	185,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	186,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	187,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	188,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	189,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	190,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	191,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	192,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	193,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	194,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	195,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	196,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	197,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	198,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	199,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	200,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	201,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	202,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	203,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	204,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	205,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	206,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	207,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	208,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	209,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	210,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	211,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	212,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	213,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	214,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	215,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	216,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	217,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	218,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	219,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	220,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	221,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	222,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	223,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	224,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	225,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	226,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	227,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	228,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	229,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	230,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	231,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	232,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	233,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	234,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	235,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	236,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	237,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	238,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	239,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	240,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	241,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	242,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	243,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	244,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	245,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	246,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	247,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	248,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	249,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	250,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	251,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	252,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	253,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	254,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	255,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	256,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	257,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	258,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	259,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	260,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	261,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	262,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	263,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	264,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	265,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	266,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	267,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	268,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	269,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	270,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	271,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	272,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	273,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	274,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	275,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	276,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	277,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	278,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	279,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	280,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	281,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	282,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	283,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	284,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	285,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	286,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	287,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	288,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	289,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	290,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	291,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	292,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	293,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	294,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	295,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	296,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	297,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	298,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	299,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	300,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	301,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	302,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	303,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	304,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	305,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	306,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	307,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	308,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	309,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	310,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	311,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	312,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	313,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	314,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	315,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	316,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	317,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	318,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	319,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	320,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	321,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	322,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	323,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	324,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	325,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	326,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	327,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	328,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	329,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	330,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	331,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	332,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	333,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	334,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	335,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	336,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	337,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	338,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	339,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	340,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	341,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	342,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	343,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	344,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	345,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	346,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	347,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	348,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	349,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	350,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	351,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	352,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	353,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	354,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	355,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	356,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	357,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	358,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	359,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	360,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	361,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	362,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	363,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	364,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	365,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	366,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	367,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	368,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	369,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	370,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	371,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	372,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	373,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	374,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	375,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	376,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	377,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	378,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	379,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	380,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	381,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	382,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	383,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	384,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	385,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	386,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	387,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	388,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	389,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	390,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	391,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	392,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	393,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	394,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	395,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	396,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	397,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	398,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	399,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	400,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	401,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	402,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	403,
									"scores":	[-10.420266686657456, -11.234412860657457, -10.260246155957455, -9.1850339189574566, -10.015605152657457, -9.7198922759574558, -10.260246155957455, -10.260246155957455, -9.7198922759574558, -9.7198922759574558, -9.7292392957574556, -10.260246155957455, -10.260246155957455, -9.6921388957574557, -10.260246155957455, -10.260246155957455, -9.6921388957574557, -9.483200381957456, -9.7292392957574556, -9.9512111037574549, -9.9512111037574549, -10.506285069757457, -10.260246155957455, -10.260246155957455, -10.260246155957455, -10.260246155957455]
								}]
						}, {
							"switch":	16,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	2856,
							"begin_column":	3,
							"end_line":	2858,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L2856\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(dateobj), sizeof (dateobj), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->h), sizeof (intobj->diff->h), &(interval), sizeof (interval), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days))) {\n    bias = -1;\n}\n", "if ((intobj->diff->invert) || __is_neg(\"\", \"L2856\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(dateobj), sizeof (dateobj), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->h), sizeof (intobj->diff->h), &(interval), sizeof (interval), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days))) {\n    bias = -1;\n}\n", "if ((intobj->diff->invert) && !__is_neg(\"\", \"L2856\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(dateobj), sizeof (dateobj), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->h), sizeof (intobj->diff->h), &(interval), sizeof (interval), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days))) {\n    bias = -1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4936878839281462, -6.0185326939281456, -5.2301402960281456, -5.3649988426281459, -5.4936878839281462, -4.6182061416281464, -5.2301402960281456, -5.2301402960281456, -5.1125610386281455, -5.1125610386281455, -5.757534386028146, -5.2301402960281456, -5.2301402960281456, -5.4631835860281459, -5.2301402960281456, -5.2301402960281456, -5.4631835860281459, -4.9996462860281454, -5.757534386028146, -5.7802387260281458, -5.7802387260281458, -5.9880283960281453, -5.2301402960281456, -5.2301402960281456, -5.2301402960281456, -5.2301402960281456]
								}, {
									"case":	2,
									"scores":	[-3.9765225383281457, -4.5013673483281451, -3.712974950428146, -3.8478334970281458, -3.9765225383281457, -3.1010407960281468, -3.712974950428146, -3.712974950428146, -3.5953956930281463, -3.5953956930281463, -4.2403690404281456, -3.712974950428146, -3.712974950428146, -3.9460182404281459, -3.712974950428146, -3.712974950428146, -3.9460182404281459, -3.4824809404281458, -4.2403690404281456, -4.2630733804281462, -4.2630733804281462, -4.4708630504281457, -3.712974950428146, -3.712974950428146, -3.712974950428146, -3.712974950428146]
								}, {
									"case":	3,
									"scores":	[-3.9765225383281457, -4.5013673483281451, -3.712974950428146, -3.8478334970281458, -3.9765225383281457, -3.1010407960281468, -3.712974950428146, -3.712974950428146, -3.5953956930281463, -3.5953956930281463, -4.2403690404281456, -3.712974950428146, -3.712974950428146, -3.9460182404281459, -3.712974950428146, -3.712974950428146, -3.9460182404281459, -3.4824809404281458, -4.2403690404281456, -4.2630733804281462, -4.2630733804281462, -4.4708630504281457, -3.712974950428146, -3.712974950428146, -3.712974950428146, -3.712974950428146]
								}]
						}, {
							"switch":	17,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2856,
							"begin_column":	3,
							"end_line":	2858,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L2856\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(dateobj), sizeof (dateobj), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->h), sizeof (intobj->diff->h), &(interval), sizeof (interval), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days)))\n    if (intobj->diff->invert) {\n        bias = -1;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.9186878538574561, -8.4435326638574555, -7.6551402659574563, -7.7899988125574557, -7.9186878538574561, -7.0432061115574562, -7.6551402659574563, -7.6551402659574563, -7.5375610085574554, -7.5375610085574554, -8.1825343559574559, -7.6551402659574563, -7.6551402659574563, -7.8881835559574558, -7.6551402659574563, -7.6551402659574563, -7.8881835559574558, -7.4246462559574562, -8.1825343559574559, -8.2052386959574566, -8.2052386959574566, -8.4130283659574552, -7.6551402659574563, -7.6551402659574563, -7.6551402659574563, -7.6551402659574563]
								}]
						}]
				}, {
					"line":	2858,
					"switches":	[{
							"switch":	18,
							"types":	[[], [], [], [], [404], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], [], [], [], [], [], []],
							"begin_line":	2859,
							"begin_column":	1,
							"end_line":	2859,
							"end_column":	1,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2859\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(interval), sizeof (interval), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	2,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	3,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	4,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	5,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	6,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	7,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	8,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	9,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	10,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	11,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	12,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	13,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	14,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	15,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	16,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	17,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	18,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	19,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	20,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	21,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	22,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	23,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	24,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	25,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	26,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	27,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	28,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	29,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	30,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	31,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	32,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	33,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	34,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	35,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	36,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	37,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	38,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	39,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	40,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	41,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	42,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	43,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	44,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	45,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	46,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	47,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	48,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	49,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	50,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	51,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	52,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	53,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	54,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	55,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	56,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	57,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	58,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	59,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	60,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	61,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	62,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	63,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	64,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	65,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	66,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	67,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	68,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	69,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	70,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	71,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	72,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	73,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	74,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	75,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	76,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	77,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	78,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	79,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	80,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	81,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	82,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	83,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	84,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	85,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	86,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	87,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	88,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	89,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	90,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	91,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	92,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	93,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	94,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	95,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	96,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	97,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	98,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	99,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	100,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	101,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	102,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	103,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	104,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	105,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	106,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	107,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	108,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	109,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	110,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	111,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	112,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	113,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	114,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	115,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	116,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	117,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	118,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	119,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	120,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	121,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	122,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	123,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	124,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	125,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	126,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	127,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	128,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	129,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	130,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	131,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	132,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	133,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	134,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	135,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	136,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	137,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	138,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	139,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	140,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	141,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	142,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	143,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	144,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	145,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	146,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	147,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	148,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	149,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	150,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	151,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	152,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	153,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	154,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	155,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	156,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	157,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	158,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	159,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	160,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	161,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	162,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	163,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	164,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	165,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	166,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	167,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	168,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	169,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	170,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	171,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	172,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	173,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	174,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	175,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	176,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	177,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	178,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	179,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	180,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	181,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	182,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	183,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	184,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	185,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	186,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	187,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	188,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	189,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	190,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	191,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	192,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	193,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	194,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	195,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	196,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	197,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	198,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	199,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	200,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	201,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	202,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	203,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	204,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	205,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	206,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	207,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	208,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	209,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	210,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	211,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	212,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	213,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	214,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	215,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	216,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	217,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	218,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	219,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	220,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	221,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	222,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	223,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	224,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	225,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	226,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	227,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	228,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	229,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	230,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	231,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	232,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	233,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	234,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	235,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	236,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	237,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	238,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	239,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	240,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	241,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	242,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	243,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	244,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	245,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	246,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	247,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	248,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	249,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	250,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	251,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	252,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	253,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	254,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	255,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	256,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	257,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	258,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	259,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	260,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	261,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	262,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	263,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	264,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	265,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	266,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	267,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	268,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	269,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	270,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	271,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	272,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	273,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	274,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	275,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	276,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	277,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	278,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	279,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	280,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	281,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	282,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	283,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	284,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	285,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	286,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	287,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	288,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	289,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	290,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	291,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	292,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	293,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	294,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	295,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	296,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	297,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	298,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	299,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	300,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	301,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	302,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	303,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	304,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	305,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	306,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	307,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	308,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	309,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	310,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	311,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	312,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	313,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	314,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	315,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	316,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	317,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	318,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	319,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	320,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	321,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	322,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	323,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	324,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	325,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	326,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	327,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	328,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	329,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	330,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	331,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	332,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	333,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	334,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	335,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	336,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	337,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	338,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	339,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	340,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	341,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	342,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	343,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	344,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	345,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	346,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	347,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	348,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	349,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	350,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	351,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	352,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	353,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	354,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	355,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	356,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	357,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	358,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	359,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	360,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	361,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	362,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	363,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	364,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	365,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	366,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	367,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	368,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	369,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	370,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	371,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	372,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	373,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	374,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	375,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	376,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	377,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	378,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	379,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	380,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	381,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	382,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	383,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	384,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	385,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	386,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	387,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	388,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	389,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	390,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	391,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	392,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	393,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	394,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	395,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	396,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	397,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	398,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	399,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	400,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	401,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	402,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	403,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	404,
									"scores":	[-7.7940219793399361, -8.3292856793399359, -5.0303046806399365, -9.143431853339937, -7.0951090196399367, -7.9174056896399367, -8.6081681533399355, -8.2670785686399366, -8.7760339686399362, -8.2670785686399366, -8.7760339686399362, -8.2670785686399366, -8.8074324486399362, -8.7760339686399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.2764255884399365, -8.8074324486399362, -8.8074324486399362, -8.2393251884399348, -8.8074324486399362, -8.2393251884399348, -8.0303866746399368, -8.2764255884399365, -8.49839739643994, -8.49839739643994, -9.0534713624399359, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -9.0534713624399359, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -9.0183215656399369, -9.0534713624399359, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362, -8.8074324486399362]
								}]
						}, {
							"switch":	19,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2859,
							"begin_column":	3,
							"end_line":	2859,
							"end_column":	49,
							"patch_codes":	["if (!__is_neg(\"\", \"L2859\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(interval), sizeof (interval), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.y = intobj->diff->y * bias;\n", "{\n}\n", "dateobj->time->relative.y = (&bias)->diff->y * bias", "dateobj->time->relative.y = (&dateobj)->diff->y * bias", "dateobj->time->relative.y = (&ht)->diff->y * bias", "dateobj->time->relative.y = (&interval)->diff->y * bias", "dateobj->time->relative.y = (&intobj)->diff->y * bias", "dateobj->time->relative.y = (&object)->diff->y * bias", "dateobj->time->relative.y = (&return_value)->diff->y * bias", "dateobj->time->relative.y = (&return_value_ptr)->diff->y * bias", "dateobj->time->relative.y = (&return_value_used)->diff->y * bias", "dateobj->time->relative.y = (&this_ptr)->diff->y * bias", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->relative.y = intobj->diff->y * (0 * bias)", "dateobj->time->relative.y = intobj->diff->y * (0 * ht)", "dateobj->time->relative.y = intobj->diff->y * (0 * return_value_used)", "dateobj->time->relative.y = intobj->diff->y * (bias != 0)", "dateobj->time->relative.y = intobj->diff->y * (bias * ht)", "dateobj->time->relative.y = intobj->diff->y * (bias * return_value_used)", "dateobj->time->relative.y = intobj->diff->y * (bias + 0)", "dateobj->time->relative.y = intobj->diff->y * (bias - 0)", "dateobj->time->relative.y = intobj->diff->y * (bias == 0)", "dateobj->time->relative.y = intobj->diff->y * (bias)", "dateobj->time->relative.y = intobj->diff->y * (dateobj != 0)", "dateobj->time->relative.y = intobj->diff->y * (dateobj == 0)", "dateobj->time->relative.y = intobj->diff->y * (ht != 0)", "dateobj->time->relative.y = intobj->diff->y * (ht != bias)", "dateobj->time->relative.y = intobj->diff->y * (ht != return_value_used)", "dateobj->time->relative.y = intobj->diff->y * (ht * bias)", "dateobj->time->relative.y = intobj->diff->y * (ht * return_value_used)", "dateobj->time->relative.y = intobj->diff->y * (ht + 0)", "dateobj->time->relative.y = intobj->diff->y * (ht + bias)", "dateobj->time->relative.y = intobj->diff->y * (ht + return_value_used)", "dateobj->time->relative.y = intobj->diff->y * (ht - 0)", "dateobj->time->relative.y = intobj->diff->y * (ht - bias)", "dateobj->time->relative.y = intobj->diff->y * (ht - return_value_used)", "dateobj->time->relative.y = intobj->diff->y * (ht == 0)", "dateobj->time->relative.y = intobj->diff->y * (ht == bias)", "dateobj->time->relative.y = intobj->diff->y * (ht == return_value_used)", "dateobj->time->relative.y = intobj->diff->y * (ht)", "dateobj->time->relative.y = intobj->diff->y * (interval != 0)", "dateobj->time->relative.y = intobj->diff->y * (interval == 0)", "dateobj->time->relative.y = intobj->diff->y * (intobj != 0)", "dateobj->time->relative.y = intobj->diff->y * (intobj == 0)", "dateobj->time->relative.y = intobj->diff->y * (object != 0)", "dateobj->time->relative.y = intobj->diff->y * (object != interval)", "dateobj->time->relative.y = intobj->diff->y * (object == 0)", "dateobj->time->relative.y = intobj->diff->y * (object == interval)", "dateobj->time->relative.y = intobj->diff->y * (return_value != 0)", "dateobj->time->relative.y = intobj->diff->y * (return_value != interval)", "dateobj->time->relative.y = intobj->diff->y * (return_value != object)", "dateobj->time->relative.y = intobj->diff->y * (return_value != this_ptr)", "dateobj->time->relative.y = intobj->diff->y * (return_value == 0)", "dateobj->time->relative.y = intobj->diff->y * (return_value == interval)", "dateobj->time->relative.y = intobj->diff->y * (return_value == object)", "dateobj->time->relative.y = intobj->diff->y * (return_value == this_ptr)", "dateobj->time->relative.y = intobj->diff->y * (return_value_ptr != 0)", "dateobj->time->relative.y = intobj->diff->y * (return_value_ptr == 0)", "dateobj->time->relative.y = intobj->diff->y * (return_value_used != 0)", "dateobj->time->relative.y = intobj->diff->y * (return_value_used != bias)", "dateobj->time->relative.y = intobj->diff->y * (return_value_used * bias)", "dateobj->time->relative.y = intobj->diff->y * (return_value_used * ht)", "dateobj->time->relative.y = intobj->diff->y * (return_value_used + 0)", "dateobj->time->relative.y = intobj->diff->y * (return_value_used + bias)", "dateobj->time->relative.y = intobj->diff->y * (return_value_used - 0)", "dateobj->time->relative.y = intobj->diff->y * (return_value_used - bias)", "dateobj->time->relative.y = intobj->diff->y * (return_value_used == 0)", "dateobj->time->relative.y = intobj->diff->y * (return_value_used == bias)", "dateobj->time->relative.y = intobj->diff->y * (return_value_used)", "dateobj->time->relative.y = intobj->diff->y * (this_ptr != 0)", "dateobj->time->relative.y = intobj->diff->y * (this_ptr != interval)", "dateobj->time->relative.y = intobj->diff->y * (this_ptr != object)", "dateobj->time->relative.y = intobj->diff->y * (this_ptr == 0)", "dateobj->time->relative.y = intobj->diff->y * (this_ptr == interval)", "dateobj->time->relative.y = intobj->diff->y * (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9025921465399369, -7.1443796370399362, -5.5370177342399369, -7.6692244470399364, -6.1446896616399362, -6.5059870796399366, -7.4274369565399363, -6.027110404239937, -6.3728804996399369, -6.5214653012399371, -6.5059379786399365, -6.5214653012399371, -6.6390445586399363, -6.5059379786399365, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -7.1664386486399367, -6.6390445586399363, -6.6390445586399363, -6.8720878486399366, -6.6390445586399363, -6.8720878486399366, -6.4085505486399361, -7.1664386486399367, -7.1891429886399365, -7.1891429886399365, -7.3969326586399369, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -7.3969326586399369, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -7.1083045586399365, -7.3969326586399369, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363, -6.6390445586399363]
								}, {
									"case":	2,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	3,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	4,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	5,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	6,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	7,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	8,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	9,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	10,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	11,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	12,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	13,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	14,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	15,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	16,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	17,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	18,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	19,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	20,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	21,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	22,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	23,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	24,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	25,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	26,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	27,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	28,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	29,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	30,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	31,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	32,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	33,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	34,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	35,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	36,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	37,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	38,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	39,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	40,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	41,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	42,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	43,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	44,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	45,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	46,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	47,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	48,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	49,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	50,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	51,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	52,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	53,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	54,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	55,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	56,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	57,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	58,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	59,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	60,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	61,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	62,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	63,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	64,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	65,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	66,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	67,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	68,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	69,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	70,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	71,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	72,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	73,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	74,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	75,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	76,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	77,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	78,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	79,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	80,
									"scores":	[-5.7706720786399366]
								}]
						}]
				}, {
					"line":	2859,
					"switches":	[{
							"switch":	20,
							"types":	[[], [], [], [], [404], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], [], [], [], [], [], []],
							"begin_line":	2860,
							"begin_column":	1,
							"end_line":	2860,
							"end_column":	1,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2860\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	2,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	3,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	4,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	5,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	6,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	7,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	8,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	9,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	10,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	11,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	12,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	13,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	14,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	15,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	16,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	17,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	18,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	19,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	20,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	21,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	22,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	23,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	24,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	25,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	26,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	27,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	28,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	29,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	30,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	31,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	32,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	33,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	34,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	35,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	36,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	37,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	38,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	39,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	40,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	41,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	42,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	43,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	44,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	45,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	46,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	47,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	48,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	49,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	50,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	51,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	52,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	53,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	54,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	55,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	56,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	57,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	58,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	59,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	60,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	61,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	62,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	63,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	64,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	65,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	66,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	67,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	68,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	69,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	70,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	71,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	72,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	73,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	74,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	75,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	76,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	77,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	78,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	79,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	80,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	81,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	82,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	83,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	84,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	85,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	86,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	87,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	88,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	89,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	90,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	91,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	92,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	93,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	94,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	95,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	96,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	97,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	98,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	99,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	100,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	101,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	102,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	103,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	104,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	105,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	106,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	107,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	108,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	109,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	110,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	111,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	112,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	113,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	114,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	115,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	116,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	117,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	118,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	119,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	120,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	121,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	122,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	123,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	124,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	125,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	126,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	127,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	128,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	129,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	130,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	131,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	132,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	133,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	134,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	135,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	136,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	137,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	138,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	139,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	140,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	141,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	142,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	143,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	144,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	145,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	146,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	147,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	148,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	149,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	150,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	151,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	152,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	153,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	154,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	155,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	156,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	157,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	158,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	159,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	160,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	161,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	162,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	163,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	164,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	165,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	166,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	167,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	168,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	169,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	170,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	171,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	172,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	173,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	174,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	175,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	176,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	177,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	178,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	179,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	180,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	181,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	182,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	183,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	184,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	185,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	186,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	187,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	188,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	189,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	190,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	191,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	192,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	193,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	194,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	195,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	196,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	197,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	198,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	199,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	200,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	201,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	202,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	203,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	204,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	205,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	206,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	207,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	208,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	209,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	210,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	211,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	212,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	213,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	214,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	215,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	216,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	217,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	218,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	219,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	220,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	221,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	222,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	223,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	224,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	225,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	226,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	227,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	228,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	229,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	230,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	231,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	232,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	233,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	234,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	235,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	236,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	237,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	238,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	239,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	240,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	241,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	242,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	243,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	244,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	245,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	246,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	247,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	248,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	249,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	250,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	251,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	252,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	253,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	254,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	255,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	256,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	257,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	258,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	259,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	260,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	261,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	262,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	263,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	264,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	265,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	266,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	267,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	268,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	269,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	270,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	271,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	272,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	273,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	274,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	275,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	276,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	277,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	278,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	279,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	280,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	281,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	282,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	283,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	284,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	285,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	286,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	287,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	288,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	289,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	290,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	291,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	292,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	293,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	294,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	295,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	296,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	297,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	298,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	299,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	300,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	301,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	302,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	303,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	304,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	305,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	306,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	307,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	308,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	309,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	310,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	311,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	312,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	313,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	314,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	315,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	316,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	317,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	318,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	319,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	320,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	321,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	322,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	323,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	324,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	325,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	326,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	327,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	328,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	329,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	330,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	331,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	332,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	333,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	334,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	335,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	336,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	337,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	338,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	339,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	340,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	341,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	342,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	343,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	344,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	345,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	346,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	347,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	348,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	349,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	350,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	351,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	352,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	353,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	354,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	355,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	356,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	357,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	358,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	359,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	360,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	361,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	362,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	363,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	364,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	365,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	366,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	367,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	368,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	369,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	370,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	371,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	372,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	373,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	374,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	375,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	376,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	377,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	378,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	379,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	380,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	381,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	382,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	383,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	384,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	385,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	386,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	387,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	388,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	389,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	390,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	391,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	392,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	393,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	394,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	395,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	396,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	397,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	398,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	399,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	400,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	401,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	402,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	403,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	404,
									"scores":	[-8.7022616920224163, -8.7022616920224163, -5.6165859503224169, -9.51640786602242, -7.6821603123224165, -8.5044569823224165, -9.51640786602242, -9.1796384383224172, -8.85412986132242, -7.5896522613224171, -9.36308526132242, -8.85412986132242, -9.36308526132242, -8.85412986132242, -9.36308526132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -8.8634768811224163, -9.39448374132242, -8.8263764811224164, -8.8263764811224164, -8.6174379673224166, -8.8634768811224163, -9.0854486891224155, -9.0854486891224155, -9.64052265512242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.64052265512242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.6053728583224167, -9.64052265512242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242, -9.39448374132242]
								}]
						}, {
							"switch":	21,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2860,
							"begin_column":	3,
							"end_line":	2860,
							"end_column":	49,
							"patch_codes":	["if (!__is_neg(\"\", \"L2860\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.m = intobj->diff->m * bias;\n", "{\n}\n", "dateobj->time->relative.m = (&bias)->diff->m * bias", "dateobj->time->relative.m = (&dateobj)->diff->m * bias", "dateobj->time->relative.m = (&ht)->diff->m * bias", "dateobj->time->relative.m = (&interval)->diff->m * bias", "dateobj->time->relative.m = (&intobj)->diff->m * bias", "dateobj->time->relative.m = (&object)->diff->m * bias", "dateobj->time->relative.m = (&return_value)->diff->m * bias", "dateobj->time->relative.m = (&return_value_ptr)->diff->m * bias", "dateobj->time->relative.m = (&return_value_used)->diff->m * bias", "dateobj->time->relative.m = (&this_ptr)->diff->m * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.m = intobj->diff->m * (0 * bias)", "dateobj->time->relative.m = intobj->diff->m * (0 * ht)", "dateobj->time->relative.m = intobj->diff->m * (0 * return_value_used)", "dateobj->time->relative.m = intobj->diff->m * (bias != 0)", "dateobj->time->relative.m = intobj->diff->m * (bias * ht)", "dateobj->time->relative.m = intobj->diff->m * (bias * return_value_used)", "dateobj->time->relative.m = intobj->diff->m * (bias + 0)", "dateobj->time->relative.m = intobj->diff->m * (bias - 0)", "dateobj->time->relative.m = intobj->diff->m * (bias == 0)", "dateobj->time->relative.m = intobj->diff->m * (bias)", "dateobj->time->relative.m = intobj->diff->m * (dateobj != 0)", "dateobj->time->relative.m = intobj->diff->m * (dateobj == 0)", "dateobj->time->relative.m = intobj->diff->m * (ht != 0)", "dateobj->time->relative.m = intobj->diff->m * (ht != bias)", "dateobj->time->relative.m = intobj->diff->m * (ht != return_value_used)", "dateobj->time->relative.m = intobj->diff->m * (ht * bias)", "dateobj->time->relative.m = intobj->diff->m * (ht * return_value_used)", "dateobj->time->relative.m = intobj->diff->m * (ht + 0)", "dateobj->time->relative.m = intobj->diff->m * (ht + bias)", "dateobj->time->relative.m = intobj->diff->m * (ht + return_value_used)", "dateobj->time->relative.m = intobj->diff->m * (ht - 0)", "dateobj->time->relative.m = intobj->diff->m * (ht - bias)", "dateobj->time->relative.m = intobj->diff->m * (ht - return_value_used)", "dateobj->time->relative.m = intobj->diff->m * (ht == 0)", "dateobj->time->relative.m = intobj->diff->m * (ht == bias)", "dateobj->time->relative.m = intobj->diff->m * (ht == return_value_used)", "dateobj->time->relative.m = intobj->diff->m * (ht)", "dateobj->time->relative.m = intobj->diff->m * (interval != 0)", "dateobj->time->relative.m = intobj->diff->m * (interval == 0)", "dateobj->time->relative.m = intobj->diff->m * (intobj != 0)", "dateobj->time->relative.m = intobj->diff->m * (intobj == 0)", "dateobj->time->relative.m = intobj->diff->m * (object != 0)", "dateobj->time->relative.m = intobj->diff->m * (object != interval)", "dateobj->time->relative.m = intobj->diff->m * (object == 0)", "dateobj->time->relative.m = intobj->diff->m * (object == interval)", "dateobj->time->relative.m = intobj->diff->m * (return_value != 0)", "dateobj->time->relative.m = intobj->diff->m * (return_value != interval)", "dateobj->time->relative.m = intobj->diff->m * (return_value != object)", "dateobj->time->relative.m = intobj->diff->m * (return_value != this_ptr)", "dateobj->time->relative.m = intobj->diff->m * (return_value == 0)", "dateobj->time->relative.m = intobj->diff->m * (return_value == interval)", "dateobj->time->relative.m = intobj->diff->m * (return_value == object)", "dateobj->time->relative.m = intobj->diff->m * (return_value == this_ptr)", "dateobj->time->relative.m = intobj->diff->m * (return_value_ptr != 0)", "dateobj->time->relative.m = intobj->diff->m * (return_value_ptr == 0)", "dateobj->time->relative.m = intobj->diff->m * (return_value_used != 0)", "dateobj->time->relative.m = intobj->diff->m * (return_value_used != bias)", "dateobj->time->relative.m = intobj->diff->m * (return_value_used * bias)", "dateobj->time->relative.m = intobj->diff->m * (return_value_used * ht)", "dateobj->time->relative.m = intobj->diff->m * (return_value_used + 0)", "dateobj->time->relative.m = intobj->diff->m * (return_value_used + bias)", "dateobj->time->relative.m = intobj->diff->m * (return_value_used - 0)", "dateobj->time->relative.m = intobj->diff->m * (return_value_used - bias)", "dateobj->time->relative.m = intobj->diff->m * (return_value_used == 0)", "dateobj->time->relative.m = intobj->diff->m * (return_value_used == bias)", "dateobj->time->relative.m = intobj->diff->m * (return_value_used)", "dateobj->time->relative.m = intobj->diff->m * (this_ptr != 0)", "dateobj->time->relative.m = intobj->diff->m * (this_ptr != interval)", "dateobj->time->relative.m = intobj->diff->m * (this_ptr != object)", "dateobj->time->relative.m = intobj->diff->m * (this_ptr == 0)", "dateobj->time->relative.m = intobj->diff->m * (this_ptr == interval)", "dateobj->time->relative.m = intobj->diff->m * (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2348289297224166, -7.2348289297224166, -5.9977735089224167, -7.7596737397224169, -6.6057019543224174, -6.9669993723224168, -7.7596737397224169, -6.7292373333224171, -6.4881226969224173, -6.219379991322417, -6.8338927923224171, -6.9824775939224173, -6.9669502713224167, -6.9824775939224173, -6.9669502713224167, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.627450941322417, -7.1000568513224174, -7.3331001413224168, -7.3331001413224168, -6.8695628413224172, -7.627450941322417, -7.6501552813224176, -7.6501552813224176, -7.8579449513224162, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.8579449513224162, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.5693168513224167, -7.8579449513224162, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174, -7.1000568513224174]
								}, {
									"case":	2,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	3,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	4,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	5,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	6,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	7,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	8,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	9,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	10,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	11,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	12,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	13,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	14,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	15,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	16,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	17,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	18,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	19,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	20,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	21,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	22,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	23,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	24,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	25,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	26,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	27,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	28,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	29,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	30,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	31,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	32,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	33,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	34,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	35,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	36,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	37,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	38,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	39,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	40,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	41,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	42,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	43,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	44,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	45,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	46,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	47,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	48,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	49,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	50,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	51,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	52,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	53,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	54,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	55,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	56,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	57,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	58,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	59,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	60,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	61,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	62,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	63,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	64,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	65,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	66,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	67,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	68,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	69,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	70,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	71,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	72,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	73,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	74,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	75,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	76,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	77,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	78,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	79,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	80,
									"scores":	[-5.7504693713224171]
								}]
						}]
				}, {
					"line":	2860,
					"switches":	[{
							"switch":	22,
							"types":	[[], [], [], [], [404], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], [], [], [], [], [], []],
							"begin_line":	2861,
							"begin_column":	1,
							"end_line":	2861,
							"end_column":	1,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2861\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	2,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	3,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	4,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	5,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	6,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	7,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	8,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	9,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	10,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	11,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	12,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	13,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	14,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	15,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	16,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	17,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	18,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	19,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	20,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	21,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	22,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	23,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	24,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	25,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	26,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	27,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	28,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	29,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	30,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	31,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	32,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	33,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	34,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	35,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	36,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	37,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	38,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	39,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	40,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	41,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	42,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	43,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	44,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	45,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	46,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	47,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	48,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	49,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	50,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	51,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	52,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	53,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	54,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	55,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	56,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	57,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	58,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	59,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	60,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	61,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	62,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	63,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	64,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	65,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	66,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	67,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	68,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	69,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	70,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	71,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	72,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	73,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	74,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	75,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	76,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	77,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	78,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	79,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	80,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	81,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	82,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	83,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	84,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	85,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	86,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	87,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	88,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	89,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	90,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	91,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	92,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	93,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	94,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	95,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	96,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	97,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	98,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	99,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	100,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	101,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	102,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	103,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	104,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	105,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	106,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	107,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	108,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	109,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	110,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	111,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	112,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	113,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	114,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	115,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	116,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	117,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	118,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	119,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	120,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	121,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	122,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	123,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	124,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	125,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	126,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	127,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	128,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	129,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	130,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	131,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	132,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	133,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	134,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	135,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	136,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	137,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	138,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	139,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	140,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	141,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	142,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	143,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	144,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	145,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	146,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	147,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	148,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	149,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	150,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	151,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	152,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	153,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	154,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	155,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	156,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	157,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	158,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	159,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	160,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	161,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	162,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	163,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	164,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	165,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	166,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	167,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	168,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	169,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	170,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	171,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	172,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	173,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	174,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	175,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	176,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	177,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	178,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	179,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	180,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	181,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	182,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	183,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	184,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	185,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	186,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	187,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	188,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	189,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	190,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	191,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	192,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	193,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	194,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	195,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	196,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	197,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	198,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	199,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	200,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	201,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	202,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	203,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	204,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	205,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	206,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	207,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	208,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	209,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	210,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	211,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	212,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	213,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	214,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	215,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	216,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	217,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	218,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	219,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	220,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	221,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	222,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	223,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	224,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	225,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	226,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	227,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	228,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	229,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	230,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	231,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	232,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	233,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	234,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	235,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	236,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	237,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	238,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	239,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	240,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	241,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	242,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	243,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	244,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	245,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	246,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	247,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	248,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	249,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	250,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	251,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	252,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	253,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	254,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	255,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	256,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	257,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	258,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	259,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	260,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	261,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	262,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	263,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	264,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	265,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	266,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	267,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	268,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	269,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	270,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	271,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	272,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	273,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	274,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	275,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	276,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	277,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	278,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	279,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	280,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	281,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	282,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	283,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	284,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	285,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	286,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	287,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	288,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	289,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	290,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	291,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	292,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	293,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	294,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	295,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	296,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	297,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	298,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	299,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	300,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	301,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	302,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	303,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	304,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	305,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	306,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	307,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	308,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	309,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	310,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	311,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	312,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	313,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	314,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	315,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	316,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	317,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	318,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	319,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	320,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	321,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	322,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	323,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	324,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	325,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	326,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	327,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	328,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	329,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	330,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	331,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	332,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	333,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	334,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	335,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	336,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	337,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	338,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	339,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	340,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	341,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	342,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	343,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	344,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	345,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	346,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	347,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	348,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	349,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	350,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	351,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	352,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	353,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	354,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	355,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	356,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	357,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	358,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	359,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	360,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	361,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	362,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	363,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	364,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	365,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	366,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	367,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	368,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	369,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	370,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	371,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	372,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	373,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	374,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	375,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	376,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	377,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	378,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	379,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	380,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	381,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	382,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	383,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	384,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	385,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	386,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	387,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	388,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	389,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	390,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	391,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	392,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	393,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	394,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	395,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	396,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	397,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	398,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	399,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	400,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	401,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	402,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	403,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	404,
									"scores":	[-8.6820589847048968, -8.6820589847048968, -5.5963832430048974, -9.4962051587049, -7.661957605004897, -8.484254275004897, -9.4962051587049, -9.1594357310049, -8.8339271540049, -7.5694495540048976, -9.3428825540049, -9.1594357310049, -8.8339271540049, -7.5694495540048976, -9.3428825540049, -8.8339271540049, -9.3428825540049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -8.8432741738048968, -9.3742810340049, -8.8061737738048969, -8.8061737738048969, -8.5972352600048971, -8.8432741738048968, -9.065245981804896, -9.065245981804896, -9.6203199478049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.6203199478049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.5851701510048972, -9.6203199478049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049, -9.3742810340049]
								}]
						}, {
							"switch":	23,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2861,
							"begin_column":	3,
							"end_line":	2861,
							"end_column":	49,
							"patch_codes":	["if (!__is_neg(\"\", \"L2861\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.d = intobj->diff->d * bias;\n", "{\n}\n", "dateobj->time->relative.d = (&bias)->diff->d * bias", "dateobj->time->relative.d = (&dateobj)->diff->d * bias", "dateobj->time->relative.d = (&ht)->diff->d * bias", "dateobj->time->relative.d = (&interval)->diff->d * bias", "dateobj->time->relative.d = (&intobj)->diff->d * bias", "dateobj->time->relative.d = (&object)->diff->d * bias", "dateobj->time->relative.d = (&return_value)->diff->d * bias", "dateobj->time->relative.d = (&return_value_ptr)->diff->d * bias", "dateobj->time->relative.d = (&return_value_used)->diff->d * bias", "dateobj->time->relative.d = (&this_ptr)->diff->d * bias", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.d = intobj->diff->d * (0 * bias)", "dateobj->time->relative.d = intobj->diff->d * (0 * ht)", "dateobj->time->relative.d = intobj->diff->d * (0 * return_value_used)", "dateobj->time->relative.d = intobj->diff->d * (bias != 0)", "dateobj->time->relative.d = intobj->diff->d * (bias * ht)", "dateobj->time->relative.d = intobj->diff->d * (bias * return_value_used)", "dateobj->time->relative.d = intobj->diff->d * (bias + 0)", "dateobj->time->relative.d = intobj->diff->d * (bias - 0)", "dateobj->time->relative.d = intobj->diff->d * (bias == 0)", "dateobj->time->relative.d = intobj->diff->d * (bias)", "dateobj->time->relative.d = intobj->diff->d * (dateobj != 0)", "dateobj->time->relative.d = intobj->diff->d * (dateobj == 0)", "dateobj->time->relative.d = intobj->diff->d * (ht != 0)", "dateobj->time->relative.d = intobj->diff->d * (ht != bias)", "dateobj->time->relative.d = intobj->diff->d * (ht != return_value_used)", "dateobj->time->relative.d = intobj->diff->d * (ht * bias)", "dateobj->time->relative.d = intobj->diff->d * (ht * return_value_used)", "dateobj->time->relative.d = intobj->diff->d * (ht + 0)", "dateobj->time->relative.d = intobj->diff->d * (ht + bias)", "dateobj->time->relative.d = intobj->diff->d * (ht + return_value_used)", "dateobj->time->relative.d = intobj->diff->d * (ht - 0)", "dateobj->time->relative.d = intobj->diff->d * (ht - bias)", "dateobj->time->relative.d = intobj->diff->d * (ht - return_value_used)", "dateobj->time->relative.d = intobj->diff->d * (ht == 0)", "dateobj->time->relative.d = intobj->diff->d * (ht == bias)", "dateobj->time->relative.d = intobj->diff->d * (ht == return_value_used)", "dateobj->time->relative.d = intobj->diff->d * (ht)", "dateobj->time->relative.d = intobj->diff->d * (interval != 0)", "dateobj->time->relative.d = intobj->diff->d * (interval == 0)", "dateobj->time->relative.d = intobj->diff->d * (intobj != 0)", "dateobj->time->relative.d = intobj->diff->d * (intobj == 0)", "dateobj->time->relative.d = intobj->diff->d * (object != 0)", "dateobj->time->relative.d = intobj->diff->d * (object != interval)", "dateobj->time->relative.d = intobj->diff->d * (object == 0)", "dateobj->time->relative.d = intobj->diff->d * (object == interval)", "dateobj->time->relative.d = intobj->diff->d * (return_value != 0)", "dateobj->time->relative.d = intobj->diff->d * (return_value != interval)", "dateobj->time->relative.d = intobj->diff->d * (return_value != object)", "dateobj->time->relative.d = intobj->diff->d * (return_value != this_ptr)", "dateobj->time->relative.d = intobj->diff->d * (return_value == 0)", "dateobj->time->relative.d = intobj->diff->d * (return_value == interval)", "dateobj->time->relative.d = intobj->diff->d * (return_value == object)", "dateobj->time->relative.d = intobj->diff->d * (return_value == this_ptr)", "dateobj->time->relative.d = intobj->diff->d * (return_value_ptr != 0)", "dateobj->time->relative.d = intobj->diff->d * (return_value_ptr == 0)", "dateobj->time->relative.d = intobj->diff->d * (return_value_used != 0)", "dateobj->time->relative.d = intobj->diff->d * (return_value_used != bias)", "dateobj->time->relative.d = intobj->diff->d * (return_value_used * bias)", "dateobj->time->relative.d = intobj->diff->d * (return_value_used * ht)", "dateobj->time->relative.d = intobj->diff->d * (return_value_used + 0)", "dateobj->time->relative.d = intobj->diff->d * (return_value_used + bias)", "dateobj->time->relative.d = intobj->diff->d * (return_value_used - 0)", "dateobj->time->relative.d = intobj->diff->d * (return_value_used - bias)", "dateobj->time->relative.d = intobj->diff->d * (return_value_used == 0)", "dateobj->time->relative.d = intobj->diff->d * (return_value_used == bias)", "dateobj->time->relative.d = intobj->diff->d * (return_value_used)", "dateobj->time->relative.d = intobj->diff->d * (this_ptr != 0)", "dateobj->time->relative.d = intobj->diff->d * (this_ptr != interval)", "dateobj->time->relative.d = intobj->diff->d * (this_ptr != object)", "dateobj->time->relative.d = intobj->diff->d * (this_ptr == 0)", "dateobj->time->relative.d = intobj->diff->d * (this_ptr == interval)", "dateobj->time->relative.d = intobj->diff->d * (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2146262224048971, -7.2146262224048971, -5.9775708016048972, -7.7394710324048974, -6.5854992470048979, -6.9467966650048973, -7.7394710324048974, -6.7090346260048976, -6.4679199896048978, -6.1991772840048975, -6.8136900850048976, -6.7090346260048976, -6.9622748866048978, -6.1991772840048975, -6.9467475640048972, -6.9622748866048978, -6.9467475640048972, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.6072482340048975, -7.0798541440048979, -7.3128974340048973, -7.3128974340048973, -6.8493601340048977, -7.6072482340048975, -7.6299525740048981, -7.6299525740048981, -7.8377422440048967, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.8377422440048967, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.5491141440048972, -7.8377422440048967, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979, -7.0798541440048979]
								}, {
									"case":	2,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	3,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	4,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	5,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	6,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	7,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	8,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	9,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	10,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	11,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	12,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	13,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	14,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	15,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	16,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	17,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	18,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	19,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	20,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	21,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	22,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	23,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	24,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	25,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	26,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	27,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	28,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	29,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	30,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	31,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	32,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	33,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	34,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	35,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	36,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	37,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	38,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	39,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	40,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	41,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	42,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	43,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	44,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	45,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	46,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	47,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	48,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	49,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	50,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	51,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	52,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	53,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	54,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	55,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	56,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	57,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	58,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	59,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	60,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	61,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	62,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	63,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	64,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	65,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	66,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	67,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	68,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	69,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	70,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	71,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	72,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	73,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	74,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	75,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	76,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	77,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	78,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	79,
									"scores":	[-5.7302666640048976]
								}, {
									"case":	80,
									"scores":	[-5.7302666640048976]
								}]
						}]
				}, {
					"line":	2861,
					"switches":	[{
							"switch":	24,
							"types":	[[], [], [], [], [404], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], [], [], [], [], [], []],
							"begin_line":	2862,
							"begin_column":	1,
							"end_line":	2862,
							"end_column":	1,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2862\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->d), sizeof (intobj->diff->d), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	2,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	3,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	4,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	5,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	6,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	7,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	8,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	9,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	10,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	11,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	12,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	13,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	14,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	15,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	16,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	17,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	18,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	19,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	20,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	21,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	22,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	23,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	24,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	25,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	26,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	27,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	28,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	29,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	30,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	31,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	32,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	33,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	34,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	35,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	36,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	37,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	38,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	39,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	40,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	41,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	42,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	43,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	44,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	45,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	46,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	47,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	48,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	49,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	50,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	51,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	52,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	53,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	54,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	55,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	56,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	57,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	58,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	59,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	60,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	61,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	62,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	63,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	64,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	65,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	66,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	67,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	68,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	69,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	70,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	71,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	72,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	73,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	74,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	75,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	76,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	77,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	78,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	79,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	80,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	81,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	82,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	83,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	84,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	85,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	86,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	87,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	88,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	89,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	90,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	91,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	92,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	93,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	94,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	95,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	96,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	97,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	98,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	99,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	100,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	101,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	102,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	103,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	104,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	105,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	106,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	107,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	108,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	109,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	110,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	111,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	112,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	113,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	114,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	115,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	116,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	117,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	118,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	119,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	120,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	121,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	122,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	123,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	124,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	125,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	126,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	127,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	128,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	129,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	130,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	131,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	132,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	133,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	134,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	135,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	136,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	137,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	138,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	139,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	140,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	141,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	142,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	143,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	144,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	145,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	146,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	147,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	148,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	149,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	150,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	151,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	152,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	153,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	154,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	155,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	156,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	157,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	158,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	159,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	160,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	161,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	162,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	163,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	164,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	165,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	166,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	167,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	168,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	169,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	170,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	171,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	172,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	173,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	174,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	175,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	176,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	177,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	178,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	179,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	180,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	181,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	182,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	183,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	184,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	185,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	186,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	187,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	188,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	189,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	190,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	191,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	192,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	193,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	194,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	195,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	196,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	197,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	198,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	199,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	200,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	201,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	202,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	203,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	204,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	205,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	206,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	207,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	208,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	209,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	210,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	211,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	212,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	213,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	214,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	215,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	216,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	217,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	218,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	219,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	220,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	221,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	222,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	223,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	224,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	225,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	226,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	227,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	228,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	229,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	230,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	231,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	232,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	233,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	234,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	235,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	236,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	237,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	238,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	239,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	240,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	241,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	242,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	243,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	244,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	245,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	246,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	247,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	248,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	249,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	250,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	251,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	252,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	253,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	254,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	255,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	256,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	257,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	258,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	259,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	260,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	261,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	262,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	263,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	264,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	265,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	266,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	267,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	268,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	269,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	270,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	271,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	272,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	273,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	274,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	275,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	276,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	277,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	278,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	279,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	280,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	281,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	282,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	283,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	284,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	285,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	286,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	287,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	288,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	289,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	290,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	291,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	292,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	293,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	294,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	295,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	296,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	297,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	298,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	299,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	300,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	301,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	302,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	303,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	304,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	305,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	306,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	307,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	308,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	309,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	310,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	311,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	312,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	313,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	314,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	315,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	316,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	317,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	318,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	319,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	320,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	321,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	322,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	323,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	324,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	325,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	326,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	327,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	328,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	329,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	330,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	331,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	332,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	333,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	334,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	335,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	336,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	337,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	338,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	339,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	340,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	341,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	342,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	343,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	344,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	345,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	346,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	347,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	348,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	349,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	350,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	351,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	352,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	353,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	354,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	355,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	356,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	357,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	358,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	359,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	360,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	361,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	362,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	363,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	364,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	365,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	366,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	367,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	368,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	369,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	370,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	371,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	372,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	373,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	374,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	375,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	376,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	377,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	378,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	379,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	380,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	381,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	382,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	383,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	384,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	385,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	386,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	387,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	388,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	389,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	390,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	391,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	392,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	393,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	394,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	395,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	396,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	397,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	398,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	399,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	400,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	401,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	402,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	403,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	404,
									"scores":	[-8.16105427738738, -8.16105427738738, -6.1119614206873782, -8.97520045138738, -7.1409528976873773, -7.9632495676873774, -8.97520045138738, -8.63843102368738, -8.3129224466873772, -7.0484448466873779, -8.82187784668738, -8.63843102368738, -8.3129224466873772, -7.0484448466873779, -8.82187784668738, -8.63843102368738, -7.0484448466873779, -8.95385482668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.3222694664873771, -8.85327632668738, -8.2851690664873772, -8.2851690664873772, -8.07623055268738, -8.3222694664873771, -8.54424127448738, -8.54424127448738, -9.09931524048738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -9.09931524048738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -9.06416544368738, -9.09931524048738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738, -8.85327632668738]
								}]
						}, {
							"switch":	25,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2862,
							"begin_column":	3,
							"end_line":	2862,
							"end_column":	49,
							"patch_codes":	["if (!__is_neg(\"\", \"L2862\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->d), sizeof (intobj->diff->d), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.h = intobj->diff->h * bias;\n", "{\n}\n", "dateobj->time->relative.h = (&bias)->diff->h * bias", "dateobj->time->relative.h = (&dateobj)->diff->h * bias", "dateobj->time->relative.h = (&ht)->diff->h * bias", "dateobj->time->relative.h = (&interval)->diff->h * bias", "dateobj->time->relative.h = (&intobj)->diff->h * bias", "dateobj->time->relative.h = (&object)->diff->h * bias", "dateobj->time->relative.h = (&return_value)->diff->h * bias", "dateobj->time->relative.h = (&return_value_ptr)->diff->h * bias", "dateobj->time->relative.h = (&return_value_used)->diff->h * bias", "dateobj->time->relative.h = (&this_ptr)->diff->h * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.h = intobj->diff->h * (0 * bias)", "dateobj->time->relative.h = intobj->diff->h * (0 * ht)", "dateobj->time->relative.h = intobj->diff->h * (0 * return_value_used)", "dateobj->time->relative.h = intobj->diff->h * (bias != 0)", "dateobj->time->relative.h = intobj->diff->h * (bias * ht)", "dateobj->time->relative.h = intobj->diff->h * (bias * return_value_used)", "dateobj->time->relative.h = intobj->diff->h * (bias + 0)", "dateobj->time->relative.h = intobj->diff->h * (bias - 0)", "dateobj->time->relative.h = intobj->diff->h * (bias == 0)", "dateobj->time->relative.h = intobj->diff->h * (bias)", "dateobj->time->relative.h = intobj->diff->h * (dateobj != 0)", "dateobj->time->relative.h = intobj->diff->h * (dateobj == 0)", "dateobj->time->relative.h = intobj->diff->h * (ht != 0)", "dateobj->time->relative.h = intobj->diff->h * (ht != bias)", "dateobj->time->relative.h = intobj->diff->h * (ht != return_value_used)", "dateobj->time->relative.h = intobj->diff->h * (ht * bias)", "dateobj->time->relative.h = intobj->diff->h * (ht * return_value_used)", "dateobj->time->relative.h = intobj->diff->h * (ht + 0)", "dateobj->time->relative.h = intobj->diff->h * (ht + bias)", "dateobj->time->relative.h = intobj->diff->h * (ht + return_value_used)", "dateobj->time->relative.h = intobj->diff->h * (ht - 0)", "dateobj->time->relative.h = intobj->diff->h * (ht - bias)", "dateobj->time->relative.h = intobj->diff->h * (ht - return_value_used)", "dateobj->time->relative.h = intobj->diff->h * (ht == 0)", "dateobj->time->relative.h = intobj->diff->h * (ht == bias)", "dateobj->time->relative.h = intobj->diff->h * (ht == return_value_used)", "dateobj->time->relative.h = intobj->diff->h * (ht)", "dateobj->time->relative.h = intobj->diff->h * (interval != 0)", "dateobj->time->relative.h = intobj->diff->h * (interval == 0)", "dateobj->time->relative.h = intobj->diff->h * (intobj != 0)", "dateobj->time->relative.h = intobj->diff->h * (intobj == 0)", "dateobj->time->relative.h = intobj->diff->h * (object != 0)", "dateobj->time->relative.h = intobj->diff->h * (object != interval)", "dateobj->time->relative.h = intobj->diff->h * (object == 0)", "dateobj->time->relative.h = intobj->diff->h * (object == interval)", "dateobj->time->relative.h = intobj->diff->h * (return_value != 0)", "dateobj->time->relative.h = intobj->diff->h * (return_value != interval)", "dateobj->time->relative.h = intobj->diff->h * (return_value != object)", "dateobj->time->relative.h = intobj->diff->h * (return_value != this_ptr)", "dateobj->time->relative.h = intobj->diff->h * (return_value == 0)", "dateobj->time->relative.h = intobj->diff->h * (return_value == interval)", "dateobj->time->relative.h = intobj->diff->h * (return_value == object)", "dateobj->time->relative.h = intobj->diff->h * (return_value == this_ptr)", "dateobj->time->relative.h = intobj->diff->h * (return_value_ptr != 0)", "dateobj->time->relative.h = intobj->diff->h * (return_value_ptr == 0)", "dateobj->time->relative.h = intobj->diff->h * (return_value_used != 0)", "dateobj->time->relative.h = intobj->diff->h * (return_value_used != bias)", "dateobj->time->relative.h = intobj->diff->h * (return_value_used * bias)", "dateobj->time->relative.h = intobj->diff->h * (return_value_used * ht)", "dateobj->time->relative.h = intobj->diff->h * (return_value_used + 0)", "dateobj->time->relative.h = intobj->diff->h * (return_value_used + bias)", "dateobj->time->relative.h = intobj->diff->h * (return_value_used - 0)", "dateobj->time->relative.h = intobj->diff->h * (return_value_used - bias)", "dateobj->time->relative.h = intobj->diff->h * (return_value_used == 0)", "dateobj->time->relative.h = intobj->diff->h * (return_value_used == bias)", "dateobj->time->relative.h = intobj->diff->h * (return_value_used)", "dateobj->time->relative.h = intobj->diff->h * (this_ptr != 0)", "dateobj->time->relative.h = intobj->diff->h * (this_ptr != interval)", "dateobj->time->relative.h = intobj->diff->h * (this_ptr != object)", "dateobj->time->relative.h = intobj->diff->h * (this_ptr == 0)", "dateobj->time->relative.h = intobj->diff->h * (this_ptr == interval)", "dateobj->time->relative.h = intobj->diff->h * (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9387565150873778, -6.9387565150873778, -5.2963859542873779, -7.4636013250873781, -6.3096295396873785, -6.670926957687378, -7.4636013250873781, -6.4331649186873783, -6.1920502822873784, -5.9233075766873782, -6.5378203776873782, -6.4331649186873783, -6.6864051792873784, -5.9233075766873782, -6.6708778566873779, -6.4331649186873783, -5.9233075766873782, -6.8036371006873786, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -7.3313785266873781, -6.8039844366873776, -7.037027726687378, -7.037027726687378, -6.5734904266873784, -7.3313785266873781, -7.3540828666873779, -7.3540828666873779, -7.5618725366873782, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -7.5618725366873782, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -7.2732444366873779, -7.5618725366873782, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776, -6.8039844366873776]
								}, {
									"case":	2,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	3,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	4,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	5,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	6,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	7,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	8,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	9,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	10,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	11,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	12,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	13,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	14,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	15,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	16,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	17,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	18,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	19,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	20,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	21,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	22,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	23,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	24,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	25,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	26,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	27,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	28,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	29,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	30,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	31,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	32,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	33,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	34,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	35,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	36,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	37,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	38,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	39,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	40,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	41,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	42,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	43,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	44,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	45,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	46,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	47,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	48,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	49,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	50,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	51,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	52,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	53,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	54,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	55,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	56,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	57,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	58,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	59,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	60,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	61,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	62,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	63,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	64,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	65,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	66,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	67,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	68,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	69,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	70,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	71,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	72,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	73,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	74,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	75,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	76,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	77,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	78,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	79,
									"scores":	[-5.7100639566873781]
								}, {
									"case":	80,
									"scores":	[-5.7100639566873781]
								}]
						}]
				}, {
					"line":	2862,
					"switches":	[{
							"switch":	26,
							"types":	[[], [], [], [], [404], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], [], [], [], [], [], []],
							"begin_line":	2863,
							"begin_column":	1,
							"end_line":	2863,
							"end_column":	1,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2863\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	2,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	3,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	4,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	5,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	6,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	7,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	8,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	9,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	10,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	11,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	12,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	13,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	14,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	15,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	16,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	17,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	18,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	19,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	20,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	21,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	22,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	23,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	24,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	25,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	26,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	27,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	28,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	29,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	30,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	31,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	32,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	33,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	34,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	35,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	36,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	37,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	38,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	39,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	40,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	41,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	42,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	43,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	44,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	45,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	46,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	47,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	48,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	49,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	50,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	51,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	52,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	53,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	54,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	55,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	56,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	57,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	58,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	59,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	60,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	61,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	62,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	63,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	64,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	65,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	66,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	67,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	68,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	69,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	70,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	71,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	72,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	73,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	74,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	75,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	76,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	77,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	78,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	79,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	80,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	81,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	82,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	83,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	84,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	85,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	86,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	87,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	88,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	89,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	90,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	91,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	92,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	93,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	94,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	95,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	96,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	97,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	98,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	99,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	100,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	101,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	102,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	103,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	104,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	105,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	106,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	107,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	108,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	109,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	110,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	111,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	112,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	113,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	114,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	115,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	116,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	117,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	118,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	119,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	120,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	121,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	122,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	123,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	124,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	125,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	126,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	127,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	128,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	129,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	130,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	131,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	132,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	133,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	134,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	135,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	136,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	137,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	138,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	139,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	140,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	141,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	142,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	143,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	144,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	145,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	146,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	147,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	148,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	149,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	150,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	151,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	152,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	153,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	154,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	155,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	156,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	157,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	158,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	159,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	160,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	161,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	162,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	163,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	164,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	165,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	166,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	167,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	168,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	169,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	170,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	171,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	172,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	173,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	174,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	175,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	176,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	177,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	178,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	179,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	180,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	181,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	182,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	183,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	184,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	185,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	186,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	187,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	188,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	189,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	190,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	191,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	192,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	193,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	194,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	195,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	196,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	197,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	198,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	199,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	200,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	201,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	202,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	203,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	204,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	205,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	206,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	207,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	208,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	209,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	210,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	211,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	212,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	213,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	214,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	215,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	216,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	217,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	218,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	219,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	220,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	221,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	222,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	223,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	224,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	225,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	226,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	227,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	228,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	229,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	230,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	231,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	232,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	233,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	234,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	235,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	236,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	237,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	238,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	239,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	240,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	241,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	242,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	243,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	244,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	245,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	246,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	247,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	248,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	249,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	250,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	251,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	252,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	253,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	254,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	255,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	256,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	257,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	258,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	259,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	260,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	261,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	262,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	263,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	264,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	265,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	266,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	267,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	268,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	269,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	270,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	271,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	272,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	273,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	274,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	275,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	276,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	277,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	278,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	279,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	280,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	281,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	282,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	283,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	284,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	285,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	286,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	287,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	288,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	289,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	290,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	291,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	292,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	293,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	294,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	295,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	296,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	297,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	298,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	299,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	300,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	301,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	302,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	303,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	304,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	305,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	306,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	307,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	308,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	309,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	310,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	311,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	312,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	313,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	314,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	315,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	316,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	317,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	318,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	319,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	320,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	321,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	322,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	323,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	324,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	325,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	326,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	327,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	328,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	329,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	330,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	331,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	332,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	333,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	334,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	335,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	336,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	337,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	338,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	339,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	340,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	341,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	342,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	343,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	344,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	345,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	346,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	347,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	348,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	349,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	350,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	351,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	352,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	353,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	354,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	355,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	356,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	357,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	358,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	359,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	360,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	361,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	362,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	363,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	364,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	365,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	366,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	367,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	368,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	369,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	370,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	371,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	372,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	373,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	374,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	375,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	376,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	377,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	378,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	379,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	380,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	381,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	382,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	383,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	384,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	385,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	386,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	387,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	388,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	389,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	390,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	391,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	392,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	393,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	394,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	395,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	396,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	397,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	398,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	399,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	400,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	401,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	402,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	403,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	404,
									"scores":	[-8.14085157006986, -8.14085157006986, -6.09175871336986, -8.95499774406986, -7.1207501903698578, -7.9430468603698579, -8.95499774406986, -8.61822831636986, -8.29271973936986, -7.0282421393698584, -8.80167513936986, -8.61822831636986, -7.0282421393698584, -8.93365211936986, -8.61822831636986, -7.0282421393698584, -8.93365211936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.30206675916986, -8.26496635916986, -8.83307361936986, -8.26496635916986, -8.05602784536986, -8.30206675916986, -8.52403856716986, -8.52403856716986, -9.07911253316986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -9.07911253316986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -9.04396273636986, -9.07911253316986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986, -8.83307361936986]
								}]
						}, {
							"switch":	27,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2863,
							"begin_column":	3,
							"end_line":	2863,
							"end_column":	49,
							"patch_codes":	["if (!__is_neg(\"\", \"L2863\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.i = intobj->diff->i * bias;\n", "{\n}\n", "dateobj->time->relative.i = (&bias)->diff->i * bias", "dateobj->time->relative.i = (&dateobj)->diff->i * bias", "dateobj->time->relative.i = (&ht)->diff->i * bias", "dateobj->time->relative.i = (&interval)->diff->i * bias", "dateobj->time->relative.i = (&intobj)->diff->i * bias", "dateobj->time->relative.i = (&object)->diff->i * bias", "dateobj->time->relative.i = (&return_value)->diff->i * bias", "dateobj->time->relative.i = (&return_value_ptr)->diff->i * bias", "dateobj->time->relative.i = (&return_value_used)->diff->i * bias", "dateobj->time->relative.i = (&this_ptr)->diff->i * bias", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.i = intobj->diff->i * (0 * bias)", "dateobj->time->relative.i = intobj->diff->i * (0 * ht)", "dateobj->time->relative.i = intobj->diff->i * (0 * return_value_used)", "dateobj->time->relative.i = intobj->diff->i * (bias != 0)", "dateobj->time->relative.i = intobj->diff->i * (bias * ht)", "dateobj->time->relative.i = intobj->diff->i * (bias * return_value_used)", "dateobj->time->relative.i = intobj->diff->i * (bias + 0)", "dateobj->time->relative.i = intobj->diff->i * (bias - 0)", "dateobj->time->relative.i = intobj->diff->i * (bias == 0)", "dateobj->time->relative.i = intobj->diff->i * (bias)", "dateobj->time->relative.i = intobj->diff->i * (dateobj != 0)", "dateobj->time->relative.i = intobj->diff->i * (dateobj == 0)", "dateobj->time->relative.i = intobj->diff->i * (ht != 0)", "dateobj->time->relative.i = intobj->diff->i * (ht != bias)", "dateobj->time->relative.i = intobj->diff->i * (ht != return_value_used)", "dateobj->time->relative.i = intobj->diff->i * (ht * bias)", "dateobj->time->relative.i = intobj->diff->i * (ht * return_value_used)", "dateobj->time->relative.i = intobj->diff->i * (ht + 0)", "dateobj->time->relative.i = intobj->diff->i * (ht + bias)", "dateobj->time->relative.i = intobj->diff->i * (ht + return_value_used)", "dateobj->time->relative.i = intobj->diff->i * (ht - 0)", "dateobj->time->relative.i = intobj->diff->i * (ht - bias)", "dateobj->time->relative.i = intobj->diff->i * (ht - return_value_used)", "dateobj->time->relative.i = intobj->diff->i * (ht == 0)", "dateobj->time->relative.i = intobj->diff->i * (ht == bias)", "dateobj->time->relative.i = intobj->diff->i * (ht == return_value_used)", "dateobj->time->relative.i = intobj->diff->i * (ht)", "dateobj->time->relative.i = intobj->diff->i * (interval != 0)", "dateobj->time->relative.i = intobj->diff->i * (interval == 0)", "dateobj->time->relative.i = intobj->diff->i * (intobj != 0)", "dateobj->time->relative.i = intobj->diff->i * (intobj == 0)", "dateobj->time->relative.i = intobj->diff->i * (object != 0)", "dateobj->time->relative.i = intobj->diff->i * (object != interval)", "dateobj->time->relative.i = intobj->diff->i * (object == 0)", "dateobj->time->relative.i = intobj->diff->i * (object == interval)", "dateobj->time->relative.i = intobj->diff->i * (return_value != 0)", "dateobj->time->relative.i = intobj->diff->i * (return_value != interval)", "dateobj->time->relative.i = intobj->diff->i * (return_value != object)", "dateobj->time->relative.i = intobj->diff->i * (return_value != this_ptr)", "dateobj->time->relative.i = intobj->diff->i * (return_value == 0)", "dateobj->time->relative.i = intobj->diff->i * (return_value == interval)", "dateobj->time->relative.i = intobj->diff->i * (return_value == object)", "dateobj->time->relative.i = intobj->diff->i * (return_value == this_ptr)", "dateobj->time->relative.i = intobj->diff->i * (return_value_ptr != 0)", "dateobj->time->relative.i = intobj->diff->i * (return_value_ptr == 0)", "dateobj->time->relative.i = intobj->diff->i * (return_value_used != 0)", "dateobj->time->relative.i = intobj->diff->i * (return_value_used != bias)", "dateobj->time->relative.i = intobj->diff->i * (return_value_used * bias)", "dateobj->time->relative.i = intobj->diff->i * (return_value_used * ht)", "dateobj->time->relative.i = intobj->diff->i * (return_value_used + 0)", "dateobj->time->relative.i = intobj->diff->i * (return_value_used + bias)", "dateobj->time->relative.i = intobj->diff->i * (return_value_used - 0)", "dateobj->time->relative.i = intobj->diff->i * (return_value_used - bias)", "dateobj->time->relative.i = intobj->diff->i * (return_value_used == 0)", "dateobj->time->relative.i = intobj->diff->i * (return_value_used == bias)", "dateobj->time->relative.i = intobj->diff->i * (return_value_used)", "dateobj->time->relative.i = intobj->diff->i * (this_ptr != 0)", "dateobj->time->relative.i = intobj->diff->i * (this_ptr != interval)", "dateobj->time->relative.i = intobj->diff->i * (this_ptr != object)", "dateobj->time->relative.i = intobj->diff->i * (this_ptr == 0)", "dateobj->time->relative.i = intobj->diff->i * (this_ptr == interval)", "dateobj->time->relative.i = intobj->diff->i * (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9185538077698583, -6.9185538077698583, -5.2761832469698584, -7.4433986177698586, -6.28942683236986, -6.6507242503698585, -7.4433986177698586, -6.41296221136986, -6.17184757496986, -5.90310486936986, -6.51761767036986, -6.41296221136986, -5.90310486936986, -6.78343439336986, -6.41296221136986, -5.90310486936986, -6.78343439336986, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -7.3111758193698586, -7.0168250193698585, -6.7837817293698581, -7.0168250193698585, -6.55328771936986, -7.3111758193698586, -7.3338801593698584, -7.3338801593698584, -7.54166982936986, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -7.54166982936986, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -7.2530417293698584, -7.54166982936986, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581, -6.7837817293698581]
								}, {
									"case":	2,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	3,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	4,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	5,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	6,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	7,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	8,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	9,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	10,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	11,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	12,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	13,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	14,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	15,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	16,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	17,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	18,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	19,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	20,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	21,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	22,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	23,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	24,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	25,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	26,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	27,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	28,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	29,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	30,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	31,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	32,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	33,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	34,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	35,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	36,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	37,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	38,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	39,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	40,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	41,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	42,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	43,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	44,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	45,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	46,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	47,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	48,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	49,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	50,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	51,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	52,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	53,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	54,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	55,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	56,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	57,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	58,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	59,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	60,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	61,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	62,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	63,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	64,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	65,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	66,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	67,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	68,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	69,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	70,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	71,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	72,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	73,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	74,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	75,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	76,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	77,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	78,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	79,
									"scores":	[-5.6898612493698586]
								}, {
									"case":	80,
									"scores":	[-5.6898612493698586]
								}]
						}]
				}, {
					"line":	2863,
					"switches":	[{
							"switch":	28,
							"types":	[[], [], [], [], [404], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], [], [], [], [], [], []],
							"begin_line":	2864,
							"begin_column":	1,
							"end_line":	2864,
							"end_column":	1,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2864\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.66965854205234]
								}, {
									"case":	2,
									"scores":	[-5.66965854205234]
								}, {
									"case":	3,
									"scores":	[-5.66965854205234]
								}, {
									"case":	4,
									"scores":	[-5.66965854205234]
								}, {
									"case":	5,
									"scores":	[-5.66965854205234]
								}, {
									"case":	6,
									"scores":	[-5.66965854205234]
								}, {
									"case":	7,
									"scores":	[-5.66965854205234]
								}, {
									"case":	8,
									"scores":	[-5.66965854205234]
								}, {
									"case":	9,
									"scores":	[-5.66965854205234]
								}, {
									"case":	10,
									"scores":	[-5.66965854205234]
								}, {
									"case":	11,
									"scores":	[-5.66965854205234]
								}, {
									"case":	12,
									"scores":	[-5.66965854205234]
								}, {
									"case":	13,
									"scores":	[-5.66965854205234]
								}, {
									"case":	14,
									"scores":	[-5.66965854205234]
								}, {
									"case":	15,
									"scores":	[-5.66965854205234]
								}, {
									"case":	16,
									"scores":	[-5.66965854205234]
								}, {
									"case":	17,
									"scores":	[-5.66965854205234]
								}, {
									"case":	18,
									"scores":	[-5.66965854205234]
								}, {
									"case":	19,
									"scores":	[-5.66965854205234]
								}, {
									"case":	20,
									"scores":	[-5.66965854205234]
								}, {
									"case":	21,
									"scores":	[-5.66965854205234]
								}, {
									"case":	22,
									"scores":	[-5.66965854205234]
								}, {
									"case":	23,
									"scores":	[-5.66965854205234]
								}, {
									"case":	24,
									"scores":	[-5.66965854205234]
								}, {
									"case":	25,
									"scores":	[-5.66965854205234]
								}, {
									"case":	26,
									"scores":	[-5.66965854205234]
								}, {
									"case":	27,
									"scores":	[-5.66965854205234]
								}, {
									"case":	28,
									"scores":	[-5.66965854205234]
								}, {
									"case":	29,
									"scores":	[-5.66965854205234]
								}, {
									"case":	30,
									"scores":	[-5.66965854205234]
								}, {
									"case":	31,
									"scores":	[-5.66965854205234]
								}, {
									"case":	32,
									"scores":	[-5.66965854205234]
								}, {
									"case":	33,
									"scores":	[-5.66965854205234]
								}, {
									"case":	34,
									"scores":	[-5.66965854205234]
								}, {
									"case":	35,
									"scores":	[-5.66965854205234]
								}, {
									"case":	36,
									"scores":	[-5.66965854205234]
								}, {
									"case":	37,
									"scores":	[-5.66965854205234]
								}, {
									"case":	38,
									"scores":	[-5.66965854205234]
								}, {
									"case":	39,
									"scores":	[-5.66965854205234]
								}, {
									"case":	40,
									"scores":	[-5.66965854205234]
								}, {
									"case":	41,
									"scores":	[-5.66965854205234]
								}, {
									"case":	42,
									"scores":	[-5.66965854205234]
								}, {
									"case":	43,
									"scores":	[-5.66965854205234]
								}, {
									"case":	44,
									"scores":	[-5.66965854205234]
								}, {
									"case":	45,
									"scores":	[-5.66965854205234]
								}, {
									"case":	46,
									"scores":	[-5.66965854205234]
								}, {
									"case":	47,
									"scores":	[-5.66965854205234]
								}, {
									"case":	48,
									"scores":	[-5.66965854205234]
								}, {
									"case":	49,
									"scores":	[-5.66965854205234]
								}, {
									"case":	50,
									"scores":	[-5.66965854205234]
								}, {
									"case":	51,
									"scores":	[-5.66965854205234]
								}, {
									"case":	52,
									"scores":	[-5.66965854205234]
								}, {
									"case":	53,
									"scores":	[-5.66965854205234]
								}, {
									"case":	54,
									"scores":	[-5.66965854205234]
								}, {
									"case":	55,
									"scores":	[-5.66965854205234]
								}, {
									"case":	56,
									"scores":	[-5.66965854205234]
								}, {
									"case":	57,
									"scores":	[-5.66965854205234]
								}, {
									"case":	58,
									"scores":	[-5.66965854205234]
								}, {
									"case":	59,
									"scores":	[-5.66965854205234]
								}, {
									"case":	60,
									"scores":	[-5.66965854205234]
								}, {
									"case":	61,
									"scores":	[-5.66965854205234]
								}, {
									"case":	62,
									"scores":	[-5.66965854205234]
								}, {
									"case":	63,
									"scores":	[-5.66965854205234]
								}, {
									"case":	64,
									"scores":	[-5.66965854205234]
								}, {
									"case":	65,
									"scores":	[-5.66965854205234]
								}, {
									"case":	66,
									"scores":	[-5.66965854205234]
								}, {
									"case":	67,
									"scores":	[-5.66965854205234]
								}, {
									"case":	68,
									"scores":	[-5.66965854205234]
								}, {
									"case":	69,
									"scores":	[-5.66965854205234]
								}, {
									"case":	70,
									"scores":	[-5.66965854205234]
								}, {
									"case":	71,
									"scores":	[-5.66965854205234]
								}, {
									"case":	72,
									"scores":	[-5.66965854205234]
								}, {
									"case":	73,
									"scores":	[-5.66965854205234]
								}, {
									"case":	74,
									"scores":	[-5.66965854205234]
								}, {
									"case":	75,
									"scores":	[-5.66965854205234]
								}, {
									"case":	76,
									"scores":	[-5.66965854205234]
								}, {
									"case":	77,
									"scores":	[-5.66965854205234]
								}, {
									"case":	78,
									"scores":	[-5.66965854205234]
								}, {
									"case":	79,
									"scores":	[-5.66965854205234]
								}, {
									"case":	80,
									"scores":	[-5.66965854205234]
								}, {
									"case":	81,
									"scores":	[-5.66965854205234]
								}, {
									"case":	82,
									"scores":	[-5.66965854205234]
								}, {
									"case":	83,
									"scores":	[-5.66965854205234]
								}, {
									"case":	84,
									"scores":	[-5.66965854205234]
								}, {
									"case":	85,
									"scores":	[-5.66965854205234]
								}, {
									"case":	86,
									"scores":	[-5.66965854205234]
								}, {
									"case":	87,
									"scores":	[-5.66965854205234]
								}, {
									"case":	88,
									"scores":	[-5.66965854205234]
								}, {
									"case":	89,
									"scores":	[-5.66965854205234]
								}, {
									"case":	90,
									"scores":	[-5.66965854205234]
								}, {
									"case":	91,
									"scores":	[-5.66965854205234]
								}, {
									"case":	92,
									"scores":	[-5.66965854205234]
								}, {
									"case":	93,
									"scores":	[-5.66965854205234]
								}, {
									"case":	94,
									"scores":	[-5.66965854205234]
								}, {
									"case":	95,
									"scores":	[-5.66965854205234]
								}, {
									"case":	96,
									"scores":	[-5.66965854205234]
								}, {
									"case":	97,
									"scores":	[-5.66965854205234]
								}, {
									"case":	98,
									"scores":	[-5.66965854205234]
								}, {
									"case":	99,
									"scores":	[-5.66965854205234]
								}, {
									"case":	100,
									"scores":	[-5.66965854205234]
								}, {
									"case":	101,
									"scores":	[-5.66965854205234]
								}, {
									"case":	102,
									"scores":	[-5.66965854205234]
								}, {
									"case":	103,
									"scores":	[-5.66965854205234]
								}, {
									"case":	104,
									"scores":	[-5.66965854205234]
								}, {
									"case":	105,
									"scores":	[-5.66965854205234]
								}, {
									"case":	106,
									"scores":	[-5.66965854205234]
								}, {
									"case":	107,
									"scores":	[-5.66965854205234]
								}, {
									"case":	108,
									"scores":	[-5.66965854205234]
								}, {
									"case":	109,
									"scores":	[-5.66965854205234]
								}, {
									"case":	110,
									"scores":	[-5.66965854205234]
								}, {
									"case":	111,
									"scores":	[-5.66965854205234]
								}, {
									"case":	112,
									"scores":	[-5.66965854205234]
								}, {
									"case":	113,
									"scores":	[-5.66965854205234]
								}, {
									"case":	114,
									"scores":	[-5.66965854205234]
								}, {
									"case":	115,
									"scores":	[-5.66965854205234]
								}, {
									"case":	116,
									"scores":	[-5.66965854205234]
								}, {
									"case":	117,
									"scores":	[-5.66965854205234]
								}, {
									"case":	118,
									"scores":	[-5.66965854205234]
								}, {
									"case":	119,
									"scores":	[-5.66965854205234]
								}, {
									"case":	120,
									"scores":	[-5.66965854205234]
								}, {
									"case":	121,
									"scores":	[-5.66965854205234]
								}, {
									"case":	122,
									"scores":	[-5.66965854205234]
								}, {
									"case":	123,
									"scores":	[-5.66965854205234]
								}, {
									"case":	124,
									"scores":	[-5.66965854205234]
								}, {
									"case":	125,
									"scores":	[-5.66965854205234]
								}, {
									"case":	126,
									"scores":	[-5.66965854205234]
								}, {
									"case":	127,
									"scores":	[-5.66965854205234]
								}, {
									"case":	128,
									"scores":	[-5.66965854205234]
								}, {
									"case":	129,
									"scores":	[-5.66965854205234]
								}, {
									"case":	130,
									"scores":	[-5.66965854205234]
								}, {
									"case":	131,
									"scores":	[-5.66965854205234]
								}, {
									"case":	132,
									"scores":	[-5.66965854205234]
								}, {
									"case":	133,
									"scores":	[-5.66965854205234]
								}, {
									"case":	134,
									"scores":	[-5.66965854205234]
								}, {
									"case":	135,
									"scores":	[-5.66965854205234]
								}, {
									"case":	136,
									"scores":	[-5.66965854205234]
								}, {
									"case":	137,
									"scores":	[-5.66965854205234]
								}, {
									"case":	138,
									"scores":	[-5.66965854205234]
								}, {
									"case":	139,
									"scores":	[-5.66965854205234]
								}, {
									"case":	140,
									"scores":	[-5.66965854205234]
								}, {
									"case":	141,
									"scores":	[-5.66965854205234]
								}, {
									"case":	142,
									"scores":	[-5.66965854205234]
								}, {
									"case":	143,
									"scores":	[-5.66965854205234]
								}, {
									"case":	144,
									"scores":	[-5.66965854205234]
								}, {
									"case":	145,
									"scores":	[-5.66965854205234]
								}, {
									"case":	146,
									"scores":	[-5.66965854205234]
								}, {
									"case":	147,
									"scores":	[-5.66965854205234]
								}, {
									"case":	148,
									"scores":	[-5.66965854205234]
								}, {
									"case":	149,
									"scores":	[-5.66965854205234]
								}, {
									"case":	150,
									"scores":	[-5.66965854205234]
								}, {
									"case":	151,
									"scores":	[-5.66965854205234]
								}, {
									"case":	152,
									"scores":	[-5.66965854205234]
								}, {
									"case":	153,
									"scores":	[-5.66965854205234]
								}, {
									"case":	154,
									"scores":	[-5.66965854205234]
								}, {
									"case":	155,
									"scores":	[-5.66965854205234]
								}, {
									"case":	156,
									"scores":	[-5.66965854205234]
								}, {
									"case":	157,
									"scores":	[-5.66965854205234]
								}, {
									"case":	158,
									"scores":	[-5.66965854205234]
								}, {
									"case":	159,
									"scores":	[-5.66965854205234]
								}, {
									"case":	160,
									"scores":	[-5.66965854205234]
								}, {
									"case":	161,
									"scores":	[-5.66965854205234]
								}, {
									"case":	162,
									"scores":	[-5.66965854205234]
								}, {
									"case":	163,
									"scores":	[-5.66965854205234]
								}, {
									"case":	164,
									"scores":	[-5.66965854205234]
								}, {
									"case":	165,
									"scores":	[-5.66965854205234]
								}, {
									"case":	166,
									"scores":	[-5.66965854205234]
								}, {
									"case":	167,
									"scores":	[-5.66965854205234]
								}, {
									"case":	168,
									"scores":	[-5.66965854205234]
								}, {
									"case":	169,
									"scores":	[-5.66965854205234]
								}, {
									"case":	170,
									"scores":	[-5.66965854205234]
								}, {
									"case":	171,
									"scores":	[-5.66965854205234]
								}, {
									"case":	172,
									"scores":	[-5.66965854205234]
								}, {
									"case":	173,
									"scores":	[-5.66965854205234]
								}, {
									"case":	174,
									"scores":	[-5.66965854205234]
								}, {
									"case":	175,
									"scores":	[-5.66965854205234]
								}, {
									"case":	176,
									"scores":	[-5.66965854205234]
								}, {
									"case":	177,
									"scores":	[-5.66965854205234]
								}, {
									"case":	178,
									"scores":	[-5.66965854205234]
								}, {
									"case":	179,
									"scores":	[-5.66965854205234]
								}, {
									"case":	180,
									"scores":	[-5.66965854205234]
								}, {
									"case":	181,
									"scores":	[-5.66965854205234]
								}, {
									"case":	182,
									"scores":	[-5.66965854205234]
								}, {
									"case":	183,
									"scores":	[-5.66965854205234]
								}, {
									"case":	184,
									"scores":	[-5.66965854205234]
								}, {
									"case":	185,
									"scores":	[-5.66965854205234]
								}, {
									"case":	186,
									"scores":	[-5.66965854205234]
								}, {
									"case":	187,
									"scores":	[-5.66965854205234]
								}, {
									"case":	188,
									"scores":	[-5.66965854205234]
								}, {
									"case":	189,
									"scores":	[-5.66965854205234]
								}, {
									"case":	190,
									"scores":	[-5.66965854205234]
								}, {
									"case":	191,
									"scores":	[-5.66965854205234]
								}, {
									"case":	192,
									"scores":	[-5.66965854205234]
								}, {
									"case":	193,
									"scores":	[-5.66965854205234]
								}, {
									"case":	194,
									"scores":	[-5.66965854205234]
								}, {
									"case":	195,
									"scores":	[-5.66965854205234]
								}, {
									"case":	196,
									"scores":	[-5.66965854205234]
								}, {
									"case":	197,
									"scores":	[-5.66965854205234]
								}, {
									"case":	198,
									"scores":	[-5.66965854205234]
								}, {
									"case":	199,
									"scores":	[-5.66965854205234]
								}, {
									"case":	200,
									"scores":	[-5.66965854205234]
								}, {
									"case":	201,
									"scores":	[-5.66965854205234]
								}, {
									"case":	202,
									"scores":	[-5.66965854205234]
								}, {
									"case":	203,
									"scores":	[-5.66965854205234]
								}, {
									"case":	204,
									"scores":	[-5.66965854205234]
								}, {
									"case":	205,
									"scores":	[-5.66965854205234]
								}, {
									"case":	206,
									"scores":	[-5.66965854205234]
								}, {
									"case":	207,
									"scores":	[-5.66965854205234]
								}, {
									"case":	208,
									"scores":	[-5.66965854205234]
								}, {
									"case":	209,
									"scores":	[-5.66965854205234]
								}, {
									"case":	210,
									"scores":	[-5.66965854205234]
								}, {
									"case":	211,
									"scores":	[-5.66965854205234]
								}, {
									"case":	212,
									"scores":	[-5.66965854205234]
								}, {
									"case":	213,
									"scores":	[-5.66965854205234]
								}, {
									"case":	214,
									"scores":	[-5.66965854205234]
								}, {
									"case":	215,
									"scores":	[-5.66965854205234]
								}, {
									"case":	216,
									"scores":	[-5.66965854205234]
								}, {
									"case":	217,
									"scores":	[-5.66965854205234]
								}, {
									"case":	218,
									"scores":	[-5.66965854205234]
								}, {
									"case":	219,
									"scores":	[-5.66965854205234]
								}, {
									"case":	220,
									"scores":	[-5.66965854205234]
								}, {
									"case":	221,
									"scores":	[-5.66965854205234]
								}, {
									"case":	222,
									"scores":	[-5.66965854205234]
								}, {
									"case":	223,
									"scores":	[-5.66965854205234]
								}, {
									"case":	224,
									"scores":	[-5.66965854205234]
								}, {
									"case":	225,
									"scores":	[-5.66965854205234]
								}, {
									"case":	226,
									"scores":	[-5.66965854205234]
								}, {
									"case":	227,
									"scores":	[-5.66965854205234]
								}, {
									"case":	228,
									"scores":	[-5.66965854205234]
								}, {
									"case":	229,
									"scores":	[-5.66965854205234]
								}, {
									"case":	230,
									"scores":	[-5.66965854205234]
								}, {
									"case":	231,
									"scores":	[-5.66965854205234]
								}, {
									"case":	232,
									"scores":	[-5.66965854205234]
								}, {
									"case":	233,
									"scores":	[-5.66965854205234]
								}, {
									"case":	234,
									"scores":	[-5.66965854205234]
								}, {
									"case":	235,
									"scores":	[-5.66965854205234]
								}, {
									"case":	236,
									"scores":	[-5.66965854205234]
								}, {
									"case":	237,
									"scores":	[-5.66965854205234]
								}, {
									"case":	238,
									"scores":	[-5.66965854205234]
								}, {
									"case":	239,
									"scores":	[-5.66965854205234]
								}, {
									"case":	240,
									"scores":	[-5.66965854205234]
								}, {
									"case":	241,
									"scores":	[-5.66965854205234]
								}, {
									"case":	242,
									"scores":	[-5.66965854205234]
								}, {
									"case":	243,
									"scores":	[-5.66965854205234]
								}, {
									"case":	244,
									"scores":	[-5.66965854205234]
								}, {
									"case":	245,
									"scores":	[-5.66965854205234]
								}, {
									"case":	246,
									"scores":	[-5.66965854205234]
								}, {
									"case":	247,
									"scores":	[-5.66965854205234]
								}, {
									"case":	248,
									"scores":	[-5.66965854205234]
								}, {
									"case":	249,
									"scores":	[-5.66965854205234]
								}, {
									"case":	250,
									"scores":	[-5.66965854205234]
								}, {
									"case":	251,
									"scores":	[-5.66965854205234]
								}, {
									"case":	252,
									"scores":	[-5.66965854205234]
								}, {
									"case":	253,
									"scores":	[-5.66965854205234]
								}, {
									"case":	254,
									"scores":	[-5.66965854205234]
								}, {
									"case":	255,
									"scores":	[-5.66965854205234]
								}, {
									"case":	256,
									"scores":	[-5.66965854205234]
								}, {
									"case":	257,
									"scores":	[-5.66965854205234]
								}, {
									"case":	258,
									"scores":	[-5.66965854205234]
								}, {
									"case":	259,
									"scores":	[-5.66965854205234]
								}, {
									"case":	260,
									"scores":	[-5.66965854205234]
								}, {
									"case":	261,
									"scores":	[-5.66965854205234]
								}, {
									"case":	262,
									"scores":	[-5.66965854205234]
								}, {
									"case":	263,
									"scores":	[-5.66965854205234]
								}, {
									"case":	264,
									"scores":	[-5.66965854205234]
								}, {
									"case":	265,
									"scores":	[-5.66965854205234]
								}, {
									"case":	266,
									"scores":	[-5.66965854205234]
								}, {
									"case":	267,
									"scores":	[-5.66965854205234]
								}, {
									"case":	268,
									"scores":	[-5.66965854205234]
								}, {
									"case":	269,
									"scores":	[-5.66965854205234]
								}, {
									"case":	270,
									"scores":	[-5.66965854205234]
								}, {
									"case":	271,
									"scores":	[-5.66965854205234]
								}, {
									"case":	272,
									"scores":	[-5.66965854205234]
								}, {
									"case":	273,
									"scores":	[-5.66965854205234]
								}, {
									"case":	274,
									"scores":	[-5.66965854205234]
								}, {
									"case":	275,
									"scores":	[-5.66965854205234]
								}, {
									"case":	276,
									"scores":	[-5.66965854205234]
								}, {
									"case":	277,
									"scores":	[-5.66965854205234]
								}, {
									"case":	278,
									"scores":	[-5.66965854205234]
								}, {
									"case":	279,
									"scores":	[-5.66965854205234]
								}, {
									"case":	280,
									"scores":	[-5.66965854205234]
								}, {
									"case":	281,
									"scores":	[-5.66965854205234]
								}, {
									"case":	282,
									"scores":	[-5.66965854205234]
								}, {
									"case":	283,
									"scores":	[-5.66965854205234]
								}, {
									"case":	284,
									"scores":	[-5.66965854205234]
								}, {
									"case":	285,
									"scores":	[-5.66965854205234]
								}, {
									"case":	286,
									"scores":	[-5.66965854205234]
								}, {
									"case":	287,
									"scores":	[-5.66965854205234]
								}, {
									"case":	288,
									"scores":	[-5.66965854205234]
								}, {
									"case":	289,
									"scores":	[-5.66965854205234]
								}, {
									"case":	290,
									"scores":	[-5.66965854205234]
								}, {
									"case":	291,
									"scores":	[-5.66965854205234]
								}, {
									"case":	292,
									"scores":	[-5.66965854205234]
								}, {
									"case":	293,
									"scores":	[-5.66965854205234]
								}, {
									"case":	294,
									"scores":	[-5.66965854205234]
								}, {
									"case":	295,
									"scores":	[-5.66965854205234]
								}, {
									"case":	296,
									"scores":	[-5.66965854205234]
								}, {
									"case":	297,
									"scores":	[-5.66965854205234]
								}, {
									"case":	298,
									"scores":	[-5.66965854205234]
								}, {
									"case":	299,
									"scores":	[-5.66965854205234]
								}, {
									"case":	300,
									"scores":	[-5.66965854205234]
								}, {
									"case":	301,
									"scores":	[-5.66965854205234]
								}, {
									"case":	302,
									"scores":	[-5.66965854205234]
								}, {
									"case":	303,
									"scores":	[-5.66965854205234]
								}, {
									"case":	304,
									"scores":	[-5.66965854205234]
								}, {
									"case":	305,
									"scores":	[-5.66965854205234]
								}, {
									"case":	306,
									"scores":	[-5.66965854205234]
								}, {
									"case":	307,
									"scores":	[-5.66965854205234]
								}, {
									"case":	308,
									"scores":	[-5.66965854205234]
								}, {
									"case":	309,
									"scores":	[-5.66965854205234]
								}, {
									"case":	310,
									"scores":	[-5.66965854205234]
								}, {
									"case":	311,
									"scores":	[-5.66965854205234]
								}, {
									"case":	312,
									"scores":	[-5.66965854205234]
								}, {
									"case":	313,
									"scores":	[-5.66965854205234]
								}, {
									"case":	314,
									"scores":	[-5.66965854205234]
								}, {
									"case":	315,
									"scores":	[-5.66965854205234]
								}, {
									"case":	316,
									"scores":	[-5.66965854205234]
								}, {
									"case":	317,
									"scores":	[-5.66965854205234]
								}, {
									"case":	318,
									"scores":	[-5.66965854205234]
								}, {
									"case":	319,
									"scores":	[-5.66965854205234]
								}, {
									"case":	320,
									"scores":	[-5.66965854205234]
								}, {
									"case":	321,
									"scores":	[-5.66965854205234]
								}, {
									"case":	322,
									"scores":	[-5.66965854205234]
								}, {
									"case":	323,
									"scores":	[-5.66965854205234]
								}, {
									"case":	324,
									"scores":	[-5.66965854205234]
								}, {
									"case":	325,
									"scores":	[-5.66965854205234]
								}, {
									"case":	326,
									"scores":	[-5.66965854205234]
								}, {
									"case":	327,
									"scores":	[-5.66965854205234]
								}, {
									"case":	328,
									"scores":	[-5.66965854205234]
								}, {
									"case":	329,
									"scores":	[-5.66965854205234]
								}, {
									"case":	330,
									"scores":	[-5.66965854205234]
								}, {
									"case":	331,
									"scores":	[-5.66965854205234]
								}, {
									"case":	332,
									"scores":	[-5.66965854205234]
								}, {
									"case":	333,
									"scores":	[-5.66965854205234]
								}, {
									"case":	334,
									"scores":	[-5.66965854205234]
								}, {
									"case":	335,
									"scores":	[-5.66965854205234]
								}, {
									"case":	336,
									"scores":	[-5.66965854205234]
								}, {
									"case":	337,
									"scores":	[-5.66965854205234]
								}, {
									"case":	338,
									"scores":	[-5.66965854205234]
								}, {
									"case":	339,
									"scores":	[-5.66965854205234]
								}, {
									"case":	340,
									"scores":	[-5.66965854205234]
								}, {
									"case":	341,
									"scores":	[-5.66965854205234]
								}, {
									"case":	342,
									"scores":	[-5.66965854205234]
								}, {
									"case":	343,
									"scores":	[-5.66965854205234]
								}, {
									"case":	344,
									"scores":	[-5.66965854205234]
								}, {
									"case":	345,
									"scores":	[-5.66965854205234]
								}, {
									"case":	346,
									"scores":	[-5.66965854205234]
								}, {
									"case":	347,
									"scores":	[-5.66965854205234]
								}, {
									"case":	348,
									"scores":	[-5.66965854205234]
								}, {
									"case":	349,
									"scores":	[-5.66965854205234]
								}, {
									"case":	350,
									"scores":	[-5.66965854205234]
								}, {
									"case":	351,
									"scores":	[-5.66965854205234]
								}, {
									"case":	352,
									"scores":	[-5.66965854205234]
								}, {
									"case":	353,
									"scores":	[-5.66965854205234]
								}, {
									"case":	354,
									"scores":	[-5.66965854205234]
								}, {
									"case":	355,
									"scores":	[-5.66965854205234]
								}, {
									"case":	356,
									"scores":	[-5.66965854205234]
								}, {
									"case":	357,
									"scores":	[-5.66965854205234]
								}, {
									"case":	358,
									"scores":	[-5.66965854205234]
								}, {
									"case":	359,
									"scores":	[-5.66965854205234]
								}, {
									"case":	360,
									"scores":	[-5.66965854205234]
								}, {
									"case":	361,
									"scores":	[-5.66965854205234]
								}, {
									"case":	362,
									"scores":	[-5.66965854205234]
								}, {
									"case":	363,
									"scores":	[-5.66965854205234]
								}, {
									"case":	364,
									"scores":	[-5.66965854205234]
								}, {
									"case":	365,
									"scores":	[-5.66965854205234]
								}, {
									"case":	366,
									"scores":	[-5.66965854205234]
								}, {
									"case":	367,
									"scores":	[-5.66965854205234]
								}, {
									"case":	368,
									"scores":	[-5.66965854205234]
								}, {
									"case":	369,
									"scores":	[-5.66965854205234]
								}, {
									"case":	370,
									"scores":	[-5.66965854205234]
								}, {
									"case":	371,
									"scores":	[-5.66965854205234]
								}, {
									"case":	372,
									"scores":	[-5.66965854205234]
								}, {
									"case":	373,
									"scores":	[-5.66965854205234]
								}, {
									"case":	374,
									"scores":	[-5.66965854205234]
								}, {
									"case":	375,
									"scores":	[-5.66965854205234]
								}, {
									"case":	376,
									"scores":	[-5.66965854205234]
								}, {
									"case":	377,
									"scores":	[-5.66965854205234]
								}, {
									"case":	378,
									"scores":	[-5.66965854205234]
								}, {
									"case":	379,
									"scores":	[-5.66965854205234]
								}, {
									"case":	380,
									"scores":	[-5.66965854205234]
								}, {
									"case":	381,
									"scores":	[-5.66965854205234]
								}, {
									"case":	382,
									"scores":	[-5.66965854205234]
								}, {
									"case":	383,
									"scores":	[-5.66965854205234]
								}, {
									"case":	384,
									"scores":	[-5.66965854205234]
								}, {
									"case":	385,
									"scores":	[-5.66965854205234]
								}, {
									"case":	386,
									"scores":	[-5.66965854205234]
								}, {
									"case":	387,
									"scores":	[-5.66965854205234]
								}, {
									"case":	388,
									"scores":	[-5.66965854205234]
								}, {
									"case":	389,
									"scores":	[-5.66965854205234]
								}, {
									"case":	390,
									"scores":	[-5.66965854205234]
								}, {
									"case":	391,
									"scores":	[-5.66965854205234]
								}, {
									"case":	392,
									"scores":	[-5.66965854205234]
								}, {
									"case":	393,
									"scores":	[-5.66965854205234]
								}, {
									"case":	394,
									"scores":	[-5.66965854205234]
								}, {
									"case":	395,
									"scores":	[-5.66965854205234]
								}, {
									"case":	396,
									"scores":	[-5.66965854205234]
								}, {
									"case":	397,
									"scores":	[-5.66965854205234]
								}, {
									"case":	398,
									"scores":	[-5.66965854205234]
								}, {
									"case":	399,
									"scores":	[-5.66965854205234]
								}, {
									"case":	400,
									"scores":	[-5.66965854205234]
								}, {
									"case":	401,
									"scores":	[-5.66965854205234]
								}, {
									"case":	402,
									"scores":	[-5.66965854205234]
								}, {
									"case":	403,
									"scores":	[-5.66965854205234]
								}, {
									"case":	404,
									"scores":	[-8.12064886275234, -8.12064886275234, -6.07155600605234, -8.93479503675234, -7.1005474830523383, -7.9228441530523384, -8.93479503675234, -8.59802560905234, -7.00803943205234, -8.91344941205234, -8.59802560905234, -7.00803943205234, -8.91344941205234, -8.59802560905234, -7.00803943205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.28186405185234, -8.24476365185234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.24476365185234, -8.03582513805234, -8.28186405185234, -8.50383585985234, -8.50383585985234, -9.05890982585234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -9.05890982585234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -9.02376002905234, -9.05890982585234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234, -8.81287091205234]
								}]
						}, {
							"switch":	29,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2864,
							"begin_column":	3,
							"end_line":	2864,
							"end_column":	49,
							"patch_codes":	["if (!__is_neg(\"\", \"L2864\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.s = intobj->diff->s * bias;\n", "{\n}\n", "dateobj->time->relative.s = (&bias)->diff->s * bias", "dateobj->time->relative.s = (&dateobj)->diff->s * bias", "dateobj->time->relative.s = (&ht)->diff->s * bias", "dateobj->time->relative.s = (&interval)->diff->s * bias", "dateobj->time->relative.s = (&intobj)->diff->s * bias", "dateobj->time->relative.s = (&object)->diff->s * bias", "dateobj->time->relative.s = (&return_value)->diff->s * bias", "dateobj->time->relative.s = (&return_value_ptr)->diff->s * bias", "dateobj->time->relative.s = (&return_value_used)->diff->s * bias", "dateobj->time->relative.s = (&this_ptr)->diff->s * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.s = intobj->diff->s * (0 * bias)", "dateobj->time->relative.s = intobj->diff->s * (0 * ht)", "dateobj->time->relative.s = intobj->diff->s * (0 * return_value_used)", "dateobj->time->relative.s = intobj->diff->s * (bias != 0)", "dateobj->time->relative.s = intobj->diff->s * (bias * ht)", "dateobj->time->relative.s = intobj->diff->s * (bias * return_value_used)", "dateobj->time->relative.s = intobj->diff->s * (bias + 0)", "dateobj->time->relative.s = intobj->diff->s * (bias - 0)", "dateobj->time->relative.s = intobj->diff->s * (bias == 0)", "dateobj->time->relative.s = intobj->diff->s * (bias)", "dateobj->time->relative.s = intobj->diff->s * (dateobj != 0)", "dateobj->time->relative.s = intobj->diff->s * (dateobj == 0)", "dateobj->time->relative.s = intobj->diff->s * (ht != 0)", "dateobj->time->relative.s = intobj->diff->s * (ht != bias)", "dateobj->time->relative.s = intobj->diff->s * (ht != return_value_used)", "dateobj->time->relative.s = intobj->diff->s * (ht * bias)", "dateobj->time->relative.s = intobj->diff->s * (ht * return_value_used)", "dateobj->time->relative.s = intobj->diff->s * (ht + 0)", "dateobj->time->relative.s = intobj->diff->s * (ht + bias)", "dateobj->time->relative.s = intobj->diff->s * (ht + return_value_used)", "dateobj->time->relative.s = intobj->diff->s * (ht - 0)", "dateobj->time->relative.s = intobj->diff->s * (ht - bias)", "dateobj->time->relative.s = intobj->diff->s * (ht - return_value_used)", "dateobj->time->relative.s = intobj->diff->s * (ht == 0)", "dateobj->time->relative.s = intobj->diff->s * (ht == bias)", "dateobj->time->relative.s = intobj->diff->s * (ht == return_value_used)", "dateobj->time->relative.s = intobj->diff->s * (ht)", "dateobj->time->relative.s = intobj->diff->s * (interval != 0)", "dateobj->time->relative.s = intobj->diff->s * (interval == 0)", "dateobj->time->relative.s = intobj->diff->s * (intobj != 0)", "dateobj->time->relative.s = intobj->diff->s * (intobj == 0)", "dateobj->time->relative.s = intobj->diff->s * (object != 0)", "dateobj->time->relative.s = intobj->diff->s * (object != interval)", "dateobj->time->relative.s = intobj->diff->s * (object == 0)", "dateobj->time->relative.s = intobj->diff->s * (object == interval)", "dateobj->time->relative.s = intobj->diff->s * (return_value != 0)", "dateobj->time->relative.s = intobj->diff->s * (return_value != interval)", "dateobj->time->relative.s = intobj->diff->s * (return_value != object)", "dateobj->time->relative.s = intobj->diff->s * (return_value != this_ptr)", "dateobj->time->relative.s = intobj->diff->s * (return_value == 0)", "dateobj->time->relative.s = intobj->diff->s * (return_value == interval)", "dateobj->time->relative.s = intobj->diff->s * (return_value == object)", "dateobj->time->relative.s = intobj->diff->s * (return_value == this_ptr)", "dateobj->time->relative.s = intobj->diff->s * (return_value_ptr != 0)", "dateobj->time->relative.s = intobj->diff->s * (return_value_ptr == 0)", "dateobj->time->relative.s = intobj->diff->s * (return_value_used != 0)", "dateobj->time->relative.s = intobj->diff->s * (return_value_used != bias)", "dateobj->time->relative.s = intobj->diff->s * (return_value_used * bias)", "dateobj->time->relative.s = intobj->diff->s * (return_value_used * ht)", "dateobj->time->relative.s = intobj->diff->s * (return_value_used + 0)", "dateobj->time->relative.s = intobj->diff->s * (return_value_used + bias)", "dateobj->time->relative.s = intobj->diff->s * (return_value_used - 0)", "dateobj->time->relative.s = intobj->diff->s * (return_value_used - bias)", "dateobj->time->relative.s = intobj->diff->s * (return_value_used == 0)", "dateobj->time->relative.s = intobj->diff->s * (return_value_used == bias)", "dateobj->time->relative.s = intobj->diff->s * (return_value_used)", "dateobj->time->relative.s = intobj->diff->s * (this_ptr != 0)", "dateobj->time->relative.s = intobj->diff->s * (this_ptr != interval)", "dateobj->time->relative.s = intobj->diff->s * (this_ptr != object)", "dateobj->time->relative.s = intobj->diff->s * (this_ptr == 0)", "dateobj->time->relative.s = intobj->diff->s * (this_ptr == interval)", "dateobj->time->relative.s = intobj->diff->s * (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.89835110045234, -6.48030381255234, -5.37355979705234, -7.00514862255234, -6.26922412505234, -6.63052154305234, -7.42319591045234, -6.39275950405234, -5.88290216205234, -7.5785943770523385, -6.39275950405234, -5.88290216205234, -6.76323168605234, -6.39275950405234, -5.88290216205234, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -7.29097311205234, -6.99662231205234, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.99662231205234, -6.53308501205234, -7.29097311205234, -7.31367745205234, -7.31367745205234, -7.52146712205234, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -7.52146712205234, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -7.23283902205234, -7.52146712205234, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386, -6.7635790220523386]
								}, {
									"case":	2,
									"scores":	[-5.66965854205234]
								}, {
									"case":	3,
									"scores":	[-5.66965854205234]
								}, {
									"case":	4,
									"scores":	[-5.66965854205234]
								}, {
									"case":	5,
									"scores":	[-5.66965854205234]
								}, {
									"case":	6,
									"scores":	[-5.66965854205234]
								}, {
									"case":	7,
									"scores":	[-5.66965854205234]
								}, {
									"case":	8,
									"scores":	[-5.66965854205234]
								}, {
									"case":	9,
									"scores":	[-5.66965854205234]
								}, {
									"case":	10,
									"scores":	[-5.66965854205234]
								}, {
									"case":	11,
									"scores":	[-5.66965854205234]
								}, {
									"case":	12,
									"scores":	[-5.66965854205234]
								}, {
									"case":	13,
									"scores":	[-5.66965854205234]
								}, {
									"case":	14,
									"scores":	[-5.66965854205234]
								}, {
									"case":	15,
									"scores":	[-5.66965854205234]
								}, {
									"case":	16,
									"scores":	[-5.66965854205234]
								}, {
									"case":	17,
									"scores":	[-5.66965854205234]
								}, {
									"case":	18,
									"scores":	[-5.66965854205234]
								}, {
									"case":	19,
									"scores":	[-5.66965854205234]
								}, {
									"case":	20,
									"scores":	[-5.66965854205234]
								}, {
									"case":	21,
									"scores":	[-5.66965854205234]
								}, {
									"case":	22,
									"scores":	[-5.66965854205234]
								}, {
									"case":	23,
									"scores":	[-5.66965854205234]
								}, {
									"case":	24,
									"scores":	[-5.66965854205234]
								}, {
									"case":	25,
									"scores":	[-5.66965854205234]
								}, {
									"case":	26,
									"scores":	[-5.66965854205234]
								}, {
									"case":	27,
									"scores":	[-5.66965854205234]
								}, {
									"case":	28,
									"scores":	[-5.66965854205234]
								}, {
									"case":	29,
									"scores":	[-5.66965854205234]
								}, {
									"case":	30,
									"scores":	[-5.66965854205234]
								}, {
									"case":	31,
									"scores":	[-5.66965854205234]
								}, {
									"case":	32,
									"scores":	[-5.66965854205234]
								}, {
									"case":	33,
									"scores":	[-5.66965854205234]
								}, {
									"case":	34,
									"scores":	[-5.66965854205234]
								}, {
									"case":	35,
									"scores":	[-5.66965854205234]
								}, {
									"case":	36,
									"scores":	[-5.66965854205234]
								}, {
									"case":	37,
									"scores":	[-5.66965854205234]
								}, {
									"case":	38,
									"scores":	[-5.66965854205234]
								}, {
									"case":	39,
									"scores":	[-5.66965854205234]
								}, {
									"case":	40,
									"scores":	[-5.66965854205234]
								}, {
									"case":	41,
									"scores":	[-5.66965854205234]
								}, {
									"case":	42,
									"scores":	[-5.66965854205234]
								}, {
									"case":	43,
									"scores":	[-5.66965854205234]
								}, {
									"case":	44,
									"scores":	[-5.66965854205234]
								}, {
									"case":	45,
									"scores":	[-5.66965854205234]
								}, {
									"case":	46,
									"scores":	[-5.66965854205234]
								}, {
									"case":	47,
									"scores":	[-5.66965854205234]
								}, {
									"case":	48,
									"scores":	[-5.66965854205234]
								}, {
									"case":	49,
									"scores":	[-5.66965854205234]
								}, {
									"case":	50,
									"scores":	[-5.66965854205234]
								}, {
									"case":	51,
									"scores":	[-5.66965854205234]
								}, {
									"case":	52,
									"scores":	[-5.66965854205234]
								}, {
									"case":	53,
									"scores":	[-5.66965854205234]
								}, {
									"case":	54,
									"scores":	[-5.66965854205234]
								}, {
									"case":	55,
									"scores":	[-5.66965854205234]
								}, {
									"case":	56,
									"scores":	[-5.66965854205234]
								}, {
									"case":	57,
									"scores":	[-5.66965854205234]
								}, {
									"case":	58,
									"scores":	[-5.66965854205234]
								}, {
									"case":	59,
									"scores":	[-5.66965854205234]
								}, {
									"case":	60,
									"scores":	[-5.66965854205234]
								}, {
									"case":	61,
									"scores":	[-5.66965854205234]
								}, {
									"case":	62,
									"scores":	[-5.66965854205234]
								}, {
									"case":	63,
									"scores":	[-5.66965854205234]
								}, {
									"case":	64,
									"scores":	[-5.66965854205234]
								}, {
									"case":	65,
									"scores":	[-5.66965854205234]
								}, {
									"case":	66,
									"scores":	[-5.66965854205234]
								}, {
									"case":	67,
									"scores":	[-5.66965854205234]
								}, {
									"case":	68,
									"scores":	[-5.66965854205234]
								}, {
									"case":	69,
									"scores":	[-5.66965854205234]
								}, {
									"case":	70,
									"scores":	[-5.66965854205234]
								}, {
									"case":	71,
									"scores":	[-5.66965854205234]
								}, {
									"case":	72,
									"scores":	[-5.66965854205234]
								}, {
									"case":	73,
									"scores":	[-5.66965854205234]
								}, {
									"case":	74,
									"scores":	[-5.66965854205234]
								}, {
									"case":	75,
									"scores":	[-5.66965854205234]
								}, {
									"case":	76,
									"scores":	[-5.66965854205234]
								}, {
									"case":	77,
									"scores":	[-5.66965854205234]
								}, {
									"case":	78,
									"scores":	[-5.66965854205234]
								}, {
									"case":	79,
									"scores":	[-5.66965854205234]
								}, {
									"case":	80,
									"scores":	[-5.66965854205234]
								}]
						}]
				}, {
					"line":	2864,
					"switches":	[{
							"switch":	30,
							"types":	[[], [], [], [], [403], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], [], [], [], [], [], []],
							"begin_line":	2865,
							"begin_column":	1,
							"end_line":	2865,
							"end_column":	1,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2865\", 61, &(dateobj), sizeof (dateobj), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time), sizeof (dateobj->time), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.64945583473482]
								}, {
									"case":	2,
									"scores":	[-5.64945583473482]
								}, {
									"case":	3,
									"scores":	[-5.64945583473482]
								}, {
									"case":	4,
									"scores":	[-5.64945583473482]
								}, {
									"case":	5,
									"scores":	[-5.64945583473482]
								}, {
									"case":	6,
									"scores":	[-5.64945583473482]
								}, {
									"case":	7,
									"scores":	[-5.64945583473482]
								}, {
									"case":	8,
									"scores":	[-5.64945583473482]
								}, {
									"case":	9,
									"scores":	[-5.64945583473482]
								}, {
									"case":	10,
									"scores":	[-5.64945583473482]
								}, {
									"case":	11,
									"scores":	[-5.64945583473482]
								}, {
									"case":	12,
									"scores":	[-5.64945583473482]
								}, {
									"case":	13,
									"scores":	[-5.64945583473482]
								}, {
									"case":	14,
									"scores":	[-5.64945583473482]
								}, {
									"case":	15,
									"scores":	[-5.64945583473482]
								}, {
									"case":	16,
									"scores":	[-5.64945583473482]
								}, {
									"case":	17,
									"scores":	[-5.64945583473482]
								}, {
									"case":	18,
									"scores":	[-5.64945583473482]
								}, {
									"case":	19,
									"scores":	[-5.64945583473482]
								}, {
									"case":	20,
									"scores":	[-5.64945583473482]
								}, {
									"case":	21,
									"scores":	[-5.64945583473482]
								}, {
									"case":	22,
									"scores":	[-5.64945583473482]
								}, {
									"case":	23,
									"scores":	[-5.64945583473482]
								}, {
									"case":	24,
									"scores":	[-5.64945583473482]
								}, {
									"case":	25,
									"scores":	[-5.64945583473482]
								}, {
									"case":	26,
									"scores":	[-5.64945583473482]
								}, {
									"case":	27,
									"scores":	[-5.64945583473482]
								}, {
									"case":	28,
									"scores":	[-5.64945583473482]
								}, {
									"case":	29,
									"scores":	[-5.64945583473482]
								}, {
									"case":	30,
									"scores":	[-5.64945583473482]
								}, {
									"case":	31,
									"scores":	[-5.64945583473482]
								}, {
									"case":	32,
									"scores":	[-5.64945583473482]
								}, {
									"case":	33,
									"scores":	[-5.64945583473482]
								}, {
									"case":	34,
									"scores":	[-5.64945583473482]
								}, {
									"case":	35,
									"scores":	[-5.64945583473482]
								}, {
									"case":	36,
									"scores":	[-5.64945583473482]
								}, {
									"case":	37,
									"scores":	[-5.64945583473482]
								}, {
									"case":	38,
									"scores":	[-5.64945583473482]
								}, {
									"case":	39,
									"scores":	[-5.64945583473482]
								}, {
									"case":	40,
									"scores":	[-5.64945583473482]
								}, {
									"case":	41,
									"scores":	[-5.64945583473482]
								}, {
									"case":	42,
									"scores":	[-5.64945583473482]
								}, {
									"case":	43,
									"scores":	[-5.64945583473482]
								}, {
									"case":	44,
									"scores":	[-5.64945583473482]
								}, {
									"case":	45,
									"scores":	[-5.64945583473482]
								}, {
									"case":	46,
									"scores":	[-5.64945583473482]
								}, {
									"case":	47,
									"scores":	[-5.64945583473482]
								}, {
									"case":	48,
									"scores":	[-5.64945583473482]
								}, {
									"case":	49,
									"scores":	[-5.64945583473482]
								}, {
									"case":	50,
									"scores":	[-5.64945583473482]
								}, {
									"case":	51,
									"scores":	[-5.64945583473482]
								}, {
									"case":	52,
									"scores":	[-5.64945583473482]
								}, {
									"case":	53,
									"scores":	[-5.64945583473482]
								}, {
									"case":	54,
									"scores":	[-5.64945583473482]
								}, {
									"case":	55,
									"scores":	[-5.64945583473482]
								}, {
									"case":	56,
									"scores":	[-5.64945583473482]
								}, {
									"case":	57,
									"scores":	[-5.64945583473482]
								}, {
									"case":	58,
									"scores":	[-5.64945583473482]
								}, {
									"case":	59,
									"scores":	[-5.64945583473482]
								}, {
									"case":	60,
									"scores":	[-5.64945583473482]
								}, {
									"case":	61,
									"scores":	[-5.64945583473482]
								}, {
									"case":	62,
									"scores":	[-5.64945583473482]
								}, {
									"case":	63,
									"scores":	[-5.64945583473482]
								}, {
									"case":	64,
									"scores":	[-5.64945583473482]
								}, {
									"case":	65,
									"scores":	[-5.64945583473482]
								}, {
									"case":	66,
									"scores":	[-5.64945583473482]
								}, {
									"case":	67,
									"scores":	[-5.64945583473482]
								}, {
									"case":	68,
									"scores":	[-5.64945583473482]
								}, {
									"case":	69,
									"scores":	[-5.64945583473482]
								}, {
									"case":	70,
									"scores":	[-5.64945583473482]
								}, {
									"case":	71,
									"scores":	[-5.64945583473482]
								}, {
									"case":	72,
									"scores":	[-5.64945583473482]
								}, {
									"case":	73,
									"scores":	[-5.64945583473482]
								}, {
									"case":	74,
									"scores":	[-5.64945583473482]
								}, {
									"case":	75,
									"scores":	[-5.64945583473482]
								}, {
									"case":	76,
									"scores":	[-5.64945583473482]
								}, {
									"case":	77,
									"scores":	[-5.64945583473482]
								}, {
									"case":	78,
									"scores":	[-5.64945583473482]
								}, {
									"case":	79,
									"scores":	[-5.64945583473482]
								}, {
									"case":	80,
									"scores":	[-5.64945583473482]
								}, {
									"case":	81,
									"scores":	[-5.64945583473482]
								}, {
									"case":	82,
									"scores":	[-5.64945583473482]
								}, {
									"case":	83,
									"scores":	[-5.64945583473482]
								}, {
									"case":	84,
									"scores":	[-5.64945583473482]
								}, {
									"case":	85,
									"scores":	[-5.64945583473482]
								}, {
									"case":	86,
									"scores":	[-5.64945583473482]
								}, {
									"case":	87,
									"scores":	[-5.64945583473482]
								}, {
									"case":	88,
									"scores":	[-5.64945583473482]
								}, {
									"case":	89,
									"scores":	[-5.64945583473482]
								}, {
									"case":	90,
									"scores":	[-5.64945583473482]
								}, {
									"case":	91,
									"scores":	[-5.64945583473482]
								}, {
									"case":	92,
									"scores":	[-5.64945583473482]
								}, {
									"case":	93,
									"scores":	[-5.64945583473482]
								}, {
									"case":	94,
									"scores":	[-5.64945583473482]
								}, {
									"case":	95,
									"scores":	[-5.64945583473482]
								}, {
									"case":	96,
									"scores":	[-5.64945583473482]
								}, {
									"case":	97,
									"scores":	[-5.64945583473482]
								}, {
									"case":	98,
									"scores":	[-5.64945583473482]
								}, {
									"case":	99,
									"scores":	[-5.64945583473482]
								}, {
									"case":	100,
									"scores":	[-5.64945583473482]
								}, {
									"case":	101,
									"scores":	[-5.64945583473482]
								}, {
									"case":	102,
									"scores":	[-5.64945583473482]
								}, {
									"case":	103,
									"scores":	[-5.64945583473482]
								}, {
									"case":	104,
									"scores":	[-5.64945583473482]
								}, {
									"case":	105,
									"scores":	[-5.64945583473482]
								}, {
									"case":	106,
									"scores":	[-5.64945583473482]
								}, {
									"case":	107,
									"scores":	[-5.64945583473482]
								}, {
									"case":	108,
									"scores":	[-5.64945583473482]
								}, {
									"case":	109,
									"scores":	[-5.64945583473482]
								}, {
									"case":	110,
									"scores":	[-5.64945583473482]
								}, {
									"case":	111,
									"scores":	[-5.64945583473482]
								}, {
									"case":	112,
									"scores":	[-5.64945583473482]
								}, {
									"case":	113,
									"scores":	[-5.64945583473482]
								}, {
									"case":	114,
									"scores":	[-5.64945583473482]
								}, {
									"case":	115,
									"scores":	[-5.64945583473482]
								}, {
									"case":	116,
									"scores":	[-5.64945583473482]
								}, {
									"case":	117,
									"scores":	[-5.64945583473482]
								}, {
									"case":	118,
									"scores":	[-5.64945583473482]
								}, {
									"case":	119,
									"scores":	[-5.64945583473482]
								}, {
									"case":	120,
									"scores":	[-5.64945583473482]
								}, {
									"case":	121,
									"scores":	[-5.64945583473482]
								}, {
									"case":	122,
									"scores":	[-5.64945583473482]
								}, {
									"case":	123,
									"scores":	[-5.64945583473482]
								}, {
									"case":	124,
									"scores":	[-5.64945583473482]
								}, {
									"case":	125,
									"scores":	[-5.64945583473482]
								}, {
									"case":	126,
									"scores":	[-5.64945583473482]
								}, {
									"case":	127,
									"scores":	[-5.64945583473482]
								}, {
									"case":	128,
									"scores":	[-5.64945583473482]
								}, {
									"case":	129,
									"scores":	[-5.64945583473482]
								}, {
									"case":	130,
									"scores":	[-5.64945583473482]
								}, {
									"case":	131,
									"scores":	[-5.64945583473482]
								}, {
									"case":	132,
									"scores":	[-5.64945583473482]
								}, {
									"case":	133,
									"scores":	[-5.64945583473482]
								}, {
									"case":	134,
									"scores":	[-5.64945583473482]
								}, {
									"case":	135,
									"scores":	[-5.64945583473482]
								}, {
									"case":	136,
									"scores":	[-5.64945583473482]
								}, {
									"case":	137,
									"scores":	[-5.64945583473482]
								}, {
									"case":	138,
									"scores":	[-5.64945583473482]
								}, {
									"case":	139,
									"scores":	[-5.64945583473482]
								}, {
									"case":	140,
									"scores":	[-5.64945583473482]
								}, {
									"case":	141,
									"scores":	[-5.64945583473482]
								}, {
									"case":	142,
									"scores":	[-5.64945583473482]
								}, {
									"case":	143,
									"scores":	[-5.64945583473482]
								}, {
									"case":	144,
									"scores":	[-5.64945583473482]
								}, {
									"case":	145,
									"scores":	[-5.64945583473482]
								}, {
									"case":	146,
									"scores":	[-5.64945583473482]
								}, {
									"case":	147,
									"scores":	[-5.64945583473482]
								}, {
									"case":	148,
									"scores":	[-5.64945583473482]
								}, {
									"case":	149,
									"scores":	[-5.64945583473482]
								}, {
									"case":	150,
									"scores":	[-5.64945583473482]
								}, {
									"case":	151,
									"scores":	[-5.64945583473482]
								}, {
									"case":	152,
									"scores":	[-5.64945583473482]
								}, {
									"case":	153,
									"scores":	[-5.64945583473482]
								}, {
									"case":	154,
									"scores":	[-5.64945583473482]
								}, {
									"case":	155,
									"scores":	[-5.64945583473482]
								}, {
									"case":	156,
									"scores":	[-5.64945583473482]
								}, {
									"case":	157,
									"scores":	[-5.64945583473482]
								}, {
									"case":	158,
									"scores":	[-5.64945583473482]
								}, {
									"case":	159,
									"scores":	[-5.64945583473482]
								}, {
									"case":	160,
									"scores":	[-5.64945583473482]
								}, {
									"case":	161,
									"scores":	[-5.64945583473482]
								}, {
									"case":	162,
									"scores":	[-5.64945583473482]
								}, {
									"case":	163,
									"scores":	[-5.64945583473482]
								}, {
									"case":	164,
									"scores":	[-5.64945583473482]
								}, {
									"case":	165,
									"scores":	[-5.64945583473482]
								}, {
									"case":	166,
									"scores":	[-5.64945583473482]
								}, {
									"case":	167,
									"scores":	[-5.64945583473482]
								}, {
									"case":	168,
									"scores":	[-5.64945583473482]
								}, {
									"case":	169,
									"scores":	[-5.64945583473482]
								}, {
									"case":	170,
									"scores":	[-5.64945583473482]
								}, {
									"case":	171,
									"scores":	[-5.64945583473482]
								}, {
									"case":	172,
									"scores":	[-5.64945583473482]
								}, {
									"case":	173,
									"scores":	[-5.64945583473482]
								}, {
									"case":	174,
									"scores":	[-5.64945583473482]
								}, {
									"case":	175,
									"scores":	[-5.64945583473482]
								}, {
									"case":	176,
									"scores":	[-5.64945583473482]
								}, {
									"case":	177,
									"scores":	[-5.64945583473482]
								}, {
									"case":	178,
									"scores":	[-5.64945583473482]
								}, {
									"case":	179,
									"scores":	[-5.64945583473482]
								}, {
									"case":	180,
									"scores":	[-5.64945583473482]
								}, {
									"case":	181,
									"scores":	[-5.64945583473482]
								}, {
									"case":	182,
									"scores":	[-5.64945583473482]
								}, {
									"case":	183,
									"scores":	[-5.64945583473482]
								}, {
									"case":	184,
									"scores":	[-5.64945583473482]
								}, {
									"case":	185,
									"scores":	[-5.64945583473482]
								}, {
									"case":	186,
									"scores":	[-5.64945583473482]
								}, {
									"case":	187,
									"scores":	[-5.64945583473482]
								}, {
									"case":	188,
									"scores":	[-5.64945583473482]
								}, {
									"case":	189,
									"scores":	[-5.64945583473482]
								}, {
									"case":	190,
									"scores":	[-5.64945583473482]
								}, {
									"case":	191,
									"scores":	[-5.64945583473482]
								}, {
									"case":	192,
									"scores":	[-5.64945583473482]
								}, {
									"case":	193,
									"scores":	[-5.64945583473482]
								}, {
									"case":	194,
									"scores":	[-5.64945583473482]
								}, {
									"case":	195,
									"scores":	[-5.64945583473482]
								}, {
									"case":	196,
									"scores":	[-5.64945583473482]
								}, {
									"case":	197,
									"scores":	[-5.64945583473482]
								}, {
									"case":	198,
									"scores":	[-5.64945583473482]
								}, {
									"case":	199,
									"scores":	[-5.64945583473482]
								}, {
									"case":	200,
									"scores":	[-5.64945583473482]
								}, {
									"case":	201,
									"scores":	[-5.64945583473482]
								}, {
									"case":	202,
									"scores":	[-5.64945583473482]
								}, {
									"case":	203,
									"scores":	[-5.64945583473482]
								}, {
									"case":	204,
									"scores":	[-5.64945583473482]
								}, {
									"case":	205,
									"scores":	[-5.64945583473482]
								}, {
									"case":	206,
									"scores":	[-5.64945583473482]
								}, {
									"case":	207,
									"scores":	[-5.64945583473482]
								}, {
									"case":	208,
									"scores":	[-5.64945583473482]
								}, {
									"case":	209,
									"scores":	[-5.64945583473482]
								}, {
									"case":	210,
									"scores":	[-5.64945583473482]
								}, {
									"case":	211,
									"scores":	[-5.64945583473482]
								}, {
									"case":	212,
									"scores":	[-5.64945583473482]
								}, {
									"case":	213,
									"scores":	[-5.64945583473482]
								}, {
									"case":	214,
									"scores":	[-5.64945583473482]
								}, {
									"case":	215,
									"scores":	[-5.64945583473482]
								}, {
									"case":	216,
									"scores":	[-5.64945583473482]
								}, {
									"case":	217,
									"scores":	[-5.64945583473482]
								}, {
									"case":	218,
									"scores":	[-5.64945583473482]
								}, {
									"case":	219,
									"scores":	[-5.64945583473482]
								}, {
									"case":	220,
									"scores":	[-5.64945583473482]
								}, {
									"case":	221,
									"scores":	[-5.64945583473482]
								}, {
									"case":	222,
									"scores":	[-5.64945583473482]
								}, {
									"case":	223,
									"scores":	[-5.64945583473482]
								}, {
									"case":	224,
									"scores":	[-5.64945583473482]
								}, {
									"case":	225,
									"scores":	[-5.64945583473482]
								}, {
									"case":	226,
									"scores":	[-5.64945583473482]
								}, {
									"case":	227,
									"scores":	[-5.64945583473482]
								}, {
									"case":	228,
									"scores":	[-5.64945583473482]
								}, {
									"case":	229,
									"scores":	[-5.64945583473482]
								}, {
									"case":	230,
									"scores":	[-5.64945583473482]
								}, {
									"case":	231,
									"scores":	[-5.64945583473482]
								}, {
									"case":	232,
									"scores":	[-5.64945583473482]
								}, {
									"case":	233,
									"scores":	[-5.64945583473482]
								}, {
									"case":	234,
									"scores":	[-5.64945583473482]
								}, {
									"case":	235,
									"scores":	[-5.64945583473482]
								}, {
									"case":	236,
									"scores":	[-5.64945583473482]
								}, {
									"case":	237,
									"scores":	[-5.64945583473482]
								}, {
									"case":	238,
									"scores":	[-5.64945583473482]
								}, {
									"case":	239,
									"scores":	[-5.64945583473482]
								}, {
									"case":	240,
									"scores":	[-5.64945583473482]
								}, {
									"case":	241,
									"scores":	[-5.64945583473482]
								}, {
									"case":	242,
									"scores":	[-5.64945583473482]
								}, {
									"case":	243,
									"scores":	[-5.64945583473482]
								}, {
									"case":	244,
									"scores":	[-5.64945583473482]
								}, {
									"case":	245,
									"scores":	[-5.64945583473482]
								}, {
									"case":	246,
									"scores":	[-5.64945583473482]
								}, {
									"case":	247,
									"scores":	[-5.64945583473482]
								}, {
									"case":	248,
									"scores":	[-5.64945583473482]
								}, {
									"case":	249,
									"scores":	[-5.64945583473482]
								}, {
									"case":	250,
									"scores":	[-5.64945583473482]
								}, {
									"case":	251,
									"scores":	[-5.64945583473482]
								}, {
									"case":	252,
									"scores":	[-5.64945583473482]
								}, {
									"case":	253,
									"scores":	[-5.64945583473482]
								}, {
									"case":	254,
									"scores":	[-5.64945583473482]
								}, {
									"case":	255,
									"scores":	[-5.64945583473482]
								}, {
									"case":	256,
									"scores":	[-5.64945583473482]
								}, {
									"case":	257,
									"scores":	[-5.64945583473482]
								}, {
									"case":	258,
									"scores":	[-5.64945583473482]
								}, {
									"case":	259,
									"scores":	[-5.64945583473482]
								}, {
									"case":	260,
									"scores":	[-5.64945583473482]
								}, {
									"case":	261,
									"scores":	[-5.64945583473482]
								}, {
									"case":	262,
									"scores":	[-5.64945583473482]
								}, {
									"case":	263,
									"scores":	[-5.64945583473482]
								}, {
									"case":	264,
									"scores":	[-5.64945583473482]
								}, {
									"case":	265,
									"scores":	[-5.64945583473482]
								}, {
									"case":	266,
									"scores":	[-5.64945583473482]
								}, {
									"case":	267,
									"scores":	[-5.64945583473482]
								}, {
									"case":	268,
									"scores":	[-5.64945583473482]
								}, {
									"case":	269,
									"scores":	[-5.64945583473482]
								}, {
									"case":	270,
									"scores":	[-5.64945583473482]
								}, {
									"case":	271,
									"scores":	[-5.64945583473482]
								}, {
									"case":	272,
									"scores":	[-5.64945583473482]
								}, {
									"case":	273,
									"scores":	[-5.64945583473482]
								}, {
									"case":	274,
									"scores":	[-5.64945583473482]
								}, {
									"case":	275,
									"scores":	[-5.64945583473482]
								}, {
									"case":	276,
									"scores":	[-5.64945583473482]
								}, {
									"case":	277,
									"scores":	[-5.64945583473482]
								}, {
									"case":	278,
									"scores":	[-5.64945583473482]
								}, {
									"case":	279,
									"scores":	[-5.64945583473482]
								}, {
									"case":	280,
									"scores":	[-5.64945583473482]
								}, {
									"case":	281,
									"scores":	[-5.64945583473482]
								}, {
									"case":	282,
									"scores":	[-5.64945583473482]
								}, {
									"case":	283,
									"scores":	[-5.64945583473482]
								}, {
									"case":	284,
									"scores":	[-5.64945583473482]
								}, {
									"case":	285,
									"scores":	[-5.64945583473482]
								}, {
									"case":	286,
									"scores":	[-5.64945583473482]
								}, {
									"case":	287,
									"scores":	[-5.64945583473482]
								}, {
									"case":	288,
									"scores":	[-5.64945583473482]
								}, {
									"case":	289,
									"scores":	[-5.64945583473482]
								}, {
									"case":	290,
									"scores":	[-5.64945583473482]
								}, {
									"case":	291,
									"scores":	[-5.64945583473482]
								}, {
									"case":	292,
									"scores":	[-5.64945583473482]
								}, {
									"case":	293,
									"scores":	[-5.64945583473482]
								}, {
									"case":	294,
									"scores":	[-5.64945583473482]
								}, {
									"case":	295,
									"scores":	[-5.64945583473482]
								}, {
									"case":	296,
									"scores":	[-5.64945583473482]
								}, {
									"case":	297,
									"scores":	[-5.64945583473482]
								}, {
									"case":	298,
									"scores":	[-5.64945583473482]
								}, {
									"case":	299,
									"scores":	[-5.64945583473482]
								}, {
									"case":	300,
									"scores":	[-5.64945583473482]
								}, {
									"case":	301,
									"scores":	[-5.64945583473482]
								}, {
									"case":	302,
									"scores":	[-5.64945583473482]
								}, {
									"case":	303,
									"scores":	[-5.64945583473482]
								}, {
									"case":	304,
									"scores":	[-5.64945583473482]
								}, {
									"case":	305,
									"scores":	[-5.64945583473482]
								}, {
									"case":	306,
									"scores":	[-5.64945583473482]
								}, {
									"case":	307,
									"scores":	[-5.64945583473482]
								}, {
									"case":	308,
									"scores":	[-5.64945583473482]
								}, {
									"case":	309,
									"scores":	[-5.64945583473482]
								}, {
									"case":	310,
									"scores":	[-5.64945583473482]
								}, {
									"case":	311,
									"scores":	[-5.64945583473482]
								}, {
									"case":	312,
									"scores":	[-5.64945583473482]
								}, {
									"case":	313,
									"scores":	[-5.64945583473482]
								}, {
									"case":	314,
									"scores":	[-5.64945583473482]
								}, {
									"case":	315,
									"scores":	[-5.64945583473482]
								}, {
									"case":	316,
									"scores":	[-5.64945583473482]
								}, {
									"case":	317,
									"scores":	[-5.64945583473482]
								}, {
									"case":	318,
									"scores":	[-5.64945583473482]
								}, {
									"case":	319,
									"scores":	[-5.64945583473482]
								}, {
									"case":	320,
									"scores":	[-5.64945583473482]
								}, {
									"case":	321,
									"scores":	[-5.64945583473482]
								}, {
									"case":	322,
									"scores":	[-5.64945583473482]
								}, {
									"case":	323,
									"scores":	[-5.64945583473482]
								}, {
									"case":	324,
									"scores":	[-5.64945583473482]
								}, {
									"case":	325,
									"scores":	[-5.64945583473482]
								}, {
									"case":	326,
									"scores":	[-5.64945583473482]
								}, {
									"case":	327,
									"scores":	[-5.64945583473482]
								}, {
									"case":	328,
									"scores":	[-5.64945583473482]
								}, {
									"case":	329,
									"scores":	[-5.64945583473482]
								}, {
									"case":	330,
									"scores":	[-5.64945583473482]
								}, {
									"case":	331,
									"scores":	[-5.64945583473482]
								}, {
									"case":	332,
									"scores":	[-5.64945583473482]
								}, {
									"case":	333,
									"scores":	[-5.64945583473482]
								}, {
									"case":	334,
									"scores":	[-5.64945583473482]
								}, {
									"case":	335,
									"scores":	[-5.64945583473482]
								}, {
									"case":	336,
									"scores":	[-5.64945583473482]
								}, {
									"case":	337,
									"scores":	[-5.64945583473482]
								}, {
									"case":	338,
									"scores":	[-5.64945583473482]
								}, {
									"case":	339,
									"scores":	[-5.64945583473482]
								}, {
									"case":	340,
									"scores":	[-5.64945583473482]
								}, {
									"case":	341,
									"scores":	[-5.64945583473482]
								}, {
									"case":	342,
									"scores":	[-5.64945583473482]
								}, {
									"case":	343,
									"scores":	[-5.64945583473482]
								}, {
									"case":	344,
									"scores":	[-5.64945583473482]
								}, {
									"case":	345,
									"scores":	[-5.64945583473482]
								}, {
									"case":	346,
									"scores":	[-5.64945583473482]
								}, {
									"case":	347,
									"scores":	[-5.64945583473482]
								}, {
									"case":	348,
									"scores":	[-5.64945583473482]
								}, {
									"case":	349,
									"scores":	[-5.64945583473482]
								}, {
									"case":	350,
									"scores":	[-5.64945583473482]
								}, {
									"case":	351,
									"scores":	[-5.64945583473482]
								}, {
									"case":	352,
									"scores":	[-5.64945583473482]
								}, {
									"case":	353,
									"scores":	[-5.64945583473482]
								}, {
									"case":	354,
									"scores":	[-5.64945583473482]
								}, {
									"case":	355,
									"scores":	[-5.64945583473482]
								}, {
									"case":	356,
									"scores":	[-5.64945583473482]
								}, {
									"case":	357,
									"scores":	[-5.64945583473482]
								}, {
									"case":	358,
									"scores":	[-5.64945583473482]
								}, {
									"case":	359,
									"scores":	[-5.64945583473482]
								}, {
									"case":	360,
									"scores":	[-5.64945583473482]
								}, {
									"case":	361,
									"scores":	[-5.64945583473482]
								}, {
									"case":	362,
									"scores":	[-5.64945583473482]
								}, {
									"case":	363,
									"scores":	[-5.64945583473482]
								}, {
									"case":	364,
									"scores":	[-5.64945583473482]
								}, {
									"case":	365,
									"scores":	[-5.64945583473482]
								}, {
									"case":	366,
									"scores":	[-5.64945583473482]
								}, {
									"case":	367,
									"scores":	[-5.64945583473482]
								}, {
									"case":	368,
									"scores":	[-5.64945583473482]
								}, {
									"case":	369,
									"scores":	[-5.64945583473482]
								}, {
									"case":	370,
									"scores":	[-5.64945583473482]
								}, {
									"case":	371,
									"scores":	[-5.64945583473482]
								}, {
									"case":	372,
									"scores":	[-5.64945583473482]
								}, {
									"case":	373,
									"scores":	[-5.64945583473482]
								}, {
									"case":	374,
									"scores":	[-5.64945583473482]
								}, {
									"case":	375,
									"scores":	[-5.64945583473482]
								}, {
									"case":	376,
									"scores":	[-5.64945583473482]
								}, {
									"case":	377,
									"scores":	[-5.64945583473482]
								}, {
									"case":	378,
									"scores":	[-5.64945583473482]
								}, {
									"case":	379,
									"scores":	[-5.64945583473482]
								}, {
									"case":	380,
									"scores":	[-5.64945583473482]
								}, {
									"case":	381,
									"scores":	[-5.64945583473482]
								}, {
									"case":	382,
									"scores":	[-5.64945583473482]
								}, {
									"case":	383,
									"scores":	[-5.64945583473482]
								}, {
									"case":	384,
									"scores":	[-5.64945583473482]
								}, {
									"case":	385,
									"scores":	[-5.64945583473482]
								}, {
									"case":	386,
									"scores":	[-5.64945583473482]
								}, {
									"case":	387,
									"scores":	[-5.64945583473482]
								}, {
									"case":	388,
									"scores":	[-5.64945583473482]
								}, {
									"case":	389,
									"scores":	[-5.64945583473482]
								}, {
									"case":	390,
									"scores":	[-5.64945583473482]
								}, {
									"case":	391,
									"scores":	[-5.64945583473482]
								}, {
									"case":	392,
									"scores":	[-5.64945583473482]
								}, {
									"case":	393,
									"scores":	[-5.64945583473482]
								}, {
									"case":	394,
									"scores":	[-5.64945583473482]
								}, {
									"case":	395,
									"scores":	[-5.64945583473482]
								}, {
									"case":	396,
									"scores":	[-5.64945583473482]
								}, {
									"case":	397,
									"scores":	[-5.64945583473482]
								}, {
									"case":	398,
									"scores":	[-5.64945583473482]
								}, {
									"case":	399,
									"scores":	[-5.64945583473482]
								}, {
									"case":	400,
									"scores":	[-5.64945583473482]
								}, {
									"case":	401,
									"scores":	[-5.64945583473482]
								}, {
									"case":	402,
									"scores":	[-5.64945583473482]
								}, {
									"case":	403,
									"scores":	[-8.10044615543482, -8.56358455973482, -8.91459232943482, -8.54574936453482, -7.7636767277348184, -9.35989553853482, -8.57782290173482, -6.98783672473482, -8.89324670473482, -8.57782290173482, -6.98783672473482, -8.57782290173482, -6.98783672473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.26166134453482, -8.22456094453482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.22456094453482, -8.01562243073482, -8.26166134453482, -8.48363315253482, -8.48363315253482, -9.03870711853482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -9.03870711853482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -9.00355732173482, -9.03870711853482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482, -8.79266820473482]
								}]
						}, {
							"switch":	31,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2865,
							"begin_column":	3,
							"end_line":	2865,
							"end_column":	37,
							"patch_codes":	["if (!__is_neg(\"\", \"L2865\", 61, &(dateobj), sizeof (dateobj), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time), sizeof (dateobj->time), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.weekday = 0;\n", "{\n}\n", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0 * bias)", "dateobj->time->relative.weekday = (0 * ht)", "dateobj->time->relative.weekday = (0 * return_value_used)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias != 0)", "dateobj->time->relative.weekday = (bias * ht)", "dateobj->time->relative.weekday = (bias * return_value_used)", "dateobj->time->relative.weekday = (bias + 0)", "dateobj->time->relative.weekday = (bias - 0)", "dateobj->time->relative.weekday = (bias == 0)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (dateobj != 0)", "dateobj->time->relative.weekday = (dateobj == 0)", "dateobj->time->relative.weekday = (ht != 0)", "dateobj->time->relative.weekday = (ht != bias)", "dateobj->time->relative.weekday = (ht != return_value_used)", "dateobj->time->relative.weekday = (ht * bias)", "dateobj->time->relative.weekday = (ht * return_value_used)", "dateobj->time->relative.weekday = (ht + 0)", "dateobj->time->relative.weekday = (ht + bias)", "dateobj->time->relative.weekday = (ht + return_value_used)", "dateobj->time->relative.weekday = (ht - 0)", "dateobj->time->relative.weekday = (ht - bias)", "dateobj->time->relative.weekday = (ht - return_value_used)", "dateobj->time->relative.weekday = (ht == 0)", "dateobj->time->relative.weekday = (ht == bias)", "dateobj->time->relative.weekday = (ht == return_value_used)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (interval != 0)", "dateobj->time->relative.weekday = (interval == 0)", "dateobj->time->relative.weekday = (intobj != 0)", "dateobj->time->relative.weekday = (intobj == 0)", "dateobj->time->relative.weekday = (object != 0)", "dateobj->time->relative.weekday = (object != interval)", "dateobj->time->relative.weekday = (object == 0)", "dateobj->time->relative.weekday = (object == interval)", "dateobj->time->relative.weekday = (return_value != 0)", "dateobj->time->relative.weekday = (return_value != interval)", "dateobj->time->relative.weekday = (return_value != object)", "dateobj->time->relative.weekday = (return_value != this_ptr)", "dateobj->time->relative.weekday = (return_value == 0)", "dateobj->time->relative.weekday = (return_value == interval)", "dateobj->time->relative.weekday = (return_value == object)", "dateobj->time->relative.weekday = (return_value == this_ptr)", "dateobj->time->relative.weekday = (return_value_ptr != 0)", "dateobj->time->relative.weekday = (return_value_ptr == 0)", "dateobj->time->relative.weekday = (return_value_used != 0)", "dateobj->time->relative.weekday = (return_value_used != bias)", "dateobj->time->relative.weekday = (return_value_used * bias)", "dateobj->time->relative.weekday = (return_value_used * ht)", "dateobj->time->relative.weekday = (return_value_used + 0)", "dateobj->time->relative.weekday = (return_value_used + bias)", "dateobj->time->relative.weekday = (return_value_used - 0)", "dateobj->time->relative.weekday = (return_value_used - bias)", "dateobj->time->relative.weekday = (return_value_used == 0)", "dateobj->time->relative.weekday = (return_value_used == bias)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.weekday = (this_ptr != 0)", "dateobj->time->relative.weekday = (this_ptr != interval)", "dateobj->time->relative.weekday = (this_ptr != object)", "dateobj->time->relative.weekday = (this_ptr == 0)", "dateobj->time->relative.weekday = (this_ptr == interval)", "dateobj->time->relative.weekday = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.87814839313482, -7.55873900573482, -7.40299320313482, -6.84764409523482, -5.84771198673482, -7.37248890523482, -6.37255679673482, -5.86269945473482, -7.55839166973482, -6.37255679673482, -5.86269945473482, -6.37255679673482, -5.86269945473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -7.27077040473482, -6.97641960473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.97641960473482, -6.51288230473482, -7.27077040473482, -7.29347474473482, -7.29347474473482, -7.50126441473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -7.50126441473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -7.21263631473482, -7.50126441473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482, -6.74337631473482]
								}, {
									"case":	2,
									"scores":	[-5.64945583473482]
								}, {
									"case":	3,
									"scores":	[-5.64945583473482]
								}, {
									"case":	4,
									"scores":	[-5.64945583473482]
								}, {
									"case":	5,
									"scores":	[-5.64945583473482]
								}, {
									"case":	6,
									"scores":	[-5.64945583473482]
								}, {
									"case":	7,
									"scores":	[-5.64945583473482]
								}, {
									"case":	8,
									"scores":	[-5.64945583473482]
								}, {
									"case":	9,
									"scores":	[-5.64945583473482]
								}, {
									"case":	10,
									"scores":	[-5.64945583473482]
								}, {
									"case":	11,
									"scores":	[-5.64945583473482]
								}, {
									"case":	12,
									"scores":	[-5.64945583473482]
								}, {
									"case":	13,
									"scores":	[-5.64945583473482]
								}, {
									"case":	14,
									"scores":	[-5.64945583473482]
								}, {
									"case":	15,
									"scores":	[-5.64945583473482]
								}, {
									"case":	16,
									"scores":	[-5.64945583473482]
								}, {
									"case":	17,
									"scores":	[-5.64945583473482]
								}, {
									"case":	18,
									"scores":	[-5.64945583473482]
								}, {
									"case":	19,
									"scores":	[-5.64945583473482]
								}, {
									"case":	20,
									"scores":	[-5.64945583473482]
								}, {
									"case":	21,
									"scores":	[-5.64945583473482]
								}, {
									"case":	22,
									"scores":	[-5.64945583473482]
								}, {
									"case":	23,
									"scores":	[-5.64945583473482]
								}, {
									"case":	24,
									"scores":	[-5.64945583473482]
								}, {
									"case":	25,
									"scores":	[-5.64945583473482]
								}, {
									"case":	26,
									"scores":	[-5.64945583473482]
								}, {
									"case":	27,
									"scores":	[-5.64945583473482]
								}, {
									"case":	28,
									"scores":	[-5.64945583473482]
								}, {
									"case":	29,
									"scores":	[-5.64945583473482]
								}, {
									"case":	30,
									"scores":	[-5.64945583473482]
								}, {
									"case":	31,
									"scores":	[-5.64945583473482]
								}, {
									"case":	32,
									"scores":	[-5.64945583473482]
								}, {
									"case":	33,
									"scores":	[-5.64945583473482]
								}, {
									"case":	34,
									"scores":	[-5.64945583473482]
								}, {
									"case":	35,
									"scores":	[-5.64945583473482]
								}, {
									"case":	36,
									"scores":	[-5.64945583473482]
								}, {
									"case":	37,
									"scores":	[-5.64945583473482]
								}, {
									"case":	38,
									"scores":	[-5.64945583473482]
								}, {
									"case":	39,
									"scores":	[-5.64945583473482]
								}, {
									"case":	40,
									"scores":	[-5.64945583473482]
								}, {
									"case":	41,
									"scores":	[-5.64945583473482]
								}, {
									"case":	42,
									"scores":	[-5.64945583473482]
								}, {
									"case":	43,
									"scores":	[-5.64945583473482]
								}, {
									"case":	44,
									"scores":	[-5.64945583473482]
								}, {
									"case":	45,
									"scores":	[-5.64945583473482]
								}, {
									"case":	46,
									"scores":	[-5.64945583473482]
								}, {
									"case":	47,
									"scores":	[-5.64945583473482]
								}, {
									"case":	48,
									"scores":	[-5.64945583473482]
								}, {
									"case":	49,
									"scores":	[-5.64945583473482]
								}, {
									"case":	50,
									"scores":	[-5.64945583473482]
								}, {
									"case":	51,
									"scores":	[-5.64945583473482]
								}, {
									"case":	52,
									"scores":	[-5.64945583473482]
								}, {
									"case":	53,
									"scores":	[-5.64945583473482]
								}, {
									"case":	54,
									"scores":	[-5.64945583473482]
								}, {
									"case":	55,
									"scores":	[-5.64945583473482]
								}, {
									"case":	56,
									"scores":	[-5.64945583473482]
								}, {
									"case":	57,
									"scores":	[-5.64945583473482]
								}, {
									"case":	58,
									"scores":	[-5.64945583473482]
								}, {
									"case":	59,
									"scores":	[-5.64945583473482]
								}, {
									"case":	60,
									"scores":	[-5.64945583473482]
								}, {
									"case":	61,
									"scores":	[-5.64945583473482]
								}, {
									"case":	62,
									"scores":	[-5.64945583473482]
								}, {
									"case":	63,
									"scores":	[-5.64945583473482]
								}, {
									"case":	64,
									"scores":	[-5.64945583473482]
								}, {
									"case":	65,
									"scores":	[-5.64945583473482]
								}, {
									"case":	66,
									"scores":	[-5.64945583473482]
								}, {
									"case":	67,
									"scores":	[-5.64945583473482]
								}, {
									"case":	68,
									"scores":	[-5.64945583473482]
								}, {
									"case":	69,
									"scores":	[-5.64945583473482]
								}]
						}]
				}, {
					"line":	2865,
					"switches":	[{
							"switch":	32,
							"types":	[[], [], [], [], [403], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], [], [], [], [], [], []],
							"begin_line":	2866,
							"begin_column":	1,
							"end_line":	2866,
							"end_column":	1,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2866\", 45, &(dateobj), sizeof (dateobj), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(return_value), sizeof (return_value), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.6292531274173]
								}, {
									"case":	2,
									"scores":	[-5.6292531274173]
								}, {
									"case":	3,
									"scores":	[-5.6292531274173]
								}, {
									"case":	4,
									"scores":	[-5.6292531274173]
								}, {
									"case":	5,
									"scores":	[-5.6292531274173]
								}, {
									"case":	6,
									"scores":	[-5.6292531274173]
								}, {
									"case":	7,
									"scores":	[-5.6292531274173]
								}, {
									"case":	8,
									"scores":	[-5.6292531274173]
								}, {
									"case":	9,
									"scores":	[-5.6292531274173]
								}, {
									"case":	10,
									"scores":	[-5.6292531274173]
								}, {
									"case":	11,
									"scores":	[-5.6292531274173]
								}, {
									"case":	12,
									"scores":	[-5.6292531274173]
								}, {
									"case":	13,
									"scores":	[-5.6292531274173]
								}, {
									"case":	14,
									"scores":	[-5.6292531274173]
								}, {
									"case":	15,
									"scores":	[-5.6292531274173]
								}, {
									"case":	16,
									"scores":	[-5.6292531274173]
								}, {
									"case":	17,
									"scores":	[-5.6292531274173]
								}, {
									"case":	18,
									"scores":	[-5.6292531274173]
								}, {
									"case":	19,
									"scores":	[-5.6292531274173]
								}, {
									"case":	20,
									"scores":	[-5.6292531274173]
								}, {
									"case":	21,
									"scores":	[-5.6292531274173]
								}, {
									"case":	22,
									"scores":	[-5.6292531274173]
								}, {
									"case":	23,
									"scores":	[-5.6292531274173]
								}, {
									"case":	24,
									"scores":	[-5.6292531274173]
								}, {
									"case":	25,
									"scores":	[-5.6292531274173]
								}, {
									"case":	26,
									"scores":	[-5.6292531274173]
								}, {
									"case":	27,
									"scores":	[-5.6292531274173]
								}, {
									"case":	28,
									"scores":	[-5.6292531274173]
								}, {
									"case":	29,
									"scores":	[-5.6292531274173]
								}, {
									"case":	30,
									"scores":	[-5.6292531274173]
								}, {
									"case":	31,
									"scores":	[-5.6292531274173]
								}, {
									"case":	32,
									"scores":	[-5.6292531274173]
								}, {
									"case":	33,
									"scores":	[-5.6292531274173]
								}, {
									"case":	34,
									"scores":	[-5.6292531274173]
								}, {
									"case":	35,
									"scores":	[-5.6292531274173]
								}, {
									"case":	36,
									"scores":	[-5.6292531274173]
								}, {
									"case":	37,
									"scores":	[-5.6292531274173]
								}, {
									"case":	38,
									"scores":	[-5.6292531274173]
								}, {
									"case":	39,
									"scores":	[-5.6292531274173]
								}, {
									"case":	40,
									"scores":	[-5.6292531274173]
								}, {
									"case":	41,
									"scores":	[-5.6292531274173]
								}, {
									"case":	42,
									"scores":	[-5.6292531274173]
								}, {
									"case":	43,
									"scores":	[-5.6292531274173]
								}, {
									"case":	44,
									"scores":	[-5.6292531274173]
								}, {
									"case":	45,
									"scores":	[-5.6292531274173]
								}, {
									"case":	46,
									"scores":	[-5.6292531274173]
								}, {
									"case":	47,
									"scores":	[-5.6292531274173]
								}, {
									"case":	48,
									"scores":	[-5.6292531274173]
								}, {
									"case":	49,
									"scores":	[-5.6292531274173]
								}, {
									"case":	50,
									"scores":	[-5.6292531274173]
								}, {
									"case":	51,
									"scores":	[-5.6292531274173]
								}, {
									"case":	52,
									"scores":	[-5.6292531274173]
								}, {
									"case":	53,
									"scores":	[-5.6292531274173]
								}, {
									"case":	54,
									"scores":	[-5.6292531274173]
								}, {
									"case":	55,
									"scores":	[-5.6292531274173]
								}, {
									"case":	56,
									"scores":	[-5.6292531274173]
								}, {
									"case":	57,
									"scores":	[-5.6292531274173]
								}, {
									"case":	58,
									"scores":	[-5.6292531274173]
								}, {
									"case":	59,
									"scores":	[-5.6292531274173]
								}, {
									"case":	60,
									"scores":	[-5.6292531274173]
								}, {
									"case":	61,
									"scores":	[-5.6292531274173]
								}, {
									"case":	62,
									"scores":	[-5.6292531274173]
								}, {
									"case":	63,
									"scores":	[-5.6292531274173]
								}, {
									"case":	64,
									"scores":	[-5.6292531274173]
								}, {
									"case":	65,
									"scores":	[-5.6292531274173]
								}, {
									"case":	66,
									"scores":	[-5.6292531274173]
								}, {
									"case":	67,
									"scores":	[-5.6292531274173]
								}, {
									"case":	68,
									"scores":	[-5.6292531274173]
								}, {
									"case":	69,
									"scores":	[-5.6292531274173]
								}, {
									"case":	70,
									"scores":	[-5.6292531274173]
								}, {
									"case":	71,
									"scores":	[-5.6292531274173]
								}, {
									"case":	72,
									"scores":	[-5.6292531274173]
								}, {
									"case":	73,
									"scores":	[-5.6292531274173]
								}, {
									"case":	74,
									"scores":	[-5.6292531274173]
								}, {
									"case":	75,
									"scores":	[-5.6292531274173]
								}, {
									"case":	76,
									"scores":	[-5.6292531274173]
								}, {
									"case":	77,
									"scores":	[-5.6292531274173]
								}, {
									"case":	78,
									"scores":	[-5.6292531274173]
								}, {
									"case":	79,
									"scores":	[-5.6292531274173]
								}, {
									"case":	80,
									"scores":	[-5.6292531274173]
								}, {
									"case":	81,
									"scores":	[-5.6292531274173]
								}, {
									"case":	82,
									"scores":	[-5.6292531274173]
								}, {
									"case":	83,
									"scores":	[-5.6292531274173]
								}, {
									"case":	84,
									"scores":	[-5.6292531274173]
								}, {
									"case":	85,
									"scores":	[-5.6292531274173]
								}, {
									"case":	86,
									"scores":	[-5.6292531274173]
								}, {
									"case":	87,
									"scores":	[-5.6292531274173]
								}, {
									"case":	88,
									"scores":	[-5.6292531274173]
								}, {
									"case":	89,
									"scores":	[-5.6292531274173]
								}, {
									"case":	90,
									"scores":	[-5.6292531274173]
								}, {
									"case":	91,
									"scores":	[-5.6292531274173]
								}, {
									"case":	92,
									"scores":	[-5.6292531274173]
								}, {
									"case":	93,
									"scores":	[-5.6292531274173]
								}, {
									"case":	94,
									"scores":	[-5.6292531274173]
								}, {
									"case":	95,
									"scores":	[-5.6292531274173]
								}, {
									"case":	96,
									"scores":	[-5.6292531274173]
								}, {
									"case":	97,
									"scores":	[-5.6292531274173]
								}, {
									"case":	98,
									"scores":	[-5.6292531274173]
								}, {
									"case":	99,
									"scores":	[-5.6292531274173]
								}, {
									"case":	100,
									"scores":	[-5.6292531274173]
								}, {
									"case":	101,
									"scores":	[-5.6292531274173]
								}, {
									"case":	102,
									"scores":	[-5.6292531274173]
								}, {
									"case":	103,
									"scores":	[-5.6292531274173]
								}, {
									"case":	104,
									"scores":	[-5.6292531274173]
								}, {
									"case":	105,
									"scores":	[-5.6292531274173]
								}, {
									"case":	106,
									"scores":	[-5.6292531274173]
								}, {
									"case":	107,
									"scores":	[-5.6292531274173]
								}, {
									"case":	108,
									"scores":	[-5.6292531274173]
								}, {
									"case":	109,
									"scores":	[-5.6292531274173]
								}, {
									"case":	110,
									"scores":	[-5.6292531274173]
								}, {
									"case":	111,
									"scores":	[-5.6292531274173]
								}, {
									"case":	112,
									"scores":	[-5.6292531274173]
								}, {
									"case":	113,
									"scores":	[-5.6292531274173]
								}, {
									"case":	114,
									"scores":	[-5.6292531274173]
								}, {
									"case":	115,
									"scores":	[-5.6292531274173]
								}, {
									"case":	116,
									"scores":	[-5.6292531274173]
								}, {
									"case":	117,
									"scores":	[-5.6292531274173]
								}, {
									"case":	118,
									"scores":	[-5.6292531274173]
								}, {
									"case":	119,
									"scores":	[-5.6292531274173]
								}, {
									"case":	120,
									"scores":	[-5.6292531274173]
								}, {
									"case":	121,
									"scores":	[-5.6292531274173]
								}, {
									"case":	122,
									"scores":	[-5.6292531274173]
								}, {
									"case":	123,
									"scores":	[-5.6292531274173]
								}, {
									"case":	124,
									"scores":	[-5.6292531274173]
								}, {
									"case":	125,
									"scores":	[-5.6292531274173]
								}, {
									"case":	126,
									"scores":	[-5.6292531274173]
								}, {
									"case":	127,
									"scores":	[-5.6292531274173]
								}, {
									"case":	128,
									"scores":	[-5.6292531274173]
								}, {
									"case":	129,
									"scores":	[-5.6292531274173]
								}, {
									"case":	130,
									"scores":	[-5.6292531274173]
								}, {
									"case":	131,
									"scores":	[-5.6292531274173]
								}, {
									"case":	132,
									"scores":	[-5.6292531274173]
								}, {
									"case":	133,
									"scores":	[-5.6292531274173]
								}, {
									"case":	134,
									"scores":	[-5.6292531274173]
								}, {
									"case":	135,
									"scores":	[-5.6292531274173]
								}, {
									"case":	136,
									"scores":	[-5.6292531274173]
								}, {
									"case":	137,
									"scores":	[-5.6292531274173]
								}, {
									"case":	138,
									"scores":	[-5.6292531274173]
								}, {
									"case":	139,
									"scores":	[-5.6292531274173]
								}, {
									"case":	140,
									"scores":	[-5.6292531274173]
								}, {
									"case":	141,
									"scores":	[-5.6292531274173]
								}, {
									"case":	142,
									"scores":	[-5.6292531274173]
								}, {
									"case":	143,
									"scores":	[-5.6292531274173]
								}, {
									"case":	144,
									"scores":	[-5.6292531274173]
								}, {
									"case":	145,
									"scores":	[-5.6292531274173]
								}, {
									"case":	146,
									"scores":	[-5.6292531274173]
								}, {
									"case":	147,
									"scores":	[-5.6292531274173]
								}, {
									"case":	148,
									"scores":	[-5.6292531274173]
								}, {
									"case":	149,
									"scores":	[-5.6292531274173]
								}, {
									"case":	150,
									"scores":	[-5.6292531274173]
								}, {
									"case":	151,
									"scores":	[-5.6292531274173]
								}, {
									"case":	152,
									"scores":	[-5.6292531274173]
								}, {
									"case":	153,
									"scores":	[-5.6292531274173]
								}, {
									"case":	154,
									"scores":	[-5.6292531274173]
								}, {
									"case":	155,
									"scores":	[-5.6292531274173]
								}, {
									"case":	156,
									"scores":	[-5.6292531274173]
								}, {
									"case":	157,
									"scores":	[-5.6292531274173]
								}, {
									"case":	158,
									"scores":	[-5.6292531274173]
								}, {
									"case":	159,
									"scores":	[-5.6292531274173]
								}, {
									"case":	160,
									"scores":	[-5.6292531274173]
								}, {
									"case":	161,
									"scores":	[-5.6292531274173]
								}, {
									"case":	162,
									"scores":	[-5.6292531274173]
								}, {
									"case":	163,
									"scores":	[-5.6292531274173]
								}, {
									"case":	164,
									"scores":	[-5.6292531274173]
								}, {
									"case":	165,
									"scores":	[-5.6292531274173]
								}, {
									"case":	166,
									"scores":	[-5.6292531274173]
								}, {
									"case":	167,
									"scores":	[-5.6292531274173]
								}, {
									"case":	168,
									"scores":	[-5.6292531274173]
								}, {
									"case":	169,
									"scores":	[-5.6292531274173]
								}, {
									"case":	170,
									"scores":	[-5.6292531274173]
								}, {
									"case":	171,
									"scores":	[-5.6292531274173]
								}, {
									"case":	172,
									"scores":	[-5.6292531274173]
								}, {
									"case":	173,
									"scores":	[-5.6292531274173]
								}, {
									"case":	174,
									"scores":	[-5.6292531274173]
								}, {
									"case":	175,
									"scores":	[-5.6292531274173]
								}, {
									"case":	176,
									"scores":	[-5.6292531274173]
								}, {
									"case":	177,
									"scores":	[-5.6292531274173]
								}, {
									"case":	178,
									"scores":	[-5.6292531274173]
								}, {
									"case":	179,
									"scores":	[-5.6292531274173]
								}, {
									"case":	180,
									"scores":	[-5.6292531274173]
								}, {
									"case":	181,
									"scores":	[-5.6292531274173]
								}, {
									"case":	182,
									"scores":	[-5.6292531274173]
								}, {
									"case":	183,
									"scores":	[-5.6292531274173]
								}, {
									"case":	184,
									"scores":	[-5.6292531274173]
								}, {
									"case":	185,
									"scores":	[-5.6292531274173]
								}, {
									"case":	186,
									"scores":	[-5.6292531274173]
								}, {
									"case":	187,
									"scores":	[-5.6292531274173]
								}, {
									"case":	188,
									"scores":	[-5.6292531274173]
								}, {
									"case":	189,
									"scores":	[-5.6292531274173]
								}, {
									"case":	190,
									"scores":	[-5.6292531274173]
								}, {
									"case":	191,
									"scores":	[-5.6292531274173]
								}, {
									"case":	192,
									"scores":	[-5.6292531274173]
								}, {
									"case":	193,
									"scores":	[-5.6292531274173]
								}, {
									"case":	194,
									"scores":	[-5.6292531274173]
								}, {
									"case":	195,
									"scores":	[-5.6292531274173]
								}, {
									"case":	196,
									"scores":	[-5.6292531274173]
								}, {
									"case":	197,
									"scores":	[-5.6292531274173]
								}, {
									"case":	198,
									"scores":	[-5.6292531274173]
								}, {
									"case":	199,
									"scores":	[-5.6292531274173]
								}, {
									"case":	200,
									"scores":	[-5.6292531274173]
								}, {
									"case":	201,
									"scores":	[-5.6292531274173]
								}, {
									"case":	202,
									"scores":	[-5.6292531274173]
								}, {
									"case":	203,
									"scores":	[-5.6292531274173]
								}, {
									"case":	204,
									"scores":	[-5.6292531274173]
								}, {
									"case":	205,
									"scores":	[-5.6292531274173]
								}, {
									"case":	206,
									"scores":	[-5.6292531274173]
								}, {
									"case":	207,
									"scores":	[-5.6292531274173]
								}, {
									"case":	208,
									"scores":	[-5.6292531274173]
								}, {
									"case":	209,
									"scores":	[-5.6292531274173]
								}, {
									"case":	210,
									"scores":	[-5.6292531274173]
								}, {
									"case":	211,
									"scores":	[-5.6292531274173]
								}, {
									"case":	212,
									"scores":	[-5.6292531274173]
								}, {
									"case":	213,
									"scores":	[-5.6292531274173]
								}, {
									"case":	214,
									"scores":	[-5.6292531274173]
								}, {
									"case":	215,
									"scores":	[-5.6292531274173]
								}, {
									"case":	216,
									"scores":	[-5.6292531274173]
								}, {
									"case":	217,
									"scores":	[-5.6292531274173]
								}, {
									"case":	218,
									"scores":	[-5.6292531274173]
								}, {
									"case":	219,
									"scores":	[-5.6292531274173]
								}, {
									"case":	220,
									"scores":	[-5.6292531274173]
								}, {
									"case":	221,
									"scores":	[-5.6292531274173]
								}, {
									"case":	222,
									"scores":	[-5.6292531274173]
								}, {
									"case":	223,
									"scores":	[-5.6292531274173]
								}, {
									"case":	224,
									"scores":	[-5.6292531274173]
								}, {
									"case":	225,
									"scores":	[-5.6292531274173]
								}, {
									"case":	226,
									"scores":	[-5.6292531274173]
								}, {
									"case":	227,
									"scores":	[-5.6292531274173]
								}, {
									"case":	228,
									"scores":	[-5.6292531274173]
								}, {
									"case":	229,
									"scores":	[-5.6292531274173]
								}, {
									"case":	230,
									"scores":	[-5.6292531274173]
								}, {
									"case":	231,
									"scores":	[-5.6292531274173]
								}, {
									"case":	232,
									"scores":	[-5.6292531274173]
								}, {
									"case":	233,
									"scores":	[-5.6292531274173]
								}, {
									"case":	234,
									"scores":	[-5.6292531274173]
								}, {
									"case":	235,
									"scores":	[-5.6292531274173]
								}, {
									"case":	236,
									"scores":	[-5.6292531274173]
								}, {
									"case":	237,
									"scores":	[-5.6292531274173]
								}, {
									"case":	238,
									"scores":	[-5.6292531274173]
								}, {
									"case":	239,
									"scores":	[-5.6292531274173]
								}, {
									"case":	240,
									"scores":	[-5.6292531274173]
								}, {
									"case":	241,
									"scores":	[-5.6292531274173]
								}, {
									"case":	242,
									"scores":	[-5.6292531274173]
								}, {
									"case":	243,
									"scores":	[-5.6292531274173]
								}, {
									"case":	244,
									"scores":	[-5.6292531274173]
								}, {
									"case":	245,
									"scores":	[-5.6292531274173]
								}, {
									"case":	246,
									"scores":	[-5.6292531274173]
								}, {
									"case":	247,
									"scores":	[-5.6292531274173]
								}, {
									"case":	248,
									"scores":	[-5.6292531274173]
								}, {
									"case":	249,
									"scores":	[-5.6292531274173]
								}, {
									"case":	250,
									"scores":	[-5.6292531274173]
								}, {
									"case":	251,
									"scores":	[-5.6292531274173]
								}, {
									"case":	252,
									"scores":	[-5.6292531274173]
								}, {
									"case":	253,
									"scores":	[-5.6292531274173]
								}, {
									"case":	254,
									"scores":	[-5.6292531274173]
								}, {
									"case":	255,
									"scores":	[-5.6292531274173]
								}, {
									"case":	256,
									"scores":	[-5.6292531274173]
								}, {
									"case":	257,
									"scores":	[-5.6292531274173]
								}, {
									"case":	258,
									"scores":	[-5.6292531274173]
								}, {
									"case":	259,
									"scores":	[-5.6292531274173]
								}, {
									"case":	260,
									"scores":	[-5.6292531274173]
								}, {
									"case":	261,
									"scores":	[-5.6292531274173]
								}, {
									"case":	262,
									"scores":	[-5.6292531274173]
								}, {
									"case":	263,
									"scores":	[-5.6292531274173]
								}, {
									"case":	264,
									"scores":	[-5.6292531274173]
								}, {
									"case":	265,
									"scores":	[-5.6292531274173]
								}, {
									"case":	266,
									"scores":	[-5.6292531274173]
								}, {
									"case":	267,
									"scores":	[-5.6292531274173]
								}, {
									"case":	268,
									"scores":	[-5.6292531274173]
								}, {
									"case":	269,
									"scores":	[-5.6292531274173]
								}, {
									"case":	270,
									"scores":	[-5.6292531274173]
								}, {
									"case":	271,
									"scores":	[-5.6292531274173]
								}, {
									"case":	272,
									"scores":	[-5.6292531274173]
								}, {
									"case":	273,
									"scores":	[-5.6292531274173]
								}, {
									"case":	274,
									"scores":	[-5.6292531274173]
								}, {
									"case":	275,
									"scores":	[-5.6292531274173]
								}, {
									"case":	276,
									"scores":	[-5.6292531274173]
								}, {
									"case":	277,
									"scores":	[-5.6292531274173]
								}, {
									"case":	278,
									"scores":	[-5.6292531274173]
								}, {
									"case":	279,
									"scores":	[-5.6292531274173]
								}, {
									"case":	280,
									"scores":	[-5.6292531274173]
								}, {
									"case":	281,
									"scores":	[-5.6292531274173]
								}, {
									"case":	282,
									"scores":	[-5.6292531274173]
								}, {
									"case":	283,
									"scores":	[-5.6292531274173]
								}, {
									"case":	284,
									"scores":	[-5.6292531274173]
								}, {
									"case":	285,
									"scores":	[-5.6292531274173]
								}, {
									"case":	286,
									"scores":	[-5.6292531274173]
								}, {
									"case":	287,
									"scores":	[-5.6292531274173]
								}, {
									"case":	288,
									"scores":	[-5.6292531274173]
								}, {
									"case":	289,
									"scores":	[-5.6292531274173]
								}, {
									"case":	290,
									"scores":	[-5.6292531274173]
								}, {
									"case":	291,
									"scores":	[-5.6292531274173]
								}, {
									"case":	292,
									"scores":	[-5.6292531274173]
								}, {
									"case":	293,
									"scores":	[-5.6292531274173]
								}, {
									"case":	294,
									"scores":	[-5.6292531274173]
								}, {
									"case":	295,
									"scores":	[-5.6292531274173]
								}, {
									"case":	296,
									"scores":	[-5.6292531274173]
								}, {
									"case":	297,
									"scores":	[-5.6292531274173]
								}, {
									"case":	298,
									"scores":	[-5.6292531274173]
								}, {
									"case":	299,
									"scores":	[-5.6292531274173]
								}, {
									"case":	300,
									"scores":	[-5.6292531274173]
								}, {
									"case":	301,
									"scores":	[-5.6292531274173]
								}, {
									"case":	302,
									"scores":	[-5.6292531274173]
								}, {
									"case":	303,
									"scores":	[-5.6292531274173]
								}, {
									"case":	304,
									"scores":	[-5.6292531274173]
								}, {
									"case":	305,
									"scores":	[-5.6292531274173]
								}, {
									"case":	306,
									"scores":	[-5.6292531274173]
								}, {
									"case":	307,
									"scores":	[-5.6292531274173]
								}, {
									"case":	308,
									"scores":	[-5.6292531274173]
								}, {
									"case":	309,
									"scores":	[-5.6292531274173]
								}, {
									"case":	310,
									"scores":	[-5.6292531274173]
								}, {
									"case":	311,
									"scores":	[-5.6292531274173]
								}, {
									"case":	312,
									"scores":	[-5.6292531274173]
								}, {
									"case":	313,
									"scores":	[-5.6292531274173]
								}, {
									"case":	314,
									"scores":	[-5.6292531274173]
								}, {
									"case":	315,
									"scores":	[-5.6292531274173]
								}, {
									"case":	316,
									"scores":	[-5.6292531274173]
								}, {
									"case":	317,
									"scores":	[-5.6292531274173]
								}, {
									"case":	318,
									"scores":	[-5.6292531274173]
								}, {
									"case":	319,
									"scores":	[-5.6292531274173]
								}, {
									"case":	320,
									"scores":	[-5.6292531274173]
								}, {
									"case":	321,
									"scores":	[-5.6292531274173]
								}, {
									"case":	322,
									"scores":	[-5.6292531274173]
								}, {
									"case":	323,
									"scores":	[-5.6292531274173]
								}, {
									"case":	324,
									"scores":	[-5.6292531274173]
								}, {
									"case":	325,
									"scores":	[-5.6292531274173]
								}, {
									"case":	326,
									"scores":	[-5.6292531274173]
								}, {
									"case":	327,
									"scores":	[-5.6292531274173]
								}, {
									"case":	328,
									"scores":	[-5.6292531274173]
								}, {
									"case":	329,
									"scores":	[-5.6292531274173]
								}, {
									"case":	330,
									"scores":	[-5.6292531274173]
								}, {
									"case":	331,
									"scores":	[-5.6292531274173]
								}, {
									"case":	332,
									"scores":	[-5.6292531274173]
								}, {
									"case":	333,
									"scores":	[-5.6292531274173]
								}, {
									"case":	334,
									"scores":	[-5.6292531274173]
								}, {
									"case":	335,
									"scores":	[-5.6292531274173]
								}, {
									"case":	336,
									"scores":	[-5.6292531274173]
								}, {
									"case":	337,
									"scores":	[-5.6292531274173]
								}, {
									"case":	338,
									"scores":	[-5.6292531274173]
								}, {
									"case":	339,
									"scores":	[-5.6292531274173]
								}, {
									"case":	340,
									"scores":	[-5.6292531274173]
								}, {
									"case":	341,
									"scores":	[-5.6292531274173]
								}, {
									"case":	342,
									"scores":	[-5.6292531274173]
								}, {
									"case":	343,
									"scores":	[-5.6292531274173]
								}, {
									"case":	344,
									"scores":	[-5.6292531274173]
								}, {
									"case":	345,
									"scores":	[-5.6292531274173]
								}, {
									"case":	346,
									"scores":	[-5.6292531274173]
								}, {
									"case":	347,
									"scores":	[-5.6292531274173]
								}, {
									"case":	348,
									"scores":	[-5.6292531274173]
								}, {
									"case":	349,
									"scores":	[-5.6292531274173]
								}, {
									"case":	350,
									"scores":	[-5.6292531274173]
								}, {
									"case":	351,
									"scores":	[-5.6292531274173]
								}, {
									"case":	352,
									"scores":	[-5.6292531274173]
								}, {
									"case":	353,
									"scores":	[-5.6292531274173]
								}, {
									"case":	354,
									"scores":	[-5.6292531274173]
								}, {
									"case":	355,
									"scores":	[-5.6292531274173]
								}, {
									"case":	356,
									"scores":	[-5.6292531274173]
								}, {
									"case":	357,
									"scores":	[-5.6292531274173]
								}, {
									"case":	358,
									"scores":	[-5.6292531274173]
								}, {
									"case":	359,
									"scores":	[-5.6292531274173]
								}, {
									"case":	360,
									"scores":	[-5.6292531274173]
								}, {
									"case":	361,
									"scores":	[-5.6292531274173]
								}, {
									"case":	362,
									"scores":	[-5.6292531274173]
								}, {
									"case":	363,
									"scores":	[-5.6292531274173]
								}, {
									"case":	364,
									"scores":	[-5.6292531274173]
								}, {
									"case":	365,
									"scores":	[-5.6292531274173]
								}, {
									"case":	366,
									"scores":	[-5.6292531274173]
								}, {
									"case":	367,
									"scores":	[-5.6292531274173]
								}, {
									"case":	368,
									"scores":	[-5.6292531274173]
								}, {
									"case":	369,
									"scores":	[-5.6292531274173]
								}, {
									"case":	370,
									"scores":	[-5.6292531274173]
								}, {
									"case":	371,
									"scores":	[-5.6292531274173]
								}, {
									"case":	372,
									"scores":	[-5.6292531274173]
								}, {
									"case":	373,
									"scores":	[-5.6292531274173]
								}, {
									"case":	374,
									"scores":	[-5.6292531274173]
								}, {
									"case":	375,
									"scores":	[-5.6292531274173]
								}, {
									"case":	376,
									"scores":	[-5.6292531274173]
								}, {
									"case":	377,
									"scores":	[-5.6292531274173]
								}, {
									"case":	378,
									"scores":	[-5.6292531274173]
								}, {
									"case":	379,
									"scores":	[-5.6292531274173]
								}, {
									"case":	380,
									"scores":	[-5.6292531274173]
								}, {
									"case":	381,
									"scores":	[-5.6292531274173]
								}, {
									"case":	382,
									"scores":	[-5.6292531274173]
								}, {
									"case":	383,
									"scores":	[-5.6292531274173]
								}, {
									"case":	384,
									"scores":	[-5.6292531274173]
								}, {
									"case":	385,
									"scores":	[-5.6292531274173]
								}, {
									"case":	386,
									"scores":	[-5.6292531274173]
								}, {
									"case":	387,
									"scores":	[-5.6292531274173]
								}, {
									"case":	388,
									"scores":	[-5.6292531274173]
								}, {
									"case":	389,
									"scores":	[-5.6292531274173]
								}, {
									"case":	390,
									"scores":	[-5.6292531274173]
								}, {
									"case":	391,
									"scores":	[-5.6292531274173]
								}, {
									"case":	392,
									"scores":	[-5.6292531274173]
								}, {
									"case":	393,
									"scores":	[-5.6292531274173]
								}, {
									"case":	394,
									"scores":	[-5.6292531274173]
								}, {
									"case":	395,
									"scores":	[-5.6292531274173]
								}, {
									"case":	396,
									"scores":	[-5.6292531274173]
								}, {
									"case":	397,
									"scores":	[-5.6292531274173]
								}, {
									"case":	398,
									"scores":	[-5.6292531274173]
								}, {
									"case":	399,
									"scores":	[-5.6292531274173]
								}, {
									"case":	400,
									"scores":	[-5.6292531274173]
								}, {
									"case":	401,
									"scores":	[-5.6292531274173]
								}, {
									"case":	402,
									"scores":	[-5.6292531274173]
								}, {
									"case":	403,
									"scores":	[-8.0802434481173, -8.5433818524173, -8.8943896221173, -7.6362533524173, -8.5255466572173, -7.7434740204173, -6.9676340174173, -8.7724654974173, -6.9676340174173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.2414586372173, -8.2043582372173, -8.2043582372173, -7.9954197234173, -8.2414586372173, -8.4634304452173, -8.4634304452173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -9.0185044112173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.9833546144173, -9.0185044112173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173, -8.7724654974173]
								}]
						}, {
							"switch":	33,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2866,
							"begin_column":	3,
							"end_line":	2866,
							"end_column":	51,
							"patch_codes":	["if (!__is_neg(\"\", \"L2866\", 45, &(dateobj), sizeof (dateobj), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(return_value), sizeof (return_value), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.have_weekday_relative = 0;\n", "{\n}\n", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0 * bias)", "dateobj->time->relative.have_weekday_relative = (0 * ht)", "dateobj->time->relative.have_weekday_relative = (0 * return_value_used)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.have_weekday_relative = (bias != 0)", "dateobj->time->relative.have_weekday_relative = (bias * ht)", "dateobj->time->relative.have_weekday_relative = (bias * return_value_used)", "dateobj->time->relative.have_weekday_relative = (bias + 0)", "dateobj->time->relative.have_weekday_relative = (bias - 0)", "dateobj->time->relative.have_weekday_relative = (bias == 0)", "dateobj->time->relative.have_weekday_relative = (dateobj != 0)", "dateobj->time->relative.have_weekday_relative = (dateobj == 0)", "dateobj->time->relative.have_weekday_relative = (ht != 0)", "dateobj->time->relative.have_weekday_relative = (ht != bias)", "dateobj->time->relative.have_weekday_relative = (ht != return_value_used)", "dateobj->time->relative.have_weekday_relative = (ht * bias)", "dateobj->time->relative.have_weekday_relative = (ht * return_value_used)", "dateobj->time->relative.have_weekday_relative = (ht + 0)", "dateobj->time->relative.have_weekday_relative = (ht + bias)", "dateobj->time->relative.have_weekday_relative = (ht + return_value_used)", "dateobj->time->relative.have_weekday_relative = (ht - 0)", "dateobj->time->relative.have_weekday_relative = (ht - bias)", "dateobj->time->relative.have_weekday_relative = (ht - return_value_used)", "dateobj->time->relative.have_weekday_relative = (ht == 0)", "dateobj->time->relative.have_weekday_relative = (ht == bias)", "dateobj->time->relative.have_weekday_relative = (ht == return_value_used)", "dateobj->time->relative.have_weekday_relative = (interval != 0)", "dateobj->time->relative.have_weekday_relative = (interval == 0)", "dateobj->time->relative.have_weekday_relative = (intobj != 0)", "dateobj->time->relative.have_weekday_relative = (intobj == 0)", "dateobj->time->relative.have_weekday_relative = (object != 0)", "dateobj->time->relative.have_weekday_relative = (object != interval)", "dateobj->time->relative.have_weekday_relative = (object == 0)", "dateobj->time->relative.have_weekday_relative = (object == interval)", "dateobj->time->relative.have_weekday_relative = (return_value != 0)", "dateobj->time->relative.have_weekday_relative = (return_value != interval)", "dateobj->time->relative.have_weekday_relative = (return_value != object)", "dateobj->time->relative.have_weekday_relative = (return_value != this_ptr)", "dateobj->time->relative.have_weekday_relative = (return_value == 0)", "dateobj->time->relative.have_weekday_relative = (return_value == interval)", "dateobj->time->relative.have_weekday_relative = (return_value == object)", "dateobj->time->relative.have_weekday_relative = (return_value == this_ptr)", "dateobj->time->relative.have_weekday_relative = (return_value_ptr != 0)", "dateobj->time->relative.have_weekday_relative = (return_value_ptr == 0)", "dateobj->time->relative.have_weekday_relative = (return_value_used != 0)", "dateobj->time->relative.have_weekday_relative = (return_value_used != bias)", "dateobj->time->relative.have_weekday_relative = (return_value_used * bias)", "dateobj->time->relative.have_weekday_relative = (return_value_used * ht)", "dateobj->time->relative.have_weekday_relative = (return_value_used + 0)", "dateobj->time->relative.have_weekday_relative = (return_value_used + bias)", "dateobj->time->relative.have_weekday_relative = (return_value_used - 0)", "dateobj->time->relative.have_weekday_relative = (return_value_used - bias)", "dateobj->time->relative.have_weekday_relative = (return_value_used == 0)", "dateobj->time->relative.have_weekday_relative = (return_value_used == bias)", "dateobj->time->relative.have_weekday_relative = (this_ptr != 0)", "dateobj->time->relative.have_weekday_relative = (this_ptr != interval)", "dateobj->time->relative.have_weekday_relative = (this_ptr != object)", "dateobj->time->relative.have_weekday_relative = (this_ptr == 0)", "dateobj->time->relative.have_weekday_relative = (this_ptr == interval)", "dateobj->time->relative.have_weekday_relative = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6982133979173, -7.7968512984173, -7.2230582079173, -7.2471587474173, -7.0857563879173, -6.0858242794173, -6.1008117474173, -6.9814886074173, -6.1008117474173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -7.5088826974173, -7.2145318974173, -7.2145318974173, -6.7509945974173, -7.5088826974173, -7.5315870374173, -7.5315870374173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -7.7393767074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -7.4507486074173, -7.7393767074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173, -6.9814886074173]
								}, {
									"case":	2,
									"scores":	[-5.6292531274173]
								}, {
									"case":	3,
									"scores":	[-5.6292531274173]
								}, {
									"case":	4,
									"scores":	[-5.6292531274173]
								}, {
									"case":	5,
									"scores":	[-5.6292531274173]
								}, {
									"case":	6,
									"scores":	[-5.6292531274173]
								}, {
									"case":	7,
									"scores":	[-5.6292531274173]
								}, {
									"case":	8,
									"scores":	[-5.6292531274173]
								}, {
									"case":	9,
									"scores":	[-5.6292531274173]
								}, {
									"case":	10,
									"scores":	[-5.6292531274173]
								}, {
									"case":	11,
									"scores":	[-5.6292531274173]
								}, {
									"case":	12,
									"scores":	[-5.6292531274173]
								}, {
									"case":	13,
									"scores":	[-5.6292531274173]
								}, {
									"case":	14,
									"scores":	[-5.6292531274173]
								}, {
									"case":	15,
									"scores":	[-5.6292531274173]
								}, {
									"case":	16,
									"scores":	[-5.6292531274173]
								}, {
									"case":	17,
									"scores":	[-5.6292531274173]
								}, {
									"case":	18,
									"scores":	[-5.6292531274173]
								}, {
									"case":	19,
									"scores":	[-5.6292531274173]
								}, {
									"case":	20,
									"scores":	[-5.6292531274173]
								}, {
									"case":	21,
									"scores":	[-5.6292531274173]
								}, {
									"case":	22,
									"scores":	[-5.6292531274173]
								}, {
									"case":	23,
									"scores":	[-5.6292531274173]
								}, {
									"case":	24,
									"scores":	[-5.6292531274173]
								}, {
									"case":	25,
									"scores":	[-5.6292531274173]
								}, {
									"case":	26,
									"scores":	[-5.6292531274173]
								}, {
									"case":	27,
									"scores":	[-5.6292531274173]
								}, {
									"case":	28,
									"scores":	[-5.6292531274173]
								}, {
									"case":	29,
									"scores":	[-5.6292531274173]
								}, {
									"case":	30,
									"scores":	[-5.6292531274173]
								}, {
									"case":	31,
									"scores":	[-5.6292531274173]
								}, {
									"case":	32,
									"scores":	[-5.6292531274173]
								}, {
									"case":	33,
									"scores":	[-5.6292531274173]
								}, {
									"case":	34,
									"scores":	[-5.6292531274173]
								}, {
									"case":	35,
									"scores":	[-5.6292531274173]
								}, {
									"case":	36,
									"scores":	[-5.6292531274173]
								}, {
									"case":	37,
									"scores":	[-5.6292531274173]
								}, {
									"case":	38,
									"scores":	[-5.6292531274173]
								}, {
									"case":	39,
									"scores":	[-5.6292531274173]
								}, {
									"case":	40,
									"scores":	[-5.6292531274173]
								}, {
									"case":	41,
									"scores":	[-5.6292531274173]
								}, {
									"case":	42,
									"scores":	[-5.6292531274173]
								}, {
									"case":	43,
									"scores":	[-5.6292531274173]
								}, {
									"case":	44,
									"scores":	[-5.6292531274173]
								}, {
									"case":	45,
									"scores":	[-5.6292531274173]
								}, {
									"case":	46,
									"scores":	[-5.6292531274173]
								}, {
									"case":	47,
									"scores":	[-5.6292531274173]
								}, {
									"case":	48,
									"scores":	[-5.6292531274173]
								}, {
									"case":	49,
									"scores":	[-5.6292531274173]
								}, {
									"case":	50,
									"scores":	[-5.6292531274173]
								}, {
									"case":	51,
									"scores":	[-5.6292531274173]
								}, {
									"case":	52,
									"scores":	[-5.6292531274173]
								}, {
									"case":	53,
									"scores":	[-5.6292531274173]
								}, {
									"case":	54,
									"scores":	[-5.6292531274173]
								}, {
									"case":	55,
									"scores":	[-5.6292531274173]
								}, {
									"case":	56,
									"scores":	[-5.6292531274173]
								}, {
									"case":	57,
									"scores":	[-5.6292531274173]
								}, {
									"case":	58,
									"scores":	[-5.6292531274173]
								}, {
									"case":	59,
									"scores":	[-5.6292531274173]
								}, {
									"case":	60,
									"scores":	[-5.6292531274173]
								}, {
									"case":	61,
									"scores":	[-5.6292531274173]
								}, {
									"case":	62,
									"scores":	[-5.6292531274173]
								}, {
									"case":	63,
									"scores":	[-5.6292531274173]
								}, {
									"case":	64,
									"scores":	[-5.6292531274173]
								}, {
									"case":	65,
									"scores":	[-5.6292531274173]
								}, {
									"case":	66,
									"scores":	[-5.6292531274173]
								}]
						}]
				}, {
					"line":	2852,
					"switches":	[{
							"switch":	13,
							"types":	[[], [], [], [], [390], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [], [], [], [293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389], [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292], [], [], [], [], [], []],
							"begin_line":	2853,
							"begin_column":	0,
							"end_line":	2853,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2853\", 48, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(interval), sizeof (interval), &(bias), sizeof (bias), &(object), sizeof (object), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	2,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	3,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	4,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	5,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	6,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	7,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	8,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	9,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	10,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	11,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	12,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	13,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	14,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	15,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	16,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	17,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	18,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	19,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	20,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	21,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	22,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	23,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	24,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	25,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	26,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	27,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	28,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	29,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	30,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	31,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	32,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	33,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	34,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	35,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	36,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	37,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	38,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	39,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	40,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	41,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	42,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	43,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	44,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	45,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	46,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	47,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	48,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	49,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	50,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	51,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	52,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	53,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	54,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	55,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	56,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	57,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	58,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	59,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	60,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	61,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	62,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	63,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	64,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	65,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	66,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	67,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	68,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	69,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	70,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	71,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	72,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	73,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	74,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	75,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	76,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	77,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	78,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	79,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	80,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	81,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	82,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	83,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	84,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	85,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	86,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	87,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	88,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	89,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	90,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	91,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	92,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	93,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	94,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	95,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	96,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	97,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	98,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	99,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	100,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	101,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	102,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	103,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	104,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	105,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	106,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	107,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	108,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	109,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	110,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	111,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	112,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	113,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	114,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	115,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	116,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	117,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	118,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	119,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	120,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	121,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	122,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	123,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	124,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	125,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	126,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	127,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	128,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	129,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	130,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	131,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	132,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	133,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	134,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	135,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	136,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	137,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	138,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	139,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	140,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	141,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	142,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	143,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	144,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	145,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	146,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	147,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	148,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	149,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	150,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	151,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	152,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	153,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	154,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	155,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	156,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	157,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	158,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	159,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	160,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	161,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	162,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	163,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	164,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	165,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	166,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	167,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	168,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	169,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	170,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	171,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	172,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	173,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	174,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	175,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	176,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	177,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	178,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	179,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	180,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	181,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	182,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	183,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	184,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	185,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	186,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	187,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	188,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	189,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	190,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	191,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	192,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	193,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	194,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	195,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	196,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	197,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	198,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	199,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	200,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	201,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	202,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	203,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	204,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	205,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	206,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	207,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	208,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	209,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	210,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	211,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	212,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	213,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	214,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	215,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	216,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	217,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	218,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	219,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	220,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	221,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	222,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	223,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	224,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	225,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	226,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	227,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	228,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	229,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	230,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	231,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	232,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	233,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	234,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	235,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	236,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	237,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	238,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	239,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	240,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	241,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	242,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	243,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	244,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	245,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	246,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	247,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	248,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	249,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	250,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	251,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	252,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	253,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	254,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	255,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	256,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	257,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	258,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	259,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	260,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	261,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	262,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	263,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	264,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	265,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	266,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	267,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	268,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	269,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	270,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	271,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	272,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	273,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	274,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	275,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	276,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	277,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	278,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	279,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	280,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	281,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	282,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	283,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	284,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	285,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	286,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	287,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	288,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	289,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	290,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	291,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	292,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	293,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	294,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	295,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	296,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	297,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	298,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	299,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	300,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	301,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	302,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	303,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	304,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	305,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	306,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	307,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	308,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	309,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	310,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	311,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	312,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	313,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	314,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	315,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	316,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	317,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	318,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	319,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	320,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	321,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	322,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	323,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	324,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	325,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	326,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	327,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	328,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	329,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	330,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	331,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	332,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	333,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	334,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	335,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	336,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	337,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	338,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	339,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	340,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	341,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	342,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	343,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	344,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	345,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	346,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	347,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	348,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	349,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	350,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	351,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	352,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	353,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	354,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	355,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	356,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	357,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	358,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	359,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	360,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	361,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	362,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	363,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	364,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	365,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	366,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	367,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	368,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	369,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	370,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	371,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	372,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	373,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	374,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	375,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	376,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	377,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	378,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	379,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	380,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	381,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	382,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	383,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	384,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	385,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	386,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	387,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	388,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	389,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	390,
									"scores":	[-8.970323053374976, -10.333902660374974, -11.388474924674973, -11.388474924674973, -10.239890833374977, -10.921987660374976, -10.857468064474975, -11.388474924674973, -11.388474924674973, -10.626406464474975, -10.314724138674976, -10.820367664474976, -9.6761514956749757, -9.6761514956749757, -9.6761514956749757, -10.611429150674976, -10.857468064474975, -11.079439872474975, -11.079439872474975, -9.6761514956749757, -9.6761514956749757, -9.6761514956749757, -11.486454917674976, -11.489053424674976, -11.634513838474975, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.634513838474975, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.599364041674974, -11.634513838474975, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.388474924674973, -11.388474924674973]
								}]
						}, {
							"switch":	14,
							"types":	[[4], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3]],
							"begin_line":	2853,
							"begin_column":	2,
							"end_line":	2867,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L2853\", 48, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(interval), sizeof (interval), &(bias), sizeof (bias), &(object), sizeof (object), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time));\n} else {\n    if (intobj->diff->invert) {\n        bias = -1;\n    }\n    dateobj->time->relative.y = intobj->diff->y * bias;\n    dateobj->time->relative.m = intobj->diff->m * bias;\n    dateobj->time->relative.d = intobj->diff->d * bias;\n    dateobj->time->relative.h = intobj->diff->h * bias;\n    dateobj->time->relative.i = intobj->diff->i * bias;\n    dateobj->time->relative.s = intobj->diff->s * bias;\n    dateobj->time->relative.weekday = 0;\n    dateobj->time->relative.have_weekday_relative = 0;\n}\n", "if ((intobj->diff->have_weekday_relative || intobj->diff->have_special_relative) || __is_neg(\"\", \"L2853\", 48, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(interval), sizeof (interval), &(bias), sizeof (bias), &(object), sizeof (object), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time));\n} else {\n    if (intobj->diff->invert) {\n        bias = -1;\n    }\n    dateobj->time->relative.y = intobj->diff->y * bias;\n    dateobj->time->relative.m = intobj->diff->m * bias;\n    dateobj->time->relative.d = intobj->diff->d * bias;\n    dateobj->time->relative.h = intobj->diff->h * bias;\n    dateobj->time->relative.i = intobj->diff->i * bias;\n    dateobj->time->relative.s = intobj->diff->s * bias;\n    dateobj->time->relative.weekday = 0;\n    dateobj->time->relative.have_weekday_relative = 0;\n}\n", "if (intobj->diff->have_weekday_relative) {\n    memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time));\n} else {\n    if (intobj->diff->invert) {\n        bias = -1;\n    }\n    dateobj->time->relative.y = intobj->diff->y * bias;\n    dateobj->time->relative.m = intobj->diff->m * bias;\n    dateobj->time->relative.d = intobj->diff->d * bias;\n    dateobj->time->relative.h = intobj->diff->h * bias;\n    dateobj->time->relative.i = intobj->diff->i * bias;\n    dateobj->time->relative.s = intobj->diff->s * bias;\n    dateobj->time->relative.weekday = 0;\n    dateobj->time->relative.have_weekday_relative = 0;\n}\n", "if ((intobj->diff->have_weekday_relative || intobj->diff->have_special_relative) && !__is_neg(\"\", \"L2853\", 48, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(interval), sizeof (interval), &(bias), sizeof (bias), &(object), sizeof (object), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time));\n} else {\n    if (intobj->diff->invert) {\n        bias = -1;\n    }\n    dateobj->time->relative.y = intobj->diff->y * bias;\n    dateobj->time->relative.m = intobj->diff->m * bias;\n    dateobj->time->relative.d = intobj->diff->d * bias;\n    dateobj->time->relative.h = intobj->diff->h * bias;\n    dateobj->time->relative.i = intobj->diff->i * bias;\n    dateobj->time->relative.s = intobj->diff->s * bias;\n    dateobj->time->relative.weekday = 0;\n    dateobj->time->relative.have_weekday_relative = 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.55694526762815, -5.6233471471281469, -5.9664373371281449, -5.9664373371281449, -5.7786092350281466, -6.1719022440281464, -6.4938314271281445, -5.9664373371281449, -5.9664373371281449, -5.917900473128145, -6.2188751411281462, -6.1994806271281444, -5.4720824401281458, -5.4720824401281458, -5.4720824401281458, -5.7359433271281457, -6.4938314271281445, -6.5165357671281452, -6.5165357671281452, -5.4720824401281458, -5.4720824401281458, -5.4720824401281458, -5.9629560811281461, -5.9660900011281459, -6.7243254371281456, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -6.7243254371281456, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -6.4356973371281452, -6.7243254371281456, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449, -5.9664373371281449]
								}, {
									"case":	2,
									"scores":	[-3.9266353789281458, -4.9930372584281457, -5.3361274484281456, -5.3361274484281456, -5.1482993463281463, -5.5415923553281461, -5.8635215384281461, -5.3361274484281456, -5.3361274484281456, -5.2875905844281466, -5.5885652524281451, -5.5691707384281459, -4.8417725514281456, -4.8417725514281456, -4.8417725514281456, -5.1056334384281463, -5.8635215384281461, -5.8862258784281458, -5.8862258784281458, -4.8417725514281456, -4.8417725514281456, -4.8417725514281456, -5.3326461924281459, -5.3357801124281456, -6.0940155484281462, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -6.0940155484281462, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.8053874484281458, -6.0940155484281462, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.9266353789281458, -4.9930372584281457, -5.3361274484281456, -5.3361274484281456, -5.1482993463281463, -5.5415923553281461, -5.8635215384281461, -5.3361274484281456, -5.3361274484281456, -5.2875905844281466, -5.5885652524281451, -5.5691707384281459, -4.8417725514281456, -4.8417725514281456, -4.8417725514281456, -5.1056334384281463, -5.8635215384281461, -5.8862258784281458, -5.8862258784281458, -4.8417725514281456, -4.8417725514281456, -4.8417725514281456, -5.3326461924281459, -5.3357801124281456, -6.0940155484281462, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -6.0940155484281462, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.8053874484281458, -6.0940155484281462, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456, -5.3361274484281456]
								}]
						}, {
							"switch":	34,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2853,
							"begin_column":	2,
							"end_line":	2867,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L2853\", 48, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(interval), sizeof (interval), &(bias), sizeof (bias), &(object), sizeof (object), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    if (intobj->diff->have_weekday_relative || intobj->diff->have_special_relative) {\n        memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time));\n    } else {\n        if (intobj->diff->invert) {\n            bias = -1;\n        }\n        dateobj->time->relative.y = intobj->diff->y * bias;\n        dateobj->time->relative.m = intobj->diff->m * bias;\n        dateobj->time->relative.d = intobj->diff->d * bias;\n        dateobj->time->relative.h = intobj->diff->h * bias;\n        dateobj->time->relative.i = intobj->diff->i * bias;\n        dateobj->time->relative.s = intobj->diff->s * bias;\n        dateobj->time->relative.weekday = 0;\n        dateobj->time->relative.have_weekday_relative = 0;\n    }\n", "if (!__is_neg(\"\", \"L2853\", 48, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(interval), sizeof (interval), &(bias), sizeof (bias), &(object), sizeof (object), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)) && (intobj->diff->have_weekday_relative || intobj->diff->have_special_relative)) {\n    memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time));\n} else {\n    if (intobj->diff->invert) {\n        bias = -1;\n    }\n    dateobj->time->relative.y = intobj->diff->y * bias;\n    dateobj->time->relative.m = intobj->diff->m * bias;\n    dateobj->time->relative.d = intobj->diff->d * bias;\n    dateobj->time->relative.h = intobj->diff->h * bias;\n    dateobj->time->relative.i = intobj->diff->i * bias;\n    dateobj->time->relative.s = intobj->diff->s * bias;\n    dateobj->time->relative.weekday = 0;\n    dateobj->time->relative.have_weekday_relative = 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.670332903774975, -7.7367347832749758, -8.0798249732749756, -8.0798249732749756, -7.8919968711749746, -8.2852898801749753, -8.6072190632749752, -8.0798249732749756, -8.0798249732749756, -8.0312881092749748, -8.3322627772749751, -8.3128682632749751, -7.5854700762749747, -7.5854700762749747, -7.5854700762749747, -7.8493309632749755, -8.6072190632749752, -8.6299234032749759, -8.6299234032749759, -7.5854700762749747, -7.5854700762749747, -7.5854700762749747, -8.8530722382749758, -8.0794776372749748, -8.8377130732749762, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.8377130732749762, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.5490849732749759, -8.8377130732749762, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756, -8.0798249732749756]
								}, {
									"case":	2,
									"scores":	[-6.4415833297749749, -7.5079852092749757, -7.8510753992749747, -7.8510753992749747, -7.6632472971749754, -8.0565403061749752, -8.3784694892749751, -7.8510753992749747, -7.8510753992749747, -7.8025385352749748, -8.103513203274975, -8.084118689274975, -7.3567205022749755, -7.3567205022749755, -7.3567205022749755, -7.6205813892749745, -8.3784694892749751, -8.401173829274974, -8.401173829274974, -7.3567205022749755, -7.3567205022749755, -7.3567205022749755, -7.847594143274975, -7.8507280632749747, -8.6089634992749744, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -8.6089634992749744, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -8.320335399274974, -8.6089634992749744, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747, -7.8510753992749747]
								}]
						}]
				}, {
					"line":	2867,
					"switches":	[{
							"switch":	35,
							"types":	[[], [], [], [], [389], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	2868,
							"begin_column":	0,
							"end_line":	2868,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2868\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(return_value), sizeof (return_value), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.60905042009978]
								}, {
									"case":	2,
									"scores":	[-5.60905042009978]
								}, {
									"case":	3,
									"scores":	[-5.60905042009978]
								}, {
									"case":	4,
									"scores":	[-5.60905042009978]
								}, {
									"case":	5,
									"scores":	[-5.60905042009978]
								}, {
									"case":	6,
									"scores":	[-5.60905042009978]
								}, {
									"case":	7,
									"scores":	[-5.60905042009978]
								}, {
									"case":	8,
									"scores":	[-5.60905042009978]
								}, {
									"case":	9,
									"scores":	[-5.60905042009978]
								}, {
									"case":	10,
									"scores":	[-5.60905042009978]
								}, {
									"case":	11,
									"scores":	[-5.60905042009978]
								}, {
									"case":	12,
									"scores":	[-5.60905042009978]
								}, {
									"case":	13,
									"scores":	[-5.60905042009978]
								}, {
									"case":	14,
									"scores":	[-5.60905042009978]
								}, {
									"case":	15,
									"scores":	[-5.60905042009978]
								}, {
									"case":	16,
									"scores":	[-5.60905042009978]
								}, {
									"case":	17,
									"scores":	[-5.60905042009978]
								}, {
									"case":	18,
									"scores":	[-5.60905042009978]
								}, {
									"case":	19,
									"scores":	[-5.60905042009978]
								}, {
									"case":	20,
									"scores":	[-5.60905042009978]
								}, {
									"case":	21,
									"scores":	[-5.60905042009978]
								}, {
									"case":	22,
									"scores":	[-5.60905042009978]
								}, {
									"case":	23,
									"scores":	[-5.60905042009978]
								}, {
									"case":	24,
									"scores":	[-5.60905042009978]
								}, {
									"case":	25,
									"scores":	[-5.60905042009978]
								}, {
									"case":	26,
									"scores":	[-5.60905042009978]
								}, {
									"case":	27,
									"scores":	[-5.60905042009978]
								}, {
									"case":	28,
									"scores":	[-5.60905042009978]
								}, {
									"case":	29,
									"scores":	[-5.60905042009978]
								}, {
									"case":	30,
									"scores":	[-5.60905042009978]
								}, {
									"case":	31,
									"scores":	[-5.60905042009978]
								}, {
									"case":	32,
									"scores":	[-5.60905042009978]
								}, {
									"case":	33,
									"scores":	[-5.60905042009978]
								}, {
									"case":	34,
									"scores":	[-5.60905042009978]
								}, {
									"case":	35,
									"scores":	[-5.60905042009978]
								}, {
									"case":	36,
									"scores":	[-5.60905042009978]
								}, {
									"case":	37,
									"scores":	[-5.60905042009978]
								}, {
									"case":	38,
									"scores":	[-5.60905042009978]
								}, {
									"case":	39,
									"scores":	[-5.60905042009978]
								}, {
									"case":	40,
									"scores":	[-5.60905042009978]
								}, {
									"case":	41,
									"scores":	[-5.60905042009978]
								}, {
									"case":	42,
									"scores":	[-5.60905042009978]
								}, {
									"case":	43,
									"scores":	[-5.60905042009978]
								}, {
									"case":	44,
									"scores":	[-5.60905042009978]
								}, {
									"case":	45,
									"scores":	[-5.60905042009978]
								}, {
									"case":	46,
									"scores":	[-5.60905042009978]
								}, {
									"case":	47,
									"scores":	[-5.60905042009978]
								}, {
									"case":	48,
									"scores":	[-5.60905042009978]
								}, {
									"case":	49,
									"scores":	[-5.60905042009978]
								}, {
									"case":	50,
									"scores":	[-5.60905042009978]
								}, {
									"case":	51,
									"scores":	[-5.60905042009978]
								}, {
									"case":	52,
									"scores":	[-5.60905042009978]
								}, {
									"case":	53,
									"scores":	[-5.60905042009978]
								}, {
									"case":	54,
									"scores":	[-5.60905042009978]
								}, {
									"case":	55,
									"scores":	[-5.60905042009978]
								}, {
									"case":	56,
									"scores":	[-5.60905042009978]
								}, {
									"case":	57,
									"scores":	[-5.60905042009978]
								}, {
									"case":	58,
									"scores":	[-5.60905042009978]
								}, {
									"case":	59,
									"scores":	[-5.60905042009978]
								}, {
									"case":	60,
									"scores":	[-5.60905042009978]
								}, {
									"case":	61,
									"scores":	[-5.60905042009978]
								}, {
									"case":	62,
									"scores":	[-5.60905042009978]
								}, {
									"case":	63,
									"scores":	[-5.60905042009978]
								}, {
									"case":	64,
									"scores":	[-5.60905042009978]
								}, {
									"case":	65,
									"scores":	[-5.60905042009978]
								}, {
									"case":	66,
									"scores":	[-5.60905042009978]
								}, {
									"case":	67,
									"scores":	[-5.60905042009978]
								}, {
									"case":	68,
									"scores":	[-5.60905042009978]
								}, {
									"case":	69,
									"scores":	[-5.60905042009978]
								}, {
									"case":	70,
									"scores":	[-5.60905042009978]
								}, {
									"case":	71,
									"scores":	[-5.60905042009978]
								}, {
									"case":	72,
									"scores":	[-5.60905042009978]
								}, {
									"case":	73,
									"scores":	[-5.60905042009978]
								}, {
									"case":	74,
									"scores":	[-5.60905042009978]
								}, {
									"case":	75,
									"scores":	[-5.60905042009978]
								}, {
									"case":	76,
									"scores":	[-5.60905042009978]
								}, {
									"case":	77,
									"scores":	[-5.60905042009978]
								}, {
									"case":	78,
									"scores":	[-5.60905042009978]
								}, {
									"case":	79,
									"scores":	[-5.60905042009978]
								}, {
									"case":	80,
									"scores":	[-5.60905042009978]
								}, {
									"case":	81,
									"scores":	[-5.60905042009978]
								}, {
									"case":	82,
									"scores":	[-5.60905042009978]
								}, {
									"case":	83,
									"scores":	[-5.60905042009978]
								}, {
									"case":	84,
									"scores":	[-5.60905042009978]
								}, {
									"case":	85,
									"scores":	[-5.60905042009978]
								}, {
									"case":	86,
									"scores":	[-5.60905042009978]
								}, {
									"case":	87,
									"scores":	[-5.60905042009978]
								}, {
									"case":	88,
									"scores":	[-5.60905042009978]
								}, {
									"case":	89,
									"scores":	[-5.60905042009978]
								}, {
									"case":	90,
									"scores":	[-5.60905042009978]
								}, {
									"case":	91,
									"scores":	[-5.60905042009978]
								}, {
									"case":	92,
									"scores":	[-5.60905042009978]
								}, {
									"case":	93,
									"scores":	[-5.60905042009978]
								}, {
									"case":	94,
									"scores":	[-5.60905042009978]
								}, {
									"case":	95,
									"scores":	[-5.60905042009978]
								}, {
									"case":	96,
									"scores":	[-5.60905042009978]
								}, {
									"case":	97,
									"scores":	[-5.60905042009978]
								}, {
									"case":	98,
									"scores":	[-5.60905042009978]
								}, {
									"case":	99,
									"scores":	[-5.60905042009978]
								}, {
									"case":	100,
									"scores":	[-5.60905042009978]
								}, {
									"case":	101,
									"scores":	[-5.60905042009978]
								}, {
									"case":	102,
									"scores":	[-5.60905042009978]
								}, {
									"case":	103,
									"scores":	[-5.60905042009978]
								}, {
									"case":	104,
									"scores":	[-5.60905042009978]
								}, {
									"case":	105,
									"scores":	[-5.60905042009978]
								}, {
									"case":	106,
									"scores":	[-5.60905042009978]
								}, {
									"case":	107,
									"scores":	[-5.60905042009978]
								}, {
									"case":	108,
									"scores":	[-5.60905042009978]
								}, {
									"case":	109,
									"scores":	[-5.60905042009978]
								}, {
									"case":	110,
									"scores":	[-5.60905042009978]
								}, {
									"case":	111,
									"scores":	[-5.60905042009978]
								}, {
									"case":	112,
									"scores":	[-5.60905042009978]
								}, {
									"case":	113,
									"scores":	[-5.60905042009978]
								}, {
									"case":	114,
									"scores":	[-5.60905042009978]
								}, {
									"case":	115,
									"scores":	[-5.60905042009978]
								}, {
									"case":	116,
									"scores":	[-5.60905042009978]
								}, {
									"case":	117,
									"scores":	[-5.60905042009978]
								}, {
									"case":	118,
									"scores":	[-5.60905042009978]
								}, {
									"case":	119,
									"scores":	[-5.60905042009978]
								}, {
									"case":	120,
									"scores":	[-5.60905042009978]
								}, {
									"case":	121,
									"scores":	[-5.60905042009978]
								}, {
									"case":	122,
									"scores":	[-5.60905042009978]
								}, {
									"case":	123,
									"scores":	[-5.60905042009978]
								}, {
									"case":	124,
									"scores":	[-5.60905042009978]
								}, {
									"case":	125,
									"scores":	[-5.60905042009978]
								}, {
									"case":	126,
									"scores":	[-5.60905042009978]
								}, {
									"case":	127,
									"scores":	[-5.60905042009978]
								}, {
									"case":	128,
									"scores":	[-5.60905042009978]
								}, {
									"case":	129,
									"scores":	[-5.60905042009978]
								}, {
									"case":	130,
									"scores":	[-5.60905042009978]
								}, {
									"case":	131,
									"scores":	[-5.60905042009978]
								}, {
									"case":	132,
									"scores":	[-5.60905042009978]
								}, {
									"case":	133,
									"scores":	[-5.60905042009978]
								}, {
									"case":	134,
									"scores":	[-5.60905042009978]
								}, {
									"case":	135,
									"scores":	[-5.60905042009978]
								}, {
									"case":	136,
									"scores":	[-5.60905042009978]
								}, {
									"case":	137,
									"scores":	[-5.60905042009978]
								}, {
									"case":	138,
									"scores":	[-5.60905042009978]
								}, {
									"case":	139,
									"scores":	[-5.60905042009978]
								}, {
									"case":	140,
									"scores":	[-5.60905042009978]
								}, {
									"case":	141,
									"scores":	[-5.60905042009978]
								}, {
									"case":	142,
									"scores":	[-5.60905042009978]
								}, {
									"case":	143,
									"scores":	[-5.60905042009978]
								}, {
									"case":	144,
									"scores":	[-5.60905042009978]
								}, {
									"case":	145,
									"scores":	[-5.60905042009978]
								}, {
									"case":	146,
									"scores":	[-5.60905042009978]
								}, {
									"case":	147,
									"scores":	[-5.60905042009978]
								}, {
									"case":	148,
									"scores":	[-5.60905042009978]
								}, {
									"case":	149,
									"scores":	[-5.60905042009978]
								}, {
									"case":	150,
									"scores":	[-5.60905042009978]
								}, {
									"case":	151,
									"scores":	[-5.60905042009978]
								}, {
									"case":	152,
									"scores":	[-5.60905042009978]
								}, {
									"case":	153,
									"scores":	[-5.60905042009978]
								}, {
									"case":	154,
									"scores":	[-5.60905042009978]
								}, {
									"case":	155,
									"scores":	[-5.60905042009978]
								}, {
									"case":	156,
									"scores":	[-5.60905042009978]
								}, {
									"case":	157,
									"scores":	[-5.60905042009978]
								}, {
									"case":	158,
									"scores":	[-5.60905042009978]
								}, {
									"case":	159,
									"scores":	[-5.60905042009978]
								}, {
									"case":	160,
									"scores":	[-5.60905042009978]
								}, {
									"case":	161,
									"scores":	[-5.60905042009978]
								}, {
									"case":	162,
									"scores":	[-5.60905042009978]
								}, {
									"case":	163,
									"scores":	[-5.60905042009978]
								}, {
									"case":	164,
									"scores":	[-5.60905042009978]
								}, {
									"case":	165,
									"scores":	[-5.60905042009978]
								}, {
									"case":	166,
									"scores":	[-5.60905042009978]
								}, {
									"case":	167,
									"scores":	[-5.60905042009978]
								}, {
									"case":	168,
									"scores":	[-5.60905042009978]
								}, {
									"case":	169,
									"scores":	[-5.60905042009978]
								}, {
									"case":	170,
									"scores":	[-5.60905042009978]
								}, {
									"case":	171,
									"scores":	[-5.60905042009978]
								}, {
									"case":	172,
									"scores":	[-5.60905042009978]
								}, {
									"case":	173,
									"scores":	[-5.60905042009978]
								}, {
									"case":	174,
									"scores":	[-5.60905042009978]
								}, {
									"case":	175,
									"scores":	[-5.60905042009978]
								}, {
									"case":	176,
									"scores":	[-5.60905042009978]
								}, {
									"case":	177,
									"scores":	[-5.60905042009978]
								}, {
									"case":	178,
									"scores":	[-5.60905042009978]
								}, {
									"case":	179,
									"scores":	[-5.60905042009978]
								}, {
									"case":	180,
									"scores":	[-5.60905042009978]
								}, {
									"case":	181,
									"scores":	[-5.60905042009978]
								}, {
									"case":	182,
									"scores":	[-5.60905042009978]
								}, {
									"case":	183,
									"scores":	[-5.60905042009978]
								}, {
									"case":	184,
									"scores":	[-5.60905042009978]
								}, {
									"case":	185,
									"scores":	[-5.60905042009978]
								}, {
									"case":	186,
									"scores":	[-5.60905042009978]
								}, {
									"case":	187,
									"scores":	[-5.60905042009978]
								}, {
									"case":	188,
									"scores":	[-5.60905042009978]
								}, {
									"case":	189,
									"scores":	[-5.60905042009978]
								}, {
									"case":	190,
									"scores":	[-5.60905042009978]
								}, {
									"case":	191,
									"scores":	[-5.60905042009978]
								}, {
									"case":	192,
									"scores":	[-5.60905042009978]
								}, {
									"case":	193,
									"scores":	[-5.60905042009978]
								}, {
									"case":	194,
									"scores":	[-5.60905042009978]
								}, {
									"case":	195,
									"scores":	[-5.60905042009978]
								}, {
									"case":	196,
									"scores":	[-5.60905042009978]
								}, {
									"case":	197,
									"scores":	[-5.60905042009978]
								}, {
									"case":	198,
									"scores":	[-5.60905042009978]
								}, {
									"case":	199,
									"scores":	[-5.60905042009978]
								}, {
									"case":	200,
									"scores":	[-5.60905042009978]
								}, {
									"case":	201,
									"scores":	[-5.60905042009978]
								}, {
									"case":	202,
									"scores":	[-5.60905042009978]
								}, {
									"case":	203,
									"scores":	[-5.60905042009978]
								}, {
									"case":	204,
									"scores":	[-5.60905042009978]
								}, {
									"case":	205,
									"scores":	[-5.60905042009978]
								}, {
									"case":	206,
									"scores":	[-5.60905042009978]
								}, {
									"case":	207,
									"scores":	[-5.60905042009978]
								}, {
									"case":	208,
									"scores":	[-5.60905042009978]
								}, {
									"case":	209,
									"scores":	[-5.60905042009978]
								}, {
									"case":	210,
									"scores":	[-5.60905042009978]
								}, {
									"case":	211,
									"scores":	[-5.60905042009978]
								}, {
									"case":	212,
									"scores":	[-5.60905042009978]
								}, {
									"case":	213,
									"scores":	[-5.60905042009978]
								}, {
									"case":	214,
									"scores":	[-5.60905042009978]
								}, {
									"case":	215,
									"scores":	[-5.60905042009978]
								}, {
									"case":	216,
									"scores":	[-5.60905042009978]
								}, {
									"case":	217,
									"scores":	[-5.60905042009978]
								}, {
									"case":	218,
									"scores":	[-5.60905042009978]
								}, {
									"case":	219,
									"scores":	[-5.60905042009978]
								}, {
									"case":	220,
									"scores":	[-5.60905042009978]
								}, {
									"case":	221,
									"scores":	[-5.60905042009978]
								}, {
									"case":	222,
									"scores":	[-5.60905042009978]
								}, {
									"case":	223,
									"scores":	[-5.60905042009978]
								}, {
									"case":	224,
									"scores":	[-5.60905042009978]
								}, {
									"case":	225,
									"scores":	[-5.60905042009978]
								}, {
									"case":	226,
									"scores":	[-5.60905042009978]
								}, {
									"case":	227,
									"scores":	[-5.60905042009978]
								}, {
									"case":	228,
									"scores":	[-5.60905042009978]
								}, {
									"case":	229,
									"scores":	[-5.60905042009978]
								}, {
									"case":	230,
									"scores":	[-5.60905042009978]
								}, {
									"case":	231,
									"scores":	[-5.60905042009978]
								}, {
									"case":	232,
									"scores":	[-5.60905042009978]
								}, {
									"case":	233,
									"scores":	[-5.60905042009978]
								}, {
									"case":	234,
									"scores":	[-5.60905042009978]
								}, {
									"case":	235,
									"scores":	[-5.60905042009978]
								}, {
									"case":	236,
									"scores":	[-5.60905042009978]
								}, {
									"case":	237,
									"scores":	[-5.60905042009978]
								}, {
									"case":	238,
									"scores":	[-5.60905042009978]
								}, {
									"case":	239,
									"scores":	[-5.60905042009978]
								}, {
									"case":	240,
									"scores":	[-5.60905042009978]
								}, {
									"case":	241,
									"scores":	[-5.60905042009978]
								}, {
									"case":	242,
									"scores":	[-5.60905042009978]
								}, {
									"case":	243,
									"scores":	[-5.60905042009978]
								}, {
									"case":	244,
									"scores":	[-5.60905042009978]
								}, {
									"case":	245,
									"scores":	[-5.60905042009978]
								}, {
									"case":	246,
									"scores":	[-5.60905042009978]
								}, {
									"case":	247,
									"scores":	[-5.60905042009978]
								}, {
									"case":	248,
									"scores":	[-5.60905042009978]
								}, {
									"case":	249,
									"scores":	[-5.60905042009978]
								}, {
									"case":	250,
									"scores":	[-5.60905042009978]
								}, {
									"case":	251,
									"scores":	[-5.60905042009978]
								}, {
									"case":	252,
									"scores":	[-5.60905042009978]
								}, {
									"case":	253,
									"scores":	[-5.60905042009978]
								}, {
									"case":	254,
									"scores":	[-5.60905042009978]
								}, {
									"case":	255,
									"scores":	[-5.60905042009978]
								}, {
									"case":	256,
									"scores":	[-5.60905042009978]
								}, {
									"case":	257,
									"scores":	[-5.60905042009978]
								}, {
									"case":	258,
									"scores":	[-5.60905042009978]
								}, {
									"case":	259,
									"scores":	[-5.60905042009978]
								}, {
									"case":	260,
									"scores":	[-5.60905042009978]
								}, {
									"case":	261,
									"scores":	[-5.60905042009978]
								}, {
									"case":	262,
									"scores":	[-5.60905042009978]
								}, {
									"case":	263,
									"scores":	[-5.60905042009978]
								}, {
									"case":	264,
									"scores":	[-5.60905042009978]
								}, {
									"case":	265,
									"scores":	[-5.60905042009978]
								}, {
									"case":	266,
									"scores":	[-5.60905042009978]
								}, {
									"case":	267,
									"scores":	[-5.60905042009978]
								}, {
									"case":	268,
									"scores":	[-5.60905042009978]
								}, {
									"case":	269,
									"scores":	[-5.60905042009978]
								}, {
									"case":	270,
									"scores":	[-5.60905042009978]
								}, {
									"case":	271,
									"scores":	[-5.60905042009978]
								}, {
									"case":	272,
									"scores":	[-5.60905042009978]
								}, {
									"case":	273,
									"scores":	[-5.60905042009978]
								}, {
									"case":	274,
									"scores":	[-5.60905042009978]
								}, {
									"case":	275,
									"scores":	[-5.60905042009978]
								}, {
									"case":	276,
									"scores":	[-5.60905042009978]
								}, {
									"case":	277,
									"scores":	[-5.60905042009978]
								}, {
									"case":	278,
									"scores":	[-5.60905042009978]
								}, {
									"case":	279,
									"scores":	[-5.60905042009978]
								}, {
									"case":	280,
									"scores":	[-5.60905042009978]
								}, {
									"case":	281,
									"scores":	[-5.60905042009978]
								}, {
									"case":	282,
									"scores":	[-5.60905042009978]
								}, {
									"case":	283,
									"scores":	[-5.60905042009978]
								}, {
									"case":	284,
									"scores":	[-5.60905042009978]
								}, {
									"case":	285,
									"scores":	[-5.60905042009978]
								}, {
									"case":	286,
									"scores":	[-5.60905042009978]
								}, {
									"case":	287,
									"scores":	[-5.60905042009978]
								}, {
									"case":	288,
									"scores":	[-5.60905042009978]
								}, {
									"case":	289,
									"scores":	[-5.60905042009978]
								}, {
									"case":	290,
									"scores":	[-5.60905042009978]
								}, {
									"case":	291,
									"scores":	[-5.60905042009978]
								}, {
									"case":	292,
									"scores":	[-5.60905042009978]
								}, {
									"case":	293,
									"scores":	[-5.60905042009978]
								}, {
									"case":	294,
									"scores":	[-5.60905042009978]
								}, {
									"case":	295,
									"scores":	[-5.60905042009978]
								}, {
									"case":	296,
									"scores":	[-5.60905042009978]
								}, {
									"case":	297,
									"scores":	[-5.60905042009978]
								}, {
									"case":	298,
									"scores":	[-5.60905042009978]
								}, {
									"case":	299,
									"scores":	[-5.60905042009978]
								}, {
									"case":	300,
									"scores":	[-5.60905042009978]
								}, {
									"case":	301,
									"scores":	[-5.60905042009978]
								}, {
									"case":	302,
									"scores":	[-5.60905042009978]
								}, {
									"case":	303,
									"scores":	[-5.60905042009978]
								}, {
									"case":	304,
									"scores":	[-5.60905042009978]
								}, {
									"case":	305,
									"scores":	[-5.60905042009978]
								}, {
									"case":	306,
									"scores":	[-5.60905042009978]
								}, {
									"case":	307,
									"scores":	[-5.60905042009978]
								}, {
									"case":	308,
									"scores":	[-5.60905042009978]
								}, {
									"case":	309,
									"scores":	[-5.60905042009978]
								}, {
									"case":	310,
									"scores":	[-5.60905042009978]
								}, {
									"case":	311,
									"scores":	[-5.60905042009978]
								}, {
									"case":	312,
									"scores":	[-5.60905042009978]
								}, {
									"case":	313,
									"scores":	[-5.60905042009978]
								}, {
									"case":	314,
									"scores":	[-5.60905042009978]
								}, {
									"case":	315,
									"scores":	[-5.60905042009978]
								}, {
									"case":	316,
									"scores":	[-5.60905042009978]
								}, {
									"case":	317,
									"scores":	[-5.60905042009978]
								}, {
									"case":	318,
									"scores":	[-5.60905042009978]
								}, {
									"case":	319,
									"scores":	[-5.60905042009978]
								}, {
									"case":	320,
									"scores":	[-5.60905042009978]
								}, {
									"case":	321,
									"scores":	[-5.60905042009978]
								}, {
									"case":	322,
									"scores":	[-5.60905042009978]
								}, {
									"case":	323,
									"scores":	[-5.60905042009978]
								}, {
									"case":	324,
									"scores":	[-5.60905042009978]
								}, {
									"case":	325,
									"scores":	[-5.60905042009978]
								}, {
									"case":	326,
									"scores":	[-5.60905042009978]
								}, {
									"case":	327,
									"scores":	[-5.60905042009978]
								}, {
									"case":	328,
									"scores":	[-5.60905042009978]
								}, {
									"case":	329,
									"scores":	[-5.60905042009978]
								}, {
									"case":	330,
									"scores":	[-5.60905042009978]
								}, {
									"case":	331,
									"scores":	[-5.60905042009978]
								}, {
									"case":	332,
									"scores":	[-5.60905042009978]
								}, {
									"case":	333,
									"scores":	[-5.60905042009978]
								}, {
									"case":	334,
									"scores":	[-5.60905042009978]
								}, {
									"case":	335,
									"scores":	[-5.60905042009978]
								}, {
									"case":	336,
									"scores":	[-5.60905042009978]
								}, {
									"case":	337,
									"scores":	[-5.60905042009978]
								}, {
									"case":	338,
									"scores":	[-5.60905042009978]
								}, {
									"case":	339,
									"scores":	[-5.60905042009978]
								}, {
									"case":	340,
									"scores":	[-5.60905042009978]
								}, {
									"case":	341,
									"scores":	[-5.60905042009978]
								}, {
									"case":	342,
									"scores":	[-5.60905042009978]
								}, {
									"case":	343,
									"scores":	[-5.60905042009978]
								}, {
									"case":	344,
									"scores":	[-5.60905042009978]
								}, {
									"case":	345,
									"scores":	[-5.60905042009978]
								}, {
									"case":	346,
									"scores":	[-5.60905042009978]
								}, {
									"case":	347,
									"scores":	[-5.60905042009978]
								}, {
									"case":	348,
									"scores":	[-5.60905042009978]
								}, {
									"case":	349,
									"scores":	[-5.60905042009978]
								}, {
									"case":	350,
									"scores":	[-5.60905042009978]
								}, {
									"case":	351,
									"scores":	[-5.60905042009978]
								}, {
									"case":	352,
									"scores":	[-5.60905042009978]
								}, {
									"case":	353,
									"scores":	[-5.60905042009978]
								}, {
									"case":	354,
									"scores":	[-5.60905042009978]
								}, {
									"case":	355,
									"scores":	[-5.60905042009978]
								}, {
									"case":	356,
									"scores":	[-5.60905042009978]
								}, {
									"case":	357,
									"scores":	[-5.60905042009978]
								}, {
									"case":	358,
									"scores":	[-5.60905042009978]
								}, {
									"case":	359,
									"scores":	[-5.60905042009978]
								}, {
									"case":	360,
									"scores":	[-5.60905042009978]
								}, {
									"case":	361,
									"scores":	[-5.60905042009978]
								}, {
									"case":	362,
									"scores":	[-5.60905042009978]
								}, {
									"case":	363,
									"scores":	[-5.60905042009978]
								}, {
									"case":	364,
									"scores":	[-5.60905042009978]
								}, {
									"case":	365,
									"scores":	[-5.60905042009978]
								}, {
									"case":	366,
									"scores":	[-5.60905042009978]
								}, {
									"case":	367,
									"scores":	[-5.60905042009978]
								}, {
									"case":	368,
									"scores":	[-5.60905042009978]
								}, {
									"case":	369,
									"scores":	[-5.60905042009978]
								}, {
									"case":	370,
									"scores":	[-5.60905042009978]
								}, {
									"case":	371,
									"scores":	[-5.60905042009978]
								}, {
									"case":	372,
									"scores":	[-5.60905042009978]
								}, {
									"case":	373,
									"scores":	[-5.60905042009978]
								}, {
									"case":	374,
									"scores":	[-5.60905042009978]
								}, {
									"case":	375,
									"scores":	[-5.60905042009978]
								}, {
									"case":	376,
									"scores":	[-5.60905042009978]
								}, {
									"case":	377,
									"scores":	[-5.60905042009978]
								}, {
									"case":	378,
									"scores":	[-5.60905042009978]
								}, {
									"case":	379,
									"scores":	[-5.60905042009978]
								}, {
									"case":	380,
									"scores":	[-5.60905042009978]
								}, {
									"case":	381,
									"scores":	[-5.60905042009978]
								}, {
									"case":	382,
									"scores":	[-5.60905042009978]
								}, {
									"case":	383,
									"scores":	[-5.60905042009978]
								}, {
									"case":	384,
									"scores":	[-5.60905042009978]
								}, {
									"case":	385,
									"scores":	[-5.60905042009978]
								}, {
									"case":	386,
									"scores":	[-5.60905042009978]
								}, {
									"case":	387,
									"scores":	[-5.60905042009978]
								}, {
									"case":	388,
									"scores":	[-5.60905042009978]
								}, {
									"case":	389,
									"scores":	[-8.24695704219978, -8.92905386919978, -8.38203166849978, -8.74635935149978, -8.41452825129978, -6.58020648949978, -8.11477399129978, -8.07767359129978, -8.07767359129978, -7.86873507749978, -8.11477399129978, -8.33674579929978, -8.33674579929978, -8.89181976529978, -8.64578085149978, -8.64578085149978, -8.64578085149978, -8.64578085149978, -8.64578085149978, -8.64578085149978, -8.64578085149978, -8.85666996849978, -8.89181976529978, -8.64578085149978, -8.64578085149978, -8.64578085149978, -8.64578085149978, -8.64578085149978, -8.64578085149978, -8.64578085149978, -8.64578085149978, -8.64578085149978]
								}]
						}, {
							"switch":	36,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2868,
							"begin_column":	2,
							"end_line":	2868,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L2868\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(return_value), sizeof (return_value), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->have_relative = 1;\n", "{\n}\n", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0 * bias)", "dateobj->time->have_relative = (0 * ht)", "dateobj->time->have_relative = (0 * return_value_used)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->have_relative = (bias != 0)", "dateobj->time->have_relative = (bias * ht)", "dateobj->time->have_relative = (bias * return_value_used)", "dateobj->time->have_relative = (bias + 0)", "dateobj->time->have_relative = (bias - 0)", "dateobj->time->have_relative = (bias == 0)", "dateobj->time->have_relative = (dateobj != 0)", "dateobj->time->have_relative = (dateobj == 0)", "dateobj->time->have_relative = (ht != 0)", "dateobj->time->have_relative = (ht != bias)", "dateobj->time->have_relative = (ht != return_value_used)", "dateobj->time->have_relative = (ht * bias)", "dateobj->time->have_relative = (ht * return_value_used)", "dateobj->time->have_relative = (ht + 0)", "dateobj->time->have_relative = (ht + bias)", "dateobj->time->have_relative = (ht + return_value_used)", "dateobj->time->have_relative = (ht - 0)", "dateobj->time->have_relative = (ht - bias)", "dateobj->time->have_relative = (ht - return_value_used)", "dateobj->time->have_relative = (ht == 0)", "dateobj->time->have_relative = (ht == bias)", "dateobj->time->have_relative = (ht == return_value_used)", "dateobj->time->have_relative = (interval != 0)", "dateobj->time->have_relative = (interval == 0)", "dateobj->time->have_relative = (intobj != 0)", "dateobj->time->have_relative = (intobj == 0)", "dateobj->time->have_relative = (object != 0)", "dateobj->time->have_relative = (object != interval)", "dateobj->time->have_relative = (object == 0)", "dateobj->time->have_relative = (object == interval)", "dateobj->time->have_relative = (return_value != 0)", "dateobj->time->have_relative = (return_value != interval)", "dateobj->time->have_relative = (return_value != object)", "dateobj->time->have_relative = (return_value != this_ptr)", "dateobj->time->have_relative = (return_value == 0)", "dateobj->time->have_relative = (return_value == interval)", "dateobj->time->have_relative = (return_value == object)", "dateobj->time->have_relative = (return_value == this_ptr)", "dateobj->time->have_relative = (return_value_ptr != 0)", "dateobj->time->have_relative = (return_value_ptr == 0)", "dateobj->time->have_relative = (return_value_used != 0)", "dateobj->time->have_relative = (return_value_used != bias)", "dateobj->time->have_relative = (return_value_used * bias)", "dateobj->time->have_relative = (return_value_used * ht)", "dateobj->time->have_relative = (return_value_used + 0)", "dateobj->time->have_relative = (return_value_used + bias)", "dateobj->time->have_relative = (return_value_used - 0)", "dateobj->time->have_relative = (return_value_used - bias)", "dateobj->time->have_relative = (return_value_used == 0)", "dateobj->time->have_relative = (return_value_used == bias)", "dateobj->time->have_relative = (this_ptr != 0)", "dateobj->time->have_relative = (this_ptr != interval)", "dateobj->time->have_relative = (this_ptr != object)", "dateobj->time->have_relative = (this_ptr == 0)", "dateobj->time->have_relative = (this_ptr == interval)", "dateobj->time->have_relative = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.52879608849978, -6.92208909749978, -6.92175142109978, -6.96003825509978, -6.33356448059978, -5.65467371209978, -6.67241699009978, -6.37806619009978, -6.37806619009978, -5.91452889009978, -6.67241699009978, -6.69512133009978, -6.69512133009978, -6.90291100009978, -6.14502290009978, -6.14502290009978, -6.14502290009978, -6.14502290009978, -6.14502290009978, -6.14502290009978, -6.14502290009978, -6.61428290009978, -6.90291100009978, -6.14502290009978, -6.14502290009978, -6.14502290009978, -6.14502290009978, -6.14502290009978, -6.14502290009978, -6.14502290009978, -6.14502290009978, -6.14502290009978]
								}, {
									"case":	2,
									"scores":	[-5.60905042009978]
								}, {
									"case":	3,
									"scores":	[-5.60905042009978]
								}, {
									"case":	4,
									"scores":	[-5.60905042009978]
								}, {
									"case":	5,
									"scores":	[-5.60905042009978]
								}, {
									"case":	6,
									"scores":	[-5.60905042009978]
								}, {
									"case":	7,
									"scores":	[-5.60905042009978]
								}, {
									"case":	8,
									"scores":	[-5.60905042009978]
								}, {
									"case":	9,
									"scores":	[-5.60905042009978]
								}, {
									"case":	10,
									"scores":	[-5.60905042009978]
								}, {
									"case":	11,
									"scores":	[-5.60905042009978]
								}, {
									"case":	12,
									"scores":	[-5.60905042009978]
								}, {
									"case":	13,
									"scores":	[-5.60905042009978]
								}, {
									"case":	14,
									"scores":	[-5.60905042009978]
								}, {
									"case":	15,
									"scores":	[-5.60905042009978]
								}, {
									"case":	16,
									"scores":	[-5.60905042009978]
								}, {
									"case":	17,
									"scores":	[-5.60905042009978]
								}, {
									"case":	18,
									"scores":	[-5.60905042009978]
								}, {
									"case":	19,
									"scores":	[-5.60905042009978]
								}, {
									"case":	20,
									"scores":	[-5.60905042009978]
								}, {
									"case":	21,
									"scores":	[-5.60905042009978]
								}, {
									"case":	22,
									"scores":	[-5.60905042009978]
								}, {
									"case":	23,
									"scores":	[-5.60905042009978]
								}, {
									"case":	24,
									"scores":	[-5.60905042009978]
								}, {
									"case":	25,
									"scores":	[-5.60905042009978]
								}, {
									"case":	26,
									"scores":	[-5.60905042009978]
								}, {
									"case":	27,
									"scores":	[-5.60905042009978]
								}, {
									"case":	28,
									"scores":	[-5.60905042009978]
								}, {
									"case":	29,
									"scores":	[-5.60905042009978]
								}, {
									"case":	30,
									"scores":	[-5.60905042009978]
								}, {
									"case":	31,
									"scores":	[-5.60905042009978]
								}, {
									"case":	32,
									"scores":	[-5.60905042009978]
								}, {
									"case":	33,
									"scores":	[-5.60905042009978]
								}, {
									"case":	34,
									"scores":	[-5.60905042009978]
								}, {
									"case":	35,
									"scores":	[-5.60905042009978]
								}, {
									"case":	36,
									"scores":	[-5.60905042009978]
								}, {
									"case":	37,
									"scores":	[-5.60905042009978]
								}, {
									"case":	38,
									"scores":	[-5.60905042009978]
								}, {
									"case":	39,
									"scores":	[-5.60905042009978]
								}, {
									"case":	40,
									"scores":	[-5.60905042009978]
								}, {
									"case":	41,
									"scores":	[-5.60905042009978]
								}, {
									"case":	42,
									"scores":	[-5.60905042009978]
								}, {
									"case":	43,
									"scores":	[-5.60905042009978]
								}, {
									"case":	44,
									"scores":	[-5.60905042009978]
								}, {
									"case":	45,
									"scores":	[-5.60905042009978]
								}, {
									"case":	46,
									"scores":	[-5.60905042009978]
								}, {
									"case":	47,
									"scores":	[-5.60905042009978]
								}, {
									"case":	48,
									"scores":	[-5.60905042009978]
								}, {
									"case":	49,
									"scores":	[-5.60905042009978]
								}, {
									"case":	50,
									"scores":	[-5.60905042009978]
								}, {
									"case":	51,
									"scores":	[-5.60905042009978]
								}, {
									"case":	52,
									"scores":	[-5.60905042009978]
								}, {
									"case":	53,
									"scores":	[-5.60905042009978]
								}, {
									"case":	54,
									"scores":	[-5.60905042009978]
								}, {
									"case":	55,
									"scores":	[-5.60905042009978]
								}, {
									"case":	56,
									"scores":	[-5.60905042009978]
								}, {
									"case":	57,
									"scores":	[-5.60905042009978]
								}, {
									"case":	58,
									"scores":	[-5.60905042009978]
								}, {
									"case":	59,
									"scores":	[-5.60905042009978]
								}, {
									"case":	60,
									"scores":	[-5.60905042009978]
								}, {
									"case":	61,
									"scores":	[-5.60905042009978]
								}, {
									"case":	62,
									"scores":	[-5.60905042009978]
								}, {
									"case":	63,
									"scores":	[-5.60905042009978]
								}, {
									"case":	64,
									"scores":	[-5.60905042009978]
								}, {
									"case":	65,
									"scores":	[-5.60905042009978]
								}, {
									"case":	66,
									"scores":	[-5.60905042009978]
								}]
						}]
				}, {
					"line":	2868,
					"switches":	[{
							"switch":	37,
							"types":	[[], [], [], [], [389], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	2869,
							"begin_column":	0,
							"end_line":	2869,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2869\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(return_value), sizeof (return_value), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.58884771278226]
								}, {
									"case":	2,
									"scores":	[-5.58884771278226]
								}, {
									"case":	3,
									"scores":	[-5.58884771278226]
								}, {
									"case":	4,
									"scores":	[-5.58884771278226]
								}, {
									"case":	5,
									"scores":	[-5.58884771278226]
								}, {
									"case":	6,
									"scores":	[-5.58884771278226]
								}, {
									"case":	7,
									"scores":	[-5.58884771278226]
								}, {
									"case":	8,
									"scores":	[-5.58884771278226]
								}, {
									"case":	9,
									"scores":	[-5.58884771278226]
								}, {
									"case":	10,
									"scores":	[-5.58884771278226]
								}, {
									"case":	11,
									"scores":	[-5.58884771278226]
								}, {
									"case":	12,
									"scores":	[-5.58884771278226]
								}, {
									"case":	13,
									"scores":	[-5.58884771278226]
								}, {
									"case":	14,
									"scores":	[-5.58884771278226]
								}, {
									"case":	15,
									"scores":	[-5.58884771278226]
								}, {
									"case":	16,
									"scores":	[-5.58884771278226]
								}, {
									"case":	17,
									"scores":	[-5.58884771278226]
								}, {
									"case":	18,
									"scores":	[-5.58884771278226]
								}, {
									"case":	19,
									"scores":	[-5.58884771278226]
								}, {
									"case":	20,
									"scores":	[-5.58884771278226]
								}, {
									"case":	21,
									"scores":	[-5.58884771278226]
								}, {
									"case":	22,
									"scores":	[-5.58884771278226]
								}, {
									"case":	23,
									"scores":	[-5.58884771278226]
								}, {
									"case":	24,
									"scores":	[-5.58884771278226]
								}, {
									"case":	25,
									"scores":	[-5.58884771278226]
								}, {
									"case":	26,
									"scores":	[-5.58884771278226]
								}, {
									"case":	27,
									"scores":	[-5.58884771278226]
								}, {
									"case":	28,
									"scores":	[-5.58884771278226]
								}, {
									"case":	29,
									"scores":	[-5.58884771278226]
								}, {
									"case":	30,
									"scores":	[-5.58884771278226]
								}, {
									"case":	31,
									"scores":	[-5.58884771278226]
								}, {
									"case":	32,
									"scores":	[-5.58884771278226]
								}, {
									"case":	33,
									"scores":	[-5.58884771278226]
								}, {
									"case":	34,
									"scores":	[-5.58884771278226]
								}, {
									"case":	35,
									"scores":	[-5.58884771278226]
								}, {
									"case":	36,
									"scores":	[-5.58884771278226]
								}, {
									"case":	37,
									"scores":	[-5.58884771278226]
								}, {
									"case":	38,
									"scores":	[-5.58884771278226]
								}, {
									"case":	39,
									"scores":	[-5.58884771278226]
								}, {
									"case":	40,
									"scores":	[-5.58884771278226]
								}, {
									"case":	41,
									"scores":	[-5.58884771278226]
								}, {
									"case":	42,
									"scores":	[-5.58884771278226]
								}, {
									"case":	43,
									"scores":	[-5.58884771278226]
								}, {
									"case":	44,
									"scores":	[-5.58884771278226]
								}, {
									"case":	45,
									"scores":	[-5.58884771278226]
								}, {
									"case":	46,
									"scores":	[-5.58884771278226]
								}, {
									"case":	47,
									"scores":	[-5.58884771278226]
								}, {
									"case":	48,
									"scores":	[-5.58884771278226]
								}, {
									"case":	49,
									"scores":	[-5.58884771278226]
								}, {
									"case":	50,
									"scores":	[-5.58884771278226]
								}, {
									"case":	51,
									"scores":	[-5.58884771278226]
								}, {
									"case":	52,
									"scores":	[-5.58884771278226]
								}, {
									"case":	53,
									"scores":	[-5.58884771278226]
								}, {
									"case":	54,
									"scores":	[-5.58884771278226]
								}, {
									"case":	55,
									"scores":	[-5.58884771278226]
								}, {
									"case":	56,
									"scores":	[-5.58884771278226]
								}, {
									"case":	57,
									"scores":	[-5.58884771278226]
								}, {
									"case":	58,
									"scores":	[-5.58884771278226]
								}, {
									"case":	59,
									"scores":	[-5.58884771278226]
								}, {
									"case":	60,
									"scores":	[-5.58884771278226]
								}, {
									"case":	61,
									"scores":	[-5.58884771278226]
								}, {
									"case":	62,
									"scores":	[-5.58884771278226]
								}, {
									"case":	63,
									"scores":	[-5.58884771278226]
								}, {
									"case":	64,
									"scores":	[-5.58884771278226]
								}, {
									"case":	65,
									"scores":	[-5.58884771278226]
								}, {
									"case":	66,
									"scores":	[-5.58884771278226]
								}, {
									"case":	67,
									"scores":	[-5.58884771278226]
								}, {
									"case":	68,
									"scores":	[-5.58884771278226]
								}, {
									"case":	69,
									"scores":	[-5.58884771278226]
								}, {
									"case":	70,
									"scores":	[-5.58884771278226]
								}, {
									"case":	71,
									"scores":	[-5.58884771278226]
								}, {
									"case":	72,
									"scores":	[-5.58884771278226]
								}, {
									"case":	73,
									"scores":	[-5.58884771278226]
								}, {
									"case":	74,
									"scores":	[-5.58884771278226]
								}, {
									"case":	75,
									"scores":	[-5.58884771278226]
								}, {
									"case":	76,
									"scores":	[-5.58884771278226]
								}, {
									"case":	77,
									"scores":	[-5.58884771278226]
								}, {
									"case":	78,
									"scores":	[-5.58884771278226]
								}, {
									"case":	79,
									"scores":	[-5.58884771278226]
								}, {
									"case":	80,
									"scores":	[-5.58884771278226]
								}, {
									"case":	81,
									"scores":	[-5.58884771278226]
								}, {
									"case":	82,
									"scores":	[-5.58884771278226]
								}, {
									"case":	83,
									"scores":	[-5.58884771278226]
								}, {
									"case":	84,
									"scores":	[-5.58884771278226]
								}, {
									"case":	85,
									"scores":	[-5.58884771278226]
								}, {
									"case":	86,
									"scores":	[-5.58884771278226]
								}, {
									"case":	87,
									"scores":	[-5.58884771278226]
								}, {
									"case":	88,
									"scores":	[-5.58884771278226]
								}, {
									"case":	89,
									"scores":	[-5.58884771278226]
								}, {
									"case":	90,
									"scores":	[-5.58884771278226]
								}, {
									"case":	91,
									"scores":	[-5.58884771278226]
								}, {
									"case":	92,
									"scores":	[-5.58884771278226]
								}, {
									"case":	93,
									"scores":	[-5.58884771278226]
								}, {
									"case":	94,
									"scores":	[-5.58884771278226]
								}, {
									"case":	95,
									"scores":	[-5.58884771278226]
								}, {
									"case":	96,
									"scores":	[-5.58884771278226]
								}, {
									"case":	97,
									"scores":	[-5.58884771278226]
								}, {
									"case":	98,
									"scores":	[-5.58884771278226]
								}, {
									"case":	99,
									"scores":	[-5.58884771278226]
								}, {
									"case":	100,
									"scores":	[-5.58884771278226]
								}, {
									"case":	101,
									"scores":	[-5.58884771278226]
								}, {
									"case":	102,
									"scores":	[-5.58884771278226]
								}, {
									"case":	103,
									"scores":	[-5.58884771278226]
								}, {
									"case":	104,
									"scores":	[-5.58884771278226]
								}, {
									"case":	105,
									"scores":	[-5.58884771278226]
								}, {
									"case":	106,
									"scores":	[-5.58884771278226]
								}, {
									"case":	107,
									"scores":	[-5.58884771278226]
								}, {
									"case":	108,
									"scores":	[-5.58884771278226]
								}, {
									"case":	109,
									"scores":	[-5.58884771278226]
								}, {
									"case":	110,
									"scores":	[-5.58884771278226]
								}, {
									"case":	111,
									"scores":	[-5.58884771278226]
								}, {
									"case":	112,
									"scores":	[-5.58884771278226]
								}, {
									"case":	113,
									"scores":	[-5.58884771278226]
								}, {
									"case":	114,
									"scores":	[-5.58884771278226]
								}, {
									"case":	115,
									"scores":	[-5.58884771278226]
								}, {
									"case":	116,
									"scores":	[-5.58884771278226]
								}, {
									"case":	117,
									"scores":	[-5.58884771278226]
								}, {
									"case":	118,
									"scores":	[-5.58884771278226]
								}, {
									"case":	119,
									"scores":	[-5.58884771278226]
								}, {
									"case":	120,
									"scores":	[-5.58884771278226]
								}, {
									"case":	121,
									"scores":	[-5.58884771278226]
								}, {
									"case":	122,
									"scores":	[-5.58884771278226]
								}, {
									"case":	123,
									"scores":	[-5.58884771278226]
								}, {
									"case":	124,
									"scores":	[-5.58884771278226]
								}, {
									"case":	125,
									"scores":	[-5.58884771278226]
								}, {
									"case":	126,
									"scores":	[-5.58884771278226]
								}, {
									"case":	127,
									"scores":	[-5.58884771278226]
								}, {
									"case":	128,
									"scores":	[-5.58884771278226]
								}, {
									"case":	129,
									"scores":	[-5.58884771278226]
								}, {
									"case":	130,
									"scores":	[-5.58884771278226]
								}, {
									"case":	131,
									"scores":	[-5.58884771278226]
								}, {
									"case":	132,
									"scores":	[-5.58884771278226]
								}, {
									"case":	133,
									"scores":	[-5.58884771278226]
								}, {
									"case":	134,
									"scores":	[-5.58884771278226]
								}, {
									"case":	135,
									"scores":	[-5.58884771278226]
								}, {
									"case":	136,
									"scores":	[-5.58884771278226]
								}, {
									"case":	137,
									"scores":	[-5.58884771278226]
								}, {
									"case":	138,
									"scores":	[-5.58884771278226]
								}, {
									"case":	139,
									"scores":	[-5.58884771278226]
								}, {
									"case":	140,
									"scores":	[-5.58884771278226]
								}, {
									"case":	141,
									"scores":	[-5.58884771278226]
								}, {
									"case":	142,
									"scores":	[-5.58884771278226]
								}, {
									"case":	143,
									"scores":	[-5.58884771278226]
								}, {
									"case":	144,
									"scores":	[-5.58884771278226]
								}, {
									"case":	145,
									"scores":	[-5.58884771278226]
								}, {
									"case":	146,
									"scores":	[-5.58884771278226]
								}, {
									"case":	147,
									"scores":	[-5.58884771278226]
								}, {
									"case":	148,
									"scores":	[-5.58884771278226]
								}, {
									"case":	149,
									"scores":	[-5.58884771278226]
								}, {
									"case":	150,
									"scores":	[-5.58884771278226]
								}, {
									"case":	151,
									"scores":	[-5.58884771278226]
								}, {
									"case":	152,
									"scores":	[-5.58884771278226]
								}, {
									"case":	153,
									"scores":	[-5.58884771278226]
								}, {
									"case":	154,
									"scores":	[-5.58884771278226]
								}, {
									"case":	155,
									"scores":	[-5.58884771278226]
								}, {
									"case":	156,
									"scores":	[-5.58884771278226]
								}, {
									"case":	157,
									"scores":	[-5.58884771278226]
								}, {
									"case":	158,
									"scores":	[-5.58884771278226]
								}, {
									"case":	159,
									"scores":	[-5.58884771278226]
								}, {
									"case":	160,
									"scores":	[-5.58884771278226]
								}, {
									"case":	161,
									"scores":	[-5.58884771278226]
								}, {
									"case":	162,
									"scores":	[-5.58884771278226]
								}, {
									"case":	163,
									"scores":	[-5.58884771278226]
								}, {
									"case":	164,
									"scores":	[-5.58884771278226]
								}, {
									"case":	165,
									"scores":	[-5.58884771278226]
								}, {
									"case":	166,
									"scores":	[-5.58884771278226]
								}, {
									"case":	167,
									"scores":	[-5.58884771278226]
								}, {
									"case":	168,
									"scores":	[-5.58884771278226]
								}, {
									"case":	169,
									"scores":	[-5.58884771278226]
								}, {
									"case":	170,
									"scores":	[-5.58884771278226]
								}, {
									"case":	171,
									"scores":	[-5.58884771278226]
								}, {
									"case":	172,
									"scores":	[-5.58884771278226]
								}, {
									"case":	173,
									"scores":	[-5.58884771278226]
								}, {
									"case":	174,
									"scores":	[-5.58884771278226]
								}, {
									"case":	175,
									"scores":	[-5.58884771278226]
								}, {
									"case":	176,
									"scores":	[-5.58884771278226]
								}, {
									"case":	177,
									"scores":	[-5.58884771278226]
								}, {
									"case":	178,
									"scores":	[-5.58884771278226]
								}, {
									"case":	179,
									"scores":	[-5.58884771278226]
								}, {
									"case":	180,
									"scores":	[-5.58884771278226]
								}, {
									"case":	181,
									"scores":	[-5.58884771278226]
								}, {
									"case":	182,
									"scores":	[-5.58884771278226]
								}, {
									"case":	183,
									"scores":	[-5.58884771278226]
								}, {
									"case":	184,
									"scores":	[-5.58884771278226]
								}, {
									"case":	185,
									"scores":	[-5.58884771278226]
								}, {
									"case":	186,
									"scores":	[-5.58884771278226]
								}, {
									"case":	187,
									"scores":	[-5.58884771278226]
								}, {
									"case":	188,
									"scores":	[-5.58884771278226]
								}, {
									"case":	189,
									"scores":	[-5.58884771278226]
								}, {
									"case":	190,
									"scores":	[-5.58884771278226]
								}, {
									"case":	191,
									"scores":	[-5.58884771278226]
								}, {
									"case":	192,
									"scores":	[-5.58884771278226]
								}, {
									"case":	193,
									"scores":	[-5.58884771278226]
								}, {
									"case":	194,
									"scores":	[-5.58884771278226]
								}, {
									"case":	195,
									"scores":	[-5.58884771278226]
								}, {
									"case":	196,
									"scores":	[-5.58884771278226]
								}, {
									"case":	197,
									"scores":	[-5.58884771278226]
								}, {
									"case":	198,
									"scores":	[-5.58884771278226]
								}, {
									"case":	199,
									"scores":	[-5.58884771278226]
								}, {
									"case":	200,
									"scores":	[-5.58884771278226]
								}, {
									"case":	201,
									"scores":	[-5.58884771278226]
								}, {
									"case":	202,
									"scores":	[-5.58884771278226]
								}, {
									"case":	203,
									"scores":	[-5.58884771278226]
								}, {
									"case":	204,
									"scores":	[-5.58884771278226]
								}, {
									"case":	205,
									"scores":	[-5.58884771278226]
								}, {
									"case":	206,
									"scores":	[-5.58884771278226]
								}, {
									"case":	207,
									"scores":	[-5.58884771278226]
								}, {
									"case":	208,
									"scores":	[-5.58884771278226]
								}, {
									"case":	209,
									"scores":	[-5.58884771278226]
								}, {
									"case":	210,
									"scores":	[-5.58884771278226]
								}, {
									"case":	211,
									"scores":	[-5.58884771278226]
								}, {
									"case":	212,
									"scores":	[-5.58884771278226]
								}, {
									"case":	213,
									"scores":	[-5.58884771278226]
								}, {
									"case":	214,
									"scores":	[-5.58884771278226]
								}, {
									"case":	215,
									"scores":	[-5.58884771278226]
								}, {
									"case":	216,
									"scores":	[-5.58884771278226]
								}, {
									"case":	217,
									"scores":	[-5.58884771278226]
								}, {
									"case":	218,
									"scores":	[-5.58884771278226]
								}, {
									"case":	219,
									"scores":	[-5.58884771278226]
								}, {
									"case":	220,
									"scores":	[-5.58884771278226]
								}, {
									"case":	221,
									"scores":	[-5.58884771278226]
								}, {
									"case":	222,
									"scores":	[-5.58884771278226]
								}, {
									"case":	223,
									"scores":	[-5.58884771278226]
								}, {
									"case":	224,
									"scores":	[-5.58884771278226]
								}, {
									"case":	225,
									"scores":	[-5.58884771278226]
								}, {
									"case":	226,
									"scores":	[-5.58884771278226]
								}, {
									"case":	227,
									"scores":	[-5.58884771278226]
								}, {
									"case":	228,
									"scores":	[-5.58884771278226]
								}, {
									"case":	229,
									"scores":	[-5.58884771278226]
								}, {
									"case":	230,
									"scores":	[-5.58884771278226]
								}, {
									"case":	231,
									"scores":	[-5.58884771278226]
								}, {
									"case":	232,
									"scores":	[-5.58884771278226]
								}, {
									"case":	233,
									"scores":	[-5.58884771278226]
								}, {
									"case":	234,
									"scores":	[-5.58884771278226]
								}, {
									"case":	235,
									"scores":	[-5.58884771278226]
								}, {
									"case":	236,
									"scores":	[-5.58884771278226]
								}, {
									"case":	237,
									"scores":	[-5.58884771278226]
								}, {
									"case":	238,
									"scores":	[-5.58884771278226]
								}, {
									"case":	239,
									"scores":	[-5.58884771278226]
								}, {
									"case":	240,
									"scores":	[-5.58884771278226]
								}, {
									"case":	241,
									"scores":	[-5.58884771278226]
								}, {
									"case":	242,
									"scores":	[-5.58884771278226]
								}, {
									"case":	243,
									"scores":	[-5.58884771278226]
								}, {
									"case":	244,
									"scores":	[-5.58884771278226]
								}, {
									"case":	245,
									"scores":	[-5.58884771278226]
								}, {
									"case":	246,
									"scores":	[-5.58884771278226]
								}, {
									"case":	247,
									"scores":	[-5.58884771278226]
								}, {
									"case":	248,
									"scores":	[-5.58884771278226]
								}, {
									"case":	249,
									"scores":	[-5.58884771278226]
								}, {
									"case":	250,
									"scores":	[-5.58884771278226]
								}, {
									"case":	251,
									"scores":	[-5.58884771278226]
								}, {
									"case":	252,
									"scores":	[-5.58884771278226]
								}, {
									"case":	253,
									"scores":	[-5.58884771278226]
								}, {
									"case":	254,
									"scores":	[-5.58884771278226]
								}, {
									"case":	255,
									"scores":	[-5.58884771278226]
								}, {
									"case":	256,
									"scores":	[-5.58884771278226]
								}, {
									"case":	257,
									"scores":	[-5.58884771278226]
								}, {
									"case":	258,
									"scores":	[-5.58884771278226]
								}, {
									"case":	259,
									"scores":	[-5.58884771278226]
								}, {
									"case":	260,
									"scores":	[-5.58884771278226]
								}, {
									"case":	261,
									"scores":	[-5.58884771278226]
								}, {
									"case":	262,
									"scores":	[-5.58884771278226]
								}, {
									"case":	263,
									"scores":	[-5.58884771278226]
								}, {
									"case":	264,
									"scores":	[-5.58884771278226]
								}, {
									"case":	265,
									"scores":	[-5.58884771278226]
								}, {
									"case":	266,
									"scores":	[-5.58884771278226]
								}, {
									"case":	267,
									"scores":	[-5.58884771278226]
								}, {
									"case":	268,
									"scores":	[-5.58884771278226]
								}, {
									"case":	269,
									"scores":	[-5.58884771278226]
								}, {
									"case":	270,
									"scores":	[-5.58884771278226]
								}, {
									"case":	271,
									"scores":	[-5.58884771278226]
								}, {
									"case":	272,
									"scores":	[-5.58884771278226]
								}, {
									"case":	273,
									"scores":	[-5.58884771278226]
								}, {
									"case":	274,
									"scores":	[-5.58884771278226]
								}, {
									"case":	275,
									"scores":	[-5.58884771278226]
								}, {
									"case":	276,
									"scores":	[-5.58884771278226]
								}, {
									"case":	277,
									"scores":	[-5.58884771278226]
								}, {
									"case":	278,
									"scores":	[-5.58884771278226]
								}, {
									"case":	279,
									"scores":	[-5.58884771278226]
								}, {
									"case":	280,
									"scores":	[-5.58884771278226]
								}, {
									"case":	281,
									"scores":	[-5.58884771278226]
								}, {
									"case":	282,
									"scores":	[-5.58884771278226]
								}, {
									"case":	283,
									"scores":	[-5.58884771278226]
								}, {
									"case":	284,
									"scores":	[-5.58884771278226]
								}, {
									"case":	285,
									"scores":	[-5.58884771278226]
								}, {
									"case":	286,
									"scores":	[-5.58884771278226]
								}, {
									"case":	287,
									"scores":	[-5.58884771278226]
								}, {
									"case":	288,
									"scores":	[-5.58884771278226]
								}, {
									"case":	289,
									"scores":	[-5.58884771278226]
								}, {
									"case":	290,
									"scores":	[-5.58884771278226]
								}, {
									"case":	291,
									"scores":	[-5.58884771278226]
								}, {
									"case":	292,
									"scores":	[-5.58884771278226]
								}, {
									"case":	293,
									"scores":	[-5.58884771278226]
								}, {
									"case":	294,
									"scores":	[-5.58884771278226]
								}, {
									"case":	295,
									"scores":	[-5.58884771278226]
								}, {
									"case":	296,
									"scores":	[-5.58884771278226]
								}, {
									"case":	297,
									"scores":	[-5.58884771278226]
								}, {
									"case":	298,
									"scores":	[-5.58884771278226]
								}, {
									"case":	299,
									"scores":	[-5.58884771278226]
								}, {
									"case":	300,
									"scores":	[-5.58884771278226]
								}, {
									"case":	301,
									"scores":	[-5.58884771278226]
								}, {
									"case":	302,
									"scores":	[-5.58884771278226]
								}, {
									"case":	303,
									"scores":	[-5.58884771278226]
								}, {
									"case":	304,
									"scores":	[-5.58884771278226]
								}, {
									"case":	305,
									"scores":	[-5.58884771278226]
								}, {
									"case":	306,
									"scores":	[-5.58884771278226]
								}, {
									"case":	307,
									"scores":	[-5.58884771278226]
								}, {
									"case":	308,
									"scores":	[-5.58884771278226]
								}, {
									"case":	309,
									"scores":	[-5.58884771278226]
								}, {
									"case":	310,
									"scores":	[-5.58884771278226]
								}, {
									"case":	311,
									"scores":	[-5.58884771278226]
								}, {
									"case":	312,
									"scores":	[-5.58884771278226]
								}, {
									"case":	313,
									"scores":	[-5.58884771278226]
								}, {
									"case":	314,
									"scores":	[-5.58884771278226]
								}, {
									"case":	315,
									"scores":	[-5.58884771278226]
								}, {
									"case":	316,
									"scores":	[-5.58884771278226]
								}, {
									"case":	317,
									"scores":	[-5.58884771278226]
								}, {
									"case":	318,
									"scores":	[-5.58884771278226]
								}, {
									"case":	319,
									"scores":	[-5.58884771278226]
								}, {
									"case":	320,
									"scores":	[-5.58884771278226]
								}, {
									"case":	321,
									"scores":	[-5.58884771278226]
								}, {
									"case":	322,
									"scores":	[-5.58884771278226]
								}, {
									"case":	323,
									"scores":	[-5.58884771278226]
								}, {
									"case":	324,
									"scores":	[-5.58884771278226]
								}, {
									"case":	325,
									"scores":	[-5.58884771278226]
								}, {
									"case":	326,
									"scores":	[-5.58884771278226]
								}, {
									"case":	327,
									"scores":	[-5.58884771278226]
								}, {
									"case":	328,
									"scores":	[-5.58884771278226]
								}, {
									"case":	329,
									"scores":	[-5.58884771278226]
								}, {
									"case":	330,
									"scores":	[-5.58884771278226]
								}, {
									"case":	331,
									"scores":	[-5.58884771278226]
								}, {
									"case":	332,
									"scores":	[-5.58884771278226]
								}, {
									"case":	333,
									"scores":	[-5.58884771278226]
								}, {
									"case":	334,
									"scores":	[-5.58884771278226]
								}, {
									"case":	335,
									"scores":	[-5.58884771278226]
								}, {
									"case":	336,
									"scores":	[-5.58884771278226]
								}, {
									"case":	337,
									"scores":	[-5.58884771278226]
								}, {
									"case":	338,
									"scores":	[-5.58884771278226]
								}, {
									"case":	339,
									"scores":	[-5.58884771278226]
								}, {
									"case":	340,
									"scores":	[-5.58884771278226]
								}, {
									"case":	341,
									"scores":	[-5.58884771278226]
								}, {
									"case":	342,
									"scores":	[-5.58884771278226]
								}, {
									"case":	343,
									"scores":	[-5.58884771278226]
								}, {
									"case":	344,
									"scores":	[-5.58884771278226]
								}, {
									"case":	345,
									"scores":	[-5.58884771278226]
								}, {
									"case":	346,
									"scores":	[-5.58884771278226]
								}, {
									"case":	347,
									"scores":	[-5.58884771278226]
								}, {
									"case":	348,
									"scores":	[-5.58884771278226]
								}, {
									"case":	349,
									"scores":	[-5.58884771278226]
								}, {
									"case":	350,
									"scores":	[-5.58884771278226]
								}, {
									"case":	351,
									"scores":	[-5.58884771278226]
								}, {
									"case":	352,
									"scores":	[-5.58884771278226]
								}, {
									"case":	353,
									"scores":	[-5.58884771278226]
								}, {
									"case":	354,
									"scores":	[-5.58884771278226]
								}, {
									"case":	355,
									"scores":	[-5.58884771278226]
								}, {
									"case":	356,
									"scores":	[-5.58884771278226]
								}, {
									"case":	357,
									"scores":	[-5.58884771278226]
								}, {
									"case":	358,
									"scores":	[-5.58884771278226]
								}, {
									"case":	359,
									"scores":	[-5.58884771278226]
								}, {
									"case":	360,
									"scores":	[-5.58884771278226]
								}, {
									"case":	361,
									"scores":	[-5.58884771278226]
								}, {
									"case":	362,
									"scores":	[-5.58884771278226]
								}, {
									"case":	363,
									"scores":	[-5.58884771278226]
								}, {
									"case":	364,
									"scores":	[-5.58884771278226]
								}, {
									"case":	365,
									"scores":	[-5.58884771278226]
								}, {
									"case":	366,
									"scores":	[-5.58884771278226]
								}, {
									"case":	367,
									"scores":	[-5.58884771278226]
								}, {
									"case":	368,
									"scores":	[-5.58884771278226]
								}, {
									"case":	369,
									"scores":	[-5.58884771278226]
								}, {
									"case":	370,
									"scores":	[-5.58884771278226]
								}, {
									"case":	371,
									"scores":	[-5.58884771278226]
								}, {
									"case":	372,
									"scores":	[-5.58884771278226]
								}, {
									"case":	373,
									"scores":	[-5.58884771278226]
								}, {
									"case":	374,
									"scores":	[-5.58884771278226]
								}, {
									"case":	375,
									"scores":	[-5.58884771278226]
								}, {
									"case":	376,
									"scores":	[-5.58884771278226]
								}, {
									"case":	377,
									"scores":	[-5.58884771278226]
								}, {
									"case":	378,
									"scores":	[-5.58884771278226]
								}, {
									"case":	379,
									"scores":	[-5.58884771278226]
								}, {
									"case":	380,
									"scores":	[-5.58884771278226]
								}, {
									"case":	381,
									"scores":	[-5.58884771278226]
								}, {
									"case":	382,
									"scores":	[-5.58884771278226]
								}, {
									"case":	383,
									"scores":	[-5.58884771278226]
								}, {
									"case":	384,
									"scores":	[-5.58884771278226]
								}, {
									"case":	385,
									"scores":	[-5.58884771278226]
								}, {
									"case":	386,
									"scores":	[-5.58884771278226]
								}, {
									"case":	387,
									"scores":	[-5.58884771278226]
								}, {
									"case":	388,
									"scores":	[-5.58884771278226]
								}, {
									"case":	389,
									"scores":	[-8.83400833488226, -9.51610516188226, -9.00374849918226, -8.08275247918226, -9.00157954398226, -7.1672577821822614, -8.70182528398226, -8.66472488398226, -8.66472488398226, -8.45578637018226, -8.70182528398226, -8.92379709198226, -8.92379709198226, -9.47887105798226, -9.23283214418226, -9.23283214418226, -9.23283214418226, -9.23283214418226, -9.23283214418226, -9.23283214418226, -9.23283214418226, -9.44372126118226, -9.47887105798226, -9.23283214418226, -9.23283214418226, -9.23283214418226, -9.23283214418226, -9.23283214418226, -9.23283214418226, -9.23283214418226, -9.23283214418226, -9.23283214418226]
								}]
						}, {
							"switch":	38,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2869,
							"begin_column":	2,
							"end_line":	2869,
							"end_column":	32,
							"patch_codes":	["if (!__is_neg(\"\", \"L2869\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(return_value), sizeof (return_value), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->sse_uptodate = 0;\n", "{\n}\n", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0 * bias)", "dateobj->time->sse_uptodate = (0 * ht)", "dateobj->time->sse_uptodate = (0 * return_value_used)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "dateobj->time->sse_uptodate = (bias != 0)", "dateobj->time->sse_uptodate = (bias * ht)", "dateobj->time->sse_uptodate = (bias * return_value_used)", "dateobj->time->sse_uptodate = (bias + 0)", "dateobj->time->sse_uptodate = (bias - 0)", "dateobj->time->sse_uptodate = (bias == 0)", "dateobj->time->sse_uptodate = (dateobj != 0)", "dateobj->time->sse_uptodate = (dateobj == 0)", "dateobj->time->sse_uptodate = (ht != 0)", "dateobj->time->sse_uptodate = (ht != bias)", "dateobj->time->sse_uptodate = (ht != return_value_used)", "dateobj->time->sse_uptodate = (ht * bias)", "dateobj->time->sse_uptodate = (ht * return_value_used)", "dateobj->time->sse_uptodate = (ht + 0)", "dateobj->time->sse_uptodate = (ht + bias)", "dateobj->time->sse_uptodate = (ht + return_value_used)", "dateobj->time->sse_uptodate = (ht - 0)", "dateobj->time->sse_uptodate = (ht - bias)", "dateobj->time->sse_uptodate = (ht - return_value_used)", "dateobj->time->sse_uptodate = (ht == 0)", "dateobj->time->sse_uptodate = (ht == bias)", "dateobj->time->sse_uptodate = (ht == return_value_used)", "dateobj->time->sse_uptodate = (interval != 0)", "dateobj->time->sse_uptodate = (interval == 0)", "dateobj->time->sse_uptodate = (intobj != 0)", "dateobj->time->sse_uptodate = (intobj == 0)", "dateobj->time->sse_uptodate = (object != 0)", "dateobj->time->sse_uptodate = (object != interval)", "dateobj->time->sse_uptodate = (object == 0)", "dateobj->time->sse_uptodate = (object == interval)", "dateobj->time->sse_uptodate = (return_value != 0)", "dateobj->time->sse_uptodate = (return_value != interval)", "dateobj->time->sse_uptodate = (return_value != object)", "dateobj->time->sse_uptodate = (return_value != this_ptr)", "dateobj->time->sse_uptodate = (return_value == 0)", "dateobj->time->sse_uptodate = (return_value == interval)", "dateobj->time->sse_uptodate = (return_value == object)", "dateobj->time->sse_uptodate = (return_value == this_ptr)", "dateobj->time->sse_uptodate = (return_value_ptr != 0)", "dateobj->time->sse_uptodate = (return_value_ptr == 0)", "dateobj->time->sse_uptodate = (return_value_used != 0)", "dateobj->time->sse_uptodate = (return_value_used != bias)", "dateobj->time->sse_uptodate = (return_value_used * bias)", "dateobj->time->sse_uptodate = (return_value_used * ht)", "dateobj->time->sse_uptodate = (return_value_used + 0)", "dateobj->time->sse_uptodate = (return_value_used + bias)", "dateobj->time->sse_uptodate = (return_value_used - 0)", "dateobj->time->sse_uptodate = (return_value_used - bias)", "dateobj->time->sse_uptodate = (return_value_used == 0)", "dateobj->time->sse_uptodate = (return_value_used == bias)", "dateobj->time->sse_uptodate = (this_ptr != 0)", "dateobj->time->sse_uptodate = (this_ptr != interval)", "dateobj->time->sse_uptodate = (this_ptr != object)", "dateobj->time->sse_uptodate = (this_ptr == 0)", "dateobj->time->sse_uptodate = (this_ptr == interval)", "dateobj->time->sse_uptodate = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2598913811822614, -6.5558520901822614, -7.30758388378226, -6.52662599678226, -6.68076277328226, -6.0018720047822613, -7.0196152827822615, -6.7252644827822614, -6.7252644827822614, -6.26172718278226, -7.0196152827822615, -7.04231962278226, -7.04231962278226, -7.25010929278226, -6.49222119278226, -6.49222119278226, -6.49222119278226, -6.49222119278226, -6.49222119278226, -6.49222119278226, -6.49222119278226, -6.96148119278226, -7.25010929278226, -6.49222119278226, -6.49222119278226, -6.49222119278226, -6.49222119278226, -6.49222119278226, -6.49222119278226, -6.49222119278226, -6.49222119278226, -6.49222119278226]
								}, {
									"case":	2,
									"scores":	[-5.58884771278226]
								}, {
									"case":	3,
									"scores":	[-5.58884771278226]
								}, {
									"case":	4,
									"scores":	[-5.58884771278226]
								}, {
									"case":	5,
									"scores":	[-5.58884771278226]
								}, {
									"case":	6,
									"scores":	[-5.58884771278226]
								}, {
									"case":	7,
									"scores":	[-5.58884771278226]
								}, {
									"case":	8,
									"scores":	[-5.58884771278226]
								}, {
									"case":	9,
									"scores":	[-5.58884771278226]
								}, {
									"case":	10,
									"scores":	[-5.58884771278226]
								}, {
									"case":	11,
									"scores":	[-5.58884771278226]
								}, {
									"case":	12,
									"scores":	[-5.58884771278226]
								}, {
									"case":	13,
									"scores":	[-5.58884771278226]
								}, {
									"case":	14,
									"scores":	[-5.58884771278226]
								}, {
									"case":	15,
									"scores":	[-5.58884771278226]
								}, {
									"case":	16,
									"scores":	[-5.58884771278226]
								}, {
									"case":	17,
									"scores":	[-5.58884771278226]
								}, {
									"case":	18,
									"scores":	[-5.58884771278226]
								}, {
									"case":	19,
									"scores":	[-5.58884771278226]
								}, {
									"case":	20,
									"scores":	[-5.58884771278226]
								}, {
									"case":	21,
									"scores":	[-5.58884771278226]
								}, {
									"case":	22,
									"scores":	[-5.58884771278226]
								}, {
									"case":	23,
									"scores":	[-5.58884771278226]
								}, {
									"case":	24,
									"scores":	[-5.58884771278226]
								}, {
									"case":	25,
									"scores":	[-5.58884771278226]
								}, {
									"case":	26,
									"scores":	[-5.58884771278226]
								}, {
									"case":	27,
									"scores":	[-5.58884771278226]
								}, {
									"case":	28,
									"scores":	[-5.58884771278226]
								}, {
									"case":	29,
									"scores":	[-5.58884771278226]
								}, {
									"case":	30,
									"scores":	[-5.58884771278226]
								}, {
									"case":	31,
									"scores":	[-5.58884771278226]
								}, {
									"case":	32,
									"scores":	[-5.58884771278226]
								}, {
									"case":	33,
									"scores":	[-5.58884771278226]
								}, {
									"case":	34,
									"scores":	[-5.58884771278226]
								}, {
									"case":	35,
									"scores":	[-5.58884771278226]
								}, {
									"case":	36,
									"scores":	[-5.58884771278226]
								}, {
									"case":	37,
									"scores":	[-5.58884771278226]
								}, {
									"case":	38,
									"scores":	[-5.58884771278226]
								}, {
									"case":	39,
									"scores":	[-5.58884771278226]
								}, {
									"case":	40,
									"scores":	[-5.58884771278226]
								}, {
									"case":	41,
									"scores":	[-5.58884771278226]
								}, {
									"case":	42,
									"scores":	[-5.58884771278226]
								}, {
									"case":	43,
									"scores":	[-5.58884771278226]
								}, {
									"case":	44,
									"scores":	[-5.58884771278226]
								}, {
									"case":	45,
									"scores":	[-5.58884771278226]
								}, {
									"case":	46,
									"scores":	[-5.58884771278226]
								}, {
									"case":	47,
									"scores":	[-5.58884771278226]
								}, {
									"case":	48,
									"scores":	[-5.58884771278226]
								}, {
									"case":	49,
									"scores":	[-5.58884771278226]
								}, {
									"case":	50,
									"scores":	[-5.58884771278226]
								}, {
									"case":	51,
									"scores":	[-5.58884771278226]
								}, {
									"case":	52,
									"scores":	[-5.58884771278226]
								}, {
									"case":	53,
									"scores":	[-5.58884771278226]
								}, {
									"case":	54,
									"scores":	[-5.58884771278226]
								}, {
									"case":	55,
									"scores":	[-5.58884771278226]
								}, {
									"case":	56,
									"scores":	[-5.58884771278226]
								}, {
									"case":	57,
									"scores":	[-5.58884771278226]
								}, {
									"case":	58,
									"scores":	[-5.58884771278226]
								}, {
									"case":	59,
									"scores":	[-5.58884771278226]
								}, {
									"case":	60,
									"scores":	[-5.58884771278226]
								}, {
									"case":	61,
									"scores":	[-5.58884771278226]
								}, {
									"case":	62,
									"scores":	[-5.58884771278226]
								}, {
									"case":	63,
									"scores":	[-5.58884771278226]
								}, {
									"case":	64,
									"scores":	[-5.58884771278226]
								}, {
									"case":	65,
									"scores":	[-5.58884771278226]
								}, {
									"case":	66,
									"scores":	[-5.58884771278226]
								}]
						}]
				}, {
					"line":	2870,
					"switches":	[{
							"switch":	39,
							"types":	[[], [], [], [], [389], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	2871,
							"begin_column":	0,
							"end_line":	2871,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2871\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	2,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	3,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	4,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	5,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	6,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	7,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	8,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	9,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	10,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	11,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	12,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	13,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	14,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	15,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	16,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	17,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	18,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	19,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	20,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	21,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	22,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	23,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	24,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	25,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	26,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	27,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	28,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	29,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	30,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	31,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	32,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	33,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	34,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	35,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	36,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	37,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	38,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	39,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	40,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	41,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	42,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	43,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	44,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	45,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	46,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	47,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	48,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	49,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	50,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	51,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	52,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	53,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	54,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	55,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	56,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	57,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	58,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	59,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	60,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	61,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	62,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	63,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	64,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	65,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	66,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	67,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	68,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	69,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	70,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	71,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	72,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	73,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	74,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	75,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	76,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	77,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	78,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	79,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	80,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	81,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	82,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	83,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	84,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	85,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	86,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	87,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	88,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	89,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	90,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	91,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	92,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	93,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	94,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	95,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	96,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	97,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	98,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	99,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	100,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	101,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	102,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	103,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	104,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	105,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	106,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	107,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	108,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	109,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	110,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	111,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	112,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	113,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	114,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	115,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	116,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	117,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	118,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	119,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	120,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	121,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	122,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	123,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	124,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	125,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	126,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	127,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	128,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	129,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	130,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	131,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	132,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	133,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	134,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	135,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	136,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	137,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	138,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	139,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	140,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	141,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	142,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	143,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	144,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	145,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	146,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	147,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	148,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	149,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	150,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	151,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	152,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	153,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	154,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	155,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	156,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	157,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	158,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	159,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	160,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	161,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	162,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	163,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	164,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	165,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	166,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	167,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	168,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	169,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	170,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	171,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	172,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	173,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	174,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	175,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	176,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	177,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	178,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	179,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	180,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	181,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	182,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	183,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	184,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	185,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	186,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	187,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	188,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	189,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	190,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	191,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	192,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	193,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	194,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	195,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	196,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	197,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	198,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	199,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	200,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	201,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	202,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	203,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	204,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	205,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	206,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	207,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	208,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	209,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	210,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	211,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	212,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	213,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	214,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	215,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	216,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	217,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	218,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	219,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	220,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	221,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	222,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	223,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	224,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	225,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	226,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	227,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	228,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	229,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	230,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	231,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	232,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	233,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	234,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	235,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	236,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	237,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	238,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	239,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	240,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	241,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	242,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	243,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	244,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	245,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	246,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	247,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	248,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	249,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	250,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	251,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	252,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	253,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	254,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	255,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	256,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	257,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	258,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	259,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	260,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	261,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	262,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	263,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	264,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	265,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	266,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	267,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	268,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	269,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	270,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	271,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	272,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	273,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	274,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	275,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	276,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	277,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	278,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	279,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	280,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	281,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	282,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	283,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	284,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	285,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	286,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	287,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	288,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	289,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	290,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	291,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	292,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	293,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	294,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	295,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	296,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	297,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	298,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	299,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	300,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	301,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	302,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	303,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	304,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	305,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	306,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	307,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	308,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	309,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	310,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	311,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	312,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	313,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	314,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	315,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	316,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	317,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	318,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	319,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	320,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	321,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	322,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	323,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	324,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	325,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	326,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	327,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	328,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	329,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	330,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	331,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	332,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	333,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	334,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	335,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	336,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	337,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	338,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	339,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	340,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	341,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	342,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	343,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	344,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	345,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	346,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	347,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	348,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	349,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	350,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	351,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	352,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	353,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	354,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	355,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	356,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	357,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	358,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	359,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	360,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	361,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	362,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	363,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	364,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	365,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	366,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	367,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	368,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	369,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	370,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	371,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	372,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	373,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	374,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	375,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	376,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	377,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	378,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	379,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	380,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	381,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	382,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	383,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	384,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	385,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	386,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	387,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	388,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	389,
									"scores":	[-10.769587805564743, -10.458938098564742, -9.25780657186474, -9.27167409186474, -10.346028286564742, -10.683049243564742, -10.176633636664743, -8.34231187486474, -9.8397789766647428, -9.63084046286474, -9.8768793766647427, -10.098851184664742, -10.098851184664742, -10.65392515066474, -10.407886236864741, -10.407886236864741, -10.407886236864741, -10.407886236864741, -10.407886236864741, -10.407886236864741, -10.407886236864741, -10.618775353864741, -10.65392515066474, -10.407886236864741, -10.407886236864741, -10.407886236864741, -10.407886236864741, -10.407886236864741, -10.407886236864741, -10.407886236864741, -10.407886236864741, -10.407886236864741]
								}]
						}, {
							"switch":	40,
							"types":	[[], [], [1], [], [], [], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [], [], [12]],
							"begin_line":	2871,
							"begin_column":	2,
							"end_line":	2871,
							"end_column":	39,
							"patch_codes":	["if (!__is_neg(\"\", \"L2871\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    timelib_update_ts(dateobj->time, ((void *)0));\n", "timelib_fill_holes(dateobj->time, ((void *)0), -1)", "timelib_fill_holes(dateobj->time, ((void *)0), 0)", "timelib_fill_holes(dateobj->time, ((void *)0), 1)", "timelib_fill_holes(dateobj->time, ((void *)0), 2)", "timelib_fill_holes(dateobj->time, ((void *)0), 3)", "timelib_fill_holes(dateobj->time, ((void *)0), bias)", "timelib_fill_holes(dateobj->time, ((void *)0), ht)", "timelib_fill_holes(dateobj->time, ((void *)0), le_index_ptr)", "timelib_fill_holes(dateobj->time, ((void *)0), php_date_global_timezone_db_enabled)", "timelib_fill_holes(dateobj->time, ((void *)0), return_value_used)", "{\n}\n", "Debug(dateobj->time, ((void *)0))", "php_printf(dateobj->time, ((void *)0))", "printf(dateobj->time, ((void *)0))", "timelib_date_to_int(dateobj->time, ((void *)0))", "timelib_diff(dateobj->time, ((void *)0))", "timelib_do_rel_normalize(dateobj->time, ((void *)0))", "timelib_set_timezone(dateobj->time, ((void *)0))", "timelib_time_tz_abbr_update(dateobj->time, ((void *)0))", "timelib_time_tz_name_update(dateobj->time, ((void *)0))", "wprintf(dateobj->time, ((void *)0))", "timelib_update_ts((&bias)->time, ((void *)0))", "timelib_update_ts((&dateobj)->time, ((void *)0))", "timelib_update_ts((&ht)->time, ((void *)0))", "timelib_update_ts((&interval)->time, ((void *)0))", "timelib_update_ts((&intobj)->time, ((void *)0))", "timelib_update_ts((&object)->time, ((void *)0))", "timelib_update_ts((&return_value)->time, ((void *)0))", "timelib_update_ts((&return_value_ptr)->time, ((void *)0))", "timelib_update_ts((&return_value_used)->time, ((void *)0))", "timelib_update_ts((&this_ptr)->time, ((void *)0))", "timelib_update_ts((dateobj)->time, ((void *)0))", "timelib_update_ts(dateobj->time, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.937710053864742, -7.1263047628647422, -6.70953567946474, -6.9408010154647419, -7.65374776236474, -7.8050598633647414, -6.8636724559647417, -6.1847816874647421, -6.90817416546474, -6.4446368654647417, -7.2025249654647414, -7.2252293054647421, -7.2252293054647421, -7.4330189754647416, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418, -7.1443908754647421, -7.4330189754647416, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418, -6.6751308754647418]
								}, {
									"case":	2,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	3,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	4,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	5,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	6,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	7,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	8,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	9,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	10,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	11,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	12,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	13,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	14,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	15,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	16,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	17,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	18,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	19,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	20,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	21,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	22,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	23,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	24,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	25,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	26,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	27,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	28,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	29,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	30,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	31,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	32,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	33,
									"scores":	[-5.5686450054647416]
								}, {
									"case":	34,
									"scores":	[-5.5686450054647416]
								}]
						}]
				}, {
					"line":	2871,
					"switches":	[{
							"switch":	41,
							"types":	[[], [], [], [], [389], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	2872,
							"begin_column":	0,
							"end_line":	2872,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2872\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.548442298147223]
								}, {
									"case":	2,
									"scores":	[-5.548442298147223]
								}, {
									"case":	3,
									"scores":	[-5.548442298147223]
								}, {
									"case":	4,
									"scores":	[-5.548442298147223]
								}, {
									"case":	5,
									"scores":	[-5.548442298147223]
								}, {
									"case":	6,
									"scores":	[-5.548442298147223]
								}, {
									"case":	7,
									"scores":	[-5.548442298147223]
								}, {
									"case":	8,
									"scores":	[-5.548442298147223]
								}, {
									"case":	9,
									"scores":	[-5.548442298147223]
								}, {
									"case":	10,
									"scores":	[-5.548442298147223]
								}, {
									"case":	11,
									"scores":	[-5.548442298147223]
								}, {
									"case":	12,
									"scores":	[-5.548442298147223]
								}, {
									"case":	13,
									"scores":	[-5.548442298147223]
								}, {
									"case":	14,
									"scores":	[-5.548442298147223]
								}, {
									"case":	15,
									"scores":	[-5.548442298147223]
								}, {
									"case":	16,
									"scores":	[-5.548442298147223]
								}, {
									"case":	17,
									"scores":	[-5.548442298147223]
								}, {
									"case":	18,
									"scores":	[-5.548442298147223]
								}, {
									"case":	19,
									"scores":	[-5.548442298147223]
								}, {
									"case":	20,
									"scores":	[-5.548442298147223]
								}, {
									"case":	21,
									"scores":	[-5.548442298147223]
								}, {
									"case":	22,
									"scores":	[-5.548442298147223]
								}, {
									"case":	23,
									"scores":	[-5.548442298147223]
								}, {
									"case":	24,
									"scores":	[-5.548442298147223]
								}, {
									"case":	25,
									"scores":	[-5.548442298147223]
								}, {
									"case":	26,
									"scores":	[-5.548442298147223]
								}, {
									"case":	27,
									"scores":	[-5.548442298147223]
								}, {
									"case":	28,
									"scores":	[-5.548442298147223]
								}, {
									"case":	29,
									"scores":	[-5.548442298147223]
								}, {
									"case":	30,
									"scores":	[-5.548442298147223]
								}, {
									"case":	31,
									"scores":	[-5.548442298147223]
								}, {
									"case":	32,
									"scores":	[-5.548442298147223]
								}, {
									"case":	33,
									"scores":	[-5.548442298147223]
								}, {
									"case":	34,
									"scores":	[-5.548442298147223]
								}, {
									"case":	35,
									"scores":	[-5.548442298147223]
								}, {
									"case":	36,
									"scores":	[-5.548442298147223]
								}, {
									"case":	37,
									"scores":	[-5.548442298147223]
								}, {
									"case":	38,
									"scores":	[-5.548442298147223]
								}, {
									"case":	39,
									"scores":	[-5.548442298147223]
								}, {
									"case":	40,
									"scores":	[-5.548442298147223]
								}, {
									"case":	41,
									"scores":	[-5.548442298147223]
								}, {
									"case":	42,
									"scores":	[-5.548442298147223]
								}, {
									"case":	43,
									"scores":	[-5.548442298147223]
								}, {
									"case":	44,
									"scores":	[-5.548442298147223]
								}, {
									"case":	45,
									"scores":	[-5.548442298147223]
								}, {
									"case":	46,
									"scores":	[-5.548442298147223]
								}, {
									"case":	47,
									"scores":	[-5.548442298147223]
								}, {
									"case":	48,
									"scores":	[-5.548442298147223]
								}, {
									"case":	49,
									"scores":	[-5.548442298147223]
								}, {
									"case":	50,
									"scores":	[-5.548442298147223]
								}, {
									"case":	51,
									"scores":	[-5.548442298147223]
								}, {
									"case":	52,
									"scores":	[-5.548442298147223]
								}, {
									"case":	53,
									"scores":	[-5.548442298147223]
								}, {
									"case":	54,
									"scores":	[-5.548442298147223]
								}, {
									"case":	55,
									"scores":	[-5.548442298147223]
								}, {
									"case":	56,
									"scores":	[-5.548442298147223]
								}, {
									"case":	57,
									"scores":	[-5.548442298147223]
								}, {
									"case":	58,
									"scores":	[-5.548442298147223]
								}, {
									"case":	59,
									"scores":	[-5.548442298147223]
								}, {
									"case":	60,
									"scores":	[-5.548442298147223]
								}, {
									"case":	61,
									"scores":	[-5.548442298147223]
								}, {
									"case":	62,
									"scores":	[-5.548442298147223]
								}, {
									"case":	63,
									"scores":	[-5.548442298147223]
								}, {
									"case":	64,
									"scores":	[-5.548442298147223]
								}, {
									"case":	65,
									"scores":	[-5.548442298147223]
								}, {
									"case":	66,
									"scores":	[-5.548442298147223]
								}, {
									"case":	67,
									"scores":	[-5.548442298147223]
								}, {
									"case":	68,
									"scores":	[-5.548442298147223]
								}, {
									"case":	69,
									"scores":	[-5.548442298147223]
								}, {
									"case":	70,
									"scores":	[-5.548442298147223]
								}, {
									"case":	71,
									"scores":	[-5.548442298147223]
								}, {
									"case":	72,
									"scores":	[-5.548442298147223]
								}, {
									"case":	73,
									"scores":	[-5.548442298147223]
								}, {
									"case":	74,
									"scores":	[-5.548442298147223]
								}, {
									"case":	75,
									"scores":	[-5.548442298147223]
								}, {
									"case":	76,
									"scores":	[-5.548442298147223]
								}, {
									"case":	77,
									"scores":	[-5.548442298147223]
								}, {
									"case":	78,
									"scores":	[-5.548442298147223]
								}, {
									"case":	79,
									"scores":	[-5.548442298147223]
								}, {
									"case":	80,
									"scores":	[-5.548442298147223]
								}, {
									"case":	81,
									"scores":	[-5.548442298147223]
								}, {
									"case":	82,
									"scores":	[-5.548442298147223]
								}, {
									"case":	83,
									"scores":	[-5.548442298147223]
								}, {
									"case":	84,
									"scores":	[-5.548442298147223]
								}, {
									"case":	85,
									"scores":	[-5.548442298147223]
								}, {
									"case":	86,
									"scores":	[-5.548442298147223]
								}, {
									"case":	87,
									"scores":	[-5.548442298147223]
								}, {
									"case":	88,
									"scores":	[-5.548442298147223]
								}, {
									"case":	89,
									"scores":	[-5.548442298147223]
								}, {
									"case":	90,
									"scores":	[-5.548442298147223]
								}, {
									"case":	91,
									"scores":	[-5.548442298147223]
								}, {
									"case":	92,
									"scores":	[-5.548442298147223]
								}, {
									"case":	93,
									"scores":	[-5.548442298147223]
								}, {
									"case":	94,
									"scores":	[-5.548442298147223]
								}, {
									"case":	95,
									"scores":	[-5.548442298147223]
								}, {
									"case":	96,
									"scores":	[-5.548442298147223]
								}, {
									"case":	97,
									"scores":	[-5.548442298147223]
								}, {
									"case":	98,
									"scores":	[-5.548442298147223]
								}, {
									"case":	99,
									"scores":	[-5.548442298147223]
								}, {
									"case":	100,
									"scores":	[-5.548442298147223]
								}, {
									"case":	101,
									"scores":	[-5.548442298147223]
								}, {
									"case":	102,
									"scores":	[-5.548442298147223]
								}, {
									"case":	103,
									"scores":	[-5.548442298147223]
								}, {
									"case":	104,
									"scores":	[-5.548442298147223]
								}, {
									"case":	105,
									"scores":	[-5.548442298147223]
								}, {
									"case":	106,
									"scores":	[-5.548442298147223]
								}, {
									"case":	107,
									"scores":	[-5.548442298147223]
								}, {
									"case":	108,
									"scores":	[-5.548442298147223]
								}, {
									"case":	109,
									"scores":	[-5.548442298147223]
								}, {
									"case":	110,
									"scores":	[-5.548442298147223]
								}, {
									"case":	111,
									"scores":	[-5.548442298147223]
								}, {
									"case":	112,
									"scores":	[-5.548442298147223]
								}, {
									"case":	113,
									"scores":	[-5.548442298147223]
								}, {
									"case":	114,
									"scores":	[-5.548442298147223]
								}, {
									"case":	115,
									"scores":	[-5.548442298147223]
								}, {
									"case":	116,
									"scores":	[-5.548442298147223]
								}, {
									"case":	117,
									"scores":	[-5.548442298147223]
								}, {
									"case":	118,
									"scores":	[-5.548442298147223]
								}, {
									"case":	119,
									"scores":	[-5.548442298147223]
								}, {
									"case":	120,
									"scores":	[-5.548442298147223]
								}, {
									"case":	121,
									"scores":	[-5.548442298147223]
								}, {
									"case":	122,
									"scores":	[-5.548442298147223]
								}, {
									"case":	123,
									"scores":	[-5.548442298147223]
								}, {
									"case":	124,
									"scores":	[-5.548442298147223]
								}, {
									"case":	125,
									"scores":	[-5.548442298147223]
								}, {
									"case":	126,
									"scores":	[-5.548442298147223]
								}, {
									"case":	127,
									"scores":	[-5.548442298147223]
								}, {
									"case":	128,
									"scores":	[-5.548442298147223]
								}, {
									"case":	129,
									"scores":	[-5.548442298147223]
								}, {
									"case":	130,
									"scores":	[-5.548442298147223]
								}, {
									"case":	131,
									"scores":	[-5.548442298147223]
								}, {
									"case":	132,
									"scores":	[-5.548442298147223]
								}, {
									"case":	133,
									"scores":	[-5.548442298147223]
								}, {
									"case":	134,
									"scores":	[-5.548442298147223]
								}, {
									"case":	135,
									"scores":	[-5.548442298147223]
								}, {
									"case":	136,
									"scores":	[-5.548442298147223]
								}, {
									"case":	137,
									"scores":	[-5.548442298147223]
								}, {
									"case":	138,
									"scores":	[-5.548442298147223]
								}, {
									"case":	139,
									"scores":	[-5.548442298147223]
								}, {
									"case":	140,
									"scores":	[-5.548442298147223]
								}, {
									"case":	141,
									"scores":	[-5.548442298147223]
								}, {
									"case":	142,
									"scores":	[-5.548442298147223]
								}, {
									"case":	143,
									"scores":	[-5.548442298147223]
								}, {
									"case":	144,
									"scores":	[-5.548442298147223]
								}, {
									"case":	145,
									"scores":	[-5.548442298147223]
								}, {
									"case":	146,
									"scores":	[-5.548442298147223]
								}, {
									"case":	147,
									"scores":	[-5.548442298147223]
								}, {
									"case":	148,
									"scores":	[-5.548442298147223]
								}, {
									"case":	149,
									"scores":	[-5.548442298147223]
								}, {
									"case":	150,
									"scores":	[-5.548442298147223]
								}, {
									"case":	151,
									"scores":	[-5.548442298147223]
								}, {
									"case":	152,
									"scores":	[-5.548442298147223]
								}, {
									"case":	153,
									"scores":	[-5.548442298147223]
								}, {
									"case":	154,
									"scores":	[-5.548442298147223]
								}, {
									"case":	155,
									"scores":	[-5.548442298147223]
								}, {
									"case":	156,
									"scores":	[-5.548442298147223]
								}, {
									"case":	157,
									"scores":	[-5.548442298147223]
								}, {
									"case":	158,
									"scores":	[-5.548442298147223]
								}, {
									"case":	159,
									"scores":	[-5.548442298147223]
								}, {
									"case":	160,
									"scores":	[-5.548442298147223]
								}, {
									"case":	161,
									"scores":	[-5.548442298147223]
								}, {
									"case":	162,
									"scores":	[-5.548442298147223]
								}, {
									"case":	163,
									"scores":	[-5.548442298147223]
								}, {
									"case":	164,
									"scores":	[-5.548442298147223]
								}, {
									"case":	165,
									"scores":	[-5.548442298147223]
								}, {
									"case":	166,
									"scores":	[-5.548442298147223]
								}, {
									"case":	167,
									"scores":	[-5.548442298147223]
								}, {
									"case":	168,
									"scores":	[-5.548442298147223]
								}, {
									"case":	169,
									"scores":	[-5.548442298147223]
								}, {
									"case":	170,
									"scores":	[-5.548442298147223]
								}, {
									"case":	171,
									"scores":	[-5.548442298147223]
								}, {
									"case":	172,
									"scores":	[-5.548442298147223]
								}, {
									"case":	173,
									"scores":	[-5.548442298147223]
								}, {
									"case":	174,
									"scores":	[-5.548442298147223]
								}, {
									"case":	175,
									"scores":	[-5.548442298147223]
								}, {
									"case":	176,
									"scores":	[-5.548442298147223]
								}, {
									"case":	177,
									"scores":	[-5.548442298147223]
								}, {
									"case":	178,
									"scores":	[-5.548442298147223]
								}, {
									"case":	179,
									"scores":	[-5.548442298147223]
								}, {
									"case":	180,
									"scores":	[-5.548442298147223]
								}, {
									"case":	181,
									"scores":	[-5.548442298147223]
								}, {
									"case":	182,
									"scores":	[-5.548442298147223]
								}, {
									"case":	183,
									"scores":	[-5.548442298147223]
								}, {
									"case":	184,
									"scores":	[-5.548442298147223]
								}, {
									"case":	185,
									"scores":	[-5.548442298147223]
								}, {
									"case":	186,
									"scores":	[-5.548442298147223]
								}, {
									"case":	187,
									"scores":	[-5.548442298147223]
								}, {
									"case":	188,
									"scores":	[-5.548442298147223]
								}, {
									"case":	189,
									"scores":	[-5.548442298147223]
								}, {
									"case":	190,
									"scores":	[-5.548442298147223]
								}, {
									"case":	191,
									"scores":	[-5.548442298147223]
								}, {
									"case":	192,
									"scores":	[-5.548442298147223]
								}, {
									"case":	193,
									"scores":	[-5.548442298147223]
								}, {
									"case":	194,
									"scores":	[-5.548442298147223]
								}, {
									"case":	195,
									"scores":	[-5.548442298147223]
								}, {
									"case":	196,
									"scores":	[-5.548442298147223]
								}, {
									"case":	197,
									"scores":	[-5.548442298147223]
								}, {
									"case":	198,
									"scores":	[-5.548442298147223]
								}, {
									"case":	199,
									"scores":	[-5.548442298147223]
								}, {
									"case":	200,
									"scores":	[-5.548442298147223]
								}, {
									"case":	201,
									"scores":	[-5.548442298147223]
								}, {
									"case":	202,
									"scores":	[-5.548442298147223]
								}, {
									"case":	203,
									"scores":	[-5.548442298147223]
								}, {
									"case":	204,
									"scores":	[-5.548442298147223]
								}, {
									"case":	205,
									"scores":	[-5.548442298147223]
								}, {
									"case":	206,
									"scores":	[-5.548442298147223]
								}, {
									"case":	207,
									"scores":	[-5.548442298147223]
								}, {
									"case":	208,
									"scores":	[-5.548442298147223]
								}, {
									"case":	209,
									"scores":	[-5.548442298147223]
								}, {
									"case":	210,
									"scores":	[-5.548442298147223]
								}, {
									"case":	211,
									"scores":	[-5.548442298147223]
								}, {
									"case":	212,
									"scores":	[-5.548442298147223]
								}, {
									"case":	213,
									"scores":	[-5.548442298147223]
								}, {
									"case":	214,
									"scores":	[-5.548442298147223]
								}, {
									"case":	215,
									"scores":	[-5.548442298147223]
								}, {
									"case":	216,
									"scores":	[-5.548442298147223]
								}, {
									"case":	217,
									"scores":	[-5.548442298147223]
								}, {
									"case":	218,
									"scores":	[-5.548442298147223]
								}, {
									"case":	219,
									"scores":	[-5.548442298147223]
								}, {
									"case":	220,
									"scores":	[-5.548442298147223]
								}, {
									"case":	221,
									"scores":	[-5.548442298147223]
								}, {
									"case":	222,
									"scores":	[-5.548442298147223]
								}, {
									"case":	223,
									"scores":	[-5.548442298147223]
								}, {
									"case":	224,
									"scores":	[-5.548442298147223]
								}, {
									"case":	225,
									"scores":	[-5.548442298147223]
								}, {
									"case":	226,
									"scores":	[-5.548442298147223]
								}, {
									"case":	227,
									"scores":	[-5.548442298147223]
								}, {
									"case":	228,
									"scores":	[-5.548442298147223]
								}, {
									"case":	229,
									"scores":	[-5.548442298147223]
								}, {
									"case":	230,
									"scores":	[-5.548442298147223]
								}, {
									"case":	231,
									"scores":	[-5.548442298147223]
								}, {
									"case":	232,
									"scores":	[-5.548442298147223]
								}, {
									"case":	233,
									"scores":	[-5.548442298147223]
								}, {
									"case":	234,
									"scores":	[-5.548442298147223]
								}, {
									"case":	235,
									"scores":	[-5.548442298147223]
								}, {
									"case":	236,
									"scores":	[-5.548442298147223]
								}, {
									"case":	237,
									"scores":	[-5.548442298147223]
								}, {
									"case":	238,
									"scores":	[-5.548442298147223]
								}, {
									"case":	239,
									"scores":	[-5.548442298147223]
								}, {
									"case":	240,
									"scores":	[-5.548442298147223]
								}, {
									"case":	241,
									"scores":	[-5.548442298147223]
								}, {
									"case":	242,
									"scores":	[-5.548442298147223]
								}, {
									"case":	243,
									"scores":	[-5.548442298147223]
								}, {
									"case":	244,
									"scores":	[-5.548442298147223]
								}, {
									"case":	245,
									"scores":	[-5.548442298147223]
								}, {
									"case":	246,
									"scores":	[-5.548442298147223]
								}, {
									"case":	247,
									"scores":	[-5.548442298147223]
								}, {
									"case":	248,
									"scores":	[-5.548442298147223]
								}, {
									"case":	249,
									"scores":	[-5.548442298147223]
								}, {
									"case":	250,
									"scores":	[-5.548442298147223]
								}, {
									"case":	251,
									"scores":	[-5.548442298147223]
								}, {
									"case":	252,
									"scores":	[-5.548442298147223]
								}, {
									"case":	253,
									"scores":	[-5.548442298147223]
								}, {
									"case":	254,
									"scores":	[-5.548442298147223]
								}, {
									"case":	255,
									"scores":	[-5.548442298147223]
								}, {
									"case":	256,
									"scores":	[-5.548442298147223]
								}, {
									"case":	257,
									"scores":	[-5.548442298147223]
								}, {
									"case":	258,
									"scores":	[-5.548442298147223]
								}, {
									"case":	259,
									"scores":	[-5.548442298147223]
								}, {
									"case":	260,
									"scores":	[-5.548442298147223]
								}, {
									"case":	261,
									"scores":	[-5.548442298147223]
								}, {
									"case":	262,
									"scores":	[-5.548442298147223]
								}, {
									"case":	263,
									"scores":	[-5.548442298147223]
								}, {
									"case":	264,
									"scores":	[-5.548442298147223]
								}, {
									"case":	265,
									"scores":	[-5.548442298147223]
								}, {
									"case":	266,
									"scores":	[-5.548442298147223]
								}, {
									"case":	267,
									"scores":	[-5.548442298147223]
								}, {
									"case":	268,
									"scores":	[-5.548442298147223]
								}, {
									"case":	269,
									"scores":	[-5.548442298147223]
								}, {
									"case":	270,
									"scores":	[-5.548442298147223]
								}, {
									"case":	271,
									"scores":	[-5.548442298147223]
								}, {
									"case":	272,
									"scores":	[-5.548442298147223]
								}, {
									"case":	273,
									"scores":	[-5.548442298147223]
								}, {
									"case":	274,
									"scores":	[-5.548442298147223]
								}, {
									"case":	275,
									"scores":	[-5.548442298147223]
								}, {
									"case":	276,
									"scores":	[-5.548442298147223]
								}, {
									"case":	277,
									"scores":	[-5.548442298147223]
								}, {
									"case":	278,
									"scores":	[-5.548442298147223]
								}, {
									"case":	279,
									"scores":	[-5.548442298147223]
								}, {
									"case":	280,
									"scores":	[-5.548442298147223]
								}, {
									"case":	281,
									"scores":	[-5.548442298147223]
								}, {
									"case":	282,
									"scores":	[-5.548442298147223]
								}, {
									"case":	283,
									"scores":	[-5.548442298147223]
								}, {
									"case":	284,
									"scores":	[-5.548442298147223]
								}, {
									"case":	285,
									"scores":	[-5.548442298147223]
								}, {
									"case":	286,
									"scores":	[-5.548442298147223]
								}, {
									"case":	287,
									"scores":	[-5.548442298147223]
								}, {
									"case":	288,
									"scores":	[-5.548442298147223]
								}, {
									"case":	289,
									"scores":	[-5.548442298147223]
								}, {
									"case":	290,
									"scores":	[-5.548442298147223]
								}, {
									"case":	291,
									"scores":	[-5.548442298147223]
								}, {
									"case":	292,
									"scores":	[-5.548442298147223]
								}, {
									"case":	293,
									"scores":	[-5.548442298147223]
								}, {
									"case":	294,
									"scores":	[-5.548442298147223]
								}, {
									"case":	295,
									"scores":	[-5.548442298147223]
								}, {
									"case":	296,
									"scores":	[-5.548442298147223]
								}, {
									"case":	297,
									"scores":	[-5.548442298147223]
								}, {
									"case":	298,
									"scores":	[-5.548442298147223]
								}, {
									"case":	299,
									"scores":	[-5.548442298147223]
								}, {
									"case":	300,
									"scores":	[-5.548442298147223]
								}, {
									"case":	301,
									"scores":	[-5.548442298147223]
								}, {
									"case":	302,
									"scores":	[-5.548442298147223]
								}, {
									"case":	303,
									"scores":	[-5.548442298147223]
								}, {
									"case":	304,
									"scores":	[-5.548442298147223]
								}, {
									"case":	305,
									"scores":	[-5.548442298147223]
								}, {
									"case":	306,
									"scores":	[-5.548442298147223]
								}, {
									"case":	307,
									"scores":	[-5.548442298147223]
								}, {
									"case":	308,
									"scores":	[-5.548442298147223]
								}, {
									"case":	309,
									"scores":	[-5.548442298147223]
								}, {
									"case":	310,
									"scores":	[-5.548442298147223]
								}, {
									"case":	311,
									"scores":	[-5.548442298147223]
								}, {
									"case":	312,
									"scores":	[-5.548442298147223]
								}, {
									"case":	313,
									"scores":	[-5.548442298147223]
								}, {
									"case":	314,
									"scores":	[-5.548442298147223]
								}, {
									"case":	315,
									"scores":	[-5.548442298147223]
								}, {
									"case":	316,
									"scores":	[-5.548442298147223]
								}, {
									"case":	317,
									"scores":	[-5.548442298147223]
								}, {
									"case":	318,
									"scores":	[-5.548442298147223]
								}, {
									"case":	319,
									"scores":	[-5.548442298147223]
								}, {
									"case":	320,
									"scores":	[-5.548442298147223]
								}, {
									"case":	321,
									"scores":	[-5.548442298147223]
								}, {
									"case":	322,
									"scores":	[-5.548442298147223]
								}, {
									"case":	323,
									"scores":	[-5.548442298147223]
								}, {
									"case":	324,
									"scores":	[-5.548442298147223]
								}, {
									"case":	325,
									"scores":	[-5.548442298147223]
								}, {
									"case":	326,
									"scores":	[-5.548442298147223]
								}, {
									"case":	327,
									"scores":	[-5.548442298147223]
								}, {
									"case":	328,
									"scores":	[-5.548442298147223]
								}, {
									"case":	329,
									"scores":	[-5.548442298147223]
								}, {
									"case":	330,
									"scores":	[-5.548442298147223]
								}, {
									"case":	331,
									"scores":	[-5.548442298147223]
								}, {
									"case":	332,
									"scores":	[-5.548442298147223]
								}, {
									"case":	333,
									"scores":	[-5.548442298147223]
								}, {
									"case":	334,
									"scores":	[-5.548442298147223]
								}, {
									"case":	335,
									"scores":	[-5.548442298147223]
								}, {
									"case":	336,
									"scores":	[-5.548442298147223]
								}, {
									"case":	337,
									"scores":	[-5.548442298147223]
								}, {
									"case":	338,
									"scores":	[-5.548442298147223]
								}, {
									"case":	339,
									"scores":	[-5.548442298147223]
								}, {
									"case":	340,
									"scores":	[-5.548442298147223]
								}, {
									"case":	341,
									"scores":	[-5.548442298147223]
								}, {
									"case":	342,
									"scores":	[-5.548442298147223]
								}, {
									"case":	343,
									"scores":	[-5.548442298147223]
								}, {
									"case":	344,
									"scores":	[-5.548442298147223]
								}, {
									"case":	345,
									"scores":	[-5.548442298147223]
								}, {
									"case":	346,
									"scores":	[-5.548442298147223]
								}, {
									"case":	347,
									"scores":	[-5.548442298147223]
								}, {
									"case":	348,
									"scores":	[-5.548442298147223]
								}, {
									"case":	349,
									"scores":	[-5.548442298147223]
								}, {
									"case":	350,
									"scores":	[-5.548442298147223]
								}, {
									"case":	351,
									"scores":	[-5.548442298147223]
								}, {
									"case":	352,
									"scores":	[-5.548442298147223]
								}, {
									"case":	353,
									"scores":	[-5.548442298147223]
								}, {
									"case":	354,
									"scores":	[-5.548442298147223]
								}, {
									"case":	355,
									"scores":	[-5.548442298147223]
								}, {
									"case":	356,
									"scores":	[-5.548442298147223]
								}, {
									"case":	357,
									"scores":	[-5.548442298147223]
								}, {
									"case":	358,
									"scores":	[-5.548442298147223]
								}, {
									"case":	359,
									"scores":	[-5.548442298147223]
								}, {
									"case":	360,
									"scores":	[-5.548442298147223]
								}, {
									"case":	361,
									"scores":	[-5.548442298147223]
								}, {
									"case":	362,
									"scores":	[-5.548442298147223]
								}, {
									"case":	363,
									"scores":	[-5.548442298147223]
								}, {
									"case":	364,
									"scores":	[-5.548442298147223]
								}, {
									"case":	365,
									"scores":	[-5.548442298147223]
								}, {
									"case":	366,
									"scores":	[-5.548442298147223]
								}, {
									"case":	367,
									"scores":	[-5.548442298147223]
								}, {
									"case":	368,
									"scores":	[-5.548442298147223]
								}, {
									"case":	369,
									"scores":	[-5.548442298147223]
								}, {
									"case":	370,
									"scores":	[-5.548442298147223]
								}, {
									"case":	371,
									"scores":	[-5.548442298147223]
								}, {
									"case":	372,
									"scores":	[-5.548442298147223]
								}, {
									"case":	373,
									"scores":	[-5.548442298147223]
								}, {
									"case":	374,
									"scores":	[-5.548442298147223]
								}, {
									"case":	375,
									"scores":	[-5.548442298147223]
								}, {
									"case":	376,
									"scores":	[-5.548442298147223]
								}, {
									"case":	377,
									"scores":	[-5.548442298147223]
								}, {
									"case":	378,
									"scores":	[-5.548442298147223]
								}, {
									"case":	379,
									"scores":	[-5.548442298147223]
								}, {
									"case":	380,
									"scores":	[-5.548442298147223]
								}, {
									"case":	381,
									"scores":	[-5.548442298147223]
								}, {
									"case":	382,
									"scores":	[-5.548442298147223]
								}, {
									"case":	383,
									"scores":	[-5.548442298147223]
								}, {
									"case":	384,
									"scores":	[-5.548442298147223]
								}, {
									"case":	385,
									"scores":	[-5.548442298147223]
								}, {
									"case":	386,
									"scores":	[-5.548442298147223]
								}, {
									"case":	387,
									"scores":	[-5.548442298147223]
								}, {
									"case":	388,
									"scores":	[-5.548442298147223]
								}, {
									"case":	389,
									"scores":	[-10.422688098247225, -10.116486231247222, -8.9109068645472238, -9.9991285792472233, -10.336149536247223, -8.9247743845472236, -9.49287926934722, -9.24684035554722, -9.49287926934722, -9.28394075554722, -9.52997966934722, -9.7519514773472231, -9.7519514773472231, -10.307025443347221, -10.060986529547222, -10.060986529547222, -10.060986529547222, -10.060986529547222, -10.060986529547222, -10.060986529547222, -10.060986529547222, -10.271875646547223, -10.307025443347221, -10.060986529547222, -10.060986529547222, -10.060986529547222, -10.060986529547222, -10.060986529547222, -10.060986529547222, -10.060986529547222, -10.060986529547222, -10.060986529547222]
								}]
						}, {
							"switch":	42,
							"types":	[[], [], [1], [], [], [], [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [], [35, 36, 37], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [], [], [34]],
							"begin_line":	2872,
							"begin_column":	2,
							"end_line":	2872,
							"end_column":	39,
							"patch_codes":	["if (!__is_neg(\"\", \"L2872\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    timelib_update_from_sse(dateobj->time);\n", "timelib_apply_localtime(dateobj->time, -1)", "timelib_apply_localtime(dateobj->time, 0)", "timelib_apply_localtime(dateobj->time, 1)", "timelib_apply_localtime(dateobj->time, 2)", "timelib_apply_localtime(dateobj->time, 3)", "timelib_date_to_int(dateobj->time, 0)", "timelib_diff(dateobj->time, 0)", "timelib_do_rel_normalize(dateobj->time, 0)", "timelib_dump_date(dateobj->time, -1)", "timelib_dump_date(dateobj->time, 0)", "timelib_dump_date(dateobj->time, 1)", "timelib_dump_date(dateobj->time, 2)", "timelib_dump_date(dateobj->time, 3)", "timelib_dump_date(dateobj->time, bias)", "timelib_dump_date(dateobj->time, ht)", "timelib_dump_date(dateobj->time, le_index_ptr)", "timelib_dump_date(dateobj->time, php_date_global_timezone_db_enabled)", "timelib_dump_date(dateobj->time, return_value_used)", "timelib_set_timezone(dateobj->time, 0)", "timelib_time_tz_abbr_update(dateobj->time, 0)", "timelib_time_tz_name_update(dateobj->time, 0)", "timelib_unixtime2gmt(dateobj->time, -1)", "timelib_unixtime2gmt(dateobj->time, 0)", "timelib_unixtime2gmt(dateobj->time, 1)", "timelib_unixtime2gmt(dateobj->time, 2)", "timelib_unixtime2gmt(dateobj->time, 3)", "timelib_unixtime2local(dateobj->time, -1)", "timelib_unixtime2local(dateobj->time, 0)", "timelib_unixtime2local(dateobj->time, 1)", "timelib_unixtime2local(dateobj->time, 2)", "timelib_unixtime2local(dateobj->time, 3)", "timelib_update_ts(dateobj->time, 0)", "{\n}\n", "timelib_get_current_offset(dateobj->time)", "timelib_time_clone(dateobj->time)", "timelib_time_dtor(dateobj->time)", "timelib_update_from_sse((&bias)->time)", "timelib_update_from_sse((&dateobj)->time)", "timelib_update_from_sse((&ht)->time)", "timelib_update_from_sse((&interval)->time)", "timelib_update_from_sse((&intobj)->time)", "timelib_update_from_sse((&object)->time)", "timelib_update_from_sse((&return_value)->time)", "timelib_update_from_sse((&return_value_ptr)->time)", "timelib_update_from_sse((&return_value_used)->time)", "timelib_update_from_sse((&this_ptr)->time)", "timelib_update_from_sse((dateobj)->time)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3359890465472226, -6.7682106025472226, -7.5828136631472223, -7.7116630550472234, -7.8629751560472227, -6.9987163081472232, -6.9660894581472235, -6.2082013581472228, -6.9660894581472235, -6.502552158147223, -7.2604402581472236, -7.2831445981472225, -7.2831445981472225, -7.4909342681472229, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231, -7.2023061681472225, -7.4909342681472229, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231, -6.7330461681472231]
								}, {
									"case":	2,
									"scores":	[-5.548442298147223]
								}, {
									"case":	3,
									"scores":	[-5.548442298147223]
								}, {
									"case":	4,
									"scores":	[-5.548442298147223]
								}, {
									"case":	5,
									"scores":	[-5.548442298147223]
								}, {
									"case":	6,
									"scores":	[-5.548442298147223]
								}, {
									"case":	7,
									"scores":	[-5.548442298147223]
								}, {
									"case":	8,
									"scores":	[-5.548442298147223]
								}, {
									"case":	9,
									"scores":	[-5.548442298147223]
								}, {
									"case":	10,
									"scores":	[-5.548442298147223]
								}, {
									"case":	11,
									"scores":	[-5.548442298147223]
								}, {
									"case":	12,
									"scores":	[-5.548442298147223]
								}, {
									"case":	13,
									"scores":	[-5.548442298147223]
								}, {
									"case":	14,
									"scores":	[-5.548442298147223]
								}, {
									"case":	15,
									"scores":	[-5.548442298147223]
								}, {
									"case":	16,
									"scores":	[-5.548442298147223]
								}, {
									"case":	17,
									"scores":	[-5.548442298147223]
								}, {
									"case":	18,
									"scores":	[-5.548442298147223]
								}, {
									"case":	19,
									"scores":	[-5.548442298147223]
								}, {
									"case":	20,
									"scores":	[-5.548442298147223]
								}, {
									"case":	21,
									"scores":	[-5.548442298147223]
								}, {
									"case":	22,
									"scores":	[-5.548442298147223]
								}, {
									"case":	23,
									"scores":	[-5.548442298147223]
								}, {
									"case":	24,
									"scores":	[-5.548442298147223]
								}, {
									"case":	25,
									"scores":	[-5.548442298147223]
								}, {
									"case":	26,
									"scores":	[-5.548442298147223]
								}, {
									"case":	27,
									"scores":	[-5.548442298147223]
								}, {
									"case":	28,
									"scores":	[-5.548442298147223]
								}, {
									"case":	29,
									"scores":	[-5.548442298147223]
								}, {
									"case":	30,
									"scores":	[-5.548442298147223]
								}, {
									"case":	31,
									"scores":	[-5.548442298147223]
								}, {
									"case":	32,
									"scores":	[-5.548442298147223]
								}, {
									"case":	33,
									"scores":	[-5.548442298147223]
								}, {
									"case":	34,
									"scores":	[-5.548442298147223]
								}, {
									"case":	35,
									"scores":	[-5.548442298147223]
								}, {
									"case":	36,
									"scores":	[-5.548442298147223]
								}, {
									"case":	37,
									"scores":	[-5.548442298147223]
								}, {
									"case":	38,
									"scores":	[-5.548442298147223]
								}, {
									"case":	39,
									"scores":	[-5.548442298147223]
								}, {
									"case":	40,
									"scores":	[-5.548442298147223]
								}, {
									"case":	41,
									"scores":	[-5.548442298147223]
								}, {
									"case":	42,
									"scores":	[-5.548442298147223]
								}, {
									"case":	43,
									"scores":	[-5.548442298147223]
								}, {
									"case":	44,
									"scores":	[-5.548442298147223]
								}, {
									"case":	45,
									"scores":	[-5.548442298147223]
								}, {
									"case":	46,
									"scores":	[-5.548442298147223]
								}, {
									"case":	47,
									"scores":	[-5.548442298147223]
								}, {
									"case":	48,
									"scores":	[-5.548442298147223]
								}]
						}]
				}, {
					"line":	2872,
					"switches":	[{
							"switch":	43,
							"types":	[[], [], [], [], [389], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	2873,
							"begin_column":	0,
							"end_line":	2873,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (intobj)->diff->d * bias", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (intobj)->diff->h * bias", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (intobj)->diff->i * bias", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (intobj)->diff->m * bias", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (intobj)->diff->s * bias", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (intobj)->diff->y * bias", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memcpy(&(dateobj)->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "memcpy(&dateobj->time->relative, (intobj)->diff, sizeof(struct timelib_rel_time))", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = intobj->diff->d * bias", "dateobj->time->relative.h = intobj->diff->h * bias", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = intobj->diff->i * bias", "dateobj->time->relative.m = intobj->diff->m * bias", "dateobj->time->relative.s = intobj->diff->s * bias", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = intobj->diff->y * bias", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&dateobj->time->relative, intobj->diff, sizeof(struct timelib_rel_time))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2873\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	2,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	3,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	4,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	5,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	6,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	7,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	8,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	9,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	10,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	11,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	12,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	13,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	14,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	15,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	16,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	17,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	18,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	19,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	20,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	21,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	22,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	23,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	24,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	25,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	26,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	27,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	28,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	29,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	30,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	31,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	32,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	33,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	34,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	35,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	36,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	37,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	38,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	39,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	40,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	41,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	42,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	43,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	44,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	45,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	46,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	47,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	48,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	49,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	50,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	51,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	52,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	53,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	54,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	55,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	56,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	57,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	58,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	59,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	60,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	61,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	62,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	63,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	64,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	65,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	66,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	67,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	68,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	69,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	70,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	71,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	72,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	73,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	74,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	75,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	76,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	77,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	78,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	79,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	80,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	81,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	82,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	83,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	84,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	85,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	86,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	87,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	88,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	89,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	90,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	91,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	92,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	93,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	94,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	95,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	96,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	97,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	98,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	99,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	100,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	101,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	102,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	103,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	104,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	105,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	106,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	107,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	108,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	109,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	110,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	111,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	112,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	113,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	114,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	115,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	116,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	117,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	118,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	119,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	120,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	121,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	122,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	123,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	124,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	125,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	126,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	127,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	128,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	129,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	130,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	131,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	132,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	133,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	134,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	135,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	136,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	137,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	138,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	139,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	140,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	141,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	142,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	143,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	144,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	145,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	146,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	147,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	148,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	149,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	150,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	151,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	152,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	153,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	154,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	155,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	156,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	157,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	158,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	159,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	160,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	161,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	162,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	163,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	164,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	165,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	166,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	167,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	168,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	169,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	170,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	171,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	172,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	173,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	174,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	175,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	176,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	177,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	178,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	179,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	180,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	181,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	182,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	183,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	184,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	185,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	186,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	187,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	188,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	189,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	190,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	191,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	192,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	193,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	194,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	195,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	196,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	197,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	198,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	199,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	200,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	201,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	202,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	203,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	204,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	205,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	206,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	207,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	208,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	209,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	210,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	211,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	212,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	213,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	214,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	215,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	216,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	217,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	218,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	219,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	220,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	221,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	222,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	223,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	224,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	225,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	226,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	227,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	228,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	229,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	230,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	231,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	232,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	233,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	234,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	235,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	236,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	237,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	238,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	239,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	240,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	241,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	242,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	243,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	244,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	245,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	246,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	247,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	248,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	249,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	250,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	251,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	252,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	253,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	254,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	255,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	256,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	257,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	258,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	259,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	260,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	261,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	262,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	263,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	264,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	265,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	266,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	267,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	268,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	269,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	270,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	271,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	272,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	273,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	274,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	275,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	276,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	277,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	278,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	279,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	280,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	281,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	282,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	283,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	284,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	285,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	286,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	287,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	288,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	289,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	290,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	291,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	292,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	293,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	294,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	295,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	296,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	297,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	298,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	299,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	300,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	301,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	302,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	303,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	304,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	305,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	306,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	307,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	308,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	309,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	310,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	311,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	312,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	313,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	314,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	315,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	316,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	317,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	318,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	319,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	320,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	321,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	322,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	323,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	324,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	325,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	326,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	327,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	328,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	329,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	330,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	331,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	332,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	333,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	334,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	335,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	336,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	337,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	338,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	339,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	340,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	341,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	342,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	343,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	344,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	345,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	346,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	347,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	348,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	349,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	350,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	351,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	352,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	353,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	354,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	355,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	356,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	357,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	358,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	359,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	360,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	361,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	362,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	363,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	364,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	365,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	366,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	367,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	368,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	369,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	370,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	371,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	372,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	373,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	374,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	375,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	376,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	377,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	378,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	379,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	380,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	381,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	382,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	383,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	384,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	385,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	386,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	387,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	388,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	389,
									"scores":	[-9.1990111515297031, -10.017605165529703, -9.6464833158297, -9.8137090105297027, -10.150729967529704, -8.739354815829703, -9.3074597006297033, -9.0614207868297036, -9.3074597006297033, -9.0985211868297036, -9.3445601006297032, -9.5665319086297, -9.5665319086297, -10.121605874629704, -9.875566960829703, -9.875566960829703, -9.875566960829703, -9.875566960829703, -9.875566960829703, -9.875566960829703, -9.875566960829703, -10.0864560778297, -10.121605874629704, -9.875566960829703, -9.875566960829703, -9.875566960829703, -9.875566960829703, -9.875566960829703, -9.875566960829703, -9.875566960829703, -9.875566960829703, -9.875566960829703]
								}]
						}, {
							"switch":	44,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2873,
							"begin_column":	2,
							"end_line":	2873,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L2873\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->have_relative = 0;\n", "{\n}\n", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0 * bias)", "dateobj->time->have_relative = (0 * ht)", "dateobj->time->have_relative = (0 * return_value_used)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->have_relative = (bias != 0)", "dateobj->time->have_relative = (bias * ht)", "dateobj->time->have_relative = (bias * return_value_used)", "dateobj->time->have_relative = (bias + 0)", "dateobj->time->have_relative = (bias - 0)", "dateobj->time->have_relative = (bias == 0)", "dateobj->time->have_relative = (dateobj != 0)", "dateobj->time->have_relative = (dateobj == 0)", "dateobj->time->have_relative = (ht != 0)", "dateobj->time->have_relative = (ht != bias)", "dateobj->time->have_relative = (ht != return_value_used)", "dateobj->time->have_relative = (ht * bias)", "dateobj->time->have_relative = (ht * return_value_used)", "dateobj->time->have_relative = (ht + 0)", "dateobj->time->have_relative = (ht + bias)", "dateobj->time->have_relative = (ht + return_value_used)", "dateobj->time->have_relative = (ht - 0)", "dateobj->time->have_relative = (ht - bias)", "dateobj->time->have_relative = (ht - return_value_used)", "dateobj->time->have_relative = (ht == 0)", "dateobj->time->have_relative = (ht == bias)", "dateobj->time->have_relative = (ht == return_value_used)", "dateobj->time->have_relative = (interval != 0)", "dateobj->time->have_relative = (interval == 0)", "dateobj->time->have_relative = (intobj != 0)", "dateobj->time->have_relative = (intobj == 0)", "dateobj->time->have_relative = (object != 0)", "dateobj->time->have_relative = (object != interval)", "dateobj->time->have_relative = (object == 0)", "dateobj->time->have_relative = (object == interval)", "dateobj->time->have_relative = (return_value != 0)", "dateobj->time->have_relative = (return_value != interval)", "dateobj->time->have_relative = (return_value != object)", "dateobj->time->have_relative = (return_value != this_ptr)", "dateobj->time->have_relative = (return_value == 0)", "dateobj->time->have_relative = (return_value == interval)", "dateobj->time->have_relative = (return_value == object)", "dateobj->time->have_relative = (return_value == this_ptr)", "dateobj->time->have_relative = (return_value_ptr != 0)", "dateobj->time->have_relative = (return_value_ptr == 0)", "dateobj->time->have_relative = (return_value_used != 0)", "dateobj->time->have_relative = (return_value_used != bias)", "dateobj->time->have_relative = (return_value_used * bias)", "dateobj->time->have_relative = (return_value_used * ht)", "dateobj->time->have_relative = (return_value_used + 0)", "dateobj->time->have_relative = (return_value_used + bias)", "dateobj->time->have_relative = (return_value_used - 0)", "dateobj->time->have_relative = (return_value_used - bias)", "dateobj->time->have_relative = (return_value_used == 0)", "dateobj->time->have_relative = (return_value_used == bias)", "dateobj->time->have_relative = (this_ptr != 0)", "dateobj->time->have_relative = (this_ptr != interval)", "dateobj->time->have_relative = (this_ptr != object)", "dateobj->time->have_relative = (this_ptr == 0)", "dateobj->time->have_relative = (this_ptr == interval)", "dateobj->time->have_relative = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.1375310513297, -8.6670849073297, -9.1518951518297, -8.214171057729704, -8.6235675587297038, -8.6022026008297, -8.5695757508297028, -7.8116876508297031, -8.5695757508297028, -8.1060384508297041, -8.8639265508297029, -8.8866308908297036, -8.8866308908297036, -9.094420560829704, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033, -8.8057924608297036, -9.094420560829704, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033, -8.3365324608297033]
								}, {
									"case":	2,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	3,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	4,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	5,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	6,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	7,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	8,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	9,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	10,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	11,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	12,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	13,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	14,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	15,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	16,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	17,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	18,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	19,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	20,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	21,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	22,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	23,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	24,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	25,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	26,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	27,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	28,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	29,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	30,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	31,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	32,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	33,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	34,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	35,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	36,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	37,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	38,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	39,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	40,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	41,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	42,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	43,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	44,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	45,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	46,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	47,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	48,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	49,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	50,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	51,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	52,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	53,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	54,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	55,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	56,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	57,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	58,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	59,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	60,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	61,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	62,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	63,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	64,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	65,
									"scores":	[-5.5282395908297035]
								}, {
									"case":	66,
									"scores":	[-5.5282395908297035]
								}]
						}]
				}, {
					"line":	2883,
					"switches":	[]
				}, {
					"line":	2884,
					"switches":	[]
				}, {
					"line":	2885,
					"switches":	[]
				}, {
					"line":	2886,
					"switches":	[]
				}, {
					"line":	2888,
					"switches":	[{
							"switch":	45,
							"types":	[[], [], [], [], [399], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], [], [], [], [303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398], [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], [], [], [], [], [], []],
							"begin_line":	2889,
							"begin_column":	0,
							"end_line":	2889,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2889\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.023171907891717]
								}, {
									"case":	2,
									"scores":	[-5.023171907891717]
								}, {
									"case":	3,
									"scores":	[-5.023171907891717]
								}, {
									"case":	4,
									"scores":	[-5.023171907891717]
								}, {
									"case":	5,
									"scores":	[-5.023171907891717]
								}, {
									"case":	6,
									"scores":	[-5.023171907891717]
								}, {
									"case":	7,
									"scores":	[-5.023171907891717]
								}, {
									"case":	8,
									"scores":	[-5.023171907891717]
								}, {
									"case":	9,
									"scores":	[-5.023171907891717]
								}, {
									"case":	10,
									"scores":	[-5.023171907891717]
								}, {
									"case":	11,
									"scores":	[-5.023171907891717]
								}, {
									"case":	12,
									"scores":	[-5.023171907891717]
								}, {
									"case":	13,
									"scores":	[-5.023171907891717]
								}, {
									"case":	14,
									"scores":	[-5.023171907891717]
								}, {
									"case":	15,
									"scores":	[-5.023171907891717]
								}, {
									"case":	16,
									"scores":	[-5.023171907891717]
								}, {
									"case":	17,
									"scores":	[-5.023171907891717]
								}, {
									"case":	18,
									"scores":	[-5.023171907891717]
								}, {
									"case":	19,
									"scores":	[-5.023171907891717]
								}, {
									"case":	20,
									"scores":	[-5.023171907891717]
								}, {
									"case":	21,
									"scores":	[-5.023171907891717]
								}, {
									"case":	22,
									"scores":	[-5.023171907891717]
								}, {
									"case":	23,
									"scores":	[-5.023171907891717]
								}, {
									"case":	24,
									"scores":	[-5.023171907891717]
								}, {
									"case":	25,
									"scores":	[-5.023171907891717]
								}, {
									"case":	26,
									"scores":	[-5.023171907891717]
								}, {
									"case":	27,
									"scores":	[-5.023171907891717]
								}, {
									"case":	28,
									"scores":	[-5.023171907891717]
								}, {
									"case":	29,
									"scores":	[-5.023171907891717]
								}, {
									"case":	30,
									"scores":	[-5.023171907891717]
								}, {
									"case":	31,
									"scores":	[-5.023171907891717]
								}, {
									"case":	32,
									"scores":	[-5.023171907891717]
								}, {
									"case":	33,
									"scores":	[-5.023171907891717]
								}, {
									"case":	34,
									"scores":	[-5.023171907891717]
								}, {
									"case":	35,
									"scores":	[-5.023171907891717]
								}, {
									"case":	36,
									"scores":	[-5.023171907891717]
								}, {
									"case":	37,
									"scores":	[-5.023171907891717]
								}, {
									"case":	38,
									"scores":	[-5.023171907891717]
								}, {
									"case":	39,
									"scores":	[-5.023171907891717]
								}, {
									"case":	40,
									"scores":	[-5.023171907891717]
								}, {
									"case":	41,
									"scores":	[-5.023171907891717]
								}, {
									"case":	42,
									"scores":	[-5.023171907891717]
								}, {
									"case":	43,
									"scores":	[-5.023171907891717]
								}, {
									"case":	44,
									"scores":	[-5.023171907891717]
								}, {
									"case":	45,
									"scores":	[-5.023171907891717]
								}, {
									"case":	46,
									"scores":	[-5.023171907891717]
								}, {
									"case":	47,
									"scores":	[-5.023171907891717]
								}, {
									"case":	48,
									"scores":	[-5.023171907891717]
								}, {
									"case":	49,
									"scores":	[-5.023171907891717]
								}, {
									"case":	50,
									"scores":	[-5.023171907891717]
								}, {
									"case":	51,
									"scores":	[-5.023171907891717]
								}, {
									"case":	52,
									"scores":	[-5.023171907891717]
								}, {
									"case":	53,
									"scores":	[-5.023171907891717]
								}, {
									"case":	54,
									"scores":	[-5.023171907891717]
								}, {
									"case":	55,
									"scores":	[-5.023171907891717]
								}, {
									"case":	56,
									"scores":	[-5.023171907891717]
								}, {
									"case":	57,
									"scores":	[-5.023171907891717]
								}, {
									"case":	58,
									"scores":	[-5.023171907891717]
								}, {
									"case":	59,
									"scores":	[-5.023171907891717]
								}, {
									"case":	60,
									"scores":	[-5.023171907891717]
								}, {
									"case":	61,
									"scores":	[-5.023171907891717]
								}, {
									"case":	62,
									"scores":	[-5.023171907891717]
								}, {
									"case":	63,
									"scores":	[-5.023171907891717]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	246,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	247,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	248,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	249,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	250,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	251,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	252,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	253,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	254,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	255,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	256,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	257,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	258,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	259,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	260,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	261,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	262,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	263,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	264,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	265,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	266,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	267,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	268,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	269,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	270,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	271,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	272,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	273,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	274,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	275,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	276,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	277,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	278,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	279,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	280,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	281,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	282,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	283,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	284,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	285,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	286,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	287,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	288,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	289,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	290,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	291,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	292,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	293,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	294,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	295,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	296,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	297,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	298,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	299,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	300,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	301,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	302,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	303,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	304,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	305,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	306,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	307,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	308,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	309,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	310,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	311,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	312,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	313,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	314,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	315,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	316,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	317,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	318,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	319,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	320,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	321,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	322,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	323,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	324,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	325,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	326,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	327,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	328,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	329,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	330,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	331,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	332,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	333,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	334,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	335,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	336,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	337,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	338,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	339,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	340,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	341,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	342,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	343,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	344,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	345,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	346,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	347,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	348,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	349,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	350,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	351,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	352,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	353,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	354,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	355,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	356,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	357,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	358,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	359,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	360,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	361,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	362,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	363,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	364,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	365,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	366,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	367,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	368,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	369,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	370,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	371,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	372,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	373,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	374,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	375,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	376,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	377,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	378,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	379,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	380,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	381,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	382,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	383,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	384,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	385,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	386,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	387,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	388,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	389,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	390,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	391,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	392,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	393,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	394,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	395,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	396,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	397,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	398,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	399,
									"scores":	[-8.2007953088917169, -8.4468342226917166, -8.8339987746917163, -9.50908512169172, -8.4112208566917168, -8.4112208566917168, -9.30214219169172, -10.100146568591718, -9.26504179169172, -9.0190028778917171, -9.57556387789172, -9.7864529948917163, -9.0746288778917172, -9.821602791691717, -9.57556387789172, -9.57556387789172, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.57556387789172, -9.57556387789172, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.57556387789172, -9.57556387789172, -9.57556387789172, -9.57556387789172, -9.57556387789172, -9.57556387789172, -9.7864529948917163, -9.57556387789172, -9.7864529948917163, -9.57556387789172, -9.7864529948917163, -9.7864529948917163, -9.57556387789172, -9.7864529948917163, -9.0746288778917172, -9.821602791691717, -9.57556387789172, -9.57556387789172, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.57556387789172, -9.57556387789172, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.7864529948917163, -9.57556387789172, -9.57556387789172, -9.57556387789172, -9.57556387789172, -9.57556387789172, -9.57556387789172, -9.7864529948917163, -9.57556387789172, -9.7864529948917163, -9.57556387789172, -9.7864529948917163, -9.7864529948917163]
								}]
						}, {
							"switch":	46,
							"types":	[[6], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5], []],
							"begin_line":	2889,
							"begin_column":	2,
							"end_line":	2891,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L2889\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) || __is_neg(\"\", \"L2889\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (dprintf((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_get_parameters_ex((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if (zend_parse_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) && !__is_neg(\"\", \"L2889\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences))) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.1765470644281444, -2.9344351644281446, -2.2203285334281446, -2.898168764428144, -2.6433418044281445, -2.6433418044281445, -3.6478704644281446, -3.624177343328145, -3.3535196644281449, -2.5956315644281447, -2.8066786744281447, -3.2759386744281449, -2.4846676444281446, -3.5645667744281448, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.4846676444281446, -3.5645667744281448, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -3.2759386744281449, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -2.8066786744281447, -3.2759386744281449, -3.2759386744281449]
								}, {
									"case":	2,
									"scores":	[-3.7298604103281461, -4.4877485103281458, -3.7736418793281454, -4.4514821103281461, -4.1966551503281462, -4.1966551503281462, -5.2011838103281471, -5.1774906892281471, -4.906833010328147, -4.1489449103281473, -4.3599920203281464, -4.8292520203281466, -4.0379809903281467, -5.117880120328147, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.3599920203281464, -4.8292520203281466, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466, -4.3599920203281464, -4.8292520203281466, -4.0379809903281467, -5.117880120328147, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.3599920203281464, -4.8292520203281466, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.7298604103281461, -4.4877485103281458, -3.7736418793281454, -4.4514821103281461, -4.1966551503281462, -4.1966551503281462, -5.2011838103281471, -5.1774906892281471, -4.906833010328147, -4.1489449103281473, -4.3599920203281464, -4.8292520203281466, -4.0379809903281467, -5.117880120328147, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.3599920203281464, -4.8292520203281466, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466, -4.3599920203281464, -4.8292520203281466, -4.0379809903281467, -5.117880120328147, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.8292520203281466, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.3599920203281464, -4.8292520203281466, -4.3599920203281464, -4.8292520203281466, -4.3599920203281464, -4.8292520203281466, -4.8292520203281466]
								}]
						}, {
							"switch":	47,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2889,
							"begin_column":	2,
							"end_line":	2891,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L2889\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences)))\n    if (zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1) {\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L2889\", 80, &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(object), sizeof (object), &(interval), sizeof (interval), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(date_ce_date->type), sizeof (date_ce_date->type), &(date_ce_date->name), sizeof (date_ce_date->name), &(date_ce_date->name_length), sizeof (date_ce_date->name_length), &(date_ce_date->parent), sizeof (date_ce_date->parent), &(date_ce_date->refcount), sizeof (date_ce_date->refcount), &(date_ce_date->ce_flags), sizeof (date_ce_date->ce_flags), &(date_ce_date->default_properties_table), sizeof (date_ce_date->default_properties_table), &(date_ce_date->default_static_members_table), sizeof (date_ce_date->default_static_members_table), &(date_ce_date->static_members_table), sizeof (date_ce_date->static_members_table), &(date_ce_date->default_properties_count), sizeof (date_ce_date->default_properties_count), &(date_ce_date->default_static_members_count), sizeof (date_ce_date->default_static_members_count), &(date_ce_date->constructor), sizeof (date_ce_date->constructor), &(date_ce_date->destructor), sizeof (date_ce_date->destructor), &(date_ce_date->clone), sizeof (date_ce_date->clone), &(date_ce_date->__get), sizeof (date_ce_date->__get), &(date_ce_date->__set), sizeof (date_ce_date->__set), &(date_ce_date->__unset), sizeof (date_ce_date->__unset), &(date_ce_date->__isset), sizeof (date_ce_date->__isset), &(date_ce_date->__call), sizeof (date_ce_date->__call), &(date_ce_date->__callstatic), sizeof (date_ce_date->__callstatic), &(date_ce_date->__tostring), sizeof (date_ce_date->__tostring), &(date_ce_date->serialize_func), sizeof (date_ce_date->serialize_func), &(date_ce_date->unserialize_func), sizeof (date_ce_date->unserialize_func), &(date_ce_date->create_object), sizeof (date_ce_date->create_object), &(date_ce_date->get_iterator), sizeof (date_ce_date->get_iterator), &(date_ce_date->interface_gets_implemented), sizeof (date_ce_date->interface_gets_implemented), &(date_ce_date->get_static_method), sizeof (date_ce_date->get_static_method), &(date_ce_date->serialize), sizeof (date_ce_date->serialize), &(date_ce_date->unserialize), sizeof (date_ce_date->unserialize), &(date_ce_date->interfaces), sizeof (date_ce_date->interfaces), &(date_ce_date->num_interfaces), sizeof (date_ce_date->num_interfaces), &(date_ce_date->traits), sizeof (date_ce_date->traits), &(date_ce_date->num_traits), sizeof (date_ce_date->num_traits), &(date_ce_date->trait_aliases), sizeof (date_ce_date->trait_aliases), &(date_ce_date->trait_precedences), sizeof (date_ce_date->trait_precedences), &(date_ce_interval->type), sizeof (date_ce_interval->type), &(date_ce_interval->name), sizeof (date_ce_interval->name), &(date_ce_interval->name_length), sizeof (date_ce_interval->name_length), &(date_ce_interval->parent), sizeof (date_ce_interval->parent), &(date_ce_interval->refcount), sizeof (date_ce_interval->refcount), &(date_ce_interval->ce_flags), sizeof (date_ce_interval->ce_flags), &(date_ce_interval->default_properties_table), sizeof (date_ce_interval->default_properties_table), &(date_ce_interval->default_static_members_table), sizeof (date_ce_interval->default_static_members_table), &(date_ce_interval->static_members_table), sizeof (date_ce_interval->static_members_table), &(date_ce_interval->default_properties_count), sizeof (date_ce_interval->default_properties_count), &(date_ce_interval->default_static_members_count), sizeof (date_ce_interval->default_static_members_count), &(date_ce_interval->constructor), sizeof (date_ce_interval->constructor), &(date_ce_interval->destructor), sizeof (date_ce_interval->destructor), &(date_ce_interval->clone), sizeof (date_ce_interval->clone), &(date_ce_interval->__get), sizeof (date_ce_interval->__get), &(date_ce_interval->__set), sizeof (date_ce_interval->__set), &(date_ce_interval->__unset), sizeof (date_ce_interval->__unset), &(date_ce_interval->__isset), sizeof (date_ce_interval->__isset), &(date_ce_interval->__call), sizeof (date_ce_interval->__call), &(date_ce_interval->__callstatic), sizeof (date_ce_interval->__callstatic), &(date_ce_interval->__tostring), sizeof (date_ce_interval->__tostring), &(date_ce_interval->serialize_func), sizeof (date_ce_interval->serialize_func), &(date_ce_interval->unserialize_func), sizeof (date_ce_interval->unserialize_func), &(date_ce_interval->create_object), sizeof (date_ce_interval->create_object), &(date_ce_interval->get_iterator), sizeof (date_ce_interval->get_iterator), &(date_ce_interval->interface_gets_implemented), sizeof (date_ce_interval->interface_gets_implemented), &(date_ce_interval->get_static_method), sizeof (date_ce_interval->get_static_method), &(date_ce_interval->serialize), sizeof (date_ce_interval->serialize), &(date_ce_interval->unserialize), sizeof (date_ce_interval->unserialize), &(date_ce_interval->interfaces), sizeof (date_ce_interval->interfaces), &(date_ce_interval->num_interfaces), sizeof (date_ce_interval->num_interfaces), &(date_ce_interval->traits), sizeof (date_ce_interval->traits), &(date_ce_interval->num_traits), sizeof (date_ce_interval->num_traits), &(date_ce_interval->trait_aliases), sizeof (date_ce_interval->trait_aliases), &(date_ce_interval->trait_precedences), sizeof (date_ce_interval->trait_precedences)) && (zend_parse_method_parameters((ht), (this_ptr), \"OO\", &object, date_ce_date, &interval, date_ce_interval) == -1)) {\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3465197678917171, -7.1044078678917169, -6.3903012368917169, -7.0681414678917172, -6.8133145078917163, -6.8133145078917163, -7.8178431678917164, -7.7941500467917173, -7.5234923678917163, -6.7656042678917165, -6.9766513778917165, -7.4459113778917168, -6.6546403478917169, -7.7345394778917163, -6.9766513778917165, -6.9766513778917165, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -6.9766513778917165, -6.9766513778917165, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -6.9766513778917165, -6.9766513778917165, -6.9766513778917165, -6.9766513778917165, -6.9766513778917165, -6.9766513778917165, -7.4459113778917168, -6.9766513778917165, -7.4459113778917168, -6.9766513778917165, -7.4459113778917168, -7.4459113778917168, -6.9766513778917165, -7.4459113778917168, -6.6546403478917169, -7.7345394778917163, -6.9766513778917165, -6.9766513778917165, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -6.9766513778917165, -6.9766513778917165, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -7.4459113778917168, -6.9766513778917165, -6.9766513778917165, -6.9766513778917165, -6.9766513778917165, -6.9766513778917165, -6.9766513778917165, -7.4459113778917168, -6.9766513778917165, -7.4459113778917168, -6.9766513778917165, -7.4459113778917168, -7.4459113778917168]
								}, {
									"case":	2,
									"scores":	[-6.018721202791717, -6.7766093027917176, -6.0625026717917176, -6.740342902791717, -6.4855159427917179, -6.4855159427917179, -7.4900446027917162, -7.4663514816917171, -7.1956938027917161, -6.4378057027917164, -6.6488528127917164, -7.1181128127917166, -6.3268417827917167, -7.4067409127917161, -6.6488528127917164, -6.6488528127917164, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -6.6488528127917164, -6.6488528127917164, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -6.6488528127917164, -6.6488528127917164, -6.6488528127917164, -6.6488528127917164, -6.6488528127917164, -6.6488528127917164, -7.1181128127917166, -6.6488528127917164, -7.1181128127917166, -6.6488528127917164, -7.1181128127917166, -7.1181128127917166, -6.6488528127917164, -7.1181128127917166, -6.3268417827917167, -7.4067409127917161, -6.6488528127917164, -6.6488528127917164, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -6.6488528127917164, -6.6488528127917164, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -7.1181128127917166, -6.6488528127917164, -6.6488528127917164, -6.6488528127917164, -6.6488528127917164, -6.6488528127917164, -6.6488528127917164, -7.1181128127917166, -6.6488528127917164, -7.1181128127917166, -6.6488528127917164, -7.1181128127917166, -7.1181128127917166]
								}]
						}]
				}, {
					"line":	2891,
					"switches":	[{
							"switch":	48,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2892,
							"begin_column":	0,
							"end_line":	2892,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2892\", 32, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	2,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	3,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	4,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	5,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	6,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	7,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	8,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	9,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	10,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	11,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	12,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	13,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	14,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	15,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	16,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	17,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	18,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	19,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	20,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	21,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	22,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	23,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	24,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	25,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	26,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	27,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	28,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	29,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	30,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	31,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	32,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	33,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	34,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	35,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	36,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	37,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	38,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	39,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	40,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	41,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	42,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	43,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	44,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	45,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	46,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	47,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	48,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	49,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	50,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	51,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	52,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	53,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	54,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	55,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	56,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	57,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	58,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	59,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	60,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	61,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	62,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	63,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	64,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	65,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	66,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	67,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	68,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	69,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	70,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	71,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	72,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	73,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	74,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	75,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	76,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	77,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	78,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	79,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	80,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	81,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	82,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	83,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	84,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	85,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	86,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	87,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	88,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	89,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	90,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	91,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	92,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	93,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	94,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	95,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	96,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	97,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	98,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	99,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	100,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	101,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	102,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	103,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	104,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	105,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	106,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	107,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	108,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	109,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	110,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	111,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	112,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	113,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	114,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	115,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	116,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	117,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	118,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	119,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	120,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	121,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	122,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	123,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	124,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	125,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	126,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	127,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	128,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	129,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	130,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	131,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	132,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	133,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	134,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	135,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	136,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	137,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	138,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	139,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	140,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	141,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	142,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	143,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	144,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	145,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	146,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	147,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	148,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	149,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	150,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	151,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	152,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	153,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	154,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	155,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	156,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	157,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	158,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	159,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	160,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	161,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	162,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	163,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	164,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	165,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	166,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	167,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	168,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	169,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	170,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	171,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	172,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	173,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	174,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	175,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	176,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	177,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	178,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	179,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	180,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	181,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	182,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	183,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	184,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	185,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	186,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	187,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	188,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	189,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	190,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	191,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	192,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	193,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	194,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	195,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	196,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	197,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	198,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	199,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	200,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	201,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	202,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	203,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	204,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	205,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	206,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	207,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	208,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	209,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	210,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	211,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	212,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	213,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	214,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	215,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	216,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	217,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	218,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	219,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	220,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	221,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	222,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	223,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	224,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	225,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	226,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	227,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	228,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	229,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	230,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	231,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	232,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	233,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	234,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	235,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	236,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	237,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	238,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	239,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	240,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	241,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	242,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	243,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	244,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	245,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	246,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	247,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	248,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	249,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	250,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	251,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	252,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	253,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	254,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	255,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	256,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	257,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	258,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	259,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	260,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	261,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	262,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	263,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	264,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	265,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	266,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	267,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	268,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	269,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	270,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	271,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	272,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	273,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	274,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	275,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	276,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	277,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	278,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	279,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	280,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	281,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	282,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	283,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	284,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	285,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	286,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	287,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	288,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	289,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	290,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	291,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	292,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	293,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	294,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	295,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	296,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	297,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	298,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	299,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	300,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	301,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	302,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	303,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	304,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	305,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	306,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	307,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	308,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	309,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	310,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	311,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	312,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	313,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	314,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	315,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	316,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	317,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	318,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	319,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	320,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	321,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	322,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	323,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	324,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	325,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	326,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	327,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	328,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	329,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	330,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	331,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	332,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	333,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	334,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	335,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	336,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	337,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	338,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	339,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	340,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	341,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	342,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	343,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	344,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	345,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	346,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	347,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	348,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	349,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	350,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	351,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	352,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	353,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	354,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	355,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	356,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	357,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	358,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	359,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	360,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	361,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	362,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	363,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	364,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	365,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	366,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	367,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	368,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	369,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	370,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	371,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	372,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	373,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	374,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	375,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	376,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	377,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	378,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	379,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	380,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	381,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	382,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	383,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	384,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	385,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	386,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	387,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	388,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	389,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	390,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	391,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	392,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	393,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	394,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	395,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	396,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	397,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	398,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	399,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	400,
									"scores":	[-5.8457571553741978, -8.7356939822742, -8.7963178843741971, -9.3157784843742, -8.0201787773742, -8.7278190043741972, -8.5703930505742, -8.8164319643742, -8.7808185983741964, -8.7808185983741964, -8.5131785705742, -9.0697395705742, -9.0697395705742, -9.3157784843742, -9.0697395705742, -9.0697395705742, -9.0697395705742, -9.0697395705742, -9.0697395705742, -9.0697395705742, -9.0697395705742, -9.2806286875741968, -9.3157784843742, -9.0697395705742, -9.0697395705742, -9.0697395705742, -9.0697395705742, -9.0697395705742, -9.0697395705742, -9.0697395705742, -9.0697395705742, -9.0697395705742]
								}]
						}, {
							"switch":	49,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2892,
							"begin_column":	2,
							"end_line":	2892,
							"end_column":	74,
							"patch_codes":	["if (!__is_neg(\"\", \"L2892\", 32, &(object), sizeof (object), &(dateobj), sizeof (dateobj), &(return_value), sizeof (return_value), &(dateobj->time), sizeof (dateobj->time), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj = (php_date_obj *)zend_object_store_get_object(object);\n", "{\n}\n", "dateobj = (dateobj)", "dateobj = (php_date_obj *)zend_object_store_get_object(object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2716189945741974, -8.1870663194742, -7.9702868605741966, -7.8869831705741973, -7.3943643435741979, -7.5428294805741967, -7.3013816065741972, -8.0592697065741969, -7.7681763465741973, -7.7681763465741973, -6.9180479605741976, -7.1290950705741967, -7.1290950705741967, -7.8869831705741973, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967, -7.5983550705741969, -7.8869831705741973, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967, -7.1290950705741967]
								}, {
									"case":	2,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	3,
									"scores":	[-5.0029692005741975]
								}, {
									"case":	4,
									"scores":	[-5.0029692005741975]
								}]
						}]
				}, {
					"line":	2892,
					"switches":	[{
							"switch":	50,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2893,
							"begin_column":	0,
							"end_line":	2893,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2893\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.982766493256678]
								}, {
									"case":	2,
									"scores":	[-4.982766493256678]
								}, {
									"case":	3,
									"scores":	[-4.982766493256678]
								}, {
									"case":	4,
									"scores":	[-4.982766493256678]
								}, {
									"case":	5,
									"scores":	[-4.982766493256678]
								}, {
									"case":	6,
									"scores":	[-4.982766493256678]
								}, {
									"case":	7,
									"scores":	[-4.982766493256678]
								}, {
									"case":	8,
									"scores":	[-4.982766493256678]
								}, {
									"case":	9,
									"scores":	[-4.982766493256678]
								}, {
									"case":	10,
									"scores":	[-4.982766493256678]
								}, {
									"case":	11,
									"scores":	[-4.982766493256678]
								}, {
									"case":	12,
									"scores":	[-4.982766493256678]
								}, {
									"case":	13,
									"scores":	[-4.982766493256678]
								}, {
									"case":	14,
									"scores":	[-4.982766493256678]
								}, {
									"case":	15,
									"scores":	[-4.982766493256678]
								}, {
									"case":	16,
									"scores":	[-4.982766493256678]
								}, {
									"case":	17,
									"scores":	[-4.982766493256678]
								}, {
									"case":	18,
									"scores":	[-4.982766493256678]
								}, {
									"case":	19,
									"scores":	[-4.982766493256678]
								}, {
									"case":	20,
									"scores":	[-4.982766493256678]
								}, {
									"case":	21,
									"scores":	[-4.982766493256678]
								}, {
									"case":	22,
									"scores":	[-4.982766493256678]
								}, {
									"case":	23,
									"scores":	[-4.982766493256678]
								}, {
									"case":	24,
									"scores":	[-4.982766493256678]
								}, {
									"case":	25,
									"scores":	[-4.982766493256678]
								}, {
									"case":	26,
									"scores":	[-4.982766493256678]
								}, {
									"case":	27,
									"scores":	[-4.982766493256678]
								}, {
									"case":	28,
									"scores":	[-4.982766493256678]
								}, {
									"case":	29,
									"scores":	[-4.982766493256678]
								}, {
									"case":	30,
									"scores":	[-4.982766493256678]
								}, {
									"case":	31,
									"scores":	[-4.982766493256678]
								}, {
									"case":	32,
									"scores":	[-4.982766493256678]
								}, {
									"case":	33,
									"scores":	[-4.982766493256678]
								}, {
									"case":	34,
									"scores":	[-4.982766493256678]
								}, {
									"case":	35,
									"scores":	[-4.982766493256678]
								}, {
									"case":	36,
									"scores":	[-4.982766493256678]
								}, {
									"case":	37,
									"scores":	[-4.982766493256678]
								}, {
									"case":	38,
									"scores":	[-4.982766493256678]
								}, {
									"case":	39,
									"scores":	[-4.982766493256678]
								}, {
									"case":	40,
									"scores":	[-4.982766493256678]
								}, {
									"case":	41,
									"scores":	[-4.982766493256678]
								}, {
									"case":	42,
									"scores":	[-4.982766493256678]
								}, {
									"case":	43,
									"scores":	[-4.982766493256678]
								}, {
									"case":	44,
									"scores":	[-4.982766493256678]
								}, {
									"case":	45,
									"scores":	[-4.982766493256678]
								}, {
									"case":	46,
									"scores":	[-4.982766493256678]
								}, {
									"case":	47,
									"scores":	[-4.982766493256678]
								}, {
									"case":	48,
									"scores":	[-4.982766493256678]
								}, {
									"case":	49,
									"scores":	[-4.982766493256678]
								}, {
									"case":	50,
									"scores":	[-4.982766493256678]
								}, {
									"case":	51,
									"scores":	[-4.982766493256678]
								}, {
									"case":	52,
									"scores":	[-4.982766493256678]
								}, {
									"case":	53,
									"scores":	[-4.982766493256678]
								}, {
									"case":	54,
									"scores":	[-4.982766493256678]
								}, {
									"case":	55,
									"scores":	[-4.982766493256678]
								}, {
									"case":	56,
									"scores":	[-4.982766493256678]
								}, {
									"case":	57,
									"scores":	[-4.982766493256678]
								}, {
									"case":	58,
									"scores":	[-4.982766493256678]
								}, {
									"case":	59,
									"scores":	[-4.982766493256678]
								}, {
									"case":	60,
									"scores":	[-4.982766493256678]
								}, {
									"case":	61,
									"scores":	[-4.982766493256678]
								}, {
									"case":	62,
									"scores":	[-4.982766493256678]
								}, {
									"case":	63,
									"scores":	[-4.982766493256678]
								}, {
									"case":	64,
									"scores":	[-4.982766493256678]
								}, {
									"case":	65,
									"scores":	[-4.982766493256678]
								}, {
									"case":	66,
									"scores":	[-4.982766493256678]
								}, {
									"case":	67,
									"scores":	[-4.982766493256678]
								}, {
									"case":	68,
									"scores":	[-4.982766493256678]
								}, {
									"case":	69,
									"scores":	[-4.982766493256678]
								}, {
									"case":	70,
									"scores":	[-4.982766493256678]
								}, {
									"case":	71,
									"scores":	[-4.982766493256678]
								}, {
									"case":	72,
									"scores":	[-4.982766493256678]
								}, {
									"case":	73,
									"scores":	[-4.982766493256678]
								}, {
									"case":	74,
									"scores":	[-4.982766493256678]
								}, {
									"case":	75,
									"scores":	[-4.982766493256678]
								}, {
									"case":	76,
									"scores":	[-4.982766493256678]
								}, {
									"case":	77,
									"scores":	[-4.982766493256678]
								}, {
									"case":	78,
									"scores":	[-4.982766493256678]
								}, {
									"case":	79,
									"scores":	[-4.982766493256678]
								}, {
									"case":	80,
									"scores":	[-4.982766493256678]
								}, {
									"case":	81,
									"scores":	[-4.982766493256678]
								}, {
									"case":	82,
									"scores":	[-4.982766493256678]
								}, {
									"case":	83,
									"scores":	[-4.982766493256678]
								}, {
									"case":	84,
									"scores":	[-4.982766493256678]
								}, {
									"case":	85,
									"scores":	[-4.982766493256678]
								}, {
									"case":	86,
									"scores":	[-4.982766493256678]
								}, {
									"case":	87,
									"scores":	[-4.982766493256678]
								}, {
									"case":	88,
									"scores":	[-4.982766493256678]
								}, {
									"case":	89,
									"scores":	[-4.982766493256678]
								}, {
									"case":	90,
									"scores":	[-4.982766493256678]
								}, {
									"case":	91,
									"scores":	[-4.982766493256678]
								}, {
									"case":	92,
									"scores":	[-4.982766493256678]
								}, {
									"case":	93,
									"scores":	[-4.982766493256678]
								}, {
									"case":	94,
									"scores":	[-4.982766493256678]
								}, {
									"case":	95,
									"scores":	[-4.982766493256678]
								}, {
									"case":	96,
									"scores":	[-4.982766493256678]
								}, {
									"case":	97,
									"scores":	[-4.982766493256678]
								}, {
									"case":	98,
									"scores":	[-4.982766493256678]
								}, {
									"case":	99,
									"scores":	[-4.982766493256678]
								}, {
									"case":	100,
									"scores":	[-4.982766493256678]
								}, {
									"case":	101,
									"scores":	[-4.982766493256678]
								}, {
									"case":	102,
									"scores":	[-4.982766493256678]
								}, {
									"case":	103,
									"scores":	[-4.982766493256678]
								}, {
									"case":	104,
									"scores":	[-4.982766493256678]
								}, {
									"case":	105,
									"scores":	[-4.982766493256678]
								}, {
									"case":	106,
									"scores":	[-4.982766493256678]
								}, {
									"case":	107,
									"scores":	[-4.982766493256678]
								}, {
									"case":	108,
									"scores":	[-4.982766493256678]
								}, {
									"case":	109,
									"scores":	[-4.982766493256678]
								}, {
									"case":	110,
									"scores":	[-4.982766493256678]
								}, {
									"case":	111,
									"scores":	[-4.982766493256678]
								}, {
									"case":	112,
									"scores":	[-4.982766493256678]
								}, {
									"case":	113,
									"scores":	[-4.982766493256678]
								}, {
									"case":	114,
									"scores":	[-4.982766493256678]
								}, {
									"case":	115,
									"scores":	[-4.982766493256678]
								}, {
									"case":	116,
									"scores":	[-4.982766493256678]
								}, {
									"case":	117,
									"scores":	[-4.982766493256678]
								}, {
									"case":	118,
									"scores":	[-4.982766493256678]
								}, {
									"case":	119,
									"scores":	[-4.982766493256678]
								}, {
									"case":	120,
									"scores":	[-4.982766493256678]
								}, {
									"case":	121,
									"scores":	[-4.982766493256678]
								}, {
									"case":	122,
									"scores":	[-4.982766493256678]
								}, {
									"case":	123,
									"scores":	[-4.982766493256678]
								}, {
									"case":	124,
									"scores":	[-4.982766493256678]
								}, {
									"case":	125,
									"scores":	[-4.982766493256678]
								}, {
									"case":	126,
									"scores":	[-4.982766493256678]
								}, {
									"case":	127,
									"scores":	[-4.982766493256678]
								}, {
									"case":	128,
									"scores":	[-4.982766493256678]
								}, {
									"case":	129,
									"scores":	[-4.982766493256678]
								}, {
									"case":	130,
									"scores":	[-4.982766493256678]
								}, {
									"case":	131,
									"scores":	[-4.982766493256678]
								}, {
									"case":	132,
									"scores":	[-4.982766493256678]
								}, {
									"case":	133,
									"scores":	[-4.982766493256678]
								}, {
									"case":	134,
									"scores":	[-4.982766493256678]
								}, {
									"case":	135,
									"scores":	[-4.982766493256678]
								}, {
									"case":	136,
									"scores":	[-4.982766493256678]
								}, {
									"case":	137,
									"scores":	[-4.982766493256678]
								}, {
									"case":	138,
									"scores":	[-4.982766493256678]
								}, {
									"case":	139,
									"scores":	[-4.982766493256678]
								}, {
									"case":	140,
									"scores":	[-4.982766493256678]
								}, {
									"case":	141,
									"scores":	[-4.982766493256678]
								}, {
									"case":	142,
									"scores":	[-4.982766493256678]
								}, {
									"case":	143,
									"scores":	[-4.982766493256678]
								}, {
									"case":	144,
									"scores":	[-4.982766493256678]
								}, {
									"case":	145,
									"scores":	[-4.982766493256678]
								}, {
									"case":	146,
									"scores":	[-4.982766493256678]
								}, {
									"case":	147,
									"scores":	[-4.982766493256678]
								}, {
									"case":	148,
									"scores":	[-4.982766493256678]
								}, {
									"case":	149,
									"scores":	[-4.982766493256678]
								}, {
									"case":	150,
									"scores":	[-4.982766493256678]
								}, {
									"case":	151,
									"scores":	[-4.982766493256678]
								}, {
									"case":	152,
									"scores":	[-4.982766493256678]
								}, {
									"case":	153,
									"scores":	[-4.982766493256678]
								}, {
									"case":	154,
									"scores":	[-4.982766493256678]
								}, {
									"case":	155,
									"scores":	[-4.982766493256678]
								}, {
									"case":	156,
									"scores":	[-4.982766493256678]
								}, {
									"case":	157,
									"scores":	[-4.982766493256678]
								}, {
									"case":	158,
									"scores":	[-4.982766493256678]
								}, {
									"case":	159,
									"scores":	[-4.982766493256678]
								}, {
									"case":	160,
									"scores":	[-4.982766493256678]
								}, {
									"case":	161,
									"scores":	[-4.982766493256678]
								}, {
									"case":	162,
									"scores":	[-4.982766493256678]
								}, {
									"case":	163,
									"scores":	[-4.982766493256678]
								}, {
									"case":	164,
									"scores":	[-4.982766493256678]
								}, {
									"case":	165,
									"scores":	[-4.982766493256678]
								}, {
									"case":	166,
									"scores":	[-4.982766493256678]
								}, {
									"case":	167,
									"scores":	[-4.982766493256678]
								}, {
									"case":	168,
									"scores":	[-4.982766493256678]
								}, {
									"case":	169,
									"scores":	[-4.982766493256678]
								}, {
									"case":	170,
									"scores":	[-4.982766493256678]
								}, {
									"case":	171,
									"scores":	[-4.982766493256678]
								}, {
									"case":	172,
									"scores":	[-4.982766493256678]
								}, {
									"case":	173,
									"scores":	[-4.982766493256678]
								}, {
									"case":	174,
									"scores":	[-4.982766493256678]
								}, {
									"case":	175,
									"scores":	[-4.982766493256678]
								}, {
									"case":	176,
									"scores":	[-4.982766493256678]
								}, {
									"case":	177,
									"scores":	[-4.982766493256678]
								}, {
									"case":	178,
									"scores":	[-4.982766493256678]
								}, {
									"case":	179,
									"scores":	[-4.982766493256678]
								}, {
									"case":	180,
									"scores":	[-4.982766493256678]
								}, {
									"case":	181,
									"scores":	[-4.982766493256678]
								}, {
									"case":	182,
									"scores":	[-4.982766493256678]
								}, {
									"case":	183,
									"scores":	[-4.982766493256678]
								}, {
									"case":	184,
									"scores":	[-4.982766493256678]
								}, {
									"case":	185,
									"scores":	[-4.982766493256678]
								}, {
									"case":	186,
									"scores":	[-4.982766493256678]
								}, {
									"case":	187,
									"scores":	[-4.982766493256678]
								}, {
									"case":	188,
									"scores":	[-4.982766493256678]
								}, {
									"case":	189,
									"scores":	[-4.982766493256678]
								}, {
									"case":	190,
									"scores":	[-4.982766493256678]
								}, {
									"case":	191,
									"scores":	[-4.982766493256678]
								}, {
									"case":	192,
									"scores":	[-4.982766493256678]
								}, {
									"case":	193,
									"scores":	[-4.982766493256678]
								}, {
									"case":	194,
									"scores":	[-4.982766493256678]
								}, {
									"case":	195,
									"scores":	[-4.982766493256678]
								}, {
									"case":	196,
									"scores":	[-4.982766493256678]
								}, {
									"case":	197,
									"scores":	[-4.982766493256678]
								}, {
									"case":	198,
									"scores":	[-4.982766493256678]
								}, {
									"case":	199,
									"scores":	[-4.982766493256678]
								}, {
									"case":	200,
									"scores":	[-4.982766493256678]
								}, {
									"case":	201,
									"scores":	[-4.982766493256678]
								}, {
									"case":	202,
									"scores":	[-4.982766493256678]
								}, {
									"case":	203,
									"scores":	[-4.982766493256678]
								}, {
									"case":	204,
									"scores":	[-4.982766493256678]
								}, {
									"case":	205,
									"scores":	[-4.982766493256678]
								}, {
									"case":	206,
									"scores":	[-4.982766493256678]
								}, {
									"case":	207,
									"scores":	[-4.982766493256678]
								}, {
									"case":	208,
									"scores":	[-4.982766493256678]
								}, {
									"case":	209,
									"scores":	[-4.982766493256678]
								}, {
									"case":	210,
									"scores":	[-4.982766493256678]
								}, {
									"case":	211,
									"scores":	[-4.982766493256678]
								}, {
									"case":	212,
									"scores":	[-4.982766493256678]
								}, {
									"case":	213,
									"scores":	[-4.982766493256678]
								}, {
									"case":	214,
									"scores":	[-4.982766493256678]
								}, {
									"case":	215,
									"scores":	[-4.982766493256678]
								}, {
									"case":	216,
									"scores":	[-4.982766493256678]
								}, {
									"case":	217,
									"scores":	[-4.982766493256678]
								}, {
									"case":	218,
									"scores":	[-4.982766493256678]
								}, {
									"case":	219,
									"scores":	[-4.982766493256678]
								}, {
									"case":	220,
									"scores":	[-4.982766493256678]
								}, {
									"case":	221,
									"scores":	[-4.982766493256678]
								}, {
									"case":	222,
									"scores":	[-4.982766493256678]
								}, {
									"case":	223,
									"scores":	[-4.982766493256678]
								}, {
									"case":	224,
									"scores":	[-4.982766493256678]
								}, {
									"case":	225,
									"scores":	[-4.982766493256678]
								}, {
									"case":	226,
									"scores":	[-4.982766493256678]
								}, {
									"case":	227,
									"scores":	[-4.982766493256678]
								}, {
									"case":	228,
									"scores":	[-4.982766493256678]
								}, {
									"case":	229,
									"scores":	[-4.982766493256678]
								}, {
									"case":	230,
									"scores":	[-4.982766493256678]
								}, {
									"case":	231,
									"scores":	[-4.982766493256678]
								}, {
									"case":	232,
									"scores":	[-4.982766493256678]
								}, {
									"case":	233,
									"scores":	[-4.982766493256678]
								}, {
									"case":	234,
									"scores":	[-4.982766493256678]
								}, {
									"case":	235,
									"scores":	[-4.982766493256678]
								}, {
									"case":	236,
									"scores":	[-4.982766493256678]
								}, {
									"case":	237,
									"scores":	[-4.982766493256678]
								}, {
									"case":	238,
									"scores":	[-4.982766493256678]
								}, {
									"case":	239,
									"scores":	[-4.982766493256678]
								}, {
									"case":	240,
									"scores":	[-4.982766493256678]
								}, {
									"case":	241,
									"scores":	[-4.982766493256678]
								}, {
									"case":	242,
									"scores":	[-4.982766493256678]
								}, {
									"case":	243,
									"scores":	[-4.982766493256678]
								}, {
									"case":	244,
									"scores":	[-4.982766493256678]
								}, {
									"case":	245,
									"scores":	[-4.982766493256678]
								}, {
									"case":	246,
									"scores":	[-4.982766493256678]
								}, {
									"case":	247,
									"scores":	[-4.982766493256678]
								}, {
									"case":	248,
									"scores":	[-4.982766493256678]
								}, {
									"case":	249,
									"scores":	[-4.982766493256678]
								}, {
									"case":	250,
									"scores":	[-4.982766493256678]
								}, {
									"case":	251,
									"scores":	[-4.982766493256678]
								}, {
									"case":	252,
									"scores":	[-4.982766493256678]
								}, {
									"case":	253,
									"scores":	[-4.982766493256678]
								}, {
									"case":	254,
									"scores":	[-4.982766493256678]
								}, {
									"case":	255,
									"scores":	[-4.982766493256678]
								}, {
									"case":	256,
									"scores":	[-4.982766493256678]
								}, {
									"case":	257,
									"scores":	[-4.982766493256678]
								}, {
									"case":	258,
									"scores":	[-4.982766493256678]
								}, {
									"case":	259,
									"scores":	[-4.982766493256678]
								}, {
									"case":	260,
									"scores":	[-4.982766493256678]
								}, {
									"case":	261,
									"scores":	[-4.982766493256678]
								}, {
									"case":	262,
									"scores":	[-4.982766493256678]
								}, {
									"case":	263,
									"scores":	[-4.982766493256678]
								}, {
									"case":	264,
									"scores":	[-4.982766493256678]
								}, {
									"case":	265,
									"scores":	[-4.982766493256678]
								}, {
									"case":	266,
									"scores":	[-4.982766493256678]
								}, {
									"case":	267,
									"scores":	[-4.982766493256678]
								}, {
									"case":	268,
									"scores":	[-4.982766493256678]
								}, {
									"case":	269,
									"scores":	[-4.982766493256678]
								}, {
									"case":	270,
									"scores":	[-4.982766493256678]
								}, {
									"case":	271,
									"scores":	[-4.982766493256678]
								}, {
									"case":	272,
									"scores":	[-4.982766493256678]
								}, {
									"case":	273,
									"scores":	[-4.982766493256678]
								}, {
									"case":	274,
									"scores":	[-4.982766493256678]
								}, {
									"case":	275,
									"scores":	[-4.982766493256678]
								}, {
									"case":	276,
									"scores":	[-4.982766493256678]
								}, {
									"case":	277,
									"scores":	[-4.982766493256678]
								}, {
									"case":	278,
									"scores":	[-4.982766493256678]
								}, {
									"case":	279,
									"scores":	[-4.982766493256678]
								}, {
									"case":	280,
									"scores":	[-4.982766493256678]
								}, {
									"case":	281,
									"scores":	[-4.982766493256678]
								}, {
									"case":	282,
									"scores":	[-4.982766493256678]
								}, {
									"case":	283,
									"scores":	[-4.982766493256678]
								}, {
									"case":	284,
									"scores":	[-4.982766493256678]
								}, {
									"case":	285,
									"scores":	[-4.982766493256678]
								}, {
									"case":	286,
									"scores":	[-4.982766493256678]
								}, {
									"case":	287,
									"scores":	[-4.982766493256678]
								}, {
									"case":	288,
									"scores":	[-4.982766493256678]
								}, {
									"case":	289,
									"scores":	[-4.982766493256678]
								}, {
									"case":	290,
									"scores":	[-4.982766493256678]
								}, {
									"case":	291,
									"scores":	[-4.982766493256678]
								}, {
									"case":	292,
									"scores":	[-4.982766493256678]
								}, {
									"case":	293,
									"scores":	[-4.982766493256678]
								}, {
									"case":	294,
									"scores":	[-4.982766493256678]
								}, {
									"case":	295,
									"scores":	[-4.982766493256678]
								}, {
									"case":	296,
									"scores":	[-4.982766493256678]
								}, {
									"case":	297,
									"scores":	[-4.982766493256678]
								}, {
									"case":	298,
									"scores":	[-4.982766493256678]
								}, {
									"case":	299,
									"scores":	[-4.982766493256678]
								}, {
									"case":	300,
									"scores":	[-4.982766493256678]
								}, {
									"case":	301,
									"scores":	[-4.982766493256678]
								}, {
									"case":	302,
									"scores":	[-4.982766493256678]
								}, {
									"case":	303,
									"scores":	[-4.982766493256678]
								}, {
									"case":	304,
									"scores":	[-4.982766493256678]
								}, {
									"case":	305,
									"scores":	[-4.982766493256678]
								}, {
									"case":	306,
									"scores":	[-4.982766493256678]
								}, {
									"case":	307,
									"scores":	[-4.982766493256678]
								}, {
									"case":	308,
									"scores":	[-4.982766493256678]
								}, {
									"case":	309,
									"scores":	[-4.982766493256678]
								}, {
									"case":	310,
									"scores":	[-4.982766493256678]
								}, {
									"case":	311,
									"scores":	[-4.982766493256678]
								}, {
									"case":	312,
									"scores":	[-4.982766493256678]
								}, {
									"case":	313,
									"scores":	[-4.982766493256678]
								}, {
									"case":	314,
									"scores":	[-4.982766493256678]
								}, {
									"case":	315,
									"scores":	[-4.982766493256678]
								}, {
									"case":	316,
									"scores":	[-4.982766493256678]
								}, {
									"case":	317,
									"scores":	[-4.982766493256678]
								}, {
									"case":	318,
									"scores":	[-4.982766493256678]
								}, {
									"case":	319,
									"scores":	[-4.982766493256678]
								}, {
									"case":	320,
									"scores":	[-4.982766493256678]
								}, {
									"case":	321,
									"scores":	[-4.982766493256678]
								}, {
									"case":	322,
									"scores":	[-4.982766493256678]
								}, {
									"case":	323,
									"scores":	[-4.982766493256678]
								}, {
									"case":	324,
									"scores":	[-4.982766493256678]
								}, {
									"case":	325,
									"scores":	[-4.982766493256678]
								}, {
									"case":	326,
									"scores":	[-4.982766493256678]
								}, {
									"case":	327,
									"scores":	[-4.982766493256678]
								}, {
									"case":	328,
									"scores":	[-4.982766493256678]
								}, {
									"case":	329,
									"scores":	[-4.982766493256678]
								}, {
									"case":	330,
									"scores":	[-4.982766493256678]
								}, {
									"case":	331,
									"scores":	[-4.982766493256678]
								}, {
									"case":	332,
									"scores":	[-4.982766493256678]
								}, {
									"case":	333,
									"scores":	[-4.982766493256678]
								}, {
									"case":	334,
									"scores":	[-4.982766493256678]
								}, {
									"case":	335,
									"scores":	[-4.982766493256678]
								}, {
									"case":	336,
									"scores":	[-4.982766493256678]
								}, {
									"case":	337,
									"scores":	[-4.982766493256678]
								}, {
									"case":	338,
									"scores":	[-4.982766493256678]
								}, {
									"case":	339,
									"scores":	[-4.982766493256678]
								}, {
									"case":	340,
									"scores":	[-4.982766493256678]
								}, {
									"case":	341,
									"scores":	[-4.982766493256678]
								}, {
									"case":	342,
									"scores":	[-4.982766493256678]
								}, {
									"case":	343,
									"scores":	[-4.982766493256678]
								}, {
									"case":	344,
									"scores":	[-4.982766493256678]
								}, {
									"case":	345,
									"scores":	[-4.982766493256678]
								}, {
									"case":	346,
									"scores":	[-4.982766493256678]
								}, {
									"case":	347,
									"scores":	[-4.982766493256678]
								}, {
									"case":	348,
									"scores":	[-4.982766493256678]
								}, {
									"case":	349,
									"scores":	[-4.982766493256678]
								}, {
									"case":	350,
									"scores":	[-4.982766493256678]
								}, {
									"case":	351,
									"scores":	[-4.982766493256678]
								}, {
									"case":	352,
									"scores":	[-4.982766493256678]
								}, {
									"case":	353,
									"scores":	[-4.982766493256678]
								}, {
									"case":	354,
									"scores":	[-4.982766493256678]
								}, {
									"case":	355,
									"scores":	[-4.982766493256678]
								}, {
									"case":	356,
									"scores":	[-4.982766493256678]
								}, {
									"case":	357,
									"scores":	[-4.982766493256678]
								}, {
									"case":	358,
									"scores":	[-4.982766493256678]
								}, {
									"case":	359,
									"scores":	[-4.982766493256678]
								}, {
									"case":	360,
									"scores":	[-4.982766493256678]
								}, {
									"case":	361,
									"scores":	[-4.982766493256678]
								}, {
									"case":	362,
									"scores":	[-4.982766493256678]
								}, {
									"case":	363,
									"scores":	[-4.982766493256678]
								}, {
									"case":	364,
									"scores":	[-4.982766493256678]
								}, {
									"case":	365,
									"scores":	[-4.982766493256678]
								}, {
									"case":	366,
									"scores":	[-4.982766493256678]
								}, {
									"case":	367,
									"scores":	[-4.982766493256678]
								}, {
									"case":	368,
									"scores":	[-4.982766493256678]
								}, {
									"case":	369,
									"scores":	[-4.982766493256678]
								}, {
									"case":	370,
									"scores":	[-4.982766493256678]
								}, {
									"case":	371,
									"scores":	[-4.982766493256678]
								}, {
									"case":	372,
									"scores":	[-4.982766493256678]
								}, {
									"case":	373,
									"scores":	[-4.982766493256678]
								}, {
									"case":	374,
									"scores":	[-4.982766493256678]
								}, {
									"case":	375,
									"scores":	[-4.982766493256678]
								}, {
									"case":	376,
									"scores":	[-4.982766493256678]
								}, {
									"case":	377,
									"scores":	[-4.982766493256678]
								}, {
									"case":	378,
									"scores":	[-4.982766493256678]
								}, {
									"case":	379,
									"scores":	[-4.982766493256678]
								}, {
									"case":	380,
									"scores":	[-4.982766493256678]
								}, {
									"case":	381,
									"scores":	[-4.982766493256678]
								}, {
									"case":	382,
									"scores":	[-4.982766493256678]
								}, {
									"case":	383,
									"scores":	[-4.982766493256678]
								}, {
									"case":	384,
									"scores":	[-4.982766493256678]
								}, {
									"case":	385,
									"scores":	[-4.982766493256678]
								}, {
									"case":	386,
									"scores":	[-4.982766493256678]
								}, {
									"case":	387,
									"scores":	[-4.982766493256678]
								}, {
									"case":	388,
									"scores":	[-4.982766493256678]
								}, {
									"case":	389,
									"scores":	[-4.982766493256678]
								}, {
									"case":	390,
									"scores":	[-4.982766493256678]
								}, {
									"case":	391,
									"scores":	[-4.982766493256678]
								}, {
									"case":	392,
									"scores":	[-4.982766493256678]
								}, {
									"case":	393,
									"scores":	[-4.982766493256678]
								}, {
									"case":	394,
									"scores":	[-4.982766493256678]
								}, {
									"case":	395,
									"scores":	[-4.982766493256678]
								}, {
									"case":	396,
									"scores":	[-4.982766493256678]
								}, {
									"case":	397,
									"scores":	[-4.982766493256678]
								}, {
									"case":	398,
									"scores":	[-4.982766493256678]
								}, {
									"case":	399,
									"scores":	[-4.982766493256678]
								}, {
									"case":	400,
									"scores":	[-10.286772177056678, -9.71600508795668, -10.806232777056678, -9.69835997705668, -9.5106330700566772, -11.084776553956679, -10.560193863256677, -10.060847343256679, -10.306886257056679, -10.271272891056679, -10.271272891056679, -10.806232777056678, -10.003632863256676, -10.560193863256677, -10.560193863256677, -10.806232777056678, -10.806232777056678, -10.560193863256677, -10.560193863256677, -10.560193863256677, -10.560193863256677, -10.560193863256677, -10.560193863256677, -10.560193863256677, -10.771082980256676, -10.806232777056678, -10.560193863256677, -10.560193863256677, -10.560193863256677, -10.560193863256677, -10.560193863256677, -10.560193863256677, -10.560193863256677, -10.560193863256677, -10.560193863256677]
								}]
						}, {
							"switch":	51,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	2893,
							"begin_column":	2,
							"end_line":	2893,
							"end_column":	48,
							"patch_codes":	["if (__is_neg(\"\", \"L2893\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) || __is_neg(\"\", \"L2893\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(dateobj->time)) && !__is_neg(\"\", \"L2893\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8728824884281456, -3.8052208284281459, -4.7895787984281455, -4.0167049584281456, -4.2969599714281452, -4.9822468463281453, -4.0316906984281458, -4.2039772344281463, -4.961865334428146, -4.6707719744281455, -4.6707719744281455, -4.7895787984281455, -3.8206435884281453, -4.0316906984281458, -4.0316906984281458, -4.7895787984281455, -4.7895787984281455, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.500950698428146, -4.7895787984281455, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458, -4.0316906984281458]
								}, {
									"case":	2,
									"scores":	[-6.0241211634281457, -4.956459503428146, -5.9408174734281456, -5.1679436334281466, -5.4481986464281462, -6.1334855213281454, -5.1829293734281459, -5.3552159094281455, -6.1131040094281452, -5.8220106494281456, -5.8220106494281456, -5.9408174734281456, -4.9718822634281459, -5.1829293734281459, -5.1829293734281459, -5.9408174734281456, -5.9408174734281456, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.6521893734281461, -5.9408174734281456, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459]
								}, {
									"case":	3,
									"scores":	[-6.0241211634281457, -4.956459503428146, -5.9408174734281456, -5.1679436334281466, -5.4481986464281462, -6.1334855213281454, -5.1829293734281459, -5.3552159094281455, -6.1131040094281452, -5.8220106494281456, -5.8220106494281456, -5.9408174734281456, -4.9718822634281459, -5.1829293734281459, -5.1829293734281459, -5.9408174734281456, -5.9408174734281456, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.6521893734281461, -5.9408174734281456, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459, -5.1829293734281459]
								}]
						}, {
							"switch":	52,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2893,
							"begin_column":	2,
							"end_line":	2893,
							"end_column":	48,
							"patch_codes":	["if (!__is_neg(\"\", \"L2893\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    if (!(dateobj->time)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L2893\", 35, &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff), sizeof (intobj->diff), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)) && (!(dateobj->time))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.62821815325668, -7.5605564932566782, -8.54491446325668, -7.772040623256677, -8.05229563625668, -8.73758251115668, -7.7870263632566781, -7.9593128992566777, -8.71720099925668, -8.42610763925668, -8.42610763925668, -8.54491446325668, -7.5759792532566781, -7.7870263632566781, -7.7870263632566781, -8.54491446325668, -8.54491446325668, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781, -8.25628636325668, -8.54491446325668, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781, -7.7870263632566781]
								}, {
									"case":	2,
									"scores":	[-8.26803284125668, -7.2003711812566777, -8.1847291512566773, -7.4118553112566783, -7.692110324256678, -8.3773971991566771, -7.4268410512566776, -7.5991275872566773, -8.357015687256677, -8.06592232725668, -8.06592232725668, -8.1847291512566773, -7.2157939412566776, -7.4268410512566776, -7.4268410512566776, -8.1847291512566773, -8.1847291512566773, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776, -7.8961010512566769, -8.1847291512566773, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776, -7.4268410512566776]
								}]
						}]
				}, {
					"line":	2893,
					"switches":	[{
							"switch":	53,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2894,
							"begin_column":	0,
							"end_line":	2894,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2894\", 35, &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj->initialized), sizeof (intobj->initialized), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(intobj->diff), sizeof (intobj->diff), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.94236107862164]
								}, {
									"case":	2,
									"scores":	[-4.94236107862164]
								}, {
									"case":	3,
									"scores":	[-4.94236107862164]
								}, {
									"case":	4,
									"scores":	[-4.94236107862164]
								}, {
									"case":	5,
									"scores":	[-4.94236107862164]
								}, {
									"case":	6,
									"scores":	[-4.94236107862164]
								}, {
									"case":	7,
									"scores":	[-4.94236107862164]
								}, {
									"case":	8,
									"scores":	[-4.94236107862164]
								}, {
									"case":	9,
									"scores":	[-4.94236107862164]
								}, {
									"case":	10,
									"scores":	[-4.94236107862164]
								}, {
									"case":	11,
									"scores":	[-4.94236107862164]
								}, {
									"case":	12,
									"scores":	[-4.94236107862164]
								}, {
									"case":	13,
									"scores":	[-4.94236107862164]
								}, {
									"case":	14,
									"scores":	[-4.94236107862164]
								}, {
									"case":	15,
									"scores":	[-4.94236107862164]
								}, {
									"case":	16,
									"scores":	[-4.94236107862164]
								}, {
									"case":	17,
									"scores":	[-4.94236107862164]
								}, {
									"case":	18,
									"scores":	[-4.94236107862164]
								}, {
									"case":	19,
									"scores":	[-4.94236107862164]
								}, {
									"case":	20,
									"scores":	[-4.94236107862164]
								}, {
									"case":	21,
									"scores":	[-4.94236107862164]
								}, {
									"case":	22,
									"scores":	[-4.94236107862164]
								}, {
									"case":	23,
									"scores":	[-4.94236107862164]
								}, {
									"case":	24,
									"scores":	[-4.94236107862164]
								}, {
									"case":	25,
									"scores":	[-4.94236107862164]
								}, {
									"case":	26,
									"scores":	[-4.94236107862164]
								}, {
									"case":	27,
									"scores":	[-4.94236107862164]
								}, {
									"case":	28,
									"scores":	[-4.94236107862164]
								}, {
									"case":	29,
									"scores":	[-4.94236107862164]
								}, {
									"case":	30,
									"scores":	[-4.94236107862164]
								}, {
									"case":	31,
									"scores":	[-4.94236107862164]
								}, {
									"case":	32,
									"scores":	[-4.94236107862164]
								}, {
									"case":	33,
									"scores":	[-4.94236107862164]
								}, {
									"case":	34,
									"scores":	[-4.94236107862164]
								}, {
									"case":	35,
									"scores":	[-4.94236107862164]
								}, {
									"case":	36,
									"scores":	[-4.94236107862164]
								}, {
									"case":	37,
									"scores":	[-4.94236107862164]
								}, {
									"case":	38,
									"scores":	[-4.94236107862164]
								}, {
									"case":	39,
									"scores":	[-4.94236107862164]
								}, {
									"case":	40,
									"scores":	[-4.94236107862164]
								}, {
									"case":	41,
									"scores":	[-4.94236107862164]
								}, {
									"case":	42,
									"scores":	[-4.94236107862164]
								}, {
									"case":	43,
									"scores":	[-4.94236107862164]
								}, {
									"case":	44,
									"scores":	[-4.94236107862164]
								}, {
									"case":	45,
									"scores":	[-4.94236107862164]
								}, {
									"case":	46,
									"scores":	[-4.94236107862164]
								}, {
									"case":	47,
									"scores":	[-4.94236107862164]
								}, {
									"case":	48,
									"scores":	[-4.94236107862164]
								}, {
									"case":	49,
									"scores":	[-4.94236107862164]
								}, {
									"case":	50,
									"scores":	[-4.94236107862164]
								}, {
									"case":	51,
									"scores":	[-4.94236107862164]
								}, {
									"case":	52,
									"scores":	[-4.94236107862164]
								}, {
									"case":	53,
									"scores":	[-4.94236107862164]
								}, {
									"case":	54,
									"scores":	[-4.94236107862164]
								}, {
									"case":	55,
									"scores":	[-4.94236107862164]
								}, {
									"case":	56,
									"scores":	[-4.94236107862164]
								}, {
									"case":	57,
									"scores":	[-4.94236107862164]
								}, {
									"case":	58,
									"scores":	[-4.94236107862164]
								}, {
									"case":	59,
									"scores":	[-4.94236107862164]
								}, {
									"case":	60,
									"scores":	[-4.94236107862164]
								}, {
									"case":	61,
									"scores":	[-4.94236107862164]
								}, {
									"case":	62,
									"scores":	[-4.94236107862164]
								}, {
									"case":	63,
									"scores":	[-4.94236107862164]
								}, {
									"case":	64,
									"scores":	[-4.94236107862164]
								}, {
									"case":	65,
									"scores":	[-4.94236107862164]
								}, {
									"case":	66,
									"scores":	[-4.94236107862164]
								}, {
									"case":	67,
									"scores":	[-4.94236107862164]
								}, {
									"case":	68,
									"scores":	[-4.94236107862164]
								}, {
									"case":	69,
									"scores":	[-4.94236107862164]
								}, {
									"case":	70,
									"scores":	[-4.94236107862164]
								}, {
									"case":	71,
									"scores":	[-4.94236107862164]
								}, {
									"case":	72,
									"scores":	[-4.94236107862164]
								}, {
									"case":	73,
									"scores":	[-4.94236107862164]
								}, {
									"case":	74,
									"scores":	[-4.94236107862164]
								}, {
									"case":	75,
									"scores":	[-4.94236107862164]
								}, {
									"case":	76,
									"scores":	[-4.94236107862164]
								}, {
									"case":	77,
									"scores":	[-4.94236107862164]
								}, {
									"case":	78,
									"scores":	[-4.94236107862164]
								}, {
									"case":	79,
									"scores":	[-4.94236107862164]
								}, {
									"case":	80,
									"scores":	[-4.94236107862164]
								}, {
									"case":	81,
									"scores":	[-4.94236107862164]
								}, {
									"case":	82,
									"scores":	[-4.94236107862164]
								}, {
									"case":	83,
									"scores":	[-4.94236107862164]
								}, {
									"case":	84,
									"scores":	[-4.94236107862164]
								}, {
									"case":	85,
									"scores":	[-4.94236107862164]
								}, {
									"case":	86,
									"scores":	[-4.94236107862164]
								}, {
									"case":	87,
									"scores":	[-4.94236107862164]
								}, {
									"case":	88,
									"scores":	[-4.94236107862164]
								}, {
									"case":	89,
									"scores":	[-4.94236107862164]
								}, {
									"case":	90,
									"scores":	[-4.94236107862164]
								}, {
									"case":	91,
									"scores":	[-4.94236107862164]
								}, {
									"case":	92,
									"scores":	[-4.94236107862164]
								}, {
									"case":	93,
									"scores":	[-4.94236107862164]
								}, {
									"case":	94,
									"scores":	[-4.94236107862164]
								}, {
									"case":	95,
									"scores":	[-4.94236107862164]
								}, {
									"case":	96,
									"scores":	[-4.94236107862164]
								}, {
									"case":	97,
									"scores":	[-4.94236107862164]
								}, {
									"case":	98,
									"scores":	[-4.94236107862164]
								}, {
									"case":	99,
									"scores":	[-4.94236107862164]
								}, {
									"case":	100,
									"scores":	[-4.94236107862164]
								}, {
									"case":	101,
									"scores":	[-4.94236107862164]
								}, {
									"case":	102,
									"scores":	[-4.94236107862164]
								}, {
									"case":	103,
									"scores":	[-4.94236107862164]
								}, {
									"case":	104,
									"scores":	[-4.94236107862164]
								}, {
									"case":	105,
									"scores":	[-4.94236107862164]
								}, {
									"case":	106,
									"scores":	[-4.94236107862164]
								}, {
									"case":	107,
									"scores":	[-4.94236107862164]
								}, {
									"case":	108,
									"scores":	[-4.94236107862164]
								}, {
									"case":	109,
									"scores":	[-4.94236107862164]
								}, {
									"case":	110,
									"scores":	[-4.94236107862164]
								}, {
									"case":	111,
									"scores":	[-4.94236107862164]
								}, {
									"case":	112,
									"scores":	[-4.94236107862164]
								}, {
									"case":	113,
									"scores":	[-4.94236107862164]
								}, {
									"case":	114,
									"scores":	[-4.94236107862164]
								}, {
									"case":	115,
									"scores":	[-4.94236107862164]
								}, {
									"case":	116,
									"scores":	[-4.94236107862164]
								}, {
									"case":	117,
									"scores":	[-4.94236107862164]
								}, {
									"case":	118,
									"scores":	[-4.94236107862164]
								}, {
									"case":	119,
									"scores":	[-4.94236107862164]
								}, {
									"case":	120,
									"scores":	[-4.94236107862164]
								}, {
									"case":	121,
									"scores":	[-4.94236107862164]
								}, {
									"case":	122,
									"scores":	[-4.94236107862164]
								}, {
									"case":	123,
									"scores":	[-4.94236107862164]
								}, {
									"case":	124,
									"scores":	[-4.94236107862164]
								}, {
									"case":	125,
									"scores":	[-4.94236107862164]
								}, {
									"case":	126,
									"scores":	[-4.94236107862164]
								}, {
									"case":	127,
									"scores":	[-4.94236107862164]
								}, {
									"case":	128,
									"scores":	[-4.94236107862164]
								}, {
									"case":	129,
									"scores":	[-4.94236107862164]
								}, {
									"case":	130,
									"scores":	[-4.94236107862164]
								}, {
									"case":	131,
									"scores":	[-4.94236107862164]
								}, {
									"case":	132,
									"scores":	[-4.94236107862164]
								}, {
									"case":	133,
									"scores":	[-4.94236107862164]
								}, {
									"case":	134,
									"scores":	[-4.94236107862164]
								}, {
									"case":	135,
									"scores":	[-4.94236107862164]
								}, {
									"case":	136,
									"scores":	[-4.94236107862164]
								}, {
									"case":	137,
									"scores":	[-4.94236107862164]
								}, {
									"case":	138,
									"scores":	[-4.94236107862164]
								}, {
									"case":	139,
									"scores":	[-4.94236107862164]
								}, {
									"case":	140,
									"scores":	[-4.94236107862164]
								}, {
									"case":	141,
									"scores":	[-4.94236107862164]
								}, {
									"case":	142,
									"scores":	[-4.94236107862164]
								}, {
									"case":	143,
									"scores":	[-4.94236107862164]
								}, {
									"case":	144,
									"scores":	[-4.94236107862164]
								}, {
									"case":	145,
									"scores":	[-4.94236107862164]
								}, {
									"case":	146,
									"scores":	[-4.94236107862164]
								}, {
									"case":	147,
									"scores":	[-4.94236107862164]
								}, {
									"case":	148,
									"scores":	[-4.94236107862164]
								}, {
									"case":	149,
									"scores":	[-4.94236107862164]
								}, {
									"case":	150,
									"scores":	[-4.94236107862164]
								}, {
									"case":	151,
									"scores":	[-4.94236107862164]
								}, {
									"case":	152,
									"scores":	[-4.94236107862164]
								}, {
									"case":	153,
									"scores":	[-4.94236107862164]
								}, {
									"case":	154,
									"scores":	[-4.94236107862164]
								}, {
									"case":	155,
									"scores":	[-4.94236107862164]
								}, {
									"case":	156,
									"scores":	[-4.94236107862164]
								}, {
									"case":	157,
									"scores":	[-4.94236107862164]
								}, {
									"case":	158,
									"scores":	[-4.94236107862164]
								}, {
									"case":	159,
									"scores":	[-4.94236107862164]
								}, {
									"case":	160,
									"scores":	[-4.94236107862164]
								}, {
									"case":	161,
									"scores":	[-4.94236107862164]
								}, {
									"case":	162,
									"scores":	[-4.94236107862164]
								}, {
									"case":	163,
									"scores":	[-4.94236107862164]
								}, {
									"case":	164,
									"scores":	[-4.94236107862164]
								}, {
									"case":	165,
									"scores":	[-4.94236107862164]
								}, {
									"case":	166,
									"scores":	[-4.94236107862164]
								}, {
									"case":	167,
									"scores":	[-4.94236107862164]
								}, {
									"case":	168,
									"scores":	[-4.94236107862164]
								}, {
									"case":	169,
									"scores":	[-4.94236107862164]
								}, {
									"case":	170,
									"scores":	[-4.94236107862164]
								}, {
									"case":	171,
									"scores":	[-4.94236107862164]
								}, {
									"case":	172,
									"scores":	[-4.94236107862164]
								}, {
									"case":	173,
									"scores":	[-4.94236107862164]
								}, {
									"case":	174,
									"scores":	[-4.94236107862164]
								}, {
									"case":	175,
									"scores":	[-4.94236107862164]
								}, {
									"case":	176,
									"scores":	[-4.94236107862164]
								}, {
									"case":	177,
									"scores":	[-4.94236107862164]
								}, {
									"case":	178,
									"scores":	[-4.94236107862164]
								}, {
									"case":	179,
									"scores":	[-4.94236107862164]
								}, {
									"case":	180,
									"scores":	[-4.94236107862164]
								}, {
									"case":	181,
									"scores":	[-4.94236107862164]
								}, {
									"case":	182,
									"scores":	[-4.94236107862164]
								}, {
									"case":	183,
									"scores":	[-4.94236107862164]
								}, {
									"case":	184,
									"scores":	[-4.94236107862164]
								}, {
									"case":	185,
									"scores":	[-4.94236107862164]
								}, {
									"case":	186,
									"scores":	[-4.94236107862164]
								}, {
									"case":	187,
									"scores":	[-4.94236107862164]
								}, {
									"case":	188,
									"scores":	[-4.94236107862164]
								}, {
									"case":	189,
									"scores":	[-4.94236107862164]
								}, {
									"case":	190,
									"scores":	[-4.94236107862164]
								}, {
									"case":	191,
									"scores":	[-4.94236107862164]
								}, {
									"case":	192,
									"scores":	[-4.94236107862164]
								}, {
									"case":	193,
									"scores":	[-4.94236107862164]
								}, {
									"case":	194,
									"scores":	[-4.94236107862164]
								}, {
									"case":	195,
									"scores":	[-4.94236107862164]
								}, {
									"case":	196,
									"scores":	[-4.94236107862164]
								}, {
									"case":	197,
									"scores":	[-4.94236107862164]
								}, {
									"case":	198,
									"scores":	[-4.94236107862164]
								}, {
									"case":	199,
									"scores":	[-4.94236107862164]
								}, {
									"case":	200,
									"scores":	[-4.94236107862164]
								}, {
									"case":	201,
									"scores":	[-4.94236107862164]
								}, {
									"case":	202,
									"scores":	[-4.94236107862164]
								}, {
									"case":	203,
									"scores":	[-4.94236107862164]
								}, {
									"case":	204,
									"scores":	[-4.94236107862164]
								}, {
									"case":	205,
									"scores":	[-4.94236107862164]
								}, {
									"case":	206,
									"scores":	[-4.94236107862164]
								}, {
									"case":	207,
									"scores":	[-4.94236107862164]
								}, {
									"case":	208,
									"scores":	[-4.94236107862164]
								}, {
									"case":	209,
									"scores":	[-4.94236107862164]
								}, {
									"case":	210,
									"scores":	[-4.94236107862164]
								}, {
									"case":	211,
									"scores":	[-4.94236107862164]
								}, {
									"case":	212,
									"scores":	[-4.94236107862164]
								}, {
									"case":	213,
									"scores":	[-4.94236107862164]
								}, {
									"case":	214,
									"scores":	[-4.94236107862164]
								}, {
									"case":	215,
									"scores":	[-4.94236107862164]
								}, {
									"case":	216,
									"scores":	[-4.94236107862164]
								}, {
									"case":	217,
									"scores":	[-4.94236107862164]
								}, {
									"case":	218,
									"scores":	[-4.94236107862164]
								}, {
									"case":	219,
									"scores":	[-4.94236107862164]
								}, {
									"case":	220,
									"scores":	[-4.94236107862164]
								}, {
									"case":	221,
									"scores":	[-4.94236107862164]
								}, {
									"case":	222,
									"scores":	[-4.94236107862164]
								}, {
									"case":	223,
									"scores":	[-4.94236107862164]
								}, {
									"case":	224,
									"scores":	[-4.94236107862164]
								}, {
									"case":	225,
									"scores":	[-4.94236107862164]
								}, {
									"case":	226,
									"scores":	[-4.94236107862164]
								}, {
									"case":	227,
									"scores":	[-4.94236107862164]
								}, {
									"case":	228,
									"scores":	[-4.94236107862164]
								}, {
									"case":	229,
									"scores":	[-4.94236107862164]
								}, {
									"case":	230,
									"scores":	[-4.94236107862164]
								}, {
									"case":	231,
									"scores":	[-4.94236107862164]
								}, {
									"case":	232,
									"scores":	[-4.94236107862164]
								}, {
									"case":	233,
									"scores":	[-4.94236107862164]
								}, {
									"case":	234,
									"scores":	[-4.94236107862164]
								}, {
									"case":	235,
									"scores":	[-4.94236107862164]
								}, {
									"case":	236,
									"scores":	[-4.94236107862164]
								}, {
									"case":	237,
									"scores":	[-4.94236107862164]
								}, {
									"case":	238,
									"scores":	[-4.94236107862164]
								}, {
									"case":	239,
									"scores":	[-4.94236107862164]
								}, {
									"case":	240,
									"scores":	[-4.94236107862164]
								}, {
									"case":	241,
									"scores":	[-4.94236107862164]
								}, {
									"case":	242,
									"scores":	[-4.94236107862164]
								}, {
									"case":	243,
									"scores":	[-4.94236107862164]
								}, {
									"case":	244,
									"scores":	[-4.94236107862164]
								}, {
									"case":	245,
									"scores":	[-4.94236107862164]
								}, {
									"case":	246,
									"scores":	[-4.94236107862164]
								}, {
									"case":	247,
									"scores":	[-4.94236107862164]
								}, {
									"case":	248,
									"scores":	[-4.94236107862164]
								}, {
									"case":	249,
									"scores":	[-4.94236107862164]
								}, {
									"case":	250,
									"scores":	[-4.94236107862164]
								}, {
									"case":	251,
									"scores":	[-4.94236107862164]
								}, {
									"case":	252,
									"scores":	[-4.94236107862164]
								}, {
									"case":	253,
									"scores":	[-4.94236107862164]
								}, {
									"case":	254,
									"scores":	[-4.94236107862164]
								}, {
									"case":	255,
									"scores":	[-4.94236107862164]
								}, {
									"case":	256,
									"scores":	[-4.94236107862164]
								}, {
									"case":	257,
									"scores":	[-4.94236107862164]
								}, {
									"case":	258,
									"scores":	[-4.94236107862164]
								}, {
									"case":	259,
									"scores":	[-4.94236107862164]
								}, {
									"case":	260,
									"scores":	[-4.94236107862164]
								}, {
									"case":	261,
									"scores":	[-4.94236107862164]
								}, {
									"case":	262,
									"scores":	[-4.94236107862164]
								}, {
									"case":	263,
									"scores":	[-4.94236107862164]
								}, {
									"case":	264,
									"scores":	[-4.94236107862164]
								}, {
									"case":	265,
									"scores":	[-4.94236107862164]
								}, {
									"case":	266,
									"scores":	[-4.94236107862164]
								}, {
									"case":	267,
									"scores":	[-4.94236107862164]
								}, {
									"case":	268,
									"scores":	[-4.94236107862164]
								}, {
									"case":	269,
									"scores":	[-4.94236107862164]
								}, {
									"case":	270,
									"scores":	[-4.94236107862164]
								}, {
									"case":	271,
									"scores":	[-4.94236107862164]
								}, {
									"case":	272,
									"scores":	[-4.94236107862164]
								}, {
									"case":	273,
									"scores":	[-4.94236107862164]
								}, {
									"case":	274,
									"scores":	[-4.94236107862164]
								}, {
									"case":	275,
									"scores":	[-4.94236107862164]
								}, {
									"case":	276,
									"scores":	[-4.94236107862164]
								}, {
									"case":	277,
									"scores":	[-4.94236107862164]
								}, {
									"case":	278,
									"scores":	[-4.94236107862164]
								}, {
									"case":	279,
									"scores":	[-4.94236107862164]
								}, {
									"case":	280,
									"scores":	[-4.94236107862164]
								}, {
									"case":	281,
									"scores":	[-4.94236107862164]
								}, {
									"case":	282,
									"scores":	[-4.94236107862164]
								}, {
									"case":	283,
									"scores":	[-4.94236107862164]
								}, {
									"case":	284,
									"scores":	[-4.94236107862164]
								}, {
									"case":	285,
									"scores":	[-4.94236107862164]
								}, {
									"case":	286,
									"scores":	[-4.94236107862164]
								}, {
									"case":	287,
									"scores":	[-4.94236107862164]
								}, {
									"case":	288,
									"scores":	[-4.94236107862164]
								}, {
									"case":	289,
									"scores":	[-4.94236107862164]
								}, {
									"case":	290,
									"scores":	[-4.94236107862164]
								}, {
									"case":	291,
									"scores":	[-4.94236107862164]
								}, {
									"case":	292,
									"scores":	[-4.94236107862164]
								}, {
									"case":	293,
									"scores":	[-4.94236107862164]
								}, {
									"case":	294,
									"scores":	[-4.94236107862164]
								}, {
									"case":	295,
									"scores":	[-4.94236107862164]
								}, {
									"case":	296,
									"scores":	[-4.94236107862164]
								}, {
									"case":	297,
									"scores":	[-4.94236107862164]
								}, {
									"case":	298,
									"scores":	[-4.94236107862164]
								}, {
									"case":	299,
									"scores":	[-4.94236107862164]
								}, {
									"case":	300,
									"scores":	[-4.94236107862164]
								}, {
									"case":	301,
									"scores":	[-4.94236107862164]
								}, {
									"case":	302,
									"scores":	[-4.94236107862164]
								}, {
									"case":	303,
									"scores":	[-4.94236107862164]
								}, {
									"case":	304,
									"scores":	[-4.94236107862164]
								}, {
									"case":	305,
									"scores":	[-4.94236107862164]
								}, {
									"case":	306,
									"scores":	[-4.94236107862164]
								}, {
									"case":	307,
									"scores":	[-4.94236107862164]
								}, {
									"case":	308,
									"scores":	[-4.94236107862164]
								}, {
									"case":	309,
									"scores":	[-4.94236107862164]
								}, {
									"case":	310,
									"scores":	[-4.94236107862164]
								}, {
									"case":	311,
									"scores":	[-4.94236107862164]
								}, {
									"case":	312,
									"scores":	[-4.94236107862164]
								}, {
									"case":	313,
									"scores":	[-4.94236107862164]
								}, {
									"case":	314,
									"scores":	[-4.94236107862164]
								}, {
									"case":	315,
									"scores":	[-4.94236107862164]
								}, {
									"case":	316,
									"scores":	[-4.94236107862164]
								}, {
									"case":	317,
									"scores":	[-4.94236107862164]
								}, {
									"case":	318,
									"scores":	[-4.94236107862164]
								}, {
									"case":	319,
									"scores":	[-4.94236107862164]
								}, {
									"case":	320,
									"scores":	[-4.94236107862164]
								}, {
									"case":	321,
									"scores":	[-4.94236107862164]
								}, {
									"case":	322,
									"scores":	[-4.94236107862164]
								}, {
									"case":	323,
									"scores":	[-4.94236107862164]
								}, {
									"case":	324,
									"scores":	[-4.94236107862164]
								}, {
									"case":	325,
									"scores":	[-4.94236107862164]
								}, {
									"case":	326,
									"scores":	[-4.94236107862164]
								}, {
									"case":	327,
									"scores":	[-4.94236107862164]
								}, {
									"case":	328,
									"scores":	[-4.94236107862164]
								}, {
									"case":	329,
									"scores":	[-4.94236107862164]
								}, {
									"case":	330,
									"scores":	[-4.94236107862164]
								}, {
									"case":	331,
									"scores":	[-4.94236107862164]
								}, {
									"case":	332,
									"scores":	[-4.94236107862164]
								}, {
									"case":	333,
									"scores":	[-4.94236107862164]
								}, {
									"case":	334,
									"scores":	[-4.94236107862164]
								}, {
									"case":	335,
									"scores":	[-4.94236107862164]
								}, {
									"case":	336,
									"scores":	[-4.94236107862164]
								}, {
									"case":	337,
									"scores":	[-4.94236107862164]
								}, {
									"case":	338,
									"scores":	[-4.94236107862164]
								}, {
									"case":	339,
									"scores":	[-4.94236107862164]
								}, {
									"case":	340,
									"scores":	[-4.94236107862164]
								}, {
									"case":	341,
									"scores":	[-4.94236107862164]
								}, {
									"case":	342,
									"scores":	[-4.94236107862164]
								}, {
									"case":	343,
									"scores":	[-4.94236107862164]
								}, {
									"case":	344,
									"scores":	[-4.94236107862164]
								}, {
									"case":	345,
									"scores":	[-4.94236107862164]
								}, {
									"case":	346,
									"scores":	[-4.94236107862164]
								}, {
									"case":	347,
									"scores":	[-4.94236107862164]
								}, {
									"case":	348,
									"scores":	[-4.94236107862164]
								}, {
									"case":	349,
									"scores":	[-4.94236107862164]
								}, {
									"case":	350,
									"scores":	[-4.94236107862164]
								}, {
									"case":	351,
									"scores":	[-4.94236107862164]
								}, {
									"case":	352,
									"scores":	[-4.94236107862164]
								}, {
									"case":	353,
									"scores":	[-4.94236107862164]
								}, {
									"case":	354,
									"scores":	[-4.94236107862164]
								}, {
									"case":	355,
									"scores":	[-4.94236107862164]
								}, {
									"case":	356,
									"scores":	[-4.94236107862164]
								}, {
									"case":	357,
									"scores":	[-4.94236107862164]
								}, {
									"case":	358,
									"scores":	[-4.94236107862164]
								}, {
									"case":	359,
									"scores":	[-4.94236107862164]
								}, {
									"case":	360,
									"scores":	[-4.94236107862164]
								}, {
									"case":	361,
									"scores":	[-4.94236107862164]
								}, {
									"case":	362,
									"scores":	[-4.94236107862164]
								}, {
									"case":	363,
									"scores":	[-4.94236107862164]
								}, {
									"case":	364,
									"scores":	[-4.94236107862164]
								}, {
									"case":	365,
									"scores":	[-4.94236107862164]
								}, {
									"case":	366,
									"scores":	[-4.94236107862164]
								}, {
									"case":	367,
									"scores":	[-4.94236107862164]
								}, {
									"case":	368,
									"scores":	[-4.94236107862164]
								}, {
									"case":	369,
									"scores":	[-4.94236107862164]
								}, {
									"case":	370,
									"scores":	[-4.94236107862164]
								}, {
									"case":	371,
									"scores":	[-4.94236107862164]
								}, {
									"case":	372,
									"scores":	[-4.94236107862164]
								}, {
									"case":	373,
									"scores":	[-4.94236107862164]
								}, {
									"case":	374,
									"scores":	[-4.94236107862164]
								}, {
									"case":	375,
									"scores":	[-4.94236107862164]
								}, {
									"case":	376,
									"scores":	[-4.94236107862164]
								}, {
									"case":	377,
									"scores":	[-4.94236107862164]
								}, {
									"case":	378,
									"scores":	[-4.94236107862164]
								}, {
									"case":	379,
									"scores":	[-4.94236107862164]
								}, {
									"case":	380,
									"scores":	[-4.94236107862164]
								}, {
									"case":	381,
									"scores":	[-4.94236107862164]
								}, {
									"case":	382,
									"scores":	[-4.94236107862164]
								}, {
									"case":	383,
									"scores":	[-4.94236107862164]
								}, {
									"case":	384,
									"scores":	[-4.94236107862164]
								}, {
									"case":	385,
									"scores":	[-4.94236107862164]
								}, {
									"case":	386,
									"scores":	[-4.94236107862164]
								}, {
									"case":	387,
									"scores":	[-4.94236107862164]
								}, {
									"case":	388,
									"scores":	[-4.94236107862164]
								}, {
									"case":	389,
									"scores":	[-4.94236107862164]
								}, {
									"case":	390,
									"scores":	[-4.94236107862164]
								}, {
									"case":	391,
									"scores":	[-4.94236107862164]
								}, {
									"case":	392,
									"scores":	[-4.94236107862164]
								}, {
									"case":	393,
									"scores":	[-4.94236107862164]
								}, {
									"case":	394,
									"scores":	[-4.94236107862164]
								}, {
									"case":	395,
									"scores":	[-4.94236107862164]
								}, {
									"case":	396,
									"scores":	[-4.94236107862164]
								}, {
									"case":	397,
									"scores":	[-4.94236107862164]
								}, {
									"case":	398,
									"scores":	[-4.94236107862164]
								}, {
									"case":	399,
									"scores":	[-4.94236107862164]
								}, {
									"case":	400,
									"scores":	[-6.73408739342164, -9.28233986032164, -9.34296376242164, -8.03629558242164, -9.61638544862164, -9.86242436242164, -9.11190216242164, -10.728927619321638, -9.09692484862164, -9.34296376242164, -9.30735039642164, -9.30735039642164, -9.05982444862164, -9.61638544862164, -9.61638544862164, -9.86242436242164, -9.86242436242164, -9.61638544862164, -9.61638544862164, -9.61638544862164, -9.61638544862164, -9.61638544862164, -9.61638544862164, -9.61638544862164, -9.82727456562164, -9.86242436242164, -9.61638544862164, -9.61638544862164, -9.61638544862164, -9.61638544862164, -9.61638544862164, -9.61638544862164, -9.61638544862164, -9.61638544862164, -9.61638544862164]
								}]
						}, {
							"switch":	54,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2894,
							"begin_column":	2,
							"end_line":	2894,
							"end_column":	79,
							"patch_codes":	["if (!__is_neg(\"\", \"L2894\", 35, &(interval), sizeof (interval), &(intobj), sizeof (intobj), &(return_value), sizeof (return_value), &(dateobj), sizeof (dateobj), &(intobj->initialized), sizeof (intobj->initialized), &(dateobj->time), sizeof (dateobj->time), &(object), sizeof (object), &(intobj->diff), sizeof (intobj->diff), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->props), sizeof (intobj->props), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    intobj = (php_interval_obj *)zend_object_store_get_object(interval);\n", "{\n}\n", "intobj = (intobj)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.14651364862164, -8.86598819752164, -8.64920873862164, -7.71596856912164, -7.8080169486216384, -8.5659050486216373, -8.07327778462164, -9.10272678652164, -7.8913206386216386, -8.64920873862164, -8.35811537862164, -8.35811537862164, -7.5969698386216384, -7.8080169486216384, -7.8080169486216384, -8.5659050486216373, -8.5659050486216373, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384, -8.27727694862164, -8.5659050486216373, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384, -7.8080169486216384]
								}, {
									"case":	2,
									"scores":	[-4.94236107862164]
								}, {
									"case":	3,
									"scores":	[-4.94236107862164]
								}, {
									"case":	4,
									"scores":	[-4.94236107862164]
								}]
						}]
				}, {
					"line":	2894,
					"switches":	[{
							"switch":	55,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2895,
							"begin_column":	0,
							"end_line":	2895,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2895\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(intobj->diff), sizeof (intobj->diff), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.92215837130412]
								}, {
									"case":	2,
									"scores":	[-4.92215837130412]
								}, {
									"case":	3,
									"scores":	[-4.92215837130412]
								}, {
									"case":	4,
									"scores":	[-4.92215837130412]
								}, {
									"case":	5,
									"scores":	[-4.92215837130412]
								}, {
									"case":	6,
									"scores":	[-4.92215837130412]
								}, {
									"case":	7,
									"scores":	[-4.92215837130412]
								}, {
									"case":	8,
									"scores":	[-4.92215837130412]
								}, {
									"case":	9,
									"scores":	[-4.92215837130412]
								}, {
									"case":	10,
									"scores":	[-4.92215837130412]
								}, {
									"case":	11,
									"scores":	[-4.92215837130412]
								}, {
									"case":	12,
									"scores":	[-4.92215837130412]
								}, {
									"case":	13,
									"scores":	[-4.92215837130412]
								}, {
									"case":	14,
									"scores":	[-4.92215837130412]
								}, {
									"case":	15,
									"scores":	[-4.92215837130412]
								}, {
									"case":	16,
									"scores":	[-4.92215837130412]
								}, {
									"case":	17,
									"scores":	[-4.92215837130412]
								}, {
									"case":	18,
									"scores":	[-4.92215837130412]
								}, {
									"case":	19,
									"scores":	[-4.92215837130412]
								}, {
									"case":	20,
									"scores":	[-4.92215837130412]
								}, {
									"case":	21,
									"scores":	[-4.92215837130412]
								}, {
									"case":	22,
									"scores":	[-4.92215837130412]
								}, {
									"case":	23,
									"scores":	[-4.92215837130412]
								}, {
									"case":	24,
									"scores":	[-4.92215837130412]
								}, {
									"case":	25,
									"scores":	[-4.92215837130412]
								}, {
									"case":	26,
									"scores":	[-4.92215837130412]
								}, {
									"case":	27,
									"scores":	[-4.92215837130412]
								}, {
									"case":	28,
									"scores":	[-4.92215837130412]
								}, {
									"case":	29,
									"scores":	[-4.92215837130412]
								}, {
									"case":	30,
									"scores":	[-4.92215837130412]
								}, {
									"case":	31,
									"scores":	[-4.92215837130412]
								}, {
									"case":	32,
									"scores":	[-4.92215837130412]
								}, {
									"case":	33,
									"scores":	[-4.92215837130412]
								}, {
									"case":	34,
									"scores":	[-4.92215837130412]
								}, {
									"case":	35,
									"scores":	[-4.92215837130412]
								}, {
									"case":	36,
									"scores":	[-4.92215837130412]
								}, {
									"case":	37,
									"scores":	[-4.92215837130412]
								}, {
									"case":	38,
									"scores":	[-4.92215837130412]
								}, {
									"case":	39,
									"scores":	[-4.92215837130412]
								}, {
									"case":	40,
									"scores":	[-4.92215837130412]
								}, {
									"case":	41,
									"scores":	[-4.92215837130412]
								}, {
									"case":	42,
									"scores":	[-4.92215837130412]
								}, {
									"case":	43,
									"scores":	[-4.92215837130412]
								}, {
									"case":	44,
									"scores":	[-4.92215837130412]
								}, {
									"case":	45,
									"scores":	[-4.92215837130412]
								}, {
									"case":	46,
									"scores":	[-4.92215837130412]
								}, {
									"case":	47,
									"scores":	[-4.92215837130412]
								}, {
									"case":	48,
									"scores":	[-4.92215837130412]
								}, {
									"case":	49,
									"scores":	[-4.92215837130412]
								}, {
									"case":	50,
									"scores":	[-4.92215837130412]
								}, {
									"case":	51,
									"scores":	[-4.92215837130412]
								}, {
									"case":	52,
									"scores":	[-4.92215837130412]
								}, {
									"case":	53,
									"scores":	[-4.92215837130412]
								}, {
									"case":	54,
									"scores":	[-4.92215837130412]
								}, {
									"case":	55,
									"scores":	[-4.92215837130412]
								}, {
									"case":	56,
									"scores":	[-4.92215837130412]
								}, {
									"case":	57,
									"scores":	[-4.92215837130412]
								}, {
									"case":	58,
									"scores":	[-4.92215837130412]
								}, {
									"case":	59,
									"scores":	[-4.92215837130412]
								}, {
									"case":	60,
									"scores":	[-4.92215837130412]
								}, {
									"case":	61,
									"scores":	[-4.92215837130412]
								}, {
									"case":	62,
									"scores":	[-4.92215837130412]
								}, {
									"case":	63,
									"scores":	[-4.92215837130412]
								}, {
									"case":	64,
									"scores":	[-4.92215837130412]
								}, {
									"case":	65,
									"scores":	[-4.92215837130412]
								}, {
									"case":	66,
									"scores":	[-4.92215837130412]
								}, {
									"case":	67,
									"scores":	[-4.92215837130412]
								}, {
									"case":	68,
									"scores":	[-4.92215837130412]
								}, {
									"case":	69,
									"scores":	[-4.92215837130412]
								}, {
									"case":	70,
									"scores":	[-4.92215837130412]
								}, {
									"case":	71,
									"scores":	[-4.92215837130412]
								}, {
									"case":	72,
									"scores":	[-4.92215837130412]
								}, {
									"case":	73,
									"scores":	[-4.92215837130412]
								}, {
									"case":	74,
									"scores":	[-4.92215837130412]
								}, {
									"case":	75,
									"scores":	[-4.92215837130412]
								}, {
									"case":	76,
									"scores":	[-4.92215837130412]
								}, {
									"case":	77,
									"scores":	[-4.92215837130412]
								}, {
									"case":	78,
									"scores":	[-4.92215837130412]
								}, {
									"case":	79,
									"scores":	[-4.92215837130412]
								}, {
									"case":	80,
									"scores":	[-4.92215837130412]
								}, {
									"case":	81,
									"scores":	[-4.92215837130412]
								}, {
									"case":	82,
									"scores":	[-4.92215837130412]
								}, {
									"case":	83,
									"scores":	[-4.92215837130412]
								}, {
									"case":	84,
									"scores":	[-4.92215837130412]
								}, {
									"case":	85,
									"scores":	[-4.92215837130412]
								}, {
									"case":	86,
									"scores":	[-4.92215837130412]
								}, {
									"case":	87,
									"scores":	[-4.92215837130412]
								}, {
									"case":	88,
									"scores":	[-4.92215837130412]
								}, {
									"case":	89,
									"scores":	[-4.92215837130412]
								}, {
									"case":	90,
									"scores":	[-4.92215837130412]
								}, {
									"case":	91,
									"scores":	[-4.92215837130412]
								}, {
									"case":	92,
									"scores":	[-4.92215837130412]
								}, {
									"case":	93,
									"scores":	[-4.92215837130412]
								}, {
									"case":	94,
									"scores":	[-4.92215837130412]
								}, {
									"case":	95,
									"scores":	[-4.92215837130412]
								}, {
									"case":	96,
									"scores":	[-4.92215837130412]
								}, {
									"case":	97,
									"scores":	[-4.92215837130412]
								}, {
									"case":	98,
									"scores":	[-4.92215837130412]
								}, {
									"case":	99,
									"scores":	[-4.92215837130412]
								}, {
									"case":	100,
									"scores":	[-4.92215837130412]
								}, {
									"case":	101,
									"scores":	[-4.92215837130412]
								}, {
									"case":	102,
									"scores":	[-4.92215837130412]
								}, {
									"case":	103,
									"scores":	[-4.92215837130412]
								}, {
									"case":	104,
									"scores":	[-4.92215837130412]
								}, {
									"case":	105,
									"scores":	[-4.92215837130412]
								}, {
									"case":	106,
									"scores":	[-4.92215837130412]
								}, {
									"case":	107,
									"scores":	[-4.92215837130412]
								}, {
									"case":	108,
									"scores":	[-4.92215837130412]
								}, {
									"case":	109,
									"scores":	[-4.92215837130412]
								}, {
									"case":	110,
									"scores":	[-4.92215837130412]
								}, {
									"case":	111,
									"scores":	[-4.92215837130412]
								}, {
									"case":	112,
									"scores":	[-4.92215837130412]
								}, {
									"case":	113,
									"scores":	[-4.92215837130412]
								}, {
									"case":	114,
									"scores":	[-4.92215837130412]
								}, {
									"case":	115,
									"scores":	[-4.92215837130412]
								}, {
									"case":	116,
									"scores":	[-4.92215837130412]
								}, {
									"case":	117,
									"scores":	[-4.92215837130412]
								}, {
									"case":	118,
									"scores":	[-4.92215837130412]
								}, {
									"case":	119,
									"scores":	[-4.92215837130412]
								}, {
									"case":	120,
									"scores":	[-4.92215837130412]
								}, {
									"case":	121,
									"scores":	[-4.92215837130412]
								}, {
									"case":	122,
									"scores":	[-4.92215837130412]
								}, {
									"case":	123,
									"scores":	[-4.92215837130412]
								}, {
									"case":	124,
									"scores":	[-4.92215837130412]
								}, {
									"case":	125,
									"scores":	[-4.92215837130412]
								}, {
									"case":	126,
									"scores":	[-4.92215837130412]
								}, {
									"case":	127,
									"scores":	[-4.92215837130412]
								}, {
									"case":	128,
									"scores":	[-4.92215837130412]
								}, {
									"case":	129,
									"scores":	[-4.92215837130412]
								}, {
									"case":	130,
									"scores":	[-4.92215837130412]
								}, {
									"case":	131,
									"scores":	[-4.92215837130412]
								}, {
									"case":	132,
									"scores":	[-4.92215837130412]
								}, {
									"case":	133,
									"scores":	[-4.92215837130412]
								}, {
									"case":	134,
									"scores":	[-4.92215837130412]
								}, {
									"case":	135,
									"scores":	[-4.92215837130412]
								}, {
									"case":	136,
									"scores":	[-4.92215837130412]
								}, {
									"case":	137,
									"scores":	[-4.92215837130412]
								}, {
									"case":	138,
									"scores":	[-4.92215837130412]
								}, {
									"case":	139,
									"scores":	[-4.92215837130412]
								}, {
									"case":	140,
									"scores":	[-4.92215837130412]
								}, {
									"case":	141,
									"scores":	[-4.92215837130412]
								}, {
									"case":	142,
									"scores":	[-4.92215837130412]
								}, {
									"case":	143,
									"scores":	[-4.92215837130412]
								}, {
									"case":	144,
									"scores":	[-4.92215837130412]
								}, {
									"case":	145,
									"scores":	[-4.92215837130412]
								}, {
									"case":	146,
									"scores":	[-4.92215837130412]
								}, {
									"case":	147,
									"scores":	[-4.92215837130412]
								}, {
									"case":	148,
									"scores":	[-4.92215837130412]
								}, {
									"case":	149,
									"scores":	[-4.92215837130412]
								}, {
									"case":	150,
									"scores":	[-4.92215837130412]
								}, {
									"case":	151,
									"scores":	[-4.92215837130412]
								}, {
									"case":	152,
									"scores":	[-4.92215837130412]
								}, {
									"case":	153,
									"scores":	[-4.92215837130412]
								}, {
									"case":	154,
									"scores":	[-4.92215837130412]
								}, {
									"case":	155,
									"scores":	[-4.92215837130412]
								}, {
									"case":	156,
									"scores":	[-4.92215837130412]
								}, {
									"case":	157,
									"scores":	[-4.92215837130412]
								}, {
									"case":	158,
									"scores":	[-4.92215837130412]
								}, {
									"case":	159,
									"scores":	[-4.92215837130412]
								}, {
									"case":	160,
									"scores":	[-4.92215837130412]
								}, {
									"case":	161,
									"scores":	[-4.92215837130412]
								}, {
									"case":	162,
									"scores":	[-4.92215837130412]
								}, {
									"case":	163,
									"scores":	[-4.92215837130412]
								}, {
									"case":	164,
									"scores":	[-4.92215837130412]
								}, {
									"case":	165,
									"scores":	[-4.92215837130412]
								}, {
									"case":	166,
									"scores":	[-4.92215837130412]
								}, {
									"case":	167,
									"scores":	[-4.92215837130412]
								}, {
									"case":	168,
									"scores":	[-4.92215837130412]
								}, {
									"case":	169,
									"scores":	[-4.92215837130412]
								}, {
									"case":	170,
									"scores":	[-4.92215837130412]
								}, {
									"case":	171,
									"scores":	[-4.92215837130412]
								}, {
									"case":	172,
									"scores":	[-4.92215837130412]
								}, {
									"case":	173,
									"scores":	[-4.92215837130412]
								}, {
									"case":	174,
									"scores":	[-4.92215837130412]
								}, {
									"case":	175,
									"scores":	[-4.92215837130412]
								}, {
									"case":	176,
									"scores":	[-4.92215837130412]
								}, {
									"case":	177,
									"scores":	[-4.92215837130412]
								}, {
									"case":	178,
									"scores":	[-4.92215837130412]
								}, {
									"case":	179,
									"scores":	[-4.92215837130412]
								}, {
									"case":	180,
									"scores":	[-4.92215837130412]
								}, {
									"case":	181,
									"scores":	[-4.92215837130412]
								}, {
									"case":	182,
									"scores":	[-4.92215837130412]
								}, {
									"case":	183,
									"scores":	[-4.92215837130412]
								}, {
									"case":	184,
									"scores":	[-4.92215837130412]
								}, {
									"case":	185,
									"scores":	[-4.92215837130412]
								}, {
									"case":	186,
									"scores":	[-4.92215837130412]
								}, {
									"case":	187,
									"scores":	[-4.92215837130412]
								}, {
									"case":	188,
									"scores":	[-4.92215837130412]
								}, {
									"case":	189,
									"scores":	[-4.92215837130412]
								}, {
									"case":	190,
									"scores":	[-4.92215837130412]
								}, {
									"case":	191,
									"scores":	[-4.92215837130412]
								}, {
									"case":	192,
									"scores":	[-4.92215837130412]
								}, {
									"case":	193,
									"scores":	[-4.92215837130412]
								}, {
									"case":	194,
									"scores":	[-4.92215837130412]
								}, {
									"case":	195,
									"scores":	[-4.92215837130412]
								}, {
									"case":	196,
									"scores":	[-4.92215837130412]
								}, {
									"case":	197,
									"scores":	[-4.92215837130412]
								}, {
									"case":	198,
									"scores":	[-4.92215837130412]
								}, {
									"case":	199,
									"scores":	[-4.92215837130412]
								}, {
									"case":	200,
									"scores":	[-4.92215837130412]
								}, {
									"case":	201,
									"scores":	[-4.92215837130412]
								}, {
									"case":	202,
									"scores":	[-4.92215837130412]
								}, {
									"case":	203,
									"scores":	[-4.92215837130412]
								}, {
									"case":	204,
									"scores":	[-4.92215837130412]
								}, {
									"case":	205,
									"scores":	[-4.92215837130412]
								}, {
									"case":	206,
									"scores":	[-4.92215837130412]
								}, {
									"case":	207,
									"scores":	[-4.92215837130412]
								}, {
									"case":	208,
									"scores":	[-4.92215837130412]
								}, {
									"case":	209,
									"scores":	[-4.92215837130412]
								}, {
									"case":	210,
									"scores":	[-4.92215837130412]
								}, {
									"case":	211,
									"scores":	[-4.92215837130412]
								}, {
									"case":	212,
									"scores":	[-4.92215837130412]
								}, {
									"case":	213,
									"scores":	[-4.92215837130412]
								}, {
									"case":	214,
									"scores":	[-4.92215837130412]
								}, {
									"case":	215,
									"scores":	[-4.92215837130412]
								}, {
									"case":	216,
									"scores":	[-4.92215837130412]
								}, {
									"case":	217,
									"scores":	[-4.92215837130412]
								}, {
									"case":	218,
									"scores":	[-4.92215837130412]
								}, {
									"case":	219,
									"scores":	[-4.92215837130412]
								}, {
									"case":	220,
									"scores":	[-4.92215837130412]
								}, {
									"case":	221,
									"scores":	[-4.92215837130412]
								}, {
									"case":	222,
									"scores":	[-4.92215837130412]
								}, {
									"case":	223,
									"scores":	[-4.92215837130412]
								}, {
									"case":	224,
									"scores":	[-4.92215837130412]
								}, {
									"case":	225,
									"scores":	[-4.92215837130412]
								}, {
									"case":	226,
									"scores":	[-4.92215837130412]
								}, {
									"case":	227,
									"scores":	[-4.92215837130412]
								}, {
									"case":	228,
									"scores":	[-4.92215837130412]
								}, {
									"case":	229,
									"scores":	[-4.92215837130412]
								}, {
									"case":	230,
									"scores":	[-4.92215837130412]
								}, {
									"case":	231,
									"scores":	[-4.92215837130412]
								}, {
									"case":	232,
									"scores":	[-4.92215837130412]
								}, {
									"case":	233,
									"scores":	[-4.92215837130412]
								}, {
									"case":	234,
									"scores":	[-4.92215837130412]
								}, {
									"case":	235,
									"scores":	[-4.92215837130412]
								}, {
									"case":	236,
									"scores":	[-4.92215837130412]
								}, {
									"case":	237,
									"scores":	[-4.92215837130412]
								}, {
									"case":	238,
									"scores":	[-4.92215837130412]
								}, {
									"case":	239,
									"scores":	[-4.92215837130412]
								}, {
									"case":	240,
									"scores":	[-4.92215837130412]
								}, {
									"case":	241,
									"scores":	[-4.92215837130412]
								}, {
									"case":	242,
									"scores":	[-4.92215837130412]
								}, {
									"case":	243,
									"scores":	[-4.92215837130412]
								}, {
									"case":	244,
									"scores":	[-4.92215837130412]
								}, {
									"case":	245,
									"scores":	[-4.92215837130412]
								}, {
									"case":	246,
									"scores":	[-4.92215837130412]
								}, {
									"case":	247,
									"scores":	[-4.92215837130412]
								}, {
									"case":	248,
									"scores":	[-4.92215837130412]
								}, {
									"case":	249,
									"scores":	[-4.92215837130412]
								}, {
									"case":	250,
									"scores":	[-4.92215837130412]
								}, {
									"case":	251,
									"scores":	[-4.92215837130412]
								}, {
									"case":	252,
									"scores":	[-4.92215837130412]
								}, {
									"case":	253,
									"scores":	[-4.92215837130412]
								}, {
									"case":	254,
									"scores":	[-4.92215837130412]
								}, {
									"case":	255,
									"scores":	[-4.92215837130412]
								}, {
									"case":	256,
									"scores":	[-4.92215837130412]
								}, {
									"case":	257,
									"scores":	[-4.92215837130412]
								}, {
									"case":	258,
									"scores":	[-4.92215837130412]
								}, {
									"case":	259,
									"scores":	[-4.92215837130412]
								}, {
									"case":	260,
									"scores":	[-4.92215837130412]
								}, {
									"case":	261,
									"scores":	[-4.92215837130412]
								}, {
									"case":	262,
									"scores":	[-4.92215837130412]
								}, {
									"case":	263,
									"scores":	[-4.92215837130412]
								}, {
									"case":	264,
									"scores":	[-4.92215837130412]
								}, {
									"case":	265,
									"scores":	[-4.92215837130412]
								}, {
									"case":	266,
									"scores":	[-4.92215837130412]
								}, {
									"case":	267,
									"scores":	[-4.92215837130412]
								}, {
									"case":	268,
									"scores":	[-4.92215837130412]
								}, {
									"case":	269,
									"scores":	[-4.92215837130412]
								}, {
									"case":	270,
									"scores":	[-4.92215837130412]
								}, {
									"case":	271,
									"scores":	[-4.92215837130412]
								}, {
									"case":	272,
									"scores":	[-4.92215837130412]
								}, {
									"case":	273,
									"scores":	[-4.92215837130412]
								}, {
									"case":	274,
									"scores":	[-4.92215837130412]
								}, {
									"case":	275,
									"scores":	[-4.92215837130412]
								}, {
									"case":	276,
									"scores":	[-4.92215837130412]
								}, {
									"case":	277,
									"scores":	[-4.92215837130412]
								}, {
									"case":	278,
									"scores":	[-4.92215837130412]
								}, {
									"case":	279,
									"scores":	[-4.92215837130412]
								}, {
									"case":	280,
									"scores":	[-4.92215837130412]
								}, {
									"case":	281,
									"scores":	[-4.92215837130412]
								}, {
									"case":	282,
									"scores":	[-4.92215837130412]
								}, {
									"case":	283,
									"scores":	[-4.92215837130412]
								}, {
									"case":	284,
									"scores":	[-4.92215837130412]
								}, {
									"case":	285,
									"scores":	[-4.92215837130412]
								}, {
									"case":	286,
									"scores":	[-4.92215837130412]
								}, {
									"case":	287,
									"scores":	[-4.92215837130412]
								}, {
									"case":	288,
									"scores":	[-4.92215837130412]
								}, {
									"case":	289,
									"scores":	[-4.92215837130412]
								}, {
									"case":	290,
									"scores":	[-4.92215837130412]
								}, {
									"case":	291,
									"scores":	[-4.92215837130412]
								}, {
									"case":	292,
									"scores":	[-4.92215837130412]
								}, {
									"case":	293,
									"scores":	[-4.92215837130412]
								}, {
									"case":	294,
									"scores":	[-4.92215837130412]
								}, {
									"case":	295,
									"scores":	[-4.92215837130412]
								}, {
									"case":	296,
									"scores":	[-4.92215837130412]
								}, {
									"case":	297,
									"scores":	[-4.92215837130412]
								}, {
									"case":	298,
									"scores":	[-4.92215837130412]
								}, {
									"case":	299,
									"scores":	[-4.92215837130412]
								}, {
									"case":	300,
									"scores":	[-4.92215837130412]
								}, {
									"case":	301,
									"scores":	[-4.92215837130412]
								}, {
									"case":	302,
									"scores":	[-4.92215837130412]
								}, {
									"case":	303,
									"scores":	[-4.92215837130412]
								}, {
									"case":	304,
									"scores":	[-4.92215837130412]
								}, {
									"case":	305,
									"scores":	[-4.92215837130412]
								}, {
									"case":	306,
									"scores":	[-4.92215837130412]
								}, {
									"case":	307,
									"scores":	[-4.92215837130412]
								}, {
									"case":	308,
									"scores":	[-4.92215837130412]
								}, {
									"case":	309,
									"scores":	[-4.92215837130412]
								}, {
									"case":	310,
									"scores":	[-4.92215837130412]
								}, {
									"case":	311,
									"scores":	[-4.92215837130412]
								}, {
									"case":	312,
									"scores":	[-4.92215837130412]
								}, {
									"case":	313,
									"scores":	[-4.92215837130412]
								}, {
									"case":	314,
									"scores":	[-4.92215837130412]
								}, {
									"case":	315,
									"scores":	[-4.92215837130412]
								}, {
									"case":	316,
									"scores":	[-4.92215837130412]
								}, {
									"case":	317,
									"scores":	[-4.92215837130412]
								}, {
									"case":	318,
									"scores":	[-4.92215837130412]
								}, {
									"case":	319,
									"scores":	[-4.92215837130412]
								}, {
									"case":	320,
									"scores":	[-4.92215837130412]
								}, {
									"case":	321,
									"scores":	[-4.92215837130412]
								}, {
									"case":	322,
									"scores":	[-4.92215837130412]
								}, {
									"case":	323,
									"scores":	[-4.92215837130412]
								}, {
									"case":	324,
									"scores":	[-4.92215837130412]
								}, {
									"case":	325,
									"scores":	[-4.92215837130412]
								}, {
									"case":	326,
									"scores":	[-4.92215837130412]
								}, {
									"case":	327,
									"scores":	[-4.92215837130412]
								}, {
									"case":	328,
									"scores":	[-4.92215837130412]
								}, {
									"case":	329,
									"scores":	[-4.92215837130412]
								}, {
									"case":	330,
									"scores":	[-4.92215837130412]
								}, {
									"case":	331,
									"scores":	[-4.92215837130412]
								}, {
									"case":	332,
									"scores":	[-4.92215837130412]
								}, {
									"case":	333,
									"scores":	[-4.92215837130412]
								}, {
									"case":	334,
									"scores":	[-4.92215837130412]
								}, {
									"case":	335,
									"scores":	[-4.92215837130412]
								}, {
									"case":	336,
									"scores":	[-4.92215837130412]
								}, {
									"case":	337,
									"scores":	[-4.92215837130412]
								}, {
									"case":	338,
									"scores":	[-4.92215837130412]
								}, {
									"case":	339,
									"scores":	[-4.92215837130412]
								}, {
									"case":	340,
									"scores":	[-4.92215837130412]
								}, {
									"case":	341,
									"scores":	[-4.92215837130412]
								}, {
									"case":	342,
									"scores":	[-4.92215837130412]
								}, {
									"case":	343,
									"scores":	[-4.92215837130412]
								}, {
									"case":	344,
									"scores":	[-4.92215837130412]
								}, {
									"case":	345,
									"scores":	[-4.92215837130412]
								}, {
									"case":	346,
									"scores":	[-4.92215837130412]
								}, {
									"case":	347,
									"scores":	[-4.92215837130412]
								}, {
									"case":	348,
									"scores":	[-4.92215837130412]
								}, {
									"case":	349,
									"scores":	[-4.92215837130412]
								}, {
									"case":	350,
									"scores":	[-4.92215837130412]
								}, {
									"case":	351,
									"scores":	[-4.92215837130412]
								}, {
									"case":	352,
									"scores":	[-4.92215837130412]
								}, {
									"case":	353,
									"scores":	[-4.92215837130412]
								}, {
									"case":	354,
									"scores":	[-4.92215837130412]
								}, {
									"case":	355,
									"scores":	[-4.92215837130412]
								}, {
									"case":	356,
									"scores":	[-4.92215837130412]
								}, {
									"case":	357,
									"scores":	[-4.92215837130412]
								}, {
									"case":	358,
									"scores":	[-4.92215837130412]
								}, {
									"case":	359,
									"scores":	[-4.92215837130412]
								}, {
									"case":	360,
									"scores":	[-4.92215837130412]
								}, {
									"case":	361,
									"scores":	[-4.92215837130412]
								}, {
									"case":	362,
									"scores":	[-4.92215837130412]
								}, {
									"case":	363,
									"scores":	[-4.92215837130412]
								}, {
									"case":	364,
									"scores":	[-4.92215837130412]
								}, {
									"case":	365,
									"scores":	[-4.92215837130412]
								}, {
									"case":	366,
									"scores":	[-4.92215837130412]
								}, {
									"case":	367,
									"scores":	[-4.92215837130412]
								}, {
									"case":	368,
									"scores":	[-4.92215837130412]
								}, {
									"case":	369,
									"scores":	[-4.92215837130412]
								}, {
									"case":	370,
									"scores":	[-4.92215837130412]
								}, {
									"case":	371,
									"scores":	[-4.92215837130412]
								}, {
									"case":	372,
									"scores":	[-4.92215837130412]
								}, {
									"case":	373,
									"scores":	[-4.92215837130412]
								}, {
									"case":	374,
									"scores":	[-4.92215837130412]
								}, {
									"case":	375,
									"scores":	[-4.92215837130412]
								}, {
									"case":	376,
									"scores":	[-4.92215837130412]
								}, {
									"case":	377,
									"scores":	[-4.92215837130412]
								}, {
									"case":	378,
									"scores":	[-4.92215837130412]
								}, {
									"case":	379,
									"scores":	[-4.92215837130412]
								}, {
									"case":	380,
									"scores":	[-4.92215837130412]
								}, {
									"case":	381,
									"scores":	[-4.92215837130412]
								}, {
									"case":	382,
									"scores":	[-4.92215837130412]
								}, {
									"case":	383,
									"scores":	[-4.92215837130412]
								}, {
									"case":	384,
									"scores":	[-4.92215837130412]
								}, {
									"case":	385,
									"scores":	[-4.92215837130412]
								}, {
									"case":	386,
									"scores":	[-4.92215837130412]
								}, {
									"case":	387,
									"scores":	[-4.92215837130412]
								}, {
									"case":	388,
									"scores":	[-4.92215837130412]
								}, {
									"case":	389,
									"scores":	[-4.92215837130412]
								}, {
									"case":	390,
									"scores":	[-4.92215837130412]
								}, {
									"case":	391,
									"scores":	[-4.92215837130412]
								}, {
									"case":	392,
									"scores":	[-4.92215837130412]
								}, {
									"case":	393,
									"scores":	[-4.92215837130412]
								}, {
									"case":	394,
									"scores":	[-4.92215837130412]
								}, {
									"case":	395,
									"scores":	[-4.92215837130412]
								}, {
									"case":	396,
									"scores":	[-4.92215837130412]
								}, {
									"case":	397,
									"scores":	[-4.92215837130412]
								}, {
									"case":	398,
									"scores":	[-4.92215837130412]
								}, {
									"case":	399,
									"scores":	[-4.92215837130412]
								}, {
									"case":	400,
									"scores":	[-9.54237205510412, -8.97160496600412, -9.81579374130412, -9.31131045510412, -10.040535355104119, -10.928335912004119, -9.50527165510412, -9.29633314130412, -9.54237205510412, -9.50675868910412, -9.50675868910412, -9.35721273430412, -10.061832655104119]
								}]
						}, {
							"switch":	56,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	2895,
							"begin_column":	2,
							"end_line":	2895,
							"end_column":	58,
							"patch_codes":	["if (__is_neg(\"\", \"L2895\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(intobj->diff), sizeof (intobj->diff), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(intobj->initialized)) || __is_neg(\"\", \"L2895\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(intobj->diff), sizeof (intobj->diff), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n", "if ((!(intobj->initialized)) && !__is_neg(\"\", \"L2895\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(intobj->diff), sizeof (intobj->diff), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8416290504281463, -5.3107891283281461, -5.0004372604281455, -5.2656980964281459, -5.7890657409281463, -6.2951470983281457, -5.5472782504281462, -5.0837409504281457, -5.8416290504281463, -5.5505356904281458, -5.5505356904281458, -4.7859088944281458, -5.7583253604281452]
								}, {
									"case":	2,
									"scores":	[-6.5324553334281461, -6.0016154113281459, -5.6912635434281462, -5.9565243794281457, -6.4798920239281461, -6.9859733813281455, -6.238104533428146, -5.7745672334281455, -6.5324553334281461, -6.2413619734281465, -6.2413619734281465, -5.4767351774281456, -6.4491516434281451]
								}, {
									"case":	3,
									"scores":	[-6.5324553334281461, -6.0016154113281459, -5.6912635434281462, -5.9565243794281457, -6.4798920239281461, -6.9859733813281455, -6.238104533428146, -5.7745672334281455, -6.5324553334281461, -6.2413619734281465, -6.2413619734281465, -5.4767351774281456, -6.4491516434281451]
								}]
						}, {
							"switch":	57,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2895,
							"begin_column":	2,
							"end_line":	2895,
							"end_column":	58,
							"patch_codes":	["if (!__is_neg(\"\", \"L2895\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(intobj->diff), sizeof (intobj->diff), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props)))\n    if (!(intobj->initialized)) {\n        php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\");\n        {\n            do {\n                zval *__z = (return_value);\n                (*__z).value.lval = ((0) != 0);\n                (*__z).type = 3;\n            } while (0);\n            return;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L2895\", 13, &(return_value), sizeof (return_value), &(intobj), sizeof (intobj), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(intobj->diff), sizeof (intobj->diff), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(bias), sizeof (bias), &(intobj->props), sizeof (intobj->props)) && (!(intobj->initialized))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\");\n    {\n        do {\n            zval *__z = (return_value);\n            (*__z).value.lval = ((0) != 0);\n            (*__z).type = 3;\n        } while (0);\n        return;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.82592503130412, -8.29508510920412, -7.98473324130412, -8.24999407730412, -8.77336172180412, -9.27944307920412, -8.53157423130412, -8.06803693130412, -8.82592503130412, -8.53483167130412, -8.53483167130412, -7.77020487530412, -8.74262134130412]
								}, {
									"case":	2,
									"scores":	[-8.85117488930412, -8.32033496720412, -8.00998309930412, -8.27524393530412, -8.79861157980412, -9.30469293720412, -8.55682408930412, -8.09328678930412, -8.85117488930412, -8.56008152930412, -8.56008152930412, -7.79545473330412, -8.76787119930412]
								}]
						}]
				}, {
					"line":	2896,
					"switches":	[{
							"switch":	58,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2897,
							"begin_column":	0,
							"end_line":	2897,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2897\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.88175295666908]
								}, {
									"case":	2,
									"scores":	[-4.88175295666908]
								}, {
									"case":	3,
									"scores":	[-4.88175295666908]
								}, {
									"case":	4,
									"scores":	[-4.88175295666908]
								}, {
									"case":	5,
									"scores":	[-4.88175295666908]
								}, {
									"case":	6,
									"scores":	[-4.88175295666908]
								}, {
									"case":	7,
									"scores":	[-4.88175295666908]
								}, {
									"case":	8,
									"scores":	[-4.88175295666908]
								}, {
									"case":	9,
									"scores":	[-4.88175295666908]
								}, {
									"case":	10,
									"scores":	[-4.88175295666908]
								}, {
									"case":	11,
									"scores":	[-4.88175295666908]
								}, {
									"case":	12,
									"scores":	[-4.88175295666908]
								}, {
									"case":	13,
									"scores":	[-4.88175295666908]
								}, {
									"case":	14,
									"scores":	[-4.88175295666908]
								}, {
									"case":	15,
									"scores":	[-4.88175295666908]
								}, {
									"case":	16,
									"scores":	[-4.88175295666908]
								}, {
									"case":	17,
									"scores":	[-4.88175295666908]
								}, {
									"case":	18,
									"scores":	[-4.88175295666908]
								}, {
									"case":	19,
									"scores":	[-4.88175295666908]
								}, {
									"case":	20,
									"scores":	[-4.88175295666908]
								}, {
									"case":	21,
									"scores":	[-4.88175295666908]
								}, {
									"case":	22,
									"scores":	[-4.88175295666908]
								}, {
									"case":	23,
									"scores":	[-4.88175295666908]
								}, {
									"case":	24,
									"scores":	[-4.88175295666908]
								}, {
									"case":	25,
									"scores":	[-4.88175295666908]
								}, {
									"case":	26,
									"scores":	[-4.88175295666908]
								}, {
									"case":	27,
									"scores":	[-4.88175295666908]
								}, {
									"case":	28,
									"scores":	[-4.88175295666908]
								}, {
									"case":	29,
									"scores":	[-4.88175295666908]
								}, {
									"case":	30,
									"scores":	[-4.88175295666908]
								}, {
									"case":	31,
									"scores":	[-4.88175295666908]
								}, {
									"case":	32,
									"scores":	[-4.88175295666908]
								}, {
									"case":	33,
									"scores":	[-4.88175295666908]
								}, {
									"case":	34,
									"scores":	[-4.88175295666908]
								}, {
									"case":	35,
									"scores":	[-4.88175295666908]
								}, {
									"case":	36,
									"scores":	[-4.88175295666908]
								}, {
									"case":	37,
									"scores":	[-4.88175295666908]
								}, {
									"case":	38,
									"scores":	[-4.88175295666908]
								}, {
									"case":	39,
									"scores":	[-4.88175295666908]
								}, {
									"case":	40,
									"scores":	[-4.88175295666908]
								}, {
									"case":	41,
									"scores":	[-4.88175295666908]
								}, {
									"case":	42,
									"scores":	[-4.88175295666908]
								}, {
									"case":	43,
									"scores":	[-4.88175295666908]
								}, {
									"case":	44,
									"scores":	[-4.88175295666908]
								}, {
									"case":	45,
									"scores":	[-4.88175295666908]
								}, {
									"case":	46,
									"scores":	[-4.88175295666908]
								}, {
									"case":	47,
									"scores":	[-4.88175295666908]
								}, {
									"case":	48,
									"scores":	[-4.88175295666908]
								}, {
									"case":	49,
									"scores":	[-4.88175295666908]
								}, {
									"case":	50,
									"scores":	[-4.88175295666908]
								}, {
									"case":	51,
									"scores":	[-4.88175295666908]
								}, {
									"case":	52,
									"scores":	[-4.88175295666908]
								}, {
									"case":	53,
									"scores":	[-4.88175295666908]
								}, {
									"case":	54,
									"scores":	[-4.88175295666908]
								}, {
									"case":	55,
									"scores":	[-4.88175295666908]
								}, {
									"case":	56,
									"scores":	[-4.88175295666908]
								}, {
									"case":	57,
									"scores":	[-4.88175295666908]
								}, {
									"case":	58,
									"scores":	[-4.88175295666908]
								}, {
									"case":	59,
									"scores":	[-4.88175295666908]
								}, {
									"case":	60,
									"scores":	[-4.88175295666908]
								}, {
									"case":	61,
									"scores":	[-4.88175295666908]
								}, {
									"case":	62,
									"scores":	[-4.88175295666908]
								}, {
									"case":	63,
									"scores":	[-4.88175295666908]
								}, {
									"case":	64,
									"scores":	[-4.88175295666908]
								}, {
									"case":	65,
									"scores":	[-4.88175295666908]
								}, {
									"case":	66,
									"scores":	[-4.88175295666908]
								}, {
									"case":	67,
									"scores":	[-4.88175295666908]
								}, {
									"case":	68,
									"scores":	[-4.88175295666908]
								}, {
									"case":	69,
									"scores":	[-4.88175295666908]
								}, {
									"case":	70,
									"scores":	[-4.88175295666908]
								}, {
									"case":	71,
									"scores":	[-4.88175295666908]
								}, {
									"case":	72,
									"scores":	[-4.88175295666908]
								}, {
									"case":	73,
									"scores":	[-4.88175295666908]
								}, {
									"case":	74,
									"scores":	[-4.88175295666908]
								}, {
									"case":	75,
									"scores":	[-4.88175295666908]
								}, {
									"case":	76,
									"scores":	[-4.88175295666908]
								}, {
									"case":	77,
									"scores":	[-4.88175295666908]
								}, {
									"case":	78,
									"scores":	[-4.88175295666908]
								}, {
									"case":	79,
									"scores":	[-4.88175295666908]
								}, {
									"case":	80,
									"scores":	[-4.88175295666908]
								}, {
									"case":	81,
									"scores":	[-4.88175295666908]
								}, {
									"case":	82,
									"scores":	[-4.88175295666908]
								}, {
									"case":	83,
									"scores":	[-4.88175295666908]
								}, {
									"case":	84,
									"scores":	[-4.88175295666908]
								}, {
									"case":	85,
									"scores":	[-4.88175295666908]
								}, {
									"case":	86,
									"scores":	[-4.88175295666908]
								}, {
									"case":	87,
									"scores":	[-4.88175295666908]
								}, {
									"case":	88,
									"scores":	[-4.88175295666908]
								}, {
									"case":	89,
									"scores":	[-4.88175295666908]
								}, {
									"case":	90,
									"scores":	[-4.88175295666908]
								}, {
									"case":	91,
									"scores":	[-4.88175295666908]
								}, {
									"case":	92,
									"scores":	[-4.88175295666908]
								}, {
									"case":	93,
									"scores":	[-4.88175295666908]
								}, {
									"case":	94,
									"scores":	[-4.88175295666908]
								}, {
									"case":	95,
									"scores":	[-4.88175295666908]
								}, {
									"case":	96,
									"scores":	[-4.88175295666908]
								}, {
									"case":	97,
									"scores":	[-4.88175295666908]
								}, {
									"case":	98,
									"scores":	[-4.88175295666908]
								}, {
									"case":	99,
									"scores":	[-4.88175295666908]
								}, {
									"case":	100,
									"scores":	[-4.88175295666908]
								}, {
									"case":	101,
									"scores":	[-4.88175295666908]
								}, {
									"case":	102,
									"scores":	[-4.88175295666908]
								}, {
									"case":	103,
									"scores":	[-4.88175295666908]
								}, {
									"case":	104,
									"scores":	[-4.88175295666908]
								}, {
									"case":	105,
									"scores":	[-4.88175295666908]
								}, {
									"case":	106,
									"scores":	[-4.88175295666908]
								}, {
									"case":	107,
									"scores":	[-4.88175295666908]
								}, {
									"case":	108,
									"scores":	[-4.88175295666908]
								}, {
									"case":	109,
									"scores":	[-4.88175295666908]
								}, {
									"case":	110,
									"scores":	[-4.88175295666908]
								}, {
									"case":	111,
									"scores":	[-4.88175295666908]
								}, {
									"case":	112,
									"scores":	[-4.88175295666908]
								}, {
									"case":	113,
									"scores":	[-4.88175295666908]
								}, {
									"case":	114,
									"scores":	[-4.88175295666908]
								}, {
									"case":	115,
									"scores":	[-4.88175295666908]
								}, {
									"case":	116,
									"scores":	[-4.88175295666908]
								}, {
									"case":	117,
									"scores":	[-4.88175295666908]
								}, {
									"case":	118,
									"scores":	[-4.88175295666908]
								}, {
									"case":	119,
									"scores":	[-4.88175295666908]
								}, {
									"case":	120,
									"scores":	[-4.88175295666908]
								}, {
									"case":	121,
									"scores":	[-4.88175295666908]
								}, {
									"case":	122,
									"scores":	[-4.88175295666908]
								}, {
									"case":	123,
									"scores":	[-4.88175295666908]
								}, {
									"case":	124,
									"scores":	[-4.88175295666908]
								}, {
									"case":	125,
									"scores":	[-4.88175295666908]
								}, {
									"case":	126,
									"scores":	[-4.88175295666908]
								}, {
									"case":	127,
									"scores":	[-4.88175295666908]
								}, {
									"case":	128,
									"scores":	[-4.88175295666908]
								}, {
									"case":	129,
									"scores":	[-4.88175295666908]
								}, {
									"case":	130,
									"scores":	[-4.88175295666908]
								}, {
									"case":	131,
									"scores":	[-4.88175295666908]
								}, {
									"case":	132,
									"scores":	[-4.88175295666908]
								}, {
									"case":	133,
									"scores":	[-4.88175295666908]
								}, {
									"case":	134,
									"scores":	[-4.88175295666908]
								}, {
									"case":	135,
									"scores":	[-4.88175295666908]
								}, {
									"case":	136,
									"scores":	[-4.88175295666908]
								}, {
									"case":	137,
									"scores":	[-4.88175295666908]
								}, {
									"case":	138,
									"scores":	[-4.88175295666908]
								}, {
									"case":	139,
									"scores":	[-4.88175295666908]
								}, {
									"case":	140,
									"scores":	[-4.88175295666908]
								}, {
									"case":	141,
									"scores":	[-4.88175295666908]
								}, {
									"case":	142,
									"scores":	[-4.88175295666908]
								}, {
									"case":	143,
									"scores":	[-4.88175295666908]
								}, {
									"case":	144,
									"scores":	[-4.88175295666908]
								}, {
									"case":	145,
									"scores":	[-4.88175295666908]
								}, {
									"case":	146,
									"scores":	[-4.88175295666908]
								}, {
									"case":	147,
									"scores":	[-4.88175295666908]
								}, {
									"case":	148,
									"scores":	[-4.88175295666908]
								}, {
									"case":	149,
									"scores":	[-4.88175295666908]
								}, {
									"case":	150,
									"scores":	[-4.88175295666908]
								}, {
									"case":	151,
									"scores":	[-4.88175295666908]
								}, {
									"case":	152,
									"scores":	[-4.88175295666908]
								}, {
									"case":	153,
									"scores":	[-4.88175295666908]
								}, {
									"case":	154,
									"scores":	[-4.88175295666908]
								}, {
									"case":	155,
									"scores":	[-4.88175295666908]
								}, {
									"case":	156,
									"scores":	[-4.88175295666908]
								}, {
									"case":	157,
									"scores":	[-4.88175295666908]
								}, {
									"case":	158,
									"scores":	[-4.88175295666908]
								}, {
									"case":	159,
									"scores":	[-4.88175295666908]
								}, {
									"case":	160,
									"scores":	[-4.88175295666908]
								}, {
									"case":	161,
									"scores":	[-4.88175295666908]
								}, {
									"case":	162,
									"scores":	[-4.88175295666908]
								}, {
									"case":	163,
									"scores":	[-4.88175295666908]
								}, {
									"case":	164,
									"scores":	[-4.88175295666908]
								}, {
									"case":	165,
									"scores":	[-4.88175295666908]
								}, {
									"case":	166,
									"scores":	[-4.88175295666908]
								}, {
									"case":	167,
									"scores":	[-4.88175295666908]
								}, {
									"case":	168,
									"scores":	[-4.88175295666908]
								}, {
									"case":	169,
									"scores":	[-4.88175295666908]
								}, {
									"case":	170,
									"scores":	[-4.88175295666908]
								}, {
									"case":	171,
									"scores":	[-4.88175295666908]
								}, {
									"case":	172,
									"scores":	[-4.88175295666908]
								}, {
									"case":	173,
									"scores":	[-4.88175295666908]
								}, {
									"case":	174,
									"scores":	[-4.88175295666908]
								}, {
									"case":	175,
									"scores":	[-4.88175295666908]
								}, {
									"case":	176,
									"scores":	[-4.88175295666908]
								}, {
									"case":	177,
									"scores":	[-4.88175295666908]
								}, {
									"case":	178,
									"scores":	[-4.88175295666908]
								}, {
									"case":	179,
									"scores":	[-4.88175295666908]
								}, {
									"case":	180,
									"scores":	[-4.88175295666908]
								}, {
									"case":	181,
									"scores":	[-4.88175295666908]
								}, {
									"case":	182,
									"scores":	[-4.88175295666908]
								}, {
									"case":	183,
									"scores":	[-4.88175295666908]
								}, {
									"case":	184,
									"scores":	[-4.88175295666908]
								}, {
									"case":	185,
									"scores":	[-4.88175295666908]
								}, {
									"case":	186,
									"scores":	[-4.88175295666908]
								}, {
									"case":	187,
									"scores":	[-4.88175295666908]
								}, {
									"case":	188,
									"scores":	[-4.88175295666908]
								}, {
									"case":	189,
									"scores":	[-4.88175295666908]
								}, {
									"case":	190,
									"scores":	[-4.88175295666908]
								}, {
									"case":	191,
									"scores":	[-4.88175295666908]
								}, {
									"case":	192,
									"scores":	[-4.88175295666908]
								}, {
									"case":	193,
									"scores":	[-4.88175295666908]
								}, {
									"case":	194,
									"scores":	[-4.88175295666908]
								}, {
									"case":	195,
									"scores":	[-4.88175295666908]
								}, {
									"case":	196,
									"scores":	[-4.88175295666908]
								}, {
									"case":	197,
									"scores":	[-4.88175295666908]
								}, {
									"case":	198,
									"scores":	[-4.88175295666908]
								}, {
									"case":	199,
									"scores":	[-4.88175295666908]
								}, {
									"case":	200,
									"scores":	[-4.88175295666908]
								}, {
									"case":	201,
									"scores":	[-4.88175295666908]
								}, {
									"case":	202,
									"scores":	[-4.88175295666908]
								}, {
									"case":	203,
									"scores":	[-4.88175295666908]
								}, {
									"case":	204,
									"scores":	[-4.88175295666908]
								}, {
									"case":	205,
									"scores":	[-4.88175295666908]
								}, {
									"case":	206,
									"scores":	[-4.88175295666908]
								}, {
									"case":	207,
									"scores":	[-4.88175295666908]
								}, {
									"case":	208,
									"scores":	[-4.88175295666908]
								}, {
									"case":	209,
									"scores":	[-4.88175295666908]
								}, {
									"case":	210,
									"scores":	[-4.88175295666908]
								}, {
									"case":	211,
									"scores":	[-4.88175295666908]
								}, {
									"case":	212,
									"scores":	[-4.88175295666908]
								}, {
									"case":	213,
									"scores":	[-4.88175295666908]
								}, {
									"case":	214,
									"scores":	[-4.88175295666908]
								}, {
									"case":	215,
									"scores":	[-4.88175295666908]
								}, {
									"case":	216,
									"scores":	[-4.88175295666908]
								}, {
									"case":	217,
									"scores":	[-4.88175295666908]
								}, {
									"case":	218,
									"scores":	[-4.88175295666908]
								}, {
									"case":	219,
									"scores":	[-4.88175295666908]
								}, {
									"case":	220,
									"scores":	[-4.88175295666908]
								}, {
									"case":	221,
									"scores":	[-4.88175295666908]
								}, {
									"case":	222,
									"scores":	[-4.88175295666908]
								}, {
									"case":	223,
									"scores":	[-4.88175295666908]
								}, {
									"case":	224,
									"scores":	[-4.88175295666908]
								}, {
									"case":	225,
									"scores":	[-4.88175295666908]
								}, {
									"case":	226,
									"scores":	[-4.88175295666908]
								}, {
									"case":	227,
									"scores":	[-4.88175295666908]
								}, {
									"case":	228,
									"scores":	[-4.88175295666908]
								}, {
									"case":	229,
									"scores":	[-4.88175295666908]
								}, {
									"case":	230,
									"scores":	[-4.88175295666908]
								}, {
									"case":	231,
									"scores":	[-4.88175295666908]
								}, {
									"case":	232,
									"scores":	[-4.88175295666908]
								}, {
									"case":	233,
									"scores":	[-4.88175295666908]
								}, {
									"case":	234,
									"scores":	[-4.88175295666908]
								}, {
									"case":	235,
									"scores":	[-4.88175295666908]
								}, {
									"case":	236,
									"scores":	[-4.88175295666908]
								}, {
									"case":	237,
									"scores":	[-4.88175295666908]
								}, {
									"case":	238,
									"scores":	[-4.88175295666908]
								}, {
									"case":	239,
									"scores":	[-4.88175295666908]
								}, {
									"case":	240,
									"scores":	[-4.88175295666908]
								}, {
									"case":	241,
									"scores":	[-4.88175295666908]
								}, {
									"case":	242,
									"scores":	[-4.88175295666908]
								}, {
									"case":	243,
									"scores":	[-4.88175295666908]
								}, {
									"case":	244,
									"scores":	[-4.88175295666908]
								}, {
									"case":	245,
									"scores":	[-4.88175295666908]
								}, {
									"case":	246,
									"scores":	[-4.88175295666908]
								}, {
									"case":	247,
									"scores":	[-4.88175295666908]
								}, {
									"case":	248,
									"scores":	[-4.88175295666908]
								}, {
									"case":	249,
									"scores":	[-4.88175295666908]
								}, {
									"case":	250,
									"scores":	[-4.88175295666908]
								}, {
									"case":	251,
									"scores":	[-4.88175295666908]
								}, {
									"case":	252,
									"scores":	[-4.88175295666908]
								}, {
									"case":	253,
									"scores":	[-4.88175295666908]
								}, {
									"case":	254,
									"scores":	[-4.88175295666908]
								}, {
									"case":	255,
									"scores":	[-4.88175295666908]
								}, {
									"case":	256,
									"scores":	[-4.88175295666908]
								}, {
									"case":	257,
									"scores":	[-4.88175295666908]
								}, {
									"case":	258,
									"scores":	[-4.88175295666908]
								}, {
									"case":	259,
									"scores":	[-4.88175295666908]
								}, {
									"case":	260,
									"scores":	[-4.88175295666908]
								}, {
									"case":	261,
									"scores":	[-4.88175295666908]
								}, {
									"case":	262,
									"scores":	[-4.88175295666908]
								}, {
									"case":	263,
									"scores":	[-4.88175295666908]
								}, {
									"case":	264,
									"scores":	[-4.88175295666908]
								}, {
									"case":	265,
									"scores":	[-4.88175295666908]
								}, {
									"case":	266,
									"scores":	[-4.88175295666908]
								}, {
									"case":	267,
									"scores":	[-4.88175295666908]
								}, {
									"case":	268,
									"scores":	[-4.88175295666908]
								}, {
									"case":	269,
									"scores":	[-4.88175295666908]
								}, {
									"case":	270,
									"scores":	[-4.88175295666908]
								}, {
									"case":	271,
									"scores":	[-4.88175295666908]
								}, {
									"case":	272,
									"scores":	[-4.88175295666908]
								}, {
									"case":	273,
									"scores":	[-4.88175295666908]
								}, {
									"case":	274,
									"scores":	[-4.88175295666908]
								}, {
									"case":	275,
									"scores":	[-4.88175295666908]
								}, {
									"case":	276,
									"scores":	[-4.88175295666908]
								}, {
									"case":	277,
									"scores":	[-4.88175295666908]
								}, {
									"case":	278,
									"scores":	[-4.88175295666908]
								}, {
									"case":	279,
									"scores":	[-4.88175295666908]
								}, {
									"case":	280,
									"scores":	[-4.88175295666908]
								}, {
									"case":	281,
									"scores":	[-4.88175295666908]
								}, {
									"case":	282,
									"scores":	[-4.88175295666908]
								}, {
									"case":	283,
									"scores":	[-4.88175295666908]
								}, {
									"case":	284,
									"scores":	[-4.88175295666908]
								}, {
									"case":	285,
									"scores":	[-4.88175295666908]
								}, {
									"case":	286,
									"scores":	[-4.88175295666908]
								}, {
									"case":	287,
									"scores":	[-4.88175295666908]
								}, {
									"case":	288,
									"scores":	[-4.88175295666908]
								}, {
									"case":	289,
									"scores":	[-4.88175295666908]
								}, {
									"case":	290,
									"scores":	[-4.88175295666908]
								}, {
									"case":	291,
									"scores":	[-4.88175295666908]
								}, {
									"case":	292,
									"scores":	[-4.88175295666908]
								}, {
									"case":	293,
									"scores":	[-4.88175295666908]
								}, {
									"case":	294,
									"scores":	[-4.88175295666908]
								}, {
									"case":	295,
									"scores":	[-4.88175295666908]
								}, {
									"case":	296,
									"scores":	[-4.88175295666908]
								}, {
									"case":	297,
									"scores":	[-4.88175295666908]
								}, {
									"case":	298,
									"scores":	[-4.88175295666908]
								}, {
									"case":	299,
									"scores":	[-4.88175295666908]
								}, {
									"case":	300,
									"scores":	[-4.88175295666908]
								}, {
									"case":	301,
									"scores":	[-4.88175295666908]
								}, {
									"case":	302,
									"scores":	[-4.88175295666908]
								}, {
									"case":	303,
									"scores":	[-4.88175295666908]
								}, {
									"case":	304,
									"scores":	[-4.88175295666908]
								}, {
									"case":	305,
									"scores":	[-4.88175295666908]
								}, {
									"case":	306,
									"scores":	[-4.88175295666908]
								}, {
									"case":	307,
									"scores":	[-4.88175295666908]
								}, {
									"case":	308,
									"scores":	[-4.88175295666908]
								}, {
									"case":	309,
									"scores":	[-4.88175295666908]
								}, {
									"case":	310,
									"scores":	[-4.88175295666908]
								}, {
									"case":	311,
									"scores":	[-4.88175295666908]
								}, {
									"case":	312,
									"scores":	[-4.88175295666908]
								}, {
									"case":	313,
									"scores":	[-4.88175295666908]
								}, {
									"case":	314,
									"scores":	[-4.88175295666908]
								}, {
									"case":	315,
									"scores":	[-4.88175295666908]
								}, {
									"case":	316,
									"scores":	[-4.88175295666908]
								}, {
									"case":	317,
									"scores":	[-4.88175295666908]
								}, {
									"case":	318,
									"scores":	[-4.88175295666908]
								}, {
									"case":	319,
									"scores":	[-4.88175295666908]
								}, {
									"case":	320,
									"scores":	[-4.88175295666908]
								}, {
									"case":	321,
									"scores":	[-4.88175295666908]
								}, {
									"case":	322,
									"scores":	[-4.88175295666908]
								}, {
									"case":	323,
									"scores":	[-4.88175295666908]
								}, {
									"case":	324,
									"scores":	[-4.88175295666908]
								}, {
									"case":	325,
									"scores":	[-4.88175295666908]
								}, {
									"case":	326,
									"scores":	[-4.88175295666908]
								}, {
									"case":	327,
									"scores":	[-4.88175295666908]
								}, {
									"case":	328,
									"scores":	[-4.88175295666908]
								}, {
									"case":	329,
									"scores":	[-4.88175295666908]
								}, {
									"case":	330,
									"scores":	[-4.88175295666908]
								}, {
									"case":	331,
									"scores":	[-4.88175295666908]
								}, {
									"case":	332,
									"scores":	[-4.88175295666908]
								}, {
									"case":	333,
									"scores":	[-4.88175295666908]
								}, {
									"case":	334,
									"scores":	[-4.88175295666908]
								}, {
									"case":	335,
									"scores":	[-4.88175295666908]
								}, {
									"case":	336,
									"scores":	[-4.88175295666908]
								}, {
									"case":	337,
									"scores":	[-4.88175295666908]
								}, {
									"case":	338,
									"scores":	[-4.88175295666908]
								}, {
									"case":	339,
									"scores":	[-4.88175295666908]
								}, {
									"case":	340,
									"scores":	[-4.88175295666908]
								}, {
									"case":	341,
									"scores":	[-4.88175295666908]
								}, {
									"case":	342,
									"scores":	[-4.88175295666908]
								}, {
									"case":	343,
									"scores":	[-4.88175295666908]
								}, {
									"case":	344,
									"scores":	[-4.88175295666908]
								}, {
									"case":	345,
									"scores":	[-4.88175295666908]
								}, {
									"case":	346,
									"scores":	[-4.88175295666908]
								}, {
									"case":	347,
									"scores":	[-4.88175295666908]
								}, {
									"case":	348,
									"scores":	[-4.88175295666908]
								}, {
									"case":	349,
									"scores":	[-4.88175295666908]
								}, {
									"case":	350,
									"scores":	[-4.88175295666908]
								}, {
									"case":	351,
									"scores":	[-4.88175295666908]
								}, {
									"case":	352,
									"scores":	[-4.88175295666908]
								}, {
									"case":	353,
									"scores":	[-4.88175295666908]
								}, {
									"case":	354,
									"scores":	[-4.88175295666908]
								}, {
									"case":	355,
									"scores":	[-4.88175295666908]
								}, {
									"case":	356,
									"scores":	[-4.88175295666908]
								}, {
									"case":	357,
									"scores":	[-4.88175295666908]
								}, {
									"case":	358,
									"scores":	[-4.88175295666908]
								}, {
									"case":	359,
									"scores":	[-4.88175295666908]
								}, {
									"case":	360,
									"scores":	[-4.88175295666908]
								}, {
									"case":	361,
									"scores":	[-4.88175295666908]
								}, {
									"case":	362,
									"scores":	[-4.88175295666908]
								}, {
									"case":	363,
									"scores":	[-4.88175295666908]
								}, {
									"case":	364,
									"scores":	[-4.88175295666908]
								}, {
									"case":	365,
									"scores":	[-4.88175295666908]
								}, {
									"case":	366,
									"scores":	[-4.88175295666908]
								}, {
									"case":	367,
									"scores":	[-4.88175295666908]
								}, {
									"case":	368,
									"scores":	[-4.88175295666908]
								}, {
									"case":	369,
									"scores":	[-4.88175295666908]
								}, {
									"case":	370,
									"scores":	[-4.88175295666908]
								}, {
									"case":	371,
									"scores":	[-4.88175295666908]
								}, {
									"case":	372,
									"scores":	[-4.88175295666908]
								}, {
									"case":	373,
									"scores":	[-4.88175295666908]
								}, {
									"case":	374,
									"scores":	[-4.88175295666908]
								}, {
									"case":	375,
									"scores":	[-4.88175295666908]
								}, {
									"case":	376,
									"scores":	[-4.88175295666908]
								}, {
									"case":	377,
									"scores":	[-4.88175295666908]
								}, {
									"case":	378,
									"scores":	[-4.88175295666908]
								}, {
									"case":	379,
									"scores":	[-4.88175295666908]
								}, {
									"case":	380,
									"scores":	[-4.88175295666908]
								}, {
									"case":	381,
									"scores":	[-4.88175295666908]
								}, {
									"case":	382,
									"scores":	[-4.88175295666908]
								}, {
									"case":	383,
									"scores":	[-4.88175295666908]
								}, {
									"case":	384,
									"scores":	[-4.88175295666908]
								}, {
									"case":	385,
									"scores":	[-4.88175295666908]
								}, {
									"case":	386,
									"scores":	[-4.88175295666908]
								}, {
									"case":	387,
									"scores":	[-4.88175295666908]
								}, {
									"case":	388,
									"scores":	[-4.88175295666908]
								}, {
									"case":	389,
									"scores":	[-4.88175295666908]
								}, {
									"case":	390,
									"scores":	[-4.88175295666908]
								}, {
									"case":	391,
									"scores":	[-4.88175295666908]
								}, {
									"case":	392,
									"scores":	[-4.88175295666908]
								}, {
									"case":	393,
									"scores":	[-4.88175295666908]
								}, {
									"case":	394,
									"scores":	[-4.88175295666908]
								}, {
									"case":	395,
									"scores":	[-4.88175295666908]
								}, {
									"case":	396,
									"scores":	[-4.88175295666908]
								}, {
									"case":	397,
									"scores":	[-4.88175295666908]
								}, {
									"case":	398,
									"scores":	[-4.88175295666908]
								}, {
									"case":	399,
									"scores":	[-4.88175295666908]
								}, {
									"case":	400,
									"scores":	[-9.60721825136908, -11.433347031369081, -10.459180326669079, -10.18575864046908, -10.459180326669079, -9.95469704046908, -10.47212449736908, -10.14865824046908, -10.459180326669079, -10.003282439669082, -9.93971972666908, -10.18575864046908, -10.150145274469079, -10.150145274469079, -9.91882644666908, -9.91882644666908, -10.459180326669079, -10.459180326669079, -10.459180326669079, -10.459180326669079, -10.705219240469081, -10.459180326669079, -10.459180326669079, -10.459180326669079, -10.459180326669079, -10.459180326669079]
								}]
						}, {
							"switch":	59,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	2897,
							"begin_column":	2,
							"end_line":	2900,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L2897\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\");\n    return;\n}\n", "if ((intobj->diff->have_special_relative) || __is_neg(\"\", \"L2897\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\");\n    return;\n}\n", "if ((intobj->diff->have_special_relative) && !__is_neg(\"\", \"L2897\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\");\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1696120028281456, -6.0195484823281458, -4.7362470944281458, -5.5774388844281457, -4.7362470944281458, -5.0015079304281453, -5.7011353723281459, -5.2830880844281456, -4.7362470944281458, -5.299642442028146, -4.819550784428146, -5.5774388844281457, -5.2863455244281461, -5.2863455244281461, -4.6186678370281458, -4.6186678370281458, -4.7362470944281458, -4.7362470944281458, -4.7362470944281458, -4.7362470944281458, -5.4941351944281456, -4.7362470944281458, -4.7362470944281458, -4.7362470944281458, -4.7362470944281458, -4.7362470944281458]
								}, {
									"case":	2,
									"scores":	[-5.8979056998281454, -6.7478421793281456, -5.4645407914281456, -6.3057325814281455, -5.4645407914281456, -5.729801627428146, -6.4294290693281457, -6.0113817814281454, -5.4645407914281456, -6.0279361390281458, -5.5478444814281458, -6.3057325814281455, -6.0146392214281459, -6.0146392214281459, -5.3469615340281464, -5.3469615340281464, -5.4645407914281456, -5.4645407914281456, -5.4645407914281456, -5.4645407914281456, -6.2224288914281463, -5.4645407914281456, -5.4645407914281456, -5.4645407914281456, -5.4645407914281456, -5.4645407914281456]
								}, {
									"case":	3,
									"scores":	[-5.8979056998281454, -6.7478421793281456, -5.4645407914281456, -6.3057325814281455, -5.4645407914281456, -5.729801627428146, -6.4294290693281457, -6.0113817814281454, -5.4645407914281456, -6.0279361390281458, -5.5478444814281458, -6.3057325814281455, -6.0146392214281459, -6.0146392214281459, -5.3469615340281464, -5.3469615340281464, -5.4645407914281456, -5.4645407914281456, -5.4645407914281456, -5.4645407914281456, -6.2224288914281463, -5.4645407914281456, -5.4645407914281456, -5.4645407914281456, -5.4645407914281456, -5.4645407914281456]
								}]
						}, {
							"switch":	60,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2897,
							"begin_column":	2,
							"end_line":	2900,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L2897\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative)))\n    if (intobj->diff->have_special_relative) {\n        php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\");\n        return;\n    }\n", "if (!__is_neg(\"\", \"L2897\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(dateobj), sizeof (dateobj), &(object), sizeof (object), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->d), sizeof (intobj->diff->d), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative)) && (intobj->diff->have_special_relative)) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\");\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.11937773506908, -8.96931421456908, -7.68601282666908, -8.52720461666908, -7.68601282666908, -7.95127366266908, -8.65090110456908, -8.23285381666908, -7.68601282666908, -8.24940817426908, -7.76931651666908, -8.52720461666908, -8.23611125666908, -8.23611125666908, -7.56843356926908, -7.56843356926908, -7.68601282666908, -7.68601282666908, -7.68601282666908, -7.68601282666908, -8.44390092666908, -7.68601282666908, -7.68601282666908, -7.68601282666908, -7.68601282666908, -7.68601282666908]
								}, {
									"case":	2,
									"scores":	[-8.04080384106908, -8.89074032056908, -7.60743893266908, -8.44863072266908, -7.60743893266908, -7.87269976866908, -8.57232721056908, -8.15427992266908, -7.60743893266908, -8.17083428026908, -7.69074262266908, -8.44863072266908, -8.15753736266908, -8.15753736266908, -7.48985967526908, -7.48985967526908, -7.60743893266908, -7.60743893266908, -7.60743893266908, -7.60743893266908, -8.36532703266908, -7.60743893266908, -7.60743893266908, -7.60743893266908, -7.60743893266908, -7.60743893266908]
								}]
						}]
				}, {
					"line":	2901,
					"switches":	[{
							"switch":	61,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2902,
							"begin_column":	0,
							"end_line":	2902,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2902\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(dateobj), sizeof (dateobj), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->diff->d), sizeof (intobj->diff->d), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->h), sizeof (intobj->diff->h), &(interval), sizeof (interval), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.86155024935156]
								}, {
									"case":	2,
									"scores":	[-4.86155024935156]
								}, {
									"case":	3,
									"scores":	[-4.86155024935156]
								}, {
									"case":	4,
									"scores":	[-4.86155024935156]
								}, {
									"case":	5,
									"scores":	[-4.86155024935156]
								}, {
									"case":	6,
									"scores":	[-4.86155024935156]
								}, {
									"case":	7,
									"scores":	[-4.86155024935156]
								}, {
									"case":	8,
									"scores":	[-4.86155024935156]
								}, {
									"case":	9,
									"scores":	[-4.86155024935156]
								}, {
									"case":	10,
									"scores":	[-4.86155024935156]
								}, {
									"case":	11,
									"scores":	[-4.86155024935156]
								}, {
									"case":	12,
									"scores":	[-4.86155024935156]
								}, {
									"case":	13,
									"scores":	[-4.86155024935156]
								}, {
									"case":	14,
									"scores":	[-4.86155024935156]
								}, {
									"case":	15,
									"scores":	[-4.86155024935156]
								}, {
									"case":	16,
									"scores":	[-4.86155024935156]
								}, {
									"case":	17,
									"scores":	[-4.86155024935156]
								}, {
									"case":	18,
									"scores":	[-4.86155024935156]
								}, {
									"case":	19,
									"scores":	[-4.86155024935156]
								}, {
									"case":	20,
									"scores":	[-4.86155024935156]
								}, {
									"case":	21,
									"scores":	[-4.86155024935156]
								}, {
									"case":	22,
									"scores":	[-4.86155024935156]
								}, {
									"case":	23,
									"scores":	[-4.86155024935156]
								}, {
									"case":	24,
									"scores":	[-4.86155024935156]
								}, {
									"case":	25,
									"scores":	[-4.86155024935156]
								}, {
									"case":	26,
									"scores":	[-4.86155024935156]
								}, {
									"case":	27,
									"scores":	[-4.86155024935156]
								}, {
									"case":	28,
									"scores":	[-4.86155024935156]
								}, {
									"case":	29,
									"scores":	[-4.86155024935156]
								}, {
									"case":	30,
									"scores":	[-4.86155024935156]
								}, {
									"case":	31,
									"scores":	[-4.86155024935156]
								}, {
									"case":	32,
									"scores":	[-4.86155024935156]
								}, {
									"case":	33,
									"scores":	[-4.86155024935156]
								}, {
									"case":	34,
									"scores":	[-4.86155024935156]
								}, {
									"case":	35,
									"scores":	[-4.86155024935156]
								}, {
									"case":	36,
									"scores":	[-4.86155024935156]
								}, {
									"case":	37,
									"scores":	[-4.86155024935156]
								}, {
									"case":	38,
									"scores":	[-4.86155024935156]
								}, {
									"case":	39,
									"scores":	[-4.86155024935156]
								}, {
									"case":	40,
									"scores":	[-4.86155024935156]
								}, {
									"case":	41,
									"scores":	[-4.86155024935156]
								}, {
									"case":	42,
									"scores":	[-4.86155024935156]
								}, {
									"case":	43,
									"scores":	[-4.86155024935156]
								}, {
									"case":	44,
									"scores":	[-4.86155024935156]
								}, {
									"case":	45,
									"scores":	[-4.86155024935156]
								}, {
									"case":	46,
									"scores":	[-4.86155024935156]
								}, {
									"case":	47,
									"scores":	[-4.86155024935156]
								}, {
									"case":	48,
									"scores":	[-4.86155024935156]
								}, {
									"case":	49,
									"scores":	[-4.86155024935156]
								}, {
									"case":	50,
									"scores":	[-4.86155024935156]
								}, {
									"case":	51,
									"scores":	[-4.86155024935156]
								}, {
									"case":	52,
									"scores":	[-4.86155024935156]
								}, {
									"case":	53,
									"scores":	[-4.86155024935156]
								}, {
									"case":	54,
									"scores":	[-4.86155024935156]
								}, {
									"case":	55,
									"scores":	[-4.86155024935156]
								}, {
									"case":	56,
									"scores":	[-4.86155024935156]
								}, {
									"case":	57,
									"scores":	[-4.86155024935156]
								}, {
									"case":	58,
									"scores":	[-4.86155024935156]
								}, {
									"case":	59,
									"scores":	[-4.86155024935156]
								}, {
									"case":	60,
									"scores":	[-4.86155024935156]
								}, {
									"case":	61,
									"scores":	[-4.86155024935156]
								}, {
									"case":	62,
									"scores":	[-4.86155024935156]
								}, {
									"case":	63,
									"scores":	[-4.86155024935156]
								}, {
									"case":	64,
									"scores":	[-4.86155024935156]
								}, {
									"case":	65,
									"scores":	[-4.86155024935156]
								}, {
									"case":	66,
									"scores":	[-4.86155024935156]
								}, {
									"case":	67,
									"scores":	[-4.86155024935156]
								}, {
									"case":	68,
									"scores":	[-4.86155024935156]
								}, {
									"case":	69,
									"scores":	[-4.86155024935156]
								}, {
									"case":	70,
									"scores":	[-4.86155024935156]
								}, {
									"case":	71,
									"scores":	[-4.86155024935156]
								}, {
									"case":	72,
									"scores":	[-4.86155024935156]
								}, {
									"case":	73,
									"scores":	[-4.86155024935156]
								}, {
									"case":	74,
									"scores":	[-4.86155024935156]
								}, {
									"case":	75,
									"scores":	[-4.86155024935156]
								}, {
									"case":	76,
									"scores":	[-4.86155024935156]
								}, {
									"case":	77,
									"scores":	[-4.86155024935156]
								}, {
									"case":	78,
									"scores":	[-4.86155024935156]
								}, {
									"case":	79,
									"scores":	[-4.86155024935156]
								}, {
									"case":	80,
									"scores":	[-4.86155024935156]
								}, {
									"case":	81,
									"scores":	[-4.86155024935156]
								}, {
									"case":	82,
									"scores":	[-4.86155024935156]
								}, {
									"case":	83,
									"scores":	[-4.86155024935156]
								}, {
									"case":	84,
									"scores":	[-4.86155024935156]
								}, {
									"case":	85,
									"scores":	[-4.86155024935156]
								}, {
									"case":	86,
									"scores":	[-4.86155024935156]
								}, {
									"case":	87,
									"scores":	[-4.86155024935156]
								}, {
									"case":	88,
									"scores":	[-4.86155024935156]
								}, {
									"case":	89,
									"scores":	[-4.86155024935156]
								}, {
									"case":	90,
									"scores":	[-4.86155024935156]
								}, {
									"case":	91,
									"scores":	[-4.86155024935156]
								}, {
									"case":	92,
									"scores":	[-4.86155024935156]
								}, {
									"case":	93,
									"scores":	[-4.86155024935156]
								}, {
									"case":	94,
									"scores":	[-4.86155024935156]
								}, {
									"case":	95,
									"scores":	[-4.86155024935156]
								}, {
									"case":	96,
									"scores":	[-4.86155024935156]
								}, {
									"case":	97,
									"scores":	[-4.86155024935156]
								}, {
									"case":	98,
									"scores":	[-4.86155024935156]
								}, {
									"case":	99,
									"scores":	[-4.86155024935156]
								}, {
									"case":	100,
									"scores":	[-4.86155024935156]
								}, {
									"case":	101,
									"scores":	[-4.86155024935156]
								}, {
									"case":	102,
									"scores":	[-4.86155024935156]
								}, {
									"case":	103,
									"scores":	[-4.86155024935156]
								}, {
									"case":	104,
									"scores":	[-4.86155024935156]
								}, {
									"case":	105,
									"scores":	[-4.86155024935156]
								}, {
									"case":	106,
									"scores":	[-4.86155024935156]
								}, {
									"case":	107,
									"scores":	[-4.86155024935156]
								}, {
									"case":	108,
									"scores":	[-4.86155024935156]
								}, {
									"case":	109,
									"scores":	[-4.86155024935156]
								}, {
									"case":	110,
									"scores":	[-4.86155024935156]
								}, {
									"case":	111,
									"scores":	[-4.86155024935156]
								}, {
									"case":	112,
									"scores":	[-4.86155024935156]
								}, {
									"case":	113,
									"scores":	[-4.86155024935156]
								}, {
									"case":	114,
									"scores":	[-4.86155024935156]
								}, {
									"case":	115,
									"scores":	[-4.86155024935156]
								}, {
									"case":	116,
									"scores":	[-4.86155024935156]
								}, {
									"case":	117,
									"scores":	[-4.86155024935156]
								}, {
									"case":	118,
									"scores":	[-4.86155024935156]
								}, {
									"case":	119,
									"scores":	[-4.86155024935156]
								}, {
									"case":	120,
									"scores":	[-4.86155024935156]
								}, {
									"case":	121,
									"scores":	[-4.86155024935156]
								}, {
									"case":	122,
									"scores":	[-4.86155024935156]
								}, {
									"case":	123,
									"scores":	[-4.86155024935156]
								}, {
									"case":	124,
									"scores":	[-4.86155024935156]
								}, {
									"case":	125,
									"scores":	[-4.86155024935156]
								}, {
									"case":	126,
									"scores":	[-4.86155024935156]
								}, {
									"case":	127,
									"scores":	[-4.86155024935156]
								}, {
									"case":	128,
									"scores":	[-4.86155024935156]
								}, {
									"case":	129,
									"scores":	[-4.86155024935156]
								}, {
									"case":	130,
									"scores":	[-4.86155024935156]
								}, {
									"case":	131,
									"scores":	[-4.86155024935156]
								}, {
									"case":	132,
									"scores":	[-4.86155024935156]
								}, {
									"case":	133,
									"scores":	[-4.86155024935156]
								}, {
									"case":	134,
									"scores":	[-4.86155024935156]
								}, {
									"case":	135,
									"scores":	[-4.86155024935156]
								}, {
									"case":	136,
									"scores":	[-4.86155024935156]
								}, {
									"case":	137,
									"scores":	[-4.86155024935156]
								}, {
									"case":	138,
									"scores":	[-4.86155024935156]
								}, {
									"case":	139,
									"scores":	[-4.86155024935156]
								}, {
									"case":	140,
									"scores":	[-4.86155024935156]
								}, {
									"case":	141,
									"scores":	[-4.86155024935156]
								}, {
									"case":	142,
									"scores":	[-4.86155024935156]
								}, {
									"case":	143,
									"scores":	[-4.86155024935156]
								}, {
									"case":	144,
									"scores":	[-4.86155024935156]
								}, {
									"case":	145,
									"scores":	[-4.86155024935156]
								}, {
									"case":	146,
									"scores":	[-4.86155024935156]
								}, {
									"case":	147,
									"scores":	[-4.86155024935156]
								}, {
									"case":	148,
									"scores":	[-4.86155024935156]
								}, {
									"case":	149,
									"scores":	[-4.86155024935156]
								}, {
									"case":	150,
									"scores":	[-4.86155024935156]
								}, {
									"case":	151,
									"scores":	[-4.86155024935156]
								}, {
									"case":	152,
									"scores":	[-4.86155024935156]
								}, {
									"case":	153,
									"scores":	[-4.86155024935156]
								}, {
									"case":	154,
									"scores":	[-4.86155024935156]
								}, {
									"case":	155,
									"scores":	[-4.86155024935156]
								}, {
									"case":	156,
									"scores":	[-4.86155024935156]
								}, {
									"case":	157,
									"scores":	[-4.86155024935156]
								}, {
									"case":	158,
									"scores":	[-4.86155024935156]
								}, {
									"case":	159,
									"scores":	[-4.86155024935156]
								}, {
									"case":	160,
									"scores":	[-4.86155024935156]
								}, {
									"case":	161,
									"scores":	[-4.86155024935156]
								}, {
									"case":	162,
									"scores":	[-4.86155024935156]
								}, {
									"case":	163,
									"scores":	[-4.86155024935156]
								}, {
									"case":	164,
									"scores":	[-4.86155024935156]
								}, {
									"case":	165,
									"scores":	[-4.86155024935156]
								}, {
									"case":	166,
									"scores":	[-4.86155024935156]
								}, {
									"case":	167,
									"scores":	[-4.86155024935156]
								}, {
									"case":	168,
									"scores":	[-4.86155024935156]
								}, {
									"case":	169,
									"scores":	[-4.86155024935156]
								}, {
									"case":	170,
									"scores":	[-4.86155024935156]
								}, {
									"case":	171,
									"scores":	[-4.86155024935156]
								}, {
									"case":	172,
									"scores":	[-4.86155024935156]
								}, {
									"case":	173,
									"scores":	[-4.86155024935156]
								}, {
									"case":	174,
									"scores":	[-4.86155024935156]
								}, {
									"case":	175,
									"scores":	[-4.86155024935156]
								}, {
									"case":	176,
									"scores":	[-4.86155024935156]
								}, {
									"case":	177,
									"scores":	[-4.86155024935156]
								}, {
									"case":	178,
									"scores":	[-4.86155024935156]
								}, {
									"case":	179,
									"scores":	[-4.86155024935156]
								}, {
									"case":	180,
									"scores":	[-4.86155024935156]
								}, {
									"case":	181,
									"scores":	[-4.86155024935156]
								}, {
									"case":	182,
									"scores":	[-4.86155024935156]
								}, {
									"case":	183,
									"scores":	[-4.86155024935156]
								}, {
									"case":	184,
									"scores":	[-4.86155024935156]
								}, {
									"case":	185,
									"scores":	[-4.86155024935156]
								}, {
									"case":	186,
									"scores":	[-4.86155024935156]
								}, {
									"case":	187,
									"scores":	[-4.86155024935156]
								}, {
									"case":	188,
									"scores":	[-4.86155024935156]
								}, {
									"case":	189,
									"scores":	[-4.86155024935156]
								}, {
									"case":	190,
									"scores":	[-4.86155024935156]
								}, {
									"case":	191,
									"scores":	[-4.86155024935156]
								}, {
									"case":	192,
									"scores":	[-4.86155024935156]
								}, {
									"case":	193,
									"scores":	[-4.86155024935156]
								}, {
									"case":	194,
									"scores":	[-4.86155024935156]
								}, {
									"case":	195,
									"scores":	[-4.86155024935156]
								}, {
									"case":	196,
									"scores":	[-4.86155024935156]
								}, {
									"case":	197,
									"scores":	[-4.86155024935156]
								}, {
									"case":	198,
									"scores":	[-4.86155024935156]
								}, {
									"case":	199,
									"scores":	[-4.86155024935156]
								}, {
									"case":	200,
									"scores":	[-4.86155024935156]
								}, {
									"case":	201,
									"scores":	[-4.86155024935156]
								}, {
									"case":	202,
									"scores":	[-4.86155024935156]
								}, {
									"case":	203,
									"scores":	[-4.86155024935156]
								}, {
									"case":	204,
									"scores":	[-4.86155024935156]
								}, {
									"case":	205,
									"scores":	[-4.86155024935156]
								}, {
									"case":	206,
									"scores":	[-4.86155024935156]
								}, {
									"case":	207,
									"scores":	[-4.86155024935156]
								}, {
									"case":	208,
									"scores":	[-4.86155024935156]
								}, {
									"case":	209,
									"scores":	[-4.86155024935156]
								}, {
									"case":	210,
									"scores":	[-4.86155024935156]
								}, {
									"case":	211,
									"scores":	[-4.86155024935156]
								}, {
									"case":	212,
									"scores":	[-4.86155024935156]
								}, {
									"case":	213,
									"scores":	[-4.86155024935156]
								}, {
									"case":	214,
									"scores":	[-4.86155024935156]
								}, {
									"case":	215,
									"scores":	[-4.86155024935156]
								}, {
									"case":	216,
									"scores":	[-4.86155024935156]
								}, {
									"case":	217,
									"scores":	[-4.86155024935156]
								}, {
									"case":	218,
									"scores":	[-4.86155024935156]
								}, {
									"case":	219,
									"scores":	[-4.86155024935156]
								}, {
									"case":	220,
									"scores":	[-4.86155024935156]
								}, {
									"case":	221,
									"scores":	[-4.86155024935156]
								}, {
									"case":	222,
									"scores":	[-4.86155024935156]
								}, {
									"case":	223,
									"scores":	[-4.86155024935156]
								}, {
									"case":	224,
									"scores":	[-4.86155024935156]
								}, {
									"case":	225,
									"scores":	[-4.86155024935156]
								}, {
									"case":	226,
									"scores":	[-4.86155024935156]
								}, {
									"case":	227,
									"scores":	[-4.86155024935156]
								}, {
									"case":	228,
									"scores":	[-4.86155024935156]
								}, {
									"case":	229,
									"scores":	[-4.86155024935156]
								}, {
									"case":	230,
									"scores":	[-4.86155024935156]
								}, {
									"case":	231,
									"scores":	[-4.86155024935156]
								}, {
									"case":	232,
									"scores":	[-4.86155024935156]
								}, {
									"case":	233,
									"scores":	[-4.86155024935156]
								}, {
									"case":	234,
									"scores":	[-4.86155024935156]
								}, {
									"case":	235,
									"scores":	[-4.86155024935156]
								}, {
									"case":	236,
									"scores":	[-4.86155024935156]
								}, {
									"case":	237,
									"scores":	[-4.86155024935156]
								}, {
									"case":	238,
									"scores":	[-4.86155024935156]
								}, {
									"case":	239,
									"scores":	[-4.86155024935156]
								}, {
									"case":	240,
									"scores":	[-4.86155024935156]
								}, {
									"case":	241,
									"scores":	[-4.86155024935156]
								}, {
									"case":	242,
									"scores":	[-4.86155024935156]
								}, {
									"case":	243,
									"scores":	[-4.86155024935156]
								}, {
									"case":	244,
									"scores":	[-4.86155024935156]
								}, {
									"case":	245,
									"scores":	[-4.86155024935156]
								}, {
									"case":	246,
									"scores":	[-4.86155024935156]
								}, {
									"case":	247,
									"scores":	[-4.86155024935156]
								}, {
									"case":	248,
									"scores":	[-4.86155024935156]
								}, {
									"case":	249,
									"scores":	[-4.86155024935156]
								}, {
									"case":	250,
									"scores":	[-4.86155024935156]
								}, {
									"case":	251,
									"scores":	[-4.86155024935156]
								}, {
									"case":	252,
									"scores":	[-4.86155024935156]
								}, {
									"case":	253,
									"scores":	[-4.86155024935156]
								}, {
									"case":	254,
									"scores":	[-4.86155024935156]
								}, {
									"case":	255,
									"scores":	[-4.86155024935156]
								}, {
									"case":	256,
									"scores":	[-4.86155024935156]
								}, {
									"case":	257,
									"scores":	[-4.86155024935156]
								}, {
									"case":	258,
									"scores":	[-4.86155024935156]
								}, {
									"case":	259,
									"scores":	[-4.86155024935156]
								}, {
									"case":	260,
									"scores":	[-4.86155024935156]
								}, {
									"case":	261,
									"scores":	[-4.86155024935156]
								}, {
									"case":	262,
									"scores":	[-4.86155024935156]
								}, {
									"case":	263,
									"scores":	[-4.86155024935156]
								}, {
									"case":	264,
									"scores":	[-4.86155024935156]
								}, {
									"case":	265,
									"scores":	[-4.86155024935156]
								}, {
									"case":	266,
									"scores":	[-4.86155024935156]
								}, {
									"case":	267,
									"scores":	[-4.86155024935156]
								}, {
									"case":	268,
									"scores":	[-4.86155024935156]
								}, {
									"case":	269,
									"scores":	[-4.86155024935156]
								}, {
									"case":	270,
									"scores":	[-4.86155024935156]
								}, {
									"case":	271,
									"scores":	[-4.86155024935156]
								}, {
									"case":	272,
									"scores":	[-4.86155024935156]
								}, {
									"case":	273,
									"scores":	[-4.86155024935156]
								}, {
									"case":	274,
									"scores":	[-4.86155024935156]
								}, {
									"case":	275,
									"scores":	[-4.86155024935156]
								}, {
									"case":	276,
									"scores":	[-4.86155024935156]
								}, {
									"case":	277,
									"scores":	[-4.86155024935156]
								}, {
									"case":	278,
									"scores":	[-4.86155024935156]
								}, {
									"case":	279,
									"scores":	[-4.86155024935156]
								}, {
									"case":	280,
									"scores":	[-4.86155024935156]
								}, {
									"case":	281,
									"scores":	[-4.86155024935156]
								}, {
									"case":	282,
									"scores":	[-4.86155024935156]
								}, {
									"case":	283,
									"scores":	[-4.86155024935156]
								}, {
									"case":	284,
									"scores":	[-4.86155024935156]
								}, {
									"case":	285,
									"scores":	[-4.86155024935156]
								}, {
									"case":	286,
									"scores":	[-4.86155024935156]
								}, {
									"case":	287,
									"scores":	[-4.86155024935156]
								}, {
									"case":	288,
									"scores":	[-4.86155024935156]
								}, {
									"case":	289,
									"scores":	[-4.86155024935156]
								}, {
									"case":	290,
									"scores":	[-4.86155024935156]
								}, {
									"case":	291,
									"scores":	[-4.86155024935156]
								}, {
									"case":	292,
									"scores":	[-4.86155024935156]
								}, {
									"case":	293,
									"scores":	[-4.86155024935156]
								}, {
									"case":	294,
									"scores":	[-4.86155024935156]
								}, {
									"case":	295,
									"scores":	[-4.86155024935156]
								}, {
									"case":	296,
									"scores":	[-4.86155024935156]
								}, {
									"case":	297,
									"scores":	[-4.86155024935156]
								}, {
									"case":	298,
									"scores":	[-4.86155024935156]
								}, {
									"case":	299,
									"scores":	[-4.86155024935156]
								}, {
									"case":	300,
									"scores":	[-4.86155024935156]
								}, {
									"case":	301,
									"scores":	[-4.86155024935156]
								}, {
									"case":	302,
									"scores":	[-4.86155024935156]
								}, {
									"case":	303,
									"scores":	[-4.86155024935156]
								}, {
									"case":	304,
									"scores":	[-4.86155024935156]
								}, {
									"case":	305,
									"scores":	[-4.86155024935156]
								}, {
									"case":	306,
									"scores":	[-4.86155024935156]
								}, {
									"case":	307,
									"scores":	[-4.86155024935156]
								}, {
									"case":	308,
									"scores":	[-4.86155024935156]
								}, {
									"case":	309,
									"scores":	[-4.86155024935156]
								}, {
									"case":	310,
									"scores":	[-4.86155024935156]
								}, {
									"case":	311,
									"scores":	[-4.86155024935156]
								}, {
									"case":	312,
									"scores":	[-4.86155024935156]
								}, {
									"case":	313,
									"scores":	[-4.86155024935156]
								}, {
									"case":	314,
									"scores":	[-4.86155024935156]
								}, {
									"case":	315,
									"scores":	[-4.86155024935156]
								}, {
									"case":	316,
									"scores":	[-4.86155024935156]
								}, {
									"case":	317,
									"scores":	[-4.86155024935156]
								}, {
									"case":	318,
									"scores":	[-4.86155024935156]
								}, {
									"case":	319,
									"scores":	[-4.86155024935156]
								}, {
									"case":	320,
									"scores":	[-4.86155024935156]
								}, {
									"case":	321,
									"scores":	[-4.86155024935156]
								}, {
									"case":	322,
									"scores":	[-4.86155024935156]
								}, {
									"case":	323,
									"scores":	[-4.86155024935156]
								}, {
									"case":	324,
									"scores":	[-4.86155024935156]
								}, {
									"case":	325,
									"scores":	[-4.86155024935156]
								}, {
									"case":	326,
									"scores":	[-4.86155024935156]
								}, {
									"case":	327,
									"scores":	[-4.86155024935156]
								}, {
									"case":	328,
									"scores":	[-4.86155024935156]
								}, {
									"case":	329,
									"scores":	[-4.86155024935156]
								}, {
									"case":	330,
									"scores":	[-4.86155024935156]
								}, {
									"case":	331,
									"scores":	[-4.86155024935156]
								}, {
									"case":	332,
									"scores":	[-4.86155024935156]
								}, {
									"case":	333,
									"scores":	[-4.86155024935156]
								}, {
									"case":	334,
									"scores":	[-4.86155024935156]
								}, {
									"case":	335,
									"scores":	[-4.86155024935156]
								}, {
									"case":	336,
									"scores":	[-4.86155024935156]
								}, {
									"case":	337,
									"scores":	[-4.86155024935156]
								}, {
									"case":	338,
									"scores":	[-4.86155024935156]
								}, {
									"case":	339,
									"scores":	[-4.86155024935156]
								}, {
									"case":	340,
									"scores":	[-4.86155024935156]
								}, {
									"case":	341,
									"scores":	[-4.86155024935156]
								}, {
									"case":	342,
									"scores":	[-4.86155024935156]
								}, {
									"case":	343,
									"scores":	[-4.86155024935156]
								}, {
									"case":	344,
									"scores":	[-4.86155024935156]
								}, {
									"case":	345,
									"scores":	[-4.86155024935156]
								}, {
									"case":	346,
									"scores":	[-4.86155024935156]
								}, {
									"case":	347,
									"scores":	[-4.86155024935156]
								}, {
									"case":	348,
									"scores":	[-4.86155024935156]
								}, {
									"case":	349,
									"scores":	[-4.86155024935156]
								}, {
									"case":	350,
									"scores":	[-4.86155024935156]
								}, {
									"case":	351,
									"scores":	[-4.86155024935156]
								}, {
									"case":	352,
									"scores":	[-4.86155024935156]
								}, {
									"case":	353,
									"scores":	[-4.86155024935156]
								}, {
									"case":	354,
									"scores":	[-4.86155024935156]
								}, {
									"case":	355,
									"scores":	[-4.86155024935156]
								}, {
									"case":	356,
									"scores":	[-4.86155024935156]
								}, {
									"case":	357,
									"scores":	[-4.86155024935156]
								}, {
									"case":	358,
									"scores":	[-4.86155024935156]
								}, {
									"case":	359,
									"scores":	[-4.86155024935156]
								}, {
									"case":	360,
									"scores":	[-4.86155024935156]
								}, {
									"case":	361,
									"scores":	[-4.86155024935156]
								}, {
									"case":	362,
									"scores":	[-4.86155024935156]
								}, {
									"case":	363,
									"scores":	[-4.86155024935156]
								}, {
									"case":	364,
									"scores":	[-4.86155024935156]
								}, {
									"case":	365,
									"scores":	[-4.86155024935156]
								}, {
									"case":	366,
									"scores":	[-4.86155024935156]
								}, {
									"case":	367,
									"scores":	[-4.86155024935156]
								}, {
									"case":	368,
									"scores":	[-4.86155024935156]
								}, {
									"case":	369,
									"scores":	[-4.86155024935156]
								}, {
									"case":	370,
									"scores":	[-4.86155024935156]
								}, {
									"case":	371,
									"scores":	[-4.86155024935156]
								}, {
									"case":	372,
									"scores":	[-4.86155024935156]
								}, {
									"case":	373,
									"scores":	[-4.86155024935156]
								}, {
									"case":	374,
									"scores":	[-4.86155024935156]
								}, {
									"case":	375,
									"scores":	[-4.86155024935156]
								}, {
									"case":	376,
									"scores":	[-4.86155024935156]
								}, {
									"case":	377,
									"scores":	[-4.86155024935156]
								}, {
									"case":	378,
									"scores":	[-4.86155024935156]
								}, {
									"case":	379,
									"scores":	[-4.86155024935156]
								}, {
									"case":	380,
									"scores":	[-4.86155024935156]
								}, {
									"case":	381,
									"scores":	[-4.86155024935156]
								}, {
									"case":	382,
									"scores":	[-4.86155024935156]
								}, {
									"case":	383,
									"scores":	[-4.86155024935156]
								}, {
									"case":	384,
									"scores":	[-4.86155024935156]
								}, {
									"case":	385,
									"scores":	[-4.86155024935156]
								}, {
									"case":	386,
									"scores":	[-4.86155024935156]
								}, {
									"case":	387,
									"scores":	[-4.86155024935156]
								}, {
									"case":	388,
									"scores":	[-4.86155024935156]
								}, {
									"case":	389,
									"scores":	[-4.86155024935156]
								}, {
									"case":	390,
									"scores":	[-4.86155024935156]
								}, {
									"case":	391,
									"scores":	[-4.86155024935156]
								}, {
									"case":	392,
									"scores":	[-4.86155024935156]
								}, {
									"case":	393,
									"scores":	[-4.86155024935156]
								}, {
									"case":	394,
									"scores":	[-4.86155024935156]
								}, {
									"case":	395,
									"scores":	[-4.86155024935156]
								}, {
									"case":	396,
									"scores":	[-4.86155024935156]
								}, {
									"case":	397,
									"scores":	[-4.86155024935156]
								}, {
									"case":	398,
									"scores":	[-4.86155024935156]
								}, {
									"case":	399,
									"scores":	[-4.86155024935156]
								}, {
									"case":	400,
									"scores":	[-10.784593024051564, -11.341154024051562, -9.83172361935156, -9.01409655635156, -9.84466779005156, -9.29136973935156, -9.29136973935156, -9.83172361935156, -9.29136973935156, -9.55830193315156, -9.83172361935156, -9.83172361935156, -9.52120153315156, -9.83172361935156, -9.83172361935156, -9.52120153315156, -9.31226301935156, -9.55830193315156, -9.52268856715156, -9.52268856715156, -10.07776253315156, -9.83172361935156, -9.83172361935156, -9.83172361935156, -9.83172361935156, -9.83172361935156]
								}]
						}, {
							"switch":	62,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	2902,
							"begin_column":	2,
							"end_line":	2904,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L2902\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(dateobj), sizeof (dateobj), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->diff->d), sizeof (intobj->diff->d), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->h), sizeof (intobj->diff->h), &(interval), sizeof (interval), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative))) {\n    bias = -1;\n}\n", "if ((intobj->diff->invert) || __is_neg(\"\", \"L2902\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(dateobj), sizeof (dateobj), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->diff->d), sizeof (intobj->diff->d), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->h), sizeof (intobj->diff->h), &(interval), sizeof (interval), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative))) {\n    bias = -1;\n}\n", "if ((intobj->diff->invert) && !__is_neg(\"\", \"L2902\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(dateobj), sizeof (dateobj), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->diff->d), sizeof (intobj->diff->d), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->h), sizeof (intobj->diff->h), &(interval), sizeof (interval), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative))) {\n    bias = -1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5242421744281458, -4.7352892844281458, -3.7051093960281456, -4.1537656426281462, -4.2824546839281457, -3.0931752416281455, -3.5875301386281455, -3.7051093960281456, -3.5875301386281455, -4.5463011860281455, -3.7051093960281456, -3.7051093960281456, -4.2519503860281453, -3.7051093960281456, -3.7051093960281456, -4.2519503860281453, -3.7884130860281453, -4.5463011860281455, -4.2552078260281458, -4.2552078260281458, -4.4629974960281453, -3.7051093960281456, -3.7051093960281456, -3.7051093960281456, -3.7051093960281456, -3.7051093960281456]
								}, {
									"case":	2,
									"scores":	[-5.5701321568281461, -5.7811792668281461, -4.7509993784281459, -5.1996556250281456, -5.328344666328146, -4.1390652240281458, -4.6334201210281458, -4.7509993784281459, -4.6334201210281458, -5.5921911684281458, -4.7509993784281459, -4.7509993784281459, -5.2978403684281457, -4.7509993784281459, -4.7509993784281459, -5.2978403684281457, -4.8343030684281452, -5.5921911684281458, -5.3010978084281462, -5.3010978084281462, -5.5088874784281456, -4.7509993784281459, -4.7509993784281459, -4.7509993784281459, -4.7509993784281459, -4.7509993784281459]
								}, {
									"case":	3,
									"scores":	[-5.5701321568281461, -5.7811792668281461, -4.7509993784281459, -5.1996556250281456, -5.328344666328146, -4.1390652240281458, -4.6334201210281458, -4.7509993784281459, -4.6334201210281458, -5.5921911684281458, -4.7509993784281459, -4.7509993784281459, -5.2978403684281457, -4.7509993784281459, -4.7509993784281459, -5.2978403684281457, -4.8343030684281452, -5.5921911684281458, -5.3010978084281462, -5.3010978084281462, -5.5088874784281456, -4.7509993784281459, -4.7509993784281459, -4.7509993784281459, -4.7509993784281459, -4.7509993784281459]
								}]
						}, {
							"switch":	63,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2902,
							"begin_column":	2,
							"end_line":	2904,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L2902\", 26, &(intobj), sizeof (intobj), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(bias), sizeof (bias), &(dateobj), sizeof (dateobj), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->diff->d), sizeof (intobj->diff->d), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(intobj->diff->h), sizeof (intobj->diff->h), &(interval), sizeof (interval), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->s), sizeof (intobj->diff->s), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative)))\n    if (intobj->diff->invert) {\n        bias = -1;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.80061550775156, -8.01166261775156, -6.98148272935156, -7.43013897595156, -7.55882801725156, -6.36954857495156, -6.86390347195156, -6.98148272935156, -6.86390347195156, -7.82267451935156, -6.98148272935156, -6.98148272935156, -7.52832371935156, -6.98148272935156, -6.98148272935156, -7.52832371935156, -7.06478641935156, -7.82267451935156, -7.53158115935156, -7.53158115935156, -7.73937082935156, -6.98148272935156, -6.98148272935156, -6.98148272935156, -6.98148272935156, -6.98148272935156]
								}]
						}]
				}, {
					"line":	2905,
					"switches":	[{
							"switch":	64,
							"types":	[[], [], [], [], [401], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [], [], [], [], [], []],
							"begin_line":	2906,
							"begin_column":	0,
							"end_line":	2906,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2906\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	2,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	3,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	4,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	5,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	6,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	7,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	8,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	9,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	10,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	11,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	12,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	13,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	14,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	15,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	16,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	17,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	18,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	19,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	20,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	21,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	22,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	23,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	24,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	25,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	26,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	27,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	28,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	29,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	30,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	31,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	32,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	33,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	34,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	35,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	36,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	37,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	38,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	39,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	40,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	41,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	42,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	43,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	44,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	45,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	46,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	47,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	48,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	49,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	50,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	51,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	52,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	53,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	54,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	55,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	56,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	57,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	58,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	59,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	60,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	61,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	62,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	63,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	64,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	65,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	66,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	67,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	68,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	69,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	70,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	71,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	72,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	73,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	74,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	75,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	76,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	77,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	78,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	79,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	80,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	81,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	82,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	83,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	84,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	85,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	86,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	87,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	88,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	89,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	90,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	91,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	92,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	93,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	94,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	95,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	96,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	97,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	98,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	99,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	100,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	101,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	102,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	103,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	104,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	105,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	106,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	107,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	108,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	109,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	110,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	111,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	112,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	113,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	114,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	115,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	116,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	117,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	118,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	119,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	120,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	121,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	122,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	123,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	124,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	125,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	126,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	127,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	128,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	129,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	130,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	131,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	132,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	133,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	134,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	135,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	136,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	137,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	138,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	139,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	140,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	141,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	142,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	143,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	144,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	145,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	146,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	147,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	148,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	149,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	150,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	151,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	152,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	153,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	154,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	155,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	156,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	157,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	158,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	159,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	160,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	161,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	162,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	163,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	164,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	165,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	166,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	167,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	168,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	169,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	170,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	171,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	172,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	173,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	174,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	175,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	176,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	177,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	178,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	179,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	180,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	181,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	182,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	183,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	184,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	185,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	186,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	187,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	188,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	189,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	190,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	191,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	192,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	193,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	194,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	195,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	196,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	197,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	198,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	199,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	200,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	201,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	202,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	203,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	204,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	205,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	206,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	207,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	208,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	209,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	210,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	211,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	212,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	213,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	214,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	215,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	216,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	217,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	218,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	219,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	220,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	221,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	222,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	223,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	224,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	225,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	226,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	227,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	228,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	229,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	230,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	231,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	232,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	233,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	234,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	235,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	236,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	237,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	238,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	239,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	240,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	241,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	242,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	243,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	244,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	245,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	246,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	247,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	248,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	249,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	250,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	251,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	252,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	253,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	254,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	255,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	256,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	257,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	258,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	259,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	260,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	261,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	262,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	263,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	264,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	265,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	266,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	267,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	268,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	269,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	270,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	271,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	272,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	273,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	274,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	275,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	276,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	277,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	278,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	279,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	280,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	281,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	282,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	283,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	284,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	285,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	286,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	287,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	288,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	289,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	290,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	291,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	292,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	293,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	294,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	295,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	296,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	297,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	298,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	299,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	300,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	301,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	302,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	303,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	304,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	305,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	306,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	307,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	308,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	309,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	310,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	311,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	312,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	313,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	314,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	315,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	316,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	317,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	318,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	319,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	320,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	321,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	322,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	323,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	324,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	325,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	326,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	327,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	328,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	329,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	330,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	331,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	332,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	333,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	334,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	335,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	336,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	337,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	338,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	339,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	340,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	341,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	342,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	343,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	344,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	345,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	346,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	347,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	348,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	349,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	350,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	351,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	352,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	353,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	354,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	355,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	356,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	357,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	358,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	359,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	360,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	361,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	362,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	363,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	364,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	365,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	366,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	367,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	368,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	369,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	370,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	371,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	372,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	373,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	374,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	375,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	376,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	377,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	378,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	379,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	380,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	381,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	382,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	383,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	384,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	385,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	386,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	387,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	388,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	389,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	390,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	391,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	392,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	393,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	394,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	395,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	396,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	397,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	398,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	399,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	400,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	401,
									"scores":	[-7.1222826167340418, -7.6575463167340416, -4.3585653180340413, -8.21410731673404, -6.1657844830340416, -6.9880811530340416, -7.67884361673404, -7.3377540320340415, -7.84670943203404, -7.3377540320340415, -7.84670943203404, -7.3377540320340415, -7.84670943203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.60468622583404, -7.87810791203404, -7.56758582583404, -7.56758582583404, -7.3586473120340417, -7.60468622583404, -7.5690728598340415, -7.5690728598340415, -8.12414682583404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -8.12414682583404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -8.08899702903404, -8.12414682583404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404, -7.87810791203404]
								}]
						}, {
							"switch":	65,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2906,
							"begin_column":	2,
							"end_line":	2906,
							"end_column":	57,
							"patch_codes":	["if (!__is_neg(\"\", \"L2906\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->i), sizeof (intobj->diff->i), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.y = 0 - (intobj->diff->y * bias);\n", "{\n}\n", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0 * bias) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (0 * ht) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (0 * return_value_used) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = (bias != 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (bias * ht) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (bias * return_value_used) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (bias + 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (bias - 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (bias == 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (dateobj != 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (dateobj == 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht != 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht != bias) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht != return_value_used) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht * bias) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht * return_value_used) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht + 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht + bias) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht + return_value_used) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht - 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht - bias) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht - return_value_used) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht == 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht == bias) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (ht == return_value_used) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (interval != 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (interval == 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (intobj != 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (intobj == 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (object != 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (object != interval) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (object == 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (object == interval) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value != 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value != interval) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value != object) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value != this_ptr) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value == 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value == interval) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value == object) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value == this_ptr) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_ptr != 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_ptr == 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_used != 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_used != bias) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_used * bias) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_used * ht) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_used + 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_used + bias) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_used - 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_used - bias) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_used == 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (return_value_used == bias) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (this_ptr != 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (this_ptr != interval) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (this_ptr != object) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (this_ptr == 0) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (this_ptr == interval) - (intobj->diff->y * bias)", "dateobj->time->relative.y = (this_ptr == object) - (intobj->diff->y * bias)", "dateobj->time->relative.y = 0 - ((&bias)->diff->y * bias)", "dateobj->time->relative.y = 0 - ((&dateobj)->diff->y * bias)", "dateobj->time->relative.y = 0 - ((&ht)->diff->y * bias)", "dateobj->time->relative.y = 0 - ((&interval)->diff->y * bias)", "dateobj->time->relative.y = 0 - ((&intobj)->diff->y * bias)", "dateobj->time->relative.y = 0 - ((&object)->diff->y * bias)", "dateobj->time->relative.y = 0 - ((&return_value)->diff->y * bias)", "dateobj->time->relative.y = 0 - ((&return_value_ptr)->diff->y * bias)", "dateobj->time->relative.y = 0 - ((&return_value_used)->diff->y * bias)", "dateobj->time->relative.y = 0 - ((&this_ptr)->diff->y * bias)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->relative.y = 0 - (intobj->diff->y * (0 * bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (0 * ht))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (0 * return_value_used))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (bias != 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (bias * ht))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (bias * return_value_used))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (bias + 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (bias - 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (bias == 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (dateobj != 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (dateobj == 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht != 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht != bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht != return_value_used))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht * bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht * return_value_used))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht + 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht + bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht + return_value_used))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht - 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht - bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht - return_value_used))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht == 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht == bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht == return_value_used))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (ht))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (interval != 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (interval == 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (intobj != 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (intobj == 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (object != 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (object != interval))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (object == 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (object == interval))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value != 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value != interval))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value != object))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value != this_ptr))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value == 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value == interval))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value == object))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value == this_ptr))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_ptr != 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_ptr == 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_used != 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_used != bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_used * bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_used * ht))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_used + 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_used + bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_used - 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_used - bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_used == 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_used == bias))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (return_value_used))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (this_ptr != 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (this_ptr != interval))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (this_ptr != object))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (this_ptr == 0))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (this_ptr == interval))", "dateobj->time->relative.y = 0 - (intobj->diff->y * (this_ptr == object))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.28706530993404, -6.5288528004340414, -4.92149089763404, -6.7398999104340414, -5.21536512503404, -5.5766625430340415, -6.49811241993404, -5.097785867634042, -5.4435559630340418, -5.592140764634042, -5.5766134420340414, -5.592140764634042, -5.5766134420340414, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -6.55091181203404, -5.70972002203404, -6.25656101203404, -6.25656101203404, -5.79302371203404, -6.55091181203404, -6.2598184520340414, -6.2598184520340414, -6.4676081220340418, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -6.4676081220340418, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -6.1789800220340414, -6.4676081220340418, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404, -5.70972002203404]
								}, {
									"case":	2,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	3,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	4,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	5,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	6,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	7,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	8,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	9,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	10,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	11,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	12,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	13,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	14,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	15,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	16,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	17,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	18,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	19,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	20,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	21,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	22,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	23,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	24,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	25,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	26,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	27,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	28,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	29,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	30,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	31,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	32,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	33,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	34,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	35,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	36,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	37,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	38,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	39,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	40,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	41,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	42,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	43,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	44,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	45,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	46,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	47,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	48,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	49,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	50,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	51,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	52,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	53,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	54,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	55,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	56,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	57,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	58,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	59,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	60,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	61,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	62,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	63,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	64,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	65,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	66,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	67,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	68,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	69,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	70,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	71,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	72,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	73,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	74,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	75,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	76,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	77,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	78,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	79,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	80,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	81,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	82,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	83,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	84,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	85,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	86,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	87,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	88,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	89,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	90,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	91,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	92,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	93,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	94,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	95,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	96,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	97,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	98,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	99,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	100,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	101,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	102,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	103,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	104,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	105,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	106,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	107,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	108,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	109,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	110,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	111,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	112,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	113,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	114,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	115,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	116,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	117,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	118,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	119,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	120,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	121,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	122,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	123,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	124,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	125,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	126,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	127,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	128,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	129,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	130,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	131,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	132,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	133,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	134,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	135,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	136,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	137,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	138,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	139,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	140,
									"scores":	[-4.8413475420340415]
								}]
						}]
				}, {
					"line":	2906,
					"switches":	[{
							"switch":	66,
							"types":	[[], [], [], [], [401], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [], [], [], [], [], []],
							"begin_line":	2907,
							"begin_column":	0,
							"end_line":	2907,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2907\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.821144834716522]
								}, {
									"case":	2,
									"scores":	[-4.821144834716522]
								}, {
									"case":	3,
									"scores":	[-4.821144834716522]
								}, {
									"case":	4,
									"scores":	[-4.821144834716522]
								}, {
									"case":	5,
									"scores":	[-4.821144834716522]
								}, {
									"case":	6,
									"scores":	[-4.821144834716522]
								}, {
									"case":	7,
									"scores":	[-4.821144834716522]
								}, {
									"case":	8,
									"scores":	[-4.821144834716522]
								}, {
									"case":	9,
									"scores":	[-4.821144834716522]
								}, {
									"case":	10,
									"scores":	[-4.821144834716522]
								}, {
									"case":	11,
									"scores":	[-4.821144834716522]
								}, {
									"case":	12,
									"scores":	[-4.821144834716522]
								}, {
									"case":	13,
									"scores":	[-4.821144834716522]
								}, {
									"case":	14,
									"scores":	[-4.821144834716522]
								}, {
									"case":	15,
									"scores":	[-4.821144834716522]
								}, {
									"case":	16,
									"scores":	[-4.821144834716522]
								}, {
									"case":	17,
									"scores":	[-4.821144834716522]
								}, {
									"case":	18,
									"scores":	[-4.821144834716522]
								}, {
									"case":	19,
									"scores":	[-4.821144834716522]
								}, {
									"case":	20,
									"scores":	[-4.821144834716522]
								}, {
									"case":	21,
									"scores":	[-4.821144834716522]
								}, {
									"case":	22,
									"scores":	[-4.821144834716522]
								}, {
									"case":	23,
									"scores":	[-4.821144834716522]
								}, {
									"case":	24,
									"scores":	[-4.821144834716522]
								}, {
									"case":	25,
									"scores":	[-4.821144834716522]
								}, {
									"case":	26,
									"scores":	[-4.821144834716522]
								}, {
									"case":	27,
									"scores":	[-4.821144834716522]
								}, {
									"case":	28,
									"scores":	[-4.821144834716522]
								}, {
									"case":	29,
									"scores":	[-4.821144834716522]
								}, {
									"case":	30,
									"scores":	[-4.821144834716522]
								}, {
									"case":	31,
									"scores":	[-4.821144834716522]
								}, {
									"case":	32,
									"scores":	[-4.821144834716522]
								}, {
									"case":	33,
									"scores":	[-4.821144834716522]
								}, {
									"case":	34,
									"scores":	[-4.821144834716522]
								}, {
									"case":	35,
									"scores":	[-4.821144834716522]
								}, {
									"case":	36,
									"scores":	[-4.821144834716522]
								}, {
									"case":	37,
									"scores":	[-4.821144834716522]
								}, {
									"case":	38,
									"scores":	[-4.821144834716522]
								}, {
									"case":	39,
									"scores":	[-4.821144834716522]
								}, {
									"case":	40,
									"scores":	[-4.821144834716522]
								}, {
									"case":	41,
									"scores":	[-4.821144834716522]
								}, {
									"case":	42,
									"scores":	[-4.821144834716522]
								}, {
									"case":	43,
									"scores":	[-4.821144834716522]
								}, {
									"case":	44,
									"scores":	[-4.821144834716522]
								}, {
									"case":	45,
									"scores":	[-4.821144834716522]
								}, {
									"case":	46,
									"scores":	[-4.821144834716522]
								}, {
									"case":	47,
									"scores":	[-4.821144834716522]
								}, {
									"case":	48,
									"scores":	[-4.821144834716522]
								}, {
									"case":	49,
									"scores":	[-4.821144834716522]
								}, {
									"case":	50,
									"scores":	[-4.821144834716522]
								}, {
									"case":	51,
									"scores":	[-4.821144834716522]
								}, {
									"case":	52,
									"scores":	[-4.821144834716522]
								}, {
									"case":	53,
									"scores":	[-4.821144834716522]
								}, {
									"case":	54,
									"scores":	[-4.821144834716522]
								}, {
									"case":	55,
									"scores":	[-4.821144834716522]
								}, {
									"case":	56,
									"scores":	[-4.821144834716522]
								}, {
									"case":	57,
									"scores":	[-4.821144834716522]
								}, {
									"case":	58,
									"scores":	[-4.821144834716522]
								}, {
									"case":	59,
									"scores":	[-4.821144834716522]
								}, {
									"case":	60,
									"scores":	[-4.821144834716522]
								}, {
									"case":	61,
									"scores":	[-4.821144834716522]
								}, {
									"case":	62,
									"scores":	[-4.821144834716522]
								}, {
									"case":	63,
									"scores":	[-4.821144834716522]
								}, {
									"case":	64,
									"scores":	[-4.821144834716522]
								}, {
									"case":	65,
									"scores":	[-4.821144834716522]
								}, {
									"case":	66,
									"scores":	[-4.821144834716522]
								}, {
									"case":	67,
									"scores":	[-4.821144834716522]
								}, {
									"case":	68,
									"scores":	[-4.821144834716522]
								}, {
									"case":	69,
									"scores":	[-4.821144834716522]
								}, {
									"case":	70,
									"scores":	[-4.821144834716522]
								}, {
									"case":	71,
									"scores":	[-4.821144834716522]
								}, {
									"case":	72,
									"scores":	[-4.821144834716522]
								}, {
									"case":	73,
									"scores":	[-4.821144834716522]
								}, {
									"case":	74,
									"scores":	[-4.821144834716522]
								}, {
									"case":	75,
									"scores":	[-4.821144834716522]
								}, {
									"case":	76,
									"scores":	[-4.821144834716522]
								}, {
									"case":	77,
									"scores":	[-4.821144834716522]
								}, {
									"case":	78,
									"scores":	[-4.821144834716522]
								}, {
									"case":	79,
									"scores":	[-4.821144834716522]
								}, {
									"case":	80,
									"scores":	[-4.821144834716522]
								}, {
									"case":	81,
									"scores":	[-4.821144834716522]
								}, {
									"case":	82,
									"scores":	[-4.821144834716522]
								}, {
									"case":	83,
									"scores":	[-4.821144834716522]
								}, {
									"case":	84,
									"scores":	[-4.821144834716522]
								}, {
									"case":	85,
									"scores":	[-4.821144834716522]
								}, {
									"case":	86,
									"scores":	[-4.821144834716522]
								}, {
									"case":	87,
									"scores":	[-4.821144834716522]
								}, {
									"case":	88,
									"scores":	[-4.821144834716522]
								}, {
									"case":	89,
									"scores":	[-4.821144834716522]
								}, {
									"case":	90,
									"scores":	[-4.821144834716522]
								}, {
									"case":	91,
									"scores":	[-4.821144834716522]
								}, {
									"case":	92,
									"scores":	[-4.821144834716522]
								}, {
									"case":	93,
									"scores":	[-4.821144834716522]
								}, {
									"case":	94,
									"scores":	[-4.821144834716522]
								}, {
									"case":	95,
									"scores":	[-4.821144834716522]
								}, {
									"case":	96,
									"scores":	[-4.821144834716522]
								}, {
									"case":	97,
									"scores":	[-4.821144834716522]
								}, {
									"case":	98,
									"scores":	[-4.821144834716522]
								}, {
									"case":	99,
									"scores":	[-4.821144834716522]
								}, {
									"case":	100,
									"scores":	[-4.821144834716522]
								}, {
									"case":	101,
									"scores":	[-4.821144834716522]
								}, {
									"case":	102,
									"scores":	[-4.821144834716522]
								}, {
									"case":	103,
									"scores":	[-4.821144834716522]
								}, {
									"case":	104,
									"scores":	[-4.821144834716522]
								}, {
									"case":	105,
									"scores":	[-4.821144834716522]
								}, {
									"case":	106,
									"scores":	[-4.821144834716522]
								}, {
									"case":	107,
									"scores":	[-4.821144834716522]
								}, {
									"case":	108,
									"scores":	[-4.821144834716522]
								}, {
									"case":	109,
									"scores":	[-4.821144834716522]
								}, {
									"case":	110,
									"scores":	[-4.821144834716522]
								}, {
									"case":	111,
									"scores":	[-4.821144834716522]
								}, {
									"case":	112,
									"scores":	[-4.821144834716522]
								}, {
									"case":	113,
									"scores":	[-4.821144834716522]
								}, {
									"case":	114,
									"scores":	[-4.821144834716522]
								}, {
									"case":	115,
									"scores":	[-4.821144834716522]
								}, {
									"case":	116,
									"scores":	[-4.821144834716522]
								}, {
									"case":	117,
									"scores":	[-4.821144834716522]
								}, {
									"case":	118,
									"scores":	[-4.821144834716522]
								}, {
									"case":	119,
									"scores":	[-4.821144834716522]
								}, {
									"case":	120,
									"scores":	[-4.821144834716522]
								}, {
									"case":	121,
									"scores":	[-4.821144834716522]
								}, {
									"case":	122,
									"scores":	[-4.821144834716522]
								}, {
									"case":	123,
									"scores":	[-4.821144834716522]
								}, {
									"case":	124,
									"scores":	[-4.821144834716522]
								}, {
									"case":	125,
									"scores":	[-4.821144834716522]
								}, {
									"case":	126,
									"scores":	[-4.821144834716522]
								}, {
									"case":	127,
									"scores":	[-4.821144834716522]
								}, {
									"case":	128,
									"scores":	[-4.821144834716522]
								}, {
									"case":	129,
									"scores":	[-4.821144834716522]
								}, {
									"case":	130,
									"scores":	[-4.821144834716522]
								}, {
									"case":	131,
									"scores":	[-4.821144834716522]
								}, {
									"case":	132,
									"scores":	[-4.821144834716522]
								}, {
									"case":	133,
									"scores":	[-4.821144834716522]
								}, {
									"case":	134,
									"scores":	[-4.821144834716522]
								}, {
									"case":	135,
									"scores":	[-4.821144834716522]
								}, {
									"case":	136,
									"scores":	[-4.821144834716522]
								}, {
									"case":	137,
									"scores":	[-4.821144834716522]
								}, {
									"case":	138,
									"scores":	[-4.821144834716522]
								}, {
									"case":	139,
									"scores":	[-4.821144834716522]
								}, {
									"case":	140,
									"scores":	[-4.821144834716522]
								}, {
									"case":	141,
									"scores":	[-4.821144834716522]
								}, {
									"case":	142,
									"scores":	[-4.821144834716522]
								}, {
									"case":	143,
									"scores":	[-4.821144834716522]
								}, {
									"case":	144,
									"scores":	[-4.821144834716522]
								}, {
									"case":	145,
									"scores":	[-4.821144834716522]
								}, {
									"case":	146,
									"scores":	[-4.821144834716522]
								}, {
									"case":	147,
									"scores":	[-4.821144834716522]
								}, {
									"case":	148,
									"scores":	[-4.821144834716522]
								}, {
									"case":	149,
									"scores":	[-4.821144834716522]
								}, {
									"case":	150,
									"scores":	[-4.821144834716522]
								}, {
									"case":	151,
									"scores":	[-4.821144834716522]
								}, {
									"case":	152,
									"scores":	[-4.821144834716522]
								}, {
									"case":	153,
									"scores":	[-4.821144834716522]
								}, {
									"case":	154,
									"scores":	[-4.821144834716522]
								}, {
									"case":	155,
									"scores":	[-4.821144834716522]
								}, {
									"case":	156,
									"scores":	[-4.821144834716522]
								}, {
									"case":	157,
									"scores":	[-4.821144834716522]
								}, {
									"case":	158,
									"scores":	[-4.821144834716522]
								}, {
									"case":	159,
									"scores":	[-4.821144834716522]
								}, {
									"case":	160,
									"scores":	[-4.821144834716522]
								}, {
									"case":	161,
									"scores":	[-4.821144834716522]
								}, {
									"case":	162,
									"scores":	[-4.821144834716522]
								}, {
									"case":	163,
									"scores":	[-4.821144834716522]
								}, {
									"case":	164,
									"scores":	[-4.821144834716522]
								}, {
									"case":	165,
									"scores":	[-4.821144834716522]
								}, {
									"case":	166,
									"scores":	[-4.821144834716522]
								}, {
									"case":	167,
									"scores":	[-4.821144834716522]
								}, {
									"case":	168,
									"scores":	[-4.821144834716522]
								}, {
									"case":	169,
									"scores":	[-4.821144834716522]
								}, {
									"case":	170,
									"scores":	[-4.821144834716522]
								}, {
									"case":	171,
									"scores":	[-4.821144834716522]
								}, {
									"case":	172,
									"scores":	[-4.821144834716522]
								}, {
									"case":	173,
									"scores":	[-4.821144834716522]
								}, {
									"case":	174,
									"scores":	[-4.821144834716522]
								}, {
									"case":	175,
									"scores":	[-4.821144834716522]
								}, {
									"case":	176,
									"scores":	[-4.821144834716522]
								}, {
									"case":	177,
									"scores":	[-4.821144834716522]
								}, {
									"case":	178,
									"scores":	[-4.821144834716522]
								}, {
									"case":	179,
									"scores":	[-4.821144834716522]
								}, {
									"case":	180,
									"scores":	[-4.821144834716522]
								}, {
									"case":	181,
									"scores":	[-4.821144834716522]
								}, {
									"case":	182,
									"scores":	[-4.821144834716522]
								}, {
									"case":	183,
									"scores":	[-4.821144834716522]
								}, {
									"case":	184,
									"scores":	[-4.821144834716522]
								}, {
									"case":	185,
									"scores":	[-4.821144834716522]
								}, {
									"case":	186,
									"scores":	[-4.821144834716522]
								}, {
									"case":	187,
									"scores":	[-4.821144834716522]
								}, {
									"case":	188,
									"scores":	[-4.821144834716522]
								}, {
									"case":	189,
									"scores":	[-4.821144834716522]
								}, {
									"case":	190,
									"scores":	[-4.821144834716522]
								}, {
									"case":	191,
									"scores":	[-4.821144834716522]
								}, {
									"case":	192,
									"scores":	[-4.821144834716522]
								}, {
									"case":	193,
									"scores":	[-4.821144834716522]
								}, {
									"case":	194,
									"scores":	[-4.821144834716522]
								}, {
									"case":	195,
									"scores":	[-4.821144834716522]
								}, {
									"case":	196,
									"scores":	[-4.821144834716522]
								}, {
									"case":	197,
									"scores":	[-4.821144834716522]
								}, {
									"case":	198,
									"scores":	[-4.821144834716522]
								}, {
									"case":	199,
									"scores":	[-4.821144834716522]
								}, {
									"case":	200,
									"scores":	[-4.821144834716522]
								}, {
									"case":	201,
									"scores":	[-4.821144834716522]
								}, {
									"case":	202,
									"scores":	[-4.821144834716522]
								}, {
									"case":	203,
									"scores":	[-4.821144834716522]
								}, {
									"case":	204,
									"scores":	[-4.821144834716522]
								}, {
									"case":	205,
									"scores":	[-4.821144834716522]
								}, {
									"case":	206,
									"scores":	[-4.821144834716522]
								}, {
									"case":	207,
									"scores":	[-4.821144834716522]
								}, {
									"case":	208,
									"scores":	[-4.821144834716522]
								}, {
									"case":	209,
									"scores":	[-4.821144834716522]
								}, {
									"case":	210,
									"scores":	[-4.821144834716522]
								}, {
									"case":	211,
									"scores":	[-4.821144834716522]
								}, {
									"case":	212,
									"scores":	[-4.821144834716522]
								}, {
									"case":	213,
									"scores":	[-4.821144834716522]
								}, {
									"case":	214,
									"scores":	[-4.821144834716522]
								}, {
									"case":	215,
									"scores":	[-4.821144834716522]
								}, {
									"case":	216,
									"scores":	[-4.821144834716522]
								}, {
									"case":	217,
									"scores":	[-4.821144834716522]
								}, {
									"case":	218,
									"scores":	[-4.821144834716522]
								}, {
									"case":	219,
									"scores":	[-4.821144834716522]
								}, {
									"case":	220,
									"scores":	[-4.821144834716522]
								}, {
									"case":	221,
									"scores":	[-4.821144834716522]
								}, {
									"case":	222,
									"scores":	[-4.821144834716522]
								}, {
									"case":	223,
									"scores":	[-4.821144834716522]
								}, {
									"case":	224,
									"scores":	[-4.821144834716522]
								}, {
									"case":	225,
									"scores":	[-4.821144834716522]
								}, {
									"case":	226,
									"scores":	[-4.821144834716522]
								}, {
									"case":	227,
									"scores":	[-4.821144834716522]
								}, {
									"case":	228,
									"scores":	[-4.821144834716522]
								}, {
									"case":	229,
									"scores":	[-4.821144834716522]
								}, {
									"case":	230,
									"scores":	[-4.821144834716522]
								}, {
									"case":	231,
									"scores":	[-4.821144834716522]
								}, {
									"case":	232,
									"scores":	[-4.821144834716522]
								}, {
									"case":	233,
									"scores":	[-4.821144834716522]
								}, {
									"case":	234,
									"scores":	[-4.821144834716522]
								}, {
									"case":	235,
									"scores":	[-4.821144834716522]
								}, {
									"case":	236,
									"scores":	[-4.821144834716522]
								}, {
									"case":	237,
									"scores":	[-4.821144834716522]
								}, {
									"case":	238,
									"scores":	[-4.821144834716522]
								}, {
									"case":	239,
									"scores":	[-4.821144834716522]
								}, {
									"case":	240,
									"scores":	[-4.821144834716522]
								}, {
									"case":	241,
									"scores":	[-4.821144834716522]
								}, {
									"case":	242,
									"scores":	[-4.821144834716522]
								}, {
									"case":	243,
									"scores":	[-4.821144834716522]
								}, {
									"case":	244,
									"scores":	[-4.821144834716522]
								}, {
									"case":	245,
									"scores":	[-4.821144834716522]
								}, {
									"case":	246,
									"scores":	[-4.821144834716522]
								}, {
									"case":	247,
									"scores":	[-4.821144834716522]
								}, {
									"case":	248,
									"scores":	[-4.821144834716522]
								}, {
									"case":	249,
									"scores":	[-4.821144834716522]
								}, {
									"case":	250,
									"scores":	[-4.821144834716522]
								}, {
									"case":	251,
									"scores":	[-4.821144834716522]
								}, {
									"case":	252,
									"scores":	[-4.821144834716522]
								}, {
									"case":	253,
									"scores":	[-4.821144834716522]
								}, {
									"case":	254,
									"scores":	[-4.821144834716522]
								}, {
									"case":	255,
									"scores":	[-4.821144834716522]
								}, {
									"case":	256,
									"scores":	[-4.821144834716522]
								}, {
									"case":	257,
									"scores":	[-4.821144834716522]
								}, {
									"case":	258,
									"scores":	[-4.821144834716522]
								}, {
									"case":	259,
									"scores":	[-4.821144834716522]
								}, {
									"case":	260,
									"scores":	[-4.821144834716522]
								}, {
									"case":	261,
									"scores":	[-4.821144834716522]
								}, {
									"case":	262,
									"scores":	[-4.821144834716522]
								}, {
									"case":	263,
									"scores":	[-4.821144834716522]
								}, {
									"case":	264,
									"scores":	[-4.821144834716522]
								}, {
									"case":	265,
									"scores":	[-4.821144834716522]
								}, {
									"case":	266,
									"scores":	[-4.821144834716522]
								}, {
									"case":	267,
									"scores":	[-4.821144834716522]
								}, {
									"case":	268,
									"scores":	[-4.821144834716522]
								}, {
									"case":	269,
									"scores":	[-4.821144834716522]
								}, {
									"case":	270,
									"scores":	[-4.821144834716522]
								}, {
									"case":	271,
									"scores":	[-4.821144834716522]
								}, {
									"case":	272,
									"scores":	[-4.821144834716522]
								}, {
									"case":	273,
									"scores":	[-4.821144834716522]
								}, {
									"case":	274,
									"scores":	[-4.821144834716522]
								}, {
									"case":	275,
									"scores":	[-4.821144834716522]
								}, {
									"case":	276,
									"scores":	[-4.821144834716522]
								}, {
									"case":	277,
									"scores":	[-4.821144834716522]
								}, {
									"case":	278,
									"scores":	[-4.821144834716522]
								}, {
									"case":	279,
									"scores":	[-4.821144834716522]
								}, {
									"case":	280,
									"scores":	[-4.821144834716522]
								}, {
									"case":	281,
									"scores":	[-4.821144834716522]
								}, {
									"case":	282,
									"scores":	[-4.821144834716522]
								}, {
									"case":	283,
									"scores":	[-4.821144834716522]
								}, {
									"case":	284,
									"scores":	[-4.821144834716522]
								}, {
									"case":	285,
									"scores":	[-4.821144834716522]
								}, {
									"case":	286,
									"scores":	[-4.821144834716522]
								}, {
									"case":	287,
									"scores":	[-4.821144834716522]
								}, {
									"case":	288,
									"scores":	[-4.821144834716522]
								}, {
									"case":	289,
									"scores":	[-4.821144834716522]
								}, {
									"case":	290,
									"scores":	[-4.821144834716522]
								}, {
									"case":	291,
									"scores":	[-4.821144834716522]
								}, {
									"case":	292,
									"scores":	[-4.821144834716522]
								}, {
									"case":	293,
									"scores":	[-4.821144834716522]
								}, {
									"case":	294,
									"scores":	[-4.821144834716522]
								}, {
									"case":	295,
									"scores":	[-4.821144834716522]
								}, {
									"case":	296,
									"scores":	[-4.821144834716522]
								}, {
									"case":	297,
									"scores":	[-4.821144834716522]
								}, {
									"case":	298,
									"scores":	[-4.821144834716522]
								}, {
									"case":	299,
									"scores":	[-4.821144834716522]
								}, {
									"case":	300,
									"scores":	[-4.821144834716522]
								}, {
									"case":	301,
									"scores":	[-4.821144834716522]
								}, {
									"case":	302,
									"scores":	[-4.821144834716522]
								}, {
									"case":	303,
									"scores":	[-4.821144834716522]
								}, {
									"case":	304,
									"scores":	[-4.821144834716522]
								}, {
									"case":	305,
									"scores":	[-4.821144834716522]
								}, {
									"case":	306,
									"scores":	[-4.821144834716522]
								}, {
									"case":	307,
									"scores":	[-4.821144834716522]
								}, {
									"case":	308,
									"scores":	[-4.821144834716522]
								}, {
									"case":	309,
									"scores":	[-4.821144834716522]
								}, {
									"case":	310,
									"scores":	[-4.821144834716522]
								}, {
									"case":	311,
									"scores":	[-4.821144834716522]
								}, {
									"case":	312,
									"scores":	[-4.821144834716522]
								}, {
									"case":	313,
									"scores":	[-4.821144834716522]
								}, {
									"case":	314,
									"scores":	[-4.821144834716522]
								}, {
									"case":	315,
									"scores":	[-4.821144834716522]
								}, {
									"case":	316,
									"scores":	[-4.821144834716522]
								}, {
									"case":	317,
									"scores":	[-4.821144834716522]
								}, {
									"case":	318,
									"scores":	[-4.821144834716522]
								}, {
									"case":	319,
									"scores":	[-4.821144834716522]
								}, {
									"case":	320,
									"scores":	[-4.821144834716522]
								}, {
									"case":	321,
									"scores":	[-4.821144834716522]
								}, {
									"case":	322,
									"scores":	[-4.821144834716522]
								}, {
									"case":	323,
									"scores":	[-4.821144834716522]
								}, {
									"case":	324,
									"scores":	[-4.821144834716522]
								}, {
									"case":	325,
									"scores":	[-4.821144834716522]
								}, {
									"case":	326,
									"scores":	[-4.821144834716522]
								}, {
									"case":	327,
									"scores":	[-4.821144834716522]
								}, {
									"case":	328,
									"scores":	[-4.821144834716522]
								}, {
									"case":	329,
									"scores":	[-4.821144834716522]
								}, {
									"case":	330,
									"scores":	[-4.821144834716522]
								}, {
									"case":	331,
									"scores":	[-4.821144834716522]
								}, {
									"case":	332,
									"scores":	[-4.821144834716522]
								}, {
									"case":	333,
									"scores":	[-4.821144834716522]
								}, {
									"case":	334,
									"scores":	[-4.821144834716522]
								}, {
									"case":	335,
									"scores":	[-4.821144834716522]
								}, {
									"case":	336,
									"scores":	[-4.821144834716522]
								}, {
									"case":	337,
									"scores":	[-4.821144834716522]
								}, {
									"case":	338,
									"scores":	[-4.821144834716522]
								}, {
									"case":	339,
									"scores":	[-4.821144834716522]
								}, {
									"case":	340,
									"scores":	[-4.821144834716522]
								}, {
									"case":	341,
									"scores":	[-4.821144834716522]
								}, {
									"case":	342,
									"scores":	[-4.821144834716522]
								}, {
									"case":	343,
									"scores":	[-4.821144834716522]
								}, {
									"case":	344,
									"scores":	[-4.821144834716522]
								}, {
									"case":	345,
									"scores":	[-4.821144834716522]
								}, {
									"case":	346,
									"scores":	[-4.821144834716522]
								}, {
									"case":	347,
									"scores":	[-4.821144834716522]
								}, {
									"case":	348,
									"scores":	[-4.821144834716522]
								}, {
									"case":	349,
									"scores":	[-4.821144834716522]
								}, {
									"case":	350,
									"scores":	[-4.821144834716522]
								}, {
									"case":	351,
									"scores":	[-4.821144834716522]
								}, {
									"case":	352,
									"scores":	[-4.821144834716522]
								}, {
									"case":	353,
									"scores":	[-4.821144834716522]
								}, {
									"case":	354,
									"scores":	[-4.821144834716522]
								}, {
									"case":	355,
									"scores":	[-4.821144834716522]
								}, {
									"case":	356,
									"scores":	[-4.821144834716522]
								}, {
									"case":	357,
									"scores":	[-4.821144834716522]
								}, {
									"case":	358,
									"scores":	[-4.821144834716522]
								}, {
									"case":	359,
									"scores":	[-4.821144834716522]
								}, {
									"case":	360,
									"scores":	[-4.821144834716522]
								}, {
									"case":	361,
									"scores":	[-4.821144834716522]
								}, {
									"case":	362,
									"scores":	[-4.821144834716522]
								}, {
									"case":	363,
									"scores":	[-4.821144834716522]
								}, {
									"case":	364,
									"scores":	[-4.821144834716522]
								}, {
									"case":	365,
									"scores":	[-4.821144834716522]
								}, {
									"case":	366,
									"scores":	[-4.821144834716522]
								}, {
									"case":	367,
									"scores":	[-4.821144834716522]
								}, {
									"case":	368,
									"scores":	[-4.821144834716522]
								}, {
									"case":	369,
									"scores":	[-4.821144834716522]
								}, {
									"case":	370,
									"scores":	[-4.821144834716522]
								}, {
									"case":	371,
									"scores":	[-4.821144834716522]
								}, {
									"case":	372,
									"scores":	[-4.821144834716522]
								}, {
									"case":	373,
									"scores":	[-4.821144834716522]
								}, {
									"case":	374,
									"scores":	[-4.821144834716522]
								}, {
									"case":	375,
									"scores":	[-4.821144834716522]
								}, {
									"case":	376,
									"scores":	[-4.821144834716522]
								}, {
									"case":	377,
									"scores":	[-4.821144834716522]
								}, {
									"case":	378,
									"scores":	[-4.821144834716522]
								}, {
									"case":	379,
									"scores":	[-4.821144834716522]
								}, {
									"case":	380,
									"scores":	[-4.821144834716522]
								}, {
									"case":	381,
									"scores":	[-4.821144834716522]
								}, {
									"case":	382,
									"scores":	[-4.821144834716522]
								}, {
									"case":	383,
									"scores":	[-4.821144834716522]
								}, {
									"case":	384,
									"scores":	[-4.821144834716522]
								}, {
									"case":	385,
									"scores":	[-4.821144834716522]
								}, {
									"case":	386,
									"scores":	[-4.821144834716522]
								}, {
									"case":	387,
									"scores":	[-4.821144834716522]
								}, {
									"case":	388,
									"scores":	[-4.821144834716522]
								}, {
									"case":	389,
									"scores":	[-4.821144834716522]
								}, {
									"case":	390,
									"scores":	[-4.821144834716522]
								}, {
									"case":	391,
									"scores":	[-4.821144834716522]
								}, {
									"case":	392,
									"scores":	[-4.821144834716522]
								}, {
									"case":	393,
									"scores":	[-4.821144834716522]
								}, {
									"case":	394,
									"scores":	[-4.821144834716522]
								}, {
									"case":	395,
									"scores":	[-4.821144834716522]
								}, {
									"case":	396,
									"scores":	[-4.821144834716522]
								}, {
									"case":	397,
									"scores":	[-4.821144834716522]
								}, {
									"case":	398,
									"scores":	[-4.821144834716522]
								}, {
									"case":	399,
									"scores":	[-4.821144834716522]
								}, {
									"case":	400,
									"scores":	[-4.821144834716522]
								}, {
									"case":	401,
									"scores":	[-8.03052232941652, -8.03052232941652, -4.9448465877165217, -8.58708332941652, -6.7528357757165214, -7.5751324457165223, -8.58708332941652, -8.25031390171652, -7.9248053247165231, -6.660327724716522, -8.4337607247165227, -7.9248053247165231, -8.4337607247165227, -7.9248053247165231, -8.4337607247165227, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.19173751851652, -8.46515920471652, -8.15463711851652, -8.15463711851652, -7.9456986047165223, -8.19173751851652, -8.15612415251652, -8.15612415251652, -8.71119811851652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.71119811851652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.67604832171652, -8.71119811851652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652, -8.46515920471652]
								}]
						}, {
							"switch":	67,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2907,
							"begin_column":	2,
							"end_line":	2907,
							"end_column":	57,
							"patch_codes":	["if (!__is_neg(\"\", \"L2907\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(object), sizeof (object), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.m = 0 - (intobj->diff->m * bias);\n", "{\n}\n", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0 * bias) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (0 * ht) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (0 * return_value_used) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = (bias != 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (bias * ht) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (bias * return_value_used) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (bias + 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (bias - 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (bias == 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (dateobj != 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (dateobj == 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht != 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht != bias) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht != return_value_used) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht * bias) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht * return_value_used) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht + 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht + bias) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht + return_value_used) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht - 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht - bias) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht - return_value_used) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht == 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht == bias) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (ht == return_value_used) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (interval != 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (interval == 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (intobj != 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (intobj == 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (object != 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (object != interval) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (object == 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (object == interval) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value != 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value != interval) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value != object) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value != this_ptr) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value == 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value == interval) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value == object) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value == this_ptr) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_ptr != 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_ptr == 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_used != 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_used != bias) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_used * bias) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_used * ht) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_used + 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_used + bias) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_used - 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_used - bias) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_used == 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (return_value_used == bias) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (this_ptr != 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (this_ptr != interval) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (this_ptr != object) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (this_ptr == 0) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (this_ptr == interval) - (intobj->diff->m * bias)", "dateobj->time->relative.m = (this_ptr == object) - (intobj->diff->m * bias)", "dateobj->time->relative.m = 0 - ((&bias)->diff->m * bias)", "dateobj->time->relative.m = 0 - ((&dateobj)->diff->m * bias)", "dateobj->time->relative.m = 0 - ((&ht)->diff->m * bias)", "dateobj->time->relative.m = 0 - ((&interval)->diff->m * bias)", "dateobj->time->relative.m = 0 - ((&intobj)->diff->m * bias)", "dateobj->time->relative.m = 0 - ((&object)->diff->m * bias)", "dateobj->time->relative.m = 0 - ((&return_value)->diff->m * bias)", "dateobj->time->relative.m = 0 - ((&return_value_ptr)->diff->m * bias)", "dateobj->time->relative.m = 0 - ((&return_value_used)->diff->m * bias)", "dateobj->time->relative.m = 0 - ((&this_ptr)->diff->m * bias)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * (0 * bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (0 * ht))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (0 * return_value_used))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (bias != 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (bias * ht))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (bias * return_value_used))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (bias + 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (bias - 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (bias == 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (dateobj != 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (dateobj == 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht != 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht != bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht != return_value_used))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht * bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht * return_value_used))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht + 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht + bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht + return_value_used))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht - 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht - bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht - return_value_used))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht == 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht == bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht == return_value_used))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (ht))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (interval != 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (interval == 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (intobj != 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (intobj == 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (object != 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (object != interval))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (object == 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (object == interval))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value != 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value != interval))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value != object))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value != this_ptr))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value == 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value == interval))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value == object))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value == this_ptr))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_ptr != 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_ptr == 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_used != 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_used != bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_used * bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_used * ht))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_used + 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_used + bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_used - 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_used - bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_used == 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_used == bias))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (return_value_used))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (this_ptr != 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (this_ptr != interval))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (this_ptr != object))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (this_ptr == 0))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (this_ptr == interval))", "dateobj->time->relative.m = 0 - (intobj->diff->m * (this_ptr == object))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6193020931165218, -6.6193020931165218, -5.3822466723165219, -6.8303492031165218, -5.6763774177165223, -6.0376748357165217, -6.8303492031165218, -5.799912796716522, -5.5587981603165222, -5.2900554547165219, -5.904568255716522, -6.0531530573165222, -6.0376257347165216, -6.0531530573165222, -6.0376257347165216, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -7.0119241047165222, -6.1707323147165223, -6.717573304716522, -6.717573304716522, -6.2540360047165215, -7.0119241047165222, -6.7208307447165225, -6.7208307447165225, -6.92862041471652, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.92862041471652, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.6399923147165216, -6.92862041471652, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223, -6.1707323147165223]
								}, {
									"case":	2,
									"scores":	[-4.821144834716522]
								}, {
									"case":	3,
									"scores":	[-4.821144834716522]
								}, {
									"case":	4,
									"scores":	[-4.821144834716522]
								}, {
									"case":	5,
									"scores":	[-4.821144834716522]
								}, {
									"case":	6,
									"scores":	[-4.821144834716522]
								}, {
									"case":	7,
									"scores":	[-4.821144834716522]
								}, {
									"case":	8,
									"scores":	[-4.821144834716522]
								}, {
									"case":	9,
									"scores":	[-4.821144834716522]
								}, {
									"case":	10,
									"scores":	[-4.821144834716522]
								}, {
									"case":	11,
									"scores":	[-4.821144834716522]
								}, {
									"case":	12,
									"scores":	[-4.821144834716522]
								}, {
									"case":	13,
									"scores":	[-4.821144834716522]
								}, {
									"case":	14,
									"scores":	[-4.821144834716522]
								}, {
									"case":	15,
									"scores":	[-4.821144834716522]
								}, {
									"case":	16,
									"scores":	[-4.821144834716522]
								}, {
									"case":	17,
									"scores":	[-4.821144834716522]
								}, {
									"case":	18,
									"scores":	[-4.821144834716522]
								}, {
									"case":	19,
									"scores":	[-4.821144834716522]
								}, {
									"case":	20,
									"scores":	[-4.821144834716522]
								}, {
									"case":	21,
									"scores":	[-4.821144834716522]
								}, {
									"case":	22,
									"scores":	[-4.821144834716522]
								}, {
									"case":	23,
									"scores":	[-4.821144834716522]
								}, {
									"case":	24,
									"scores":	[-4.821144834716522]
								}, {
									"case":	25,
									"scores":	[-4.821144834716522]
								}, {
									"case":	26,
									"scores":	[-4.821144834716522]
								}, {
									"case":	27,
									"scores":	[-4.821144834716522]
								}, {
									"case":	28,
									"scores":	[-4.821144834716522]
								}, {
									"case":	29,
									"scores":	[-4.821144834716522]
								}, {
									"case":	30,
									"scores":	[-4.821144834716522]
								}, {
									"case":	31,
									"scores":	[-4.821144834716522]
								}, {
									"case":	32,
									"scores":	[-4.821144834716522]
								}, {
									"case":	33,
									"scores":	[-4.821144834716522]
								}, {
									"case":	34,
									"scores":	[-4.821144834716522]
								}, {
									"case":	35,
									"scores":	[-4.821144834716522]
								}, {
									"case":	36,
									"scores":	[-4.821144834716522]
								}, {
									"case":	37,
									"scores":	[-4.821144834716522]
								}, {
									"case":	38,
									"scores":	[-4.821144834716522]
								}, {
									"case":	39,
									"scores":	[-4.821144834716522]
								}, {
									"case":	40,
									"scores":	[-4.821144834716522]
								}, {
									"case":	41,
									"scores":	[-4.821144834716522]
								}, {
									"case":	42,
									"scores":	[-4.821144834716522]
								}, {
									"case":	43,
									"scores":	[-4.821144834716522]
								}, {
									"case":	44,
									"scores":	[-4.821144834716522]
								}, {
									"case":	45,
									"scores":	[-4.821144834716522]
								}, {
									"case":	46,
									"scores":	[-4.821144834716522]
								}, {
									"case":	47,
									"scores":	[-4.821144834716522]
								}, {
									"case":	48,
									"scores":	[-4.821144834716522]
								}, {
									"case":	49,
									"scores":	[-4.821144834716522]
								}, {
									"case":	50,
									"scores":	[-4.821144834716522]
								}, {
									"case":	51,
									"scores":	[-4.821144834716522]
								}, {
									"case":	52,
									"scores":	[-4.821144834716522]
								}, {
									"case":	53,
									"scores":	[-4.821144834716522]
								}, {
									"case":	54,
									"scores":	[-4.821144834716522]
								}, {
									"case":	55,
									"scores":	[-4.821144834716522]
								}, {
									"case":	56,
									"scores":	[-4.821144834716522]
								}, {
									"case":	57,
									"scores":	[-4.821144834716522]
								}, {
									"case":	58,
									"scores":	[-4.821144834716522]
								}, {
									"case":	59,
									"scores":	[-4.821144834716522]
								}, {
									"case":	60,
									"scores":	[-4.821144834716522]
								}, {
									"case":	61,
									"scores":	[-4.821144834716522]
								}, {
									"case":	62,
									"scores":	[-4.821144834716522]
								}, {
									"case":	63,
									"scores":	[-4.821144834716522]
								}, {
									"case":	64,
									"scores":	[-4.821144834716522]
								}, {
									"case":	65,
									"scores":	[-4.821144834716522]
								}, {
									"case":	66,
									"scores":	[-4.821144834716522]
								}, {
									"case":	67,
									"scores":	[-4.821144834716522]
								}, {
									"case":	68,
									"scores":	[-4.821144834716522]
								}, {
									"case":	69,
									"scores":	[-4.821144834716522]
								}, {
									"case":	70,
									"scores":	[-4.821144834716522]
								}, {
									"case":	71,
									"scores":	[-4.821144834716522]
								}, {
									"case":	72,
									"scores":	[-4.821144834716522]
								}, {
									"case":	73,
									"scores":	[-4.821144834716522]
								}, {
									"case":	74,
									"scores":	[-4.821144834716522]
								}, {
									"case":	75,
									"scores":	[-4.821144834716522]
								}, {
									"case":	76,
									"scores":	[-4.821144834716522]
								}, {
									"case":	77,
									"scores":	[-4.821144834716522]
								}, {
									"case":	78,
									"scores":	[-4.821144834716522]
								}, {
									"case":	79,
									"scores":	[-4.821144834716522]
								}, {
									"case":	80,
									"scores":	[-4.821144834716522]
								}, {
									"case":	81,
									"scores":	[-4.821144834716522]
								}, {
									"case":	82,
									"scores":	[-4.821144834716522]
								}, {
									"case":	83,
									"scores":	[-4.821144834716522]
								}, {
									"case":	84,
									"scores":	[-4.821144834716522]
								}, {
									"case":	85,
									"scores":	[-4.821144834716522]
								}, {
									"case":	86,
									"scores":	[-4.821144834716522]
								}, {
									"case":	87,
									"scores":	[-4.821144834716522]
								}, {
									"case":	88,
									"scores":	[-4.821144834716522]
								}, {
									"case":	89,
									"scores":	[-4.821144834716522]
								}, {
									"case":	90,
									"scores":	[-4.821144834716522]
								}, {
									"case":	91,
									"scores":	[-4.821144834716522]
								}, {
									"case":	92,
									"scores":	[-4.821144834716522]
								}, {
									"case":	93,
									"scores":	[-4.821144834716522]
								}, {
									"case":	94,
									"scores":	[-4.821144834716522]
								}, {
									"case":	95,
									"scores":	[-4.821144834716522]
								}, {
									"case":	96,
									"scores":	[-4.821144834716522]
								}, {
									"case":	97,
									"scores":	[-4.821144834716522]
								}, {
									"case":	98,
									"scores":	[-4.821144834716522]
								}, {
									"case":	99,
									"scores":	[-4.821144834716522]
								}, {
									"case":	100,
									"scores":	[-4.821144834716522]
								}, {
									"case":	101,
									"scores":	[-4.821144834716522]
								}, {
									"case":	102,
									"scores":	[-4.821144834716522]
								}, {
									"case":	103,
									"scores":	[-4.821144834716522]
								}, {
									"case":	104,
									"scores":	[-4.821144834716522]
								}, {
									"case":	105,
									"scores":	[-4.821144834716522]
								}, {
									"case":	106,
									"scores":	[-4.821144834716522]
								}, {
									"case":	107,
									"scores":	[-4.821144834716522]
								}, {
									"case":	108,
									"scores":	[-4.821144834716522]
								}, {
									"case":	109,
									"scores":	[-4.821144834716522]
								}, {
									"case":	110,
									"scores":	[-4.821144834716522]
								}, {
									"case":	111,
									"scores":	[-4.821144834716522]
								}, {
									"case":	112,
									"scores":	[-4.821144834716522]
								}, {
									"case":	113,
									"scores":	[-4.821144834716522]
								}, {
									"case":	114,
									"scores":	[-4.821144834716522]
								}, {
									"case":	115,
									"scores":	[-4.821144834716522]
								}, {
									"case":	116,
									"scores":	[-4.821144834716522]
								}, {
									"case":	117,
									"scores":	[-4.821144834716522]
								}, {
									"case":	118,
									"scores":	[-4.821144834716522]
								}, {
									"case":	119,
									"scores":	[-4.821144834716522]
								}, {
									"case":	120,
									"scores":	[-4.821144834716522]
								}, {
									"case":	121,
									"scores":	[-4.821144834716522]
								}, {
									"case":	122,
									"scores":	[-4.821144834716522]
								}, {
									"case":	123,
									"scores":	[-4.821144834716522]
								}, {
									"case":	124,
									"scores":	[-4.821144834716522]
								}, {
									"case":	125,
									"scores":	[-4.821144834716522]
								}, {
									"case":	126,
									"scores":	[-4.821144834716522]
								}, {
									"case":	127,
									"scores":	[-4.821144834716522]
								}, {
									"case":	128,
									"scores":	[-4.821144834716522]
								}, {
									"case":	129,
									"scores":	[-4.821144834716522]
								}, {
									"case":	130,
									"scores":	[-4.821144834716522]
								}, {
									"case":	131,
									"scores":	[-4.821144834716522]
								}, {
									"case":	132,
									"scores":	[-4.821144834716522]
								}, {
									"case":	133,
									"scores":	[-4.821144834716522]
								}, {
									"case":	134,
									"scores":	[-4.821144834716522]
								}, {
									"case":	135,
									"scores":	[-4.821144834716522]
								}, {
									"case":	136,
									"scores":	[-4.821144834716522]
								}, {
									"case":	137,
									"scores":	[-4.821144834716522]
								}, {
									"case":	138,
									"scores":	[-4.821144834716522]
								}, {
									"case":	139,
									"scores":	[-4.821144834716522]
								}, {
									"case":	140,
									"scores":	[-4.821144834716522]
								}]
						}]
				}, {
					"line":	2907,
					"switches":	[{
							"switch":	68,
							"types":	[[], [], [], [], [401], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [], [], [], [], [], []],
							"begin_line":	2908,
							"begin_column":	0,
							"end_line":	2908,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2908\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	2,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	3,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	4,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	5,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	6,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	7,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	8,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	9,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	10,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	11,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	12,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	13,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	14,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	15,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	16,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	17,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	18,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	19,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	20,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	21,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	22,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	23,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	24,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	25,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	26,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	27,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	28,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	29,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	30,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	31,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	32,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	33,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	34,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	35,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	36,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	37,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	38,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	39,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	40,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	41,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	42,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	43,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	44,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	45,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	46,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	47,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	48,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	49,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	50,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	51,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	52,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	53,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	54,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	55,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	56,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	57,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	58,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	59,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	60,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	61,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	62,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	63,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	64,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	65,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	66,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	67,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	68,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	69,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	70,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	71,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	72,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	73,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	74,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	75,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	76,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	77,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	78,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	79,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	80,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	81,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	82,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	83,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	84,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	85,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	86,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	87,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	88,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	89,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	90,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	91,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	92,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	93,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	94,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	95,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	96,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	97,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	98,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	99,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	100,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	101,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	102,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	103,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	104,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	105,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	106,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	107,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	108,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	109,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	110,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	111,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	112,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	113,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	114,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	115,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	116,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	117,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	118,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	119,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	120,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	121,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	122,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	123,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	124,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	125,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	126,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	127,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	128,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	129,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	130,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	131,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	132,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	133,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	134,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	135,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	136,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	137,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	138,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	139,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	140,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	141,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	142,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	143,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	144,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	145,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	146,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	147,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	148,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	149,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	150,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	151,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	152,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	153,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	154,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	155,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	156,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	157,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	158,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	159,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	160,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	161,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	162,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	163,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	164,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	165,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	166,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	167,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	168,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	169,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	170,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	171,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	172,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	173,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	174,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	175,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	176,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	177,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	178,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	179,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	180,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	181,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	182,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	183,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	184,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	185,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	186,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	187,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	188,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	189,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	190,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	191,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	192,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	193,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	194,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	195,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	196,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	197,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	198,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	199,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	200,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	201,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	202,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	203,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	204,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	205,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	206,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	207,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	208,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	209,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	210,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	211,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	212,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	213,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	214,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	215,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	216,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	217,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	218,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	219,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	220,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	221,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	222,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	223,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	224,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	225,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	226,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	227,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	228,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	229,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	230,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	231,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	232,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	233,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	234,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	235,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	236,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	237,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	238,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	239,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	240,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	241,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	242,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	243,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	244,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	245,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	246,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	247,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	248,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	249,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	250,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	251,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	252,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	253,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	254,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	255,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	256,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	257,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	258,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	259,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	260,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	261,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	262,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	263,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	264,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	265,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	266,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	267,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	268,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	269,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	270,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	271,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	272,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	273,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	274,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	275,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	276,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	277,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	278,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	279,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	280,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	281,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	282,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	283,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	284,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	285,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	286,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	287,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	288,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	289,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	290,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	291,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	292,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	293,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	294,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	295,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	296,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	297,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	298,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	299,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	300,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	301,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	302,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	303,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	304,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	305,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	306,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	307,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	308,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	309,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	310,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	311,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	312,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	313,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	314,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	315,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	316,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	317,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	318,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	319,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	320,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	321,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	322,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	323,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	324,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	325,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	326,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	327,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	328,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	329,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	330,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	331,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	332,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	333,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	334,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	335,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	336,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	337,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	338,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	339,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	340,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	341,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	342,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	343,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	344,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	345,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	346,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	347,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	348,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	349,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	350,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	351,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	352,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	353,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	354,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	355,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	356,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	357,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	358,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	359,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	360,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	361,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	362,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	363,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	364,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	365,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	366,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	367,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	368,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	369,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	370,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	371,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	372,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	373,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	374,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	375,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	376,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	377,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	378,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	379,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	380,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	381,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	382,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	383,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	384,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	385,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	386,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	387,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	388,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	389,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	390,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	391,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	392,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	393,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	394,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	395,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	396,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	397,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	398,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	399,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	400,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	401,
									"scores":	[-8.010319622099, -8.010319622099, -4.9246438803990022, -8.5668806220990028, -6.7326330683990019, -7.5549297383990028, -8.5668806220990028, -8.230111194399, -7.9046026173990036, -6.6401250173990025, -8.4135580173990032, -8.230111194399, -7.9046026173990036, -6.6401250173990025, -8.4135580173990032, -7.9046026173990036, -8.4135580173990032, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.171534811199, -8.444956497399, -8.134434411199, -8.134434411199, -7.9254958973990028, -8.171534811199, -8.1359214451990027, -8.1359214451990027, -8.690995411199, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.690995411199, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.655845614399, -8.690995411199, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399, -8.444956497399]
								}]
						}, {
							"switch":	69,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2908,
							"begin_column":	2,
							"end_line":	2908,
							"end_column":	57,
							"patch_codes":	["if (!__is_neg(\"\", \"L2908\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(intobj->diff->y), sizeof (intobj->diff->y), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(intobj->initialized), sizeof (intobj->initialized), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.d = 0 - (intobj->diff->d * bias);\n", "{\n}\n", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0 * bias) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (0 * ht) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (0 * return_value_used) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = (bias != 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (bias * ht) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (bias * return_value_used) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (bias + 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (bias - 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (bias == 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (dateobj != 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (dateobj == 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht != 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht != bias) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht != return_value_used) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht * bias) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht * return_value_used) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht + 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht + bias) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht + return_value_used) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht - 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht - bias) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht - return_value_used) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht == 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht == bias) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (ht == return_value_used) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (interval != 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (interval == 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (intobj != 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (intobj == 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (object != 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (object != interval) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (object == 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (object == interval) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value != 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value != interval) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value != object) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value != this_ptr) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value == 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value == interval) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value == object) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value == this_ptr) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_ptr != 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_ptr == 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_used != 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_used != bias) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_used * bias) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_used * ht) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_used + 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_used + bias) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_used - 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_used - bias) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_used == 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (return_value_used == bias) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (this_ptr != 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (this_ptr != interval) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (this_ptr != object) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (this_ptr == 0) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (this_ptr == interval) - (intobj->diff->d * bias)", "dateobj->time->relative.d = (this_ptr == object) - (intobj->diff->d * bias)", "dateobj->time->relative.d = 0 - ((&bias)->diff->d * bias)", "dateobj->time->relative.d = 0 - ((&dateobj)->diff->d * bias)", "dateobj->time->relative.d = 0 - ((&ht)->diff->d * bias)", "dateobj->time->relative.d = 0 - ((&interval)->diff->d * bias)", "dateobj->time->relative.d = 0 - ((&intobj)->diff->d * bias)", "dateobj->time->relative.d = 0 - ((&object)->diff->d * bias)", "dateobj->time->relative.d = 0 - ((&return_value)->diff->d * bias)", "dateobj->time->relative.d = 0 - ((&return_value_ptr)->diff->d * bias)", "dateobj->time->relative.d = 0 - ((&return_value_used)->diff->d * bias)", "dateobj->time->relative.d = 0 - ((&this_ptr)->diff->d * bias)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.d = 0 - (intobj->diff->d * (0 * bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (0 * ht))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (0 * return_value_used))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (bias != 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (bias * ht))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (bias * return_value_used))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (bias + 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (bias - 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (bias == 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (dateobj != 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (dateobj == 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht != 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht != bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht != return_value_used))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht * bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht * return_value_used))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht + 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht + bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht + return_value_used))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht - 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht - bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht - return_value_used))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht == 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht == bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht == return_value_used))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (ht))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (interval != 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (interval == 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (intobj != 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (intobj == 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (object != 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (object != interval))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (object == 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (object == interval))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value != 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value != interval))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value != object))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value != this_ptr))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value == 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value == interval))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value == object))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value == this_ptr))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_ptr != 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_ptr == 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_used != 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_used != bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_used * bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_used * ht))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_used + 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_used + bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_used - 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_used - bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_used == 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_used == bias))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (return_value_used))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (this_ptr != 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (this_ptr != interval))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (this_ptr != object))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (this_ptr == 0))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (this_ptr == interval))", "dateobj->time->relative.d = 0 - (intobj->diff->d * (this_ptr == object))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5990993857990023, -6.5990993857990023, -5.3620439649990024, -6.8101464957990023, -5.6561747103990028, -6.0174721283990023, -6.8101464957990023, -5.7797100893990025, -5.5385954529990027, -5.2698527473990024, -5.8843655483990025, -5.7797100893990025, -6.0329503499990027, -5.2698527473990024, -6.0174230273990021, -6.0329503499990027, -6.0174230273990021, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.9917213973990027, -6.1505296073990028, -6.6973705973990025, -6.6973705973990025, -6.233833297399002, -6.9917213973990027, -6.700628037399003, -6.700628037399003, -6.9084177073990016, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.9084177073990016, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.6197896073990021, -6.9084177073990016, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028, -6.1505296073990028]
								}, {
									"case":	2,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	3,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	4,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	5,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	6,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	7,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	8,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	9,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	10,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	11,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	12,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	13,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	14,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	15,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	16,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	17,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	18,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	19,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	20,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	21,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	22,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	23,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	24,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	25,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	26,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	27,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	28,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	29,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	30,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	31,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	32,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	33,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	34,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	35,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	36,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	37,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	38,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	39,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	40,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	41,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	42,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	43,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	44,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	45,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	46,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	47,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	48,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	49,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	50,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	51,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	52,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	53,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	54,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	55,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	56,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	57,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	58,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	59,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	60,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	61,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	62,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	63,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	64,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	65,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	66,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	67,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	68,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	69,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	70,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	71,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	72,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	73,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	74,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	75,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	76,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	77,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	78,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	79,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	80,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	81,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	82,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	83,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	84,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	85,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	86,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	87,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	88,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	89,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	90,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	91,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	92,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	93,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	94,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	95,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	96,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	97,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	98,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	99,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	100,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	101,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	102,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	103,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	104,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	105,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	106,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	107,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	108,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	109,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	110,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	111,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	112,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	113,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	114,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	115,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	116,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	117,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	118,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	119,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	120,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	121,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	122,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	123,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	124,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	125,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	126,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	127,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	128,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	129,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	130,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	131,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	132,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	133,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	134,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	135,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	136,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	137,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	138,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	139,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	140,
									"scores":	[-4.8009421273990025]
								}]
						}]
				}, {
					"line":	2908,
					"switches":	[{
							"switch":	70,
							"types":	[[], [], [], [], [401], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [], [], [], [], [], []],
							"begin_line":	2909,
							"begin_column":	0,
							"end_line":	2909,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2909\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->d), sizeof (intobj->diff->d), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.780739420081483]
								}, {
									"case":	2,
									"scores":	[-4.780739420081483]
								}, {
									"case":	3,
									"scores":	[-4.780739420081483]
								}, {
									"case":	4,
									"scores":	[-4.780739420081483]
								}, {
									"case":	5,
									"scores":	[-4.780739420081483]
								}, {
									"case":	6,
									"scores":	[-4.780739420081483]
								}, {
									"case":	7,
									"scores":	[-4.780739420081483]
								}, {
									"case":	8,
									"scores":	[-4.780739420081483]
								}, {
									"case":	9,
									"scores":	[-4.780739420081483]
								}, {
									"case":	10,
									"scores":	[-4.780739420081483]
								}, {
									"case":	11,
									"scores":	[-4.780739420081483]
								}, {
									"case":	12,
									"scores":	[-4.780739420081483]
								}, {
									"case":	13,
									"scores":	[-4.780739420081483]
								}, {
									"case":	14,
									"scores":	[-4.780739420081483]
								}, {
									"case":	15,
									"scores":	[-4.780739420081483]
								}, {
									"case":	16,
									"scores":	[-4.780739420081483]
								}, {
									"case":	17,
									"scores":	[-4.780739420081483]
								}, {
									"case":	18,
									"scores":	[-4.780739420081483]
								}, {
									"case":	19,
									"scores":	[-4.780739420081483]
								}, {
									"case":	20,
									"scores":	[-4.780739420081483]
								}, {
									"case":	21,
									"scores":	[-4.780739420081483]
								}, {
									"case":	22,
									"scores":	[-4.780739420081483]
								}, {
									"case":	23,
									"scores":	[-4.780739420081483]
								}, {
									"case":	24,
									"scores":	[-4.780739420081483]
								}, {
									"case":	25,
									"scores":	[-4.780739420081483]
								}, {
									"case":	26,
									"scores":	[-4.780739420081483]
								}, {
									"case":	27,
									"scores":	[-4.780739420081483]
								}, {
									"case":	28,
									"scores":	[-4.780739420081483]
								}, {
									"case":	29,
									"scores":	[-4.780739420081483]
								}, {
									"case":	30,
									"scores":	[-4.780739420081483]
								}, {
									"case":	31,
									"scores":	[-4.780739420081483]
								}, {
									"case":	32,
									"scores":	[-4.780739420081483]
								}, {
									"case":	33,
									"scores":	[-4.780739420081483]
								}, {
									"case":	34,
									"scores":	[-4.780739420081483]
								}, {
									"case":	35,
									"scores":	[-4.780739420081483]
								}, {
									"case":	36,
									"scores":	[-4.780739420081483]
								}, {
									"case":	37,
									"scores":	[-4.780739420081483]
								}, {
									"case":	38,
									"scores":	[-4.780739420081483]
								}, {
									"case":	39,
									"scores":	[-4.780739420081483]
								}, {
									"case":	40,
									"scores":	[-4.780739420081483]
								}, {
									"case":	41,
									"scores":	[-4.780739420081483]
								}, {
									"case":	42,
									"scores":	[-4.780739420081483]
								}, {
									"case":	43,
									"scores":	[-4.780739420081483]
								}, {
									"case":	44,
									"scores":	[-4.780739420081483]
								}, {
									"case":	45,
									"scores":	[-4.780739420081483]
								}, {
									"case":	46,
									"scores":	[-4.780739420081483]
								}, {
									"case":	47,
									"scores":	[-4.780739420081483]
								}, {
									"case":	48,
									"scores":	[-4.780739420081483]
								}, {
									"case":	49,
									"scores":	[-4.780739420081483]
								}, {
									"case":	50,
									"scores":	[-4.780739420081483]
								}, {
									"case":	51,
									"scores":	[-4.780739420081483]
								}, {
									"case":	52,
									"scores":	[-4.780739420081483]
								}, {
									"case":	53,
									"scores":	[-4.780739420081483]
								}, {
									"case":	54,
									"scores":	[-4.780739420081483]
								}, {
									"case":	55,
									"scores":	[-4.780739420081483]
								}, {
									"case":	56,
									"scores":	[-4.780739420081483]
								}, {
									"case":	57,
									"scores":	[-4.780739420081483]
								}, {
									"case":	58,
									"scores":	[-4.780739420081483]
								}, {
									"case":	59,
									"scores":	[-4.780739420081483]
								}, {
									"case":	60,
									"scores":	[-4.780739420081483]
								}, {
									"case":	61,
									"scores":	[-4.780739420081483]
								}, {
									"case":	62,
									"scores":	[-4.780739420081483]
								}, {
									"case":	63,
									"scores":	[-4.780739420081483]
								}, {
									"case":	64,
									"scores":	[-4.780739420081483]
								}, {
									"case":	65,
									"scores":	[-4.780739420081483]
								}, {
									"case":	66,
									"scores":	[-4.780739420081483]
								}, {
									"case":	67,
									"scores":	[-4.780739420081483]
								}, {
									"case":	68,
									"scores":	[-4.780739420081483]
								}, {
									"case":	69,
									"scores":	[-4.780739420081483]
								}, {
									"case":	70,
									"scores":	[-4.780739420081483]
								}, {
									"case":	71,
									"scores":	[-4.780739420081483]
								}, {
									"case":	72,
									"scores":	[-4.780739420081483]
								}, {
									"case":	73,
									"scores":	[-4.780739420081483]
								}, {
									"case":	74,
									"scores":	[-4.780739420081483]
								}, {
									"case":	75,
									"scores":	[-4.780739420081483]
								}, {
									"case":	76,
									"scores":	[-4.780739420081483]
								}, {
									"case":	77,
									"scores":	[-4.780739420081483]
								}, {
									"case":	78,
									"scores":	[-4.780739420081483]
								}, {
									"case":	79,
									"scores":	[-4.780739420081483]
								}, {
									"case":	80,
									"scores":	[-4.780739420081483]
								}, {
									"case":	81,
									"scores":	[-4.780739420081483]
								}, {
									"case":	82,
									"scores":	[-4.780739420081483]
								}, {
									"case":	83,
									"scores":	[-4.780739420081483]
								}, {
									"case":	84,
									"scores":	[-4.780739420081483]
								}, {
									"case":	85,
									"scores":	[-4.780739420081483]
								}, {
									"case":	86,
									"scores":	[-4.780739420081483]
								}, {
									"case":	87,
									"scores":	[-4.780739420081483]
								}, {
									"case":	88,
									"scores":	[-4.780739420081483]
								}, {
									"case":	89,
									"scores":	[-4.780739420081483]
								}, {
									"case":	90,
									"scores":	[-4.780739420081483]
								}, {
									"case":	91,
									"scores":	[-4.780739420081483]
								}, {
									"case":	92,
									"scores":	[-4.780739420081483]
								}, {
									"case":	93,
									"scores":	[-4.780739420081483]
								}, {
									"case":	94,
									"scores":	[-4.780739420081483]
								}, {
									"case":	95,
									"scores":	[-4.780739420081483]
								}, {
									"case":	96,
									"scores":	[-4.780739420081483]
								}, {
									"case":	97,
									"scores":	[-4.780739420081483]
								}, {
									"case":	98,
									"scores":	[-4.780739420081483]
								}, {
									"case":	99,
									"scores":	[-4.780739420081483]
								}, {
									"case":	100,
									"scores":	[-4.780739420081483]
								}, {
									"case":	101,
									"scores":	[-4.780739420081483]
								}, {
									"case":	102,
									"scores":	[-4.780739420081483]
								}, {
									"case":	103,
									"scores":	[-4.780739420081483]
								}, {
									"case":	104,
									"scores":	[-4.780739420081483]
								}, {
									"case":	105,
									"scores":	[-4.780739420081483]
								}, {
									"case":	106,
									"scores":	[-4.780739420081483]
								}, {
									"case":	107,
									"scores":	[-4.780739420081483]
								}, {
									"case":	108,
									"scores":	[-4.780739420081483]
								}, {
									"case":	109,
									"scores":	[-4.780739420081483]
								}, {
									"case":	110,
									"scores":	[-4.780739420081483]
								}, {
									"case":	111,
									"scores":	[-4.780739420081483]
								}, {
									"case":	112,
									"scores":	[-4.780739420081483]
								}, {
									"case":	113,
									"scores":	[-4.780739420081483]
								}, {
									"case":	114,
									"scores":	[-4.780739420081483]
								}, {
									"case":	115,
									"scores":	[-4.780739420081483]
								}, {
									"case":	116,
									"scores":	[-4.780739420081483]
								}, {
									"case":	117,
									"scores":	[-4.780739420081483]
								}, {
									"case":	118,
									"scores":	[-4.780739420081483]
								}, {
									"case":	119,
									"scores":	[-4.780739420081483]
								}, {
									"case":	120,
									"scores":	[-4.780739420081483]
								}, {
									"case":	121,
									"scores":	[-4.780739420081483]
								}, {
									"case":	122,
									"scores":	[-4.780739420081483]
								}, {
									"case":	123,
									"scores":	[-4.780739420081483]
								}, {
									"case":	124,
									"scores":	[-4.780739420081483]
								}, {
									"case":	125,
									"scores":	[-4.780739420081483]
								}, {
									"case":	126,
									"scores":	[-4.780739420081483]
								}, {
									"case":	127,
									"scores":	[-4.780739420081483]
								}, {
									"case":	128,
									"scores":	[-4.780739420081483]
								}, {
									"case":	129,
									"scores":	[-4.780739420081483]
								}, {
									"case":	130,
									"scores":	[-4.780739420081483]
								}, {
									"case":	131,
									"scores":	[-4.780739420081483]
								}, {
									"case":	132,
									"scores":	[-4.780739420081483]
								}, {
									"case":	133,
									"scores":	[-4.780739420081483]
								}, {
									"case":	134,
									"scores":	[-4.780739420081483]
								}, {
									"case":	135,
									"scores":	[-4.780739420081483]
								}, {
									"case":	136,
									"scores":	[-4.780739420081483]
								}, {
									"case":	137,
									"scores":	[-4.780739420081483]
								}, {
									"case":	138,
									"scores":	[-4.780739420081483]
								}, {
									"case":	139,
									"scores":	[-4.780739420081483]
								}, {
									"case":	140,
									"scores":	[-4.780739420081483]
								}, {
									"case":	141,
									"scores":	[-4.780739420081483]
								}, {
									"case":	142,
									"scores":	[-4.780739420081483]
								}, {
									"case":	143,
									"scores":	[-4.780739420081483]
								}, {
									"case":	144,
									"scores":	[-4.780739420081483]
								}, {
									"case":	145,
									"scores":	[-4.780739420081483]
								}, {
									"case":	146,
									"scores":	[-4.780739420081483]
								}, {
									"case":	147,
									"scores":	[-4.780739420081483]
								}, {
									"case":	148,
									"scores":	[-4.780739420081483]
								}, {
									"case":	149,
									"scores":	[-4.780739420081483]
								}, {
									"case":	150,
									"scores":	[-4.780739420081483]
								}, {
									"case":	151,
									"scores":	[-4.780739420081483]
								}, {
									"case":	152,
									"scores":	[-4.780739420081483]
								}, {
									"case":	153,
									"scores":	[-4.780739420081483]
								}, {
									"case":	154,
									"scores":	[-4.780739420081483]
								}, {
									"case":	155,
									"scores":	[-4.780739420081483]
								}, {
									"case":	156,
									"scores":	[-4.780739420081483]
								}, {
									"case":	157,
									"scores":	[-4.780739420081483]
								}, {
									"case":	158,
									"scores":	[-4.780739420081483]
								}, {
									"case":	159,
									"scores":	[-4.780739420081483]
								}, {
									"case":	160,
									"scores":	[-4.780739420081483]
								}, {
									"case":	161,
									"scores":	[-4.780739420081483]
								}, {
									"case":	162,
									"scores":	[-4.780739420081483]
								}, {
									"case":	163,
									"scores":	[-4.780739420081483]
								}, {
									"case":	164,
									"scores":	[-4.780739420081483]
								}, {
									"case":	165,
									"scores":	[-4.780739420081483]
								}, {
									"case":	166,
									"scores":	[-4.780739420081483]
								}, {
									"case":	167,
									"scores":	[-4.780739420081483]
								}, {
									"case":	168,
									"scores":	[-4.780739420081483]
								}, {
									"case":	169,
									"scores":	[-4.780739420081483]
								}, {
									"case":	170,
									"scores":	[-4.780739420081483]
								}, {
									"case":	171,
									"scores":	[-4.780739420081483]
								}, {
									"case":	172,
									"scores":	[-4.780739420081483]
								}, {
									"case":	173,
									"scores":	[-4.780739420081483]
								}, {
									"case":	174,
									"scores":	[-4.780739420081483]
								}, {
									"case":	175,
									"scores":	[-4.780739420081483]
								}, {
									"case":	176,
									"scores":	[-4.780739420081483]
								}, {
									"case":	177,
									"scores":	[-4.780739420081483]
								}, {
									"case":	178,
									"scores":	[-4.780739420081483]
								}, {
									"case":	179,
									"scores":	[-4.780739420081483]
								}, {
									"case":	180,
									"scores":	[-4.780739420081483]
								}, {
									"case":	181,
									"scores":	[-4.780739420081483]
								}, {
									"case":	182,
									"scores":	[-4.780739420081483]
								}, {
									"case":	183,
									"scores":	[-4.780739420081483]
								}, {
									"case":	184,
									"scores":	[-4.780739420081483]
								}, {
									"case":	185,
									"scores":	[-4.780739420081483]
								}, {
									"case":	186,
									"scores":	[-4.780739420081483]
								}, {
									"case":	187,
									"scores":	[-4.780739420081483]
								}, {
									"case":	188,
									"scores":	[-4.780739420081483]
								}, {
									"case":	189,
									"scores":	[-4.780739420081483]
								}, {
									"case":	190,
									"scores":	[-4.780739420081483]
								}, {
									"case":	191,
									"scores":	[-4.780739420081483]
								}, {
									"case":	192,
									"scores":	[-4.780739420081483]
								}, {
									"case":	193,
									"scores":	[-4.780739420081483]
								}, {
									"case":	194,
									"scores":	[-4.780739420081483]
								}, {
									"case":	195,
									"scores":	[-4.780739420081483]
								}, {
									"case":	196,
									"scores":	[-4.780739420081483]
								}, {
									"case":	197,
									"scores":	[-4.780739420081483]
								}, {
									"case":	198,
									"scores":	[-4.780739420081483]
								}, {
									"case":	199,
									"scores":	[-4.780739420081483]
								}, {
									"case":	200,
									"scores":	[-4.780739420081483]
								}, {
									"case":	201,
									"scores":	[-4.780739420081483]
								}, {
									"case":	202,
									"scores":	[-4.780739420081483]
								}, {
									"case":	203,
									"scores":	[-4.780739420081483]
								}, {
									"case":	204,
									"scores":	[-4.780739420081483]
								}, {
									"case":	205,
									"scores":	[-4.780739420081483]
								}, {
									"case":	206,
									"scores":	[-4.780739420081483]
								}, {
									"case":	207,
									"scores":	[-4.780739420081483]
								}, {
									"case":	208,
									"scores":	[-4.780739420081483]
								}, {
									"case":	209,
									"scores":	[-4.780739420081483]
								}, {
									"case":	210,
									"scores":	[-4.780739420081483]
								}, {
									"case":	211,
									"scores":	[-4.780739420081483]
								}, {
									"case":	212,
									"scores":	[-4.780739420081483]
								}, {
									"case":	213,
									"scores":	[-4.780739420081483]
								}, {
									"case":	214,
									"scores":	[-4.780739420081483]
								}, {
									"case":	215,
									"scores":	[-4.780739420081483]
								}, {
									"case":	216,
									"scores":	[-4.780739420081483]
								}, {
									"case":	217,
									"scores":	[-4.780739420081483]
								}, {
									"case":	218,
									"scores":	[-4.780739420081483]
								}, {
									"case":	219,
									"scores":	[-4.780739420081483]
								}, {
									"case":	220,
									"scores":	[-4.780739420081483]
								}, {
									"case":	221,
									"scores":	[-4.780739420081483]
								}, {
									"case":	222,
									"scores":	[-4.780739420081483]
								}, {
									"case":	223,
									"scores":	[-4.780739420081483]
								}, {
									"case":	224,
									"scores":	[-4.780739420081483]
								}, {
									"case":	225,
									"scores":	[-4.780739420081483]
								}, {
									"case":	226,
									"scores":	[-4.780739420081483]
								}, {
									"case":	227,
									"scores":	[-4.780739420081483]
								}, {
									"case":	228,
									"scores":	[-4.780739420081483]
								}, {
									"case":	229,
									"scores":	[-4.780739420081483]
								}, {
									"case":	230,
									"scores":	[-4.780739420081483]
								}, {
									"case":	231,
									"scores":	[-4.780739420081483]
								}, {
									"case":	232,
									"scores":	[-4.780739420081483]
								}, {
									"case":	233,
									"scores":	[-4.780739420081483]
								}, {
									"case":	234,
									"scores":	[-4.780739420081483]
								}, {
									"case":	235,
									"scores":	[-4.780739420081483]
								}, {
									"case":	236,
									"scores":	[-4.780739420081483]
								}, {
									"case":	237,
									"scores":	[-4.780739420081483]
								}, {
									"case":	238,
									"scores":	[-4.780739420081483]
								}, {
									"case":	239,
									"scores":	[-4.780739420081483]
								}, {
									"case":	240,
									"scores":	[-4.780739420081483]
								}, {
									"case":	241,
									"scores":	[-4.780739420081483]
								}, {
									"case":	242,
									"scores":	[-4.780739420081483]
								}, {
									"case":	243,
									"scores":	[-4.780739420081483]
								}, {
									"case":	244,
									"scores":	[-4.780739420081483]
								}, {
									"case":	245,
									"scores":	[-4.780739420081483]
								}, {
									"case":	246,
									"scores":	[-4.780739420081483]
								}, {
									"case":	247,
									"scores":	[-4.780739420081483]
								}, {
									"case":	248,
									"scores":	[-4.780739420081483]
								}, {
									"case":	249,
									"scores":	[-4.780739420081483]
								}, {
									"case":	250,
									"scores":	[-4.780739420081483]
								}, {
									"case":	251,
									"scores":	[-4.780739420081483]
								}, {
									"case":	252,
									"scores":	[-4.780739420081483]
								}, {
									"case":	253,
									"scores":	[-4.780739420081483]
								}, {
									"case":	254,
									"scores":	[-4.780739420081483]
								}, {
									"case":	255,
									"scores":	[-4.780739420081483]
								}, {
									"case":	256,
									"scores":	[-4.780739420081483]
								}, {
									"case":	257,
									"scores":	[-4.780739420081483]
								}, {
									"case":	258,
									"scores":	[-4.780739420081483]
								}, {
									"case":	259,
									"scores":	[-4.780739420081483]
								}, {
									"case":	260,
									"scores":	[-4.780739420081483]
								}, {
									"case":	261,
									"scores":	[-4.780739420081483]
								}, {
									"case":	262,
									"scores":	[-4.780739420081483]
								}, {
									"case":	263,
									"scores":	[-4.780739420081483]
								}, {
									"case":	264,
									"scores":	[-4.780739420081483]
								}, {
									"case":	265,
									"scores":	[-4.780739420081483]
								}, {
									"case":	266,
									"scores":	[-4.780739420081483]
								}, {
									"case":	267,
									"scores":	[-4.780739420081483]
								}, {
									"case":	268,
									"scores":	[-4.780739420081483]
								}, {
									"case":	269,
									"scores":	[-4.780739420081483]
								}, {
									"case":	270,
									"scores":	[-4.780739420081483]
								}, {
									"case":	271,
									"scores":	[-4.780739420081483]
								}, {
									"case":	272,
									"scores":	[-4.780739420081483]
								}, {
									"case":	273,
									"scores":	[-4.780739420081483]
								}, {
									"case":	274,
									"scores":	[-4.780739420081483]
								}, {
									"case":	275,
									"scores":	[-4.780739420081483]
								}, {
									"case":	276,
									"scores":	[-4.780739420081483]
								}, {
									"case":	277,
									"scores":	[-4.780739420081483]
								}, {
									"case":	278,
									"scores":	[-4.780739420081483]
								}, {
									"case":	279,
									"scores":	[-4.780739420081483]
								}, {
									"case":	280,
									"scores":	[-4.780739420081483]
								}, {
									"case":	281,
									"scores":	[-4.780739420081483]
								}, {
									"case":	282,
									"scores":	[-4.780739420081483]
								}, {
									"case":	283,
									"scores":	[-4.780739420081483]
								}, {
									"case":	284,
									"scores":	[-4.780739420081483]
								}, {
									"case":	285,
									"scores":	[-4.780739420081483]
								}, {
									"case":	286,
									"scores":	[-4.780739420081483]
								}, {
									"case":	287,
									"scores":	[-4.780739420081483]
								}, {
									"case":	288,
									"scores":	[-4.780739420081483]
								}, {
									"case":	289,
									"scores":	[-4.780739420081483]
								}, {
									"case":	290,
									"scores":	[-4.780739420081483]
								}, {
									"case":	291,
									"scores":	[-4.780739420081483]
								}, {
									"case":	292,
									"scores":	[-4.780739420081483]
								}, {
									"case":	293,
									"scores":	[-4.780739420081483]
								}, {
									"case":	294,
									"scores":	[-4.780739420081483]
								}, {
									"case":	295,
									"scores":	[-4.780739420081483]
								}, {
									"case":	296,
									"scores":	[-4.780739420081483]
								}, {
									"case":	297,
									"scores":	[-4.780739420081483]
								}, {
									"case":	298,
									"scores":	[-4.780739420081483]
								}, {
									"case":	299,
									"scores":	[-4.780739420081483]
								}, {
									"case":	300,
									"scores":	[-4.780739420081483]
								}, {
									"case":	301,
									"scores":	[-4.780739420081483]
								}, {
									"case":	302,
									"scores":	[-4.780739420081483]
								}, {
									"case":	303,
									"scores":	[-4.780739420081483]
								}, {
									"case":	304,
									"scores":	[-4.780739420081483]
								}, {
									"case":	305,
									"scores":	[-4.780739420081483]
								}, {
									"case":	306,
									"scores":	[-4.780739420081483]
								}, {
									"case":	307,
									"scores":	[-4.780739420081483]
								}, {
									"case":	308,
									"scores":	[-4.780739420081483]
								}, {
									"case":	309,
									"scores":	[-4.780739420081483]
								}, {
									"case":	310,
									"scores":	[-4.780739420081483]
								}, {
									"case":	311,
									"scores":	[-4.780739420081483]
								}, {
									"case":	312,
									"scores":	[-4.780739420081483]
								}, {
									"case":	313,
									"scores":	[-4.780739420081483]
								}, {
									"case":	314,
									"scores":	[-4.780739420081483]
								}, {
									"case":	315,
									"scores":	[-4.780739420081483]
								}, {
									"case":	316,
									"scores":	[-4.780739420081483]
								}, {
									"case":	317,
									"scores":	[-4.780739420081483]
								}, {
									"case":	318,
									"scores":	[-4.780739420081483]
								}, {
									"case":	319,
									"scores":	[-4.780739420081483]
								}, {
									"case":	320,
									"scores":	[-4.780739420081483]
								}, {
									"case":	321,
									"scores":	[-4.780739420081483]
								}, {
									"case":	322,
									"scores":	[-4.780739420081483]
								}, {
									"case":	323,
									"scores":	[-4.780739420081483]
								}, {
									"case":	324,
									"scores":	[-4.780739420081483]
								}, {
									"case":	325,
									"scores":	[-4.780739420081483]
								}, {
									"case":	326,
									"scores":	[-4.780739420081483]
								}, {
									"case":	327,
									"scores":	[-4.780739420081483]
								}, {
									"case":	328,
									"scores":	[-4.780739420081483]
								}, {
									"case":	329,
									"scores":	[-4.780739420081483]
								}, {
									"case":	330,
									"scores":	[-4.780739420081483]
								}, {
									"case":	331,
									"scores":	[-4.780739420081483]
								}, {
									"case":	332,
									"scores":	[-4.780739420081483]
								}, {
									"case":	333,
									"scores":	[-4.780739420081483]
								}, {
									"case":	334,
									"scores":	[-4.780739420081483]
								}, {
									"case":	335,
									"scores":	[-4.780739420081483]
								}, {
									"case":	336,
									"scores":	[-4.780739420081483]
								}, {
									"case":	337,
									"scores":	[-4.780739420081483]
								}, {
									"case":	338,
									"scores":	[-4.780739420081483]
								}, {
									"case":	339,
									"scores":	[-4.780739420081483]
								}, {
									"case":	340,
									"scores":	[-4.780739420081483]
								}, {
									"case":	341,
									"scores":	[-4.780739420081483]
								}, {
									"case":	342,
									"scores":	[-4.780739420081483]
								}, {
									"case":	343,
									"scores":	[-4.780739420081483]
								}, {
									"case":	344,
									"scores":	[-4.780739420081483]
								}, {
									"case":	345,
									"scores":	[-4.780739420081483]
								}, {
									"case":	346,
									"scores":	[-4.780739420081483]
								}, {
									"case":	347,
									"scores":	[-4.780739420081483]
								}, {
									"case":	348,
									"scores":	[-4.780739420081483]
								}, {
									"case":	349,
									"scores":	[-4.780739420081483]
								}, {
									"case":	350,
									"scores":	[-4.780739420081483]
								}, {
									"case":	351,
									"scores":	[-4.780739420081483]
								}, {
									"case":	352,
									"scores":	[-4.780739420081483]
								}, {
									"case":	353,
									"scores":	[-4.780739420081483]
								}, {
									"case":	354,
									"scores":	[-4.780739420081483]
								}, {
									"case":	355,
									"scores":	[-4.780739420081483]
								}, {
									"case":	356,
									"scores":	[-4.780739420081483]
								}, {
									"case":	357,
									"scores":	[-4.780739420081483]
								}, {
									"case":	358,
									"scores":	[-4.780739420081483]
								}, {
									"case":	359,
									"scores":	[-4.780739420081483]
								}, {
									"case":	360,
									"scores":	[-4.780739420081483]
								}, {
									"case":	361,
									"scores":	[-4.780739420081483]
								}, {
									"case":	362,
									"scores":	[-4.780739420081483]
								}, {
									"case":	363,
									"scores":	[-4.780739420081483]
								}, {
									"case":	364,
									"scores":	[-4.780739420081483]
								}, {
									"case":	365,
									"scores":	[-4.780739420081483]
								}, {
									"case":	366,
									"scores":	[-4.780739420081483]
								}, {
									"case":	367,
									"scores":	[-4.780739420081483]
								}, {
									"case":	368,
									"scores":	[-4.780739420081483]
								}, {
									"case":	369,
									"scores":	[-4.780739420081483]
								}, {
									"case":	370,
									"scores":	[-4.780739420081483]
								}, {
									"case":	371,
									"scores":	[-4.780739420081483]
								}, {
									"case":	372,
									"scores":	[-4.780739420081483]
								}, {
									"case":	373,
									"scores":	[-4.780739420081483]
								}, {
									"case":	374,
									"scores":	[-4.780739420081483]
								}, {
									"case":	375,
									"scores":	[-4.780739420081483]
								}, {
									"case":	376,
									"scores":	[-4.780739420081483]
								}, {
									"case":	377,
									"scores":	[-4.780739420081483]
								}, {
									"case":	378,
									"scores":	[-4.780739420081483]
								}, {
									"case":	379,
									"scores":	[-4.780739420081483]
								}, {
									"case":	380,
									"scores":	[-4.780739420081483]
								}, {
									"case":	381,
									"scores":	[-4.780739420081483]
								}, {
									"case":	382,
									"scores":	[-4.780739420081483]
								}, {
									"case":	383,
									"scores":	[-4.780739420081483]
								}, {
									"case":	384,
									"scores":	[-4.780739420081483]
								}, {
									"case":	385,
									"scores":	[-4.780739420081483]
								}, {
									"case":	386,
									"scores":	[-4.780739420081483]
								}, {
									"case":	387,
									"scores":	[-4.780739420081483]
								}, {
									"case":	388,
									"scores":	[-4.780739420081483]
								}, {
									"case":	389,
									"scores":	[-4.780739420081483]
								}, {
									"case":	390,
									"scores":	[-4.780739420081483]
								}, {
									"case":	391,
									"scores":	[-4.780739420081483]
								}, {
									"case":	392,
									"scores":	[-4.780739420081483]
								}, {
									"case":	393,
									"scores":	[-4.780739420081483]
								}, {
									"case":	394,
									"scores":	[-4.780739420081483]
								}, {
									"case":	395,
									"scores":	[-4.780739420081483]
								}, {
									"case":	396,
									"scores":	[-4.780739420081483]
								}, {
									"case":	397,
									"scores":	[-4.780739420081483]
								}, {
									"case":	398,
									"scores":	[-4.780739420081483]
								}, {
									"case":	399,
									"scores":	[-4.780739420081483]
								}, {
									"case":	400,
									"scores":	[-4.780739420081483]
								}, {
									"case":	401,
									"scores":	[-7.4893149147814828, -7.4893149147814828, -5.4402220580814831, -8.0458759147814831, -6.2116283610814822, -7.0339250310814823, -8.0458759147814831, -7.7091064870814829, -7.383597910081483, -6.1191203100814828, -7.8925533100814835, -7.7091064870814829, -7.383597910081483, -6.1191203100814828, -7.8925533100814835, -7.7091064870814829, -6.1191203100814828, -8.0219317830814845, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.6505301038814828, -7.6134297038814829, -7.9239517900814835, -7.6134297038814829, -7.4044911900814832, -7.6505301038814828, -7.614916737881483, -7.614916737881483, -8.1699907038814832, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -8.1699907038814832, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -8.13484090708148, -8.1699907038814832, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835, -7.9239517900814835]
								}]
						}, {
							"switch":	71,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2909,
							"begin_column":	2,
							"end_line":	2909,
							"end_column":	57,
							"patch_codes":	["if (!__is_neg(\"\", \"L2909\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->d), sizeof (intobj->diff->d), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(intobj->diff->m), sizeof (intobj->diff->m), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.h = 0 - (intobj->diff->h * bias);\n", "{\n}\n", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0 * bias) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (0 * ht) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (0 * return_value_used) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = (bias != 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (bias * ht) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (bias * return_value_used) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (bias + 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (bias - 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (bias == 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (dateobj != 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (dateobj == 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht != 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht != bias) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht != return_value_used) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht * bias) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht * return_value_used) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht + 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht + bias) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht + return_value_used) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht - 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht - bias) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht - return_value_used) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht == 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht == bias) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (ht == return_value_used) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (interval != 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (interval == 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (intobj != 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (intobj == 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (object != 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (object != interval) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (object == 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (object == interval) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value != 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value != interval) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value != object) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value != this_ptr) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value == 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value == interval) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value == object) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value == this_ptr) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_ptr != 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_ptr == 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_used != 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_used != bias) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_used * bias) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_used * ht) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_used + 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_used + bias) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_used - 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_used - bias) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_used == 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (return_value_used == bias) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (this_ptr != 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (this_ptr != interval) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (this_ptr != object) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (this_ptr == 0) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (this_ptr == interval) - (intobj->diff->h * bias)", "dateobj->time->relative.h = (this_ptr == object) - (intobj->diff->h * bias)", "dateobj->time->relative.h = 0 - ((&bias)->diff->h * bias)", "dateobj->time->relative.h = 0 - ((&dateobj)->diff->h * bias)", "dateobj->time->relative.h = 0 - ((&ht)->diff->h * bias)", "dateobj->time->relative.h = 0 - ((&interval)->diff->h * bias)", "dateobj->time->relative.h = 0 - ((&intobj)->diff->h * bias)", "dateobj->time->relative.h = 0 - ((&object)->diff->h * bias)", "dateobj->time->relative.h = 0 - ((&return_value)->diff->h * bias)", "dateobj->time->relative.h = 0 - ((&return_value_ptr)->diff->h * bias)", "dateobj->time->relative.h = 0 - ((&return_value_used)->diff->h * bias)", "dateobj->time->relative.h = 0 - ((&this_ptr)->diff->h * bias)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * (0 * bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (0 * ht))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (0 * return_value_used))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (bias != 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (bias * ht))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (bias * return_value_used))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (bias + 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (bias - 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (bias == 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (dateobj != 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (dateobj == 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht != 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht != bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht != return_value_used))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht * bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht * return_value_used))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht + 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht + bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht + return_value_used))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht - 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht - bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht - return_value_used))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht == 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht == bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht == return_value_used))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (ht))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (interval != 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (interval == 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (intobj != 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (intobj == 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (object != 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (object != interval))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (object == 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (object == interval))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value != 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value != interval))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value != object))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value != this_ptr))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value == 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value == interval))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value == object))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value == this_ptr))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_ptr != 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_ptr == 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_used != 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_used != bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_used * bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_used * ht))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_used + 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_used + bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_used - 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_used - bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_used == 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_used == bias))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (return_value_used))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (this_ptr != 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (this_ptr != interval))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (this_ptr != object))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (this_ptr == 0))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (this_ptr == interval))", "dateobj->time->relative.h = 0 - (intobj->diff->h * (this_ptr == object))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3232296784814821, -6.3232296784814821, -4.6808591176814831, -6.534276788481483, -5.3803050030814834, -5.7416024210814829, -6.534276788481483, -5.5038403820814832, -5.2627257456814833, -4.9939830400814831, -5.6084958410814831, -5.5038403820814832, -5.7570806426814833, -4.9939830400814831, -5.7415533200814828, -5.5038403820814832, -4.9939830400814831, -5.8711786440814828, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -6.7158516900814824, -6.4215008900814832, -5.8746599000814825, -6.4215008900814832, -5.9579635900814827, -6.7158516900814824, -6.4247583300814828, -6.4247583300814828, -6.6325480000814832, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -6.6325480000814832, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -6.3439199000814828, -6.6325480000814832, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825, -5.8746599000814825]
								}, {
									"case":	2,
									"scores":	[-4.780739420081483]
								}, {
									"case":	3,
									"scores":	[-4.780739420081483]
								}, {
									"case":	4,
									"scores":	[-4.780739420081483]
								}, {
									"case":	5,
									"scores":	[-4.780739420081483]
								}, {
									"case":	6,
									"scores":	[-4.780739420081483]
								}, {
									"case":	7,
									"scores":	[-4.780739420081483]
								}, {
									"case":	8,
									"scores":	[-4.780739420081483]
								}, {
									"case":	9,
									"scores":	[-4.780739420081483]
								}, {
									"case":	10,
									"scores":	[-4.780739420081483]
								}, {
									"case":	11,
									"scores":	[-4.780739420081483]
								}, {
									"case":	12,
									"scores":	[-4.780739420081483]
								}, {
									"case":	13,
									"scores":	[-4.780739420081483]
								}, {
									"case":	14,
									"scores":	[-4.780739420081483]
								}, {
									"case":	15,
									"scores":	[-4.780739420081483]
								}, {
									"case":	16,
									"scores":	[-4.780739420081483]
								}, {
									"case":	17,
									"scores":	[-4.780739420081483]
								}, {
									"case":	18,
									"scores":	[-4.780739420081483]
								}, {
									"case":	19,
									"scores":	[-4.780739420081483]
								}, {
									"case":	20,
									"scores":	[-4.780739420081483]
								}, {
									"case":	21,
									"scores":	[-4.780739420081483]
								}, {
									"case":	22,
									"scores":	[-4.780739420081483]
								}, {
									"case":	23,
									"scores":	[-4.780739420081483]
								}, {
									"case":	24,
									"scores":	[-4.780739420081483]
								}, {
									"case":	25,
									"scores":	[-4.780739420081483]
								}, {
									"case":	26,
									"scores":	[-4.780739420081483]
								}, {
									"case":	27,
									"scores":	[-4.780739420081483]
								}, {
									"case":	28,
									"scores":	[-4.780739420081483]
								}, {
									"case":	29,
									"scores":	[-4.780739420081483]
								}, {
									"case":	30,
									"scores":	[-4.780739420081483]
								}, {
									"case":	31,
									"scores":	[-4.780739420081483]
								}, {
									"case":	32,
									"scores":	[-4.780739420081483]
								}, {
									"case":	33,
									"scores":	[-4.780739420081483]
								}, {
									"case":	34,
									"scores":	[-4.780739420081483]
								}, {
									"case":	35,
									"scores":	[-4.780739420081483]
								}, {
									"case":	36,
									"scores":	[-4.780739420081483]
								}, {
									"case":	37,
									"scores":	[-4.780739420081483]
								}, {
									"case":	38,
									"scores":	[-4.780739420081483]
								}, {
									"case":	39,
									"scores":	[-4.780739420081483]
								}, {
									"case":	40,
									"scores":	[-4.780739420081483]
								}, {
									"case":	41,
									"scores":	[-4.780739420081483]
								}, {
									"case":	42,
									"scores":	[-4.780739420081483]
								}, {
									"case":	43,
									"scores":	[-4.780739420081483]
								}, {
									"case":	44,
									"scores":	[-4.780739420081483]
								}, {
									"case":	45,
									"scores":	[-4.780739420081483]
								}, {
									"case":	46,
									"scores":	[-4.780739420081483]
								}, {
									"case":	47,
									"scores":	[-4.780739420081483]
								}, {
									"case":	48,
									"scores":	[-4.780739420081483]
								}, {
									"case":	49,
									"scores":	[-4.780739420081483]
								}, {
									"case":	50,
									"scores":	[-4.780739420081483]
								}, {
									"case":	51,
									"scores":	[-4.780739420081483]
								}, {
									"case":	52,
									"scores":	[-4.780739420081483]
								}, {
									"case":	53,
									"scores":	[-4.780739420081483]
								}, {
									"case":	54,
									"scores":	[-4.780739420081483]
								}, {
									"case":	55,
									"scores":	[-4.780739420081483]
								}, {
									"case":	56,
									"scores":	[-4.780739420081483]
								}, {
									"case":	57,
									"scores":	[-4.780739420081483]
								}, {
									"case":	58,
									"scores":	[-4.780739420081483]
								}, {
									"case":	59,
									"scores":	[-4.780739420081483]
								}, {
									"case":	60,
									"scores":	[-4.780739420081483]
								}, {
									"case":	61,
									"scores":	[-4.780739420081483]
								}, {
									"case":	62,
									"scores":	[-4.780739420081483]
								}, {
									"case":	63,
									"scores":	[-4.780739420081483]
								}, {
									"case":	64,
									"scores":	[-4.780739420081483]
								}, {
									"case":	65,
									"scores":	[-4.780739420081483]
								}, {
									"case":	66,
									"scores":	[-4.780739420081483]
								}, {
									"case":	67,
									"scores":	[-4.780739420081483]
								}, {
									"case":	68,
									"scores":	[-4.780739420081483]
								}, {
									"case":	69,
									"scores":	[-4.780739420081483]
								}, {
									"case":	70,
									"scores":	[-4.780739420081483]
								}, {
									"case":	71,
									"scores":	[-4.780739420081483]
								}, {
									"case":	72,
									"scores":	[-4.780739420081483]
								}, {
									"case":	73,
									"scores":	[-4.780739420081483]
								}, {
									"case":	74,
									"scores":	[-4.780739420081483]
								}, {
									"case":	75,
									"scores":	[-4.780739420081483]
								}, {
									"case":	76,
									"scores":	[-4.780739420081483]
								}, {
									"case":	77,
									"scores":	[-4.780739420081483]
								}, {
									"case":	78,
									"scores":	[-4.780739420081483]
								}, {
									"case":	79,
									"scores":	[-4.780739420081483]
								}, {
									"case":	80,
									"scores":	[-4.780739420081483]
								}, {
									"case":	81,
									"scores":	[-4.780739420081483]
								}, {
									"case":	82,
									"scores":	[-4.780739420081483]
								}, {
									"case":	83,
									"scores":	[-4.780739420081483]
								}, {
									"case":	84,
									"scores":	[-4.780739420081483]
								}, {
									"case":	85,
									"scores":	[-4.780739420081483]
								}, {
									"case":	86,
									"scores":	[-4.780739420081483]
								}, {
									"case":	87,
									"scores":	[-4.780739420081483]
								}, {
									"case":	88,
									"scores":	[-4.780739420081483]
								}, {
									"case":	89,
									"scores":	[-4.780739420081483]
								}, {
									"case":	90,
									"scores":	[-4.780739420081483]
								}, {
									"case":	91,
									"scores":	[-4.780739420081483]
								}, {
									"case":	92,
									"scores":	[-4.780739420081483]
								}, {
									"case":	93,
									"scores":	[-4.780739420081483]
								}, {
									"case":	94,
									"scores":	[-4.780739420081483]
								}, {
									"case":	95,
									"scores":	[-4.780739420081483]
								}, {
									"case":	96,
									"scores":	[-4.780739420081483]
								}, {
									"case":	97,
									"scores":	[-4.780739420081483]
								}, {
									"case":	98,
									"scores":	[-4.780739420081483]
								}, {
									"case":	99,
									"scores":	[-4.780739420081483]
								}, {
									"case":	100,
									"scores":	[-4.780739420081483]
								}, {
									"case":	101,
									"scores":	[-4.780739420081483]
								}, {
									"case":	102,
									"scores":	[-4.780739420081483]
								}, {
									"case":	103,
									"scores":	[-4.780739420081483]
								}, {
									"case":	104,
									"scores":	[-4.780739420081483]
								}, {
									"case":	105,
									"scores":	[-4.780739420081483]
								}, {
									"case":	106,
									"scores":	[-4.780739420081483]
								}, {
									"case":	107,
									"scores":	[-4.780739420081483]
								}, {
									"case":	108,
									"scores":	[-4.780739420081483]
								}, {
									"case":	109,
									"scores":	[-4.780739420081483]
								}, {
									"case":	110,
									"scores":	[-4.780739420081483]
								}, {
									"case":	111,
									"scores":	[-4.780739420081483]
								}, {
									"case":	112,
									"scores":	[-4.780739420081483]
								}, {
									"case":	113,
									"scores":	[-4.780739420081483]
								}, {
									"case":	114,
									"scores":	[-4.780739420081483]
								}, {
									"case":	115,
									"scores":	[-4.780739420081483]
								}, {
									"case":	116,
									"scores":	[-4.780739420081483]
								}, {
									"case":	117,
									"scores":	[-4.780739420081483]
								}, {
									"case":	118,
									"scores":	[-4.780739420081483]
								}, {
									"case":	119,
									"scores":	[-4.780739420081483]
								}, {
									"case":	120,
									"scores":	[-4.780739420081483]
								}, {
									"case":	121,
									"scores":	[-4.780739420081483]
								}, {
									"case":	122,
									"scores":	[-4.780739420081483]
								}, {
									"case":	123,
									"scores":	[-4.780739420081483]
								}, {
									"case":	124,
									"scores":	[-4.780739420081483]
								}, {
									"case":	125,
									"scores":	[-4.780739420081483]
								}, {
									"case":	126,
									"scores":	[-4.780739420081483]
								}, {
									"case":	127,
									"scores":	[-4.780739420081483]
								}, {
									"case":	128,
									"scores":	[-4.780739420081483]
								}, {
									"case":	129,
									"scores":	[-4.780739420081483]
								}, {
									"case":	130,
									"scores":	[-4.780739420081483]
								}, {
									"case":	131,
									"scores":	[-4.780739420081483]
								}, {
									"case":	132,
									"scores":	[-4.780739420081483]
								}, {
									"case":	133,
									"scores":	[-4.780739420081483]
								}, {
									"case":	134,
									"scores":	[-4.780739420081483]
								}, {
									"case":	135,
									"scores":	[-4.780739420081483]
								}, {
									"case":	136,
									"scores":	[-4.780739420081483]
								}, {
									"case":	137,
									"scores":	[-4.780739420081483]
								}, {
									"case":	138,
									"scores":	[-4.780739420081483]
								}, {
									"case":	139,
									"scores":	[-4.780739420081483]
								}, {
									"case":	140,
									"scores":	[-4.780739420081483]
								}]
						}]
				}, {
					"line":	2909,
					"switches":	[{
							"switch":	72,
							"types":	[[], [], [], [], [401], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [], [], [], [], [], []],
							"begin_line":	2910,
							"begin_column":	0,
							"end_line":	2910,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2910\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	2,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	3,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	4,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	5,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	6,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	7,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	8,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	9,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	10,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	11,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	12,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	13,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	14,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	15,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	16,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	17,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	18,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	19,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	20,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	21,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	22,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	23,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	24,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	25,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	26,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	27,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	28,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	29,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	30,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	31,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	32,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	33,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	34,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	35,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	36,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	37,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	38,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	39,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	40,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	41,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	42,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	43,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	44,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	45,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	46,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	47,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	48,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	49,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	50,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	51,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	52,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	53,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	54,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	55,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	56,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	57,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	58,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	59,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	60,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	61,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	62,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	63,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	64,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	65,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	66,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	67,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	68,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	69,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	70,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	71,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	72,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	73,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	74,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	75,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	76,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	77,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	78,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	79,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	80,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	81,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	82,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	83,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	84,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	85,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	86,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	87,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	88,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	89,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	90,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	91,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	92,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	93,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	94,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	95,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	96,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	97,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	98,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	99,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	100,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	101,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	102,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	103,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	104,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	105,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	106,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	107,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	108,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	109,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	110,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	111,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	112,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	113,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	114,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	115,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	116,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	117,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	118,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	119,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	120,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	121,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	122,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	123,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	124,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	125,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	126,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	127,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	128,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	129,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	130,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	131,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	132,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	133,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	134,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	135,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	136,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	137,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	138,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	139,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	140,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	141,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	142,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	143,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	144,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	145,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	146,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	147,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	148,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	149,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	150,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	151,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	152,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	153,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	154,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	155,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	156,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	157,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	158,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	159,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	160,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	161,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	162,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	163,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	164,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	165,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	166,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	167,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	168,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	169,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	170,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	171,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	172,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	173,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	174,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	175,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	176,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	177,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	178,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	179,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	180,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	181,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	182,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	183,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	184,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	185,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	186,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	187,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	188,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	189,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	190,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	191,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	192,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	193,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	194,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	195,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	196,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	197,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	198,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	199,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	200,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	201,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	202,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	203,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	204,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	205,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	206,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	207,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	208,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	209,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	210,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	211,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	212,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	213,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	214,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	215,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	216,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	217,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	218,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	219,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	220,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	221,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	222,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	223,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	224,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	225,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	226,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	227,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	228,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	229,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	230,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	231,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	232,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	233,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	234,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	235,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	236,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	237,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	238,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	239,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	240,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	241,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	242,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	243,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	244,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	245,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	246,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	247,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	248,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	249,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	250,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	251,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	252,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	253,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	254,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	255,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	256,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	257,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	258,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	259,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	260,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	261,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	262,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	263,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	264,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	265,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	266,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	267,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	268,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	269,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	270,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	271,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	272,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	273,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	274,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	275,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	276,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	277,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	278,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	279,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	280,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	281,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	282,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	283,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	284,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	285,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	286,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	287,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	288,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	289,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	290,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	291,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	292,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	293,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	294,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	295,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	296,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	297,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	298,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	299,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	300,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	301,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	302,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	303,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	304,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	305,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	306,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	307,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	308,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	309,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	310,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	311,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	312,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	313,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	314,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	315,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	316,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	317,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	318,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	319,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	320,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	321,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	322,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	323,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	324,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	325,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	326,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	327,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	328,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	329,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	330,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	331,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	332,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	333,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	334,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	335,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	336,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	337,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	338,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	339,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	340,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	341,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	342,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	343,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	344,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	345,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	346,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	347,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	348,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	349,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	350,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	351,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	352,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	353,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	354,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	355,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	356,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	357,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	358,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	359,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	360,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	361,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	362,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	363,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	364,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	365,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	366,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	367,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	368,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	369,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	370,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	371,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	372,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	373,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	374,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	375,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	376,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	377,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	378,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	379,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	380,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	381,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	382,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	383,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	384,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	385,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	386,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	387,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	388,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	389,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	390,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	391,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	392,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	393,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	394,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	395,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	396,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	397,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	398,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	399,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	400,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	401,
									"scores":	[-7.4691122074639633, -7.4691122074639633, -5.4200193507639636, -8.0256732074639636, -6.1914256537639627, -7.0137223237639628, -8.0256732074639636, -7.6889037797639634, -7.3633952027639635, -6.0989176027639633, -7.872350602763964, -7.6889037797639634, -6.0989176027639633, -8.001729075763965, -7.6889037797639634, -6.0989176027639633, -8.0043275827639633, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.6303273965639633, -7.5932269965639634, -7.903749082763964, -7.903749082763964, -7.5932269965639634, -7.3842884827639637, -7.6303273965639633, -7.5947140305639635, -7.5947140305639635, -8.1497879965639637, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -8.1497879965639637, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -8.1146381997639629, -8.1497879965639637, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964, -7.903749082763964]
								}]
						}, {
							"switch":	73,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2910,
							"begin_column":	2,
							"end_line":	2910,
							"end_column":	57,
							"patch_codes":	["if (!__is_neg(\"\", \"L2910\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->h), sizeof (intobj->diff->h), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.i = 0 - (intobj->diff->i * bias);\n", "{\n}\n", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0 * bias) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (0 * ht) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (0 * return_value_used) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = (bias != 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (bias * ht) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (bias * return_value_used) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (bias + 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (bias - 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (bias == 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (dateobj != 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (dateobj == 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht != 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht != bias) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht != return_value_used) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht * bias) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht * return_value_used) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht + 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht + bias) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht + return_value_used) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht - 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht - bias) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht - return_value_used) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht == 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht == bias) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (ht == return_value_used) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (interval != 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (interval == 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (intobj != 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (intobj == 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (object != 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (object != interval) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (object == 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (object == interval) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value != 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value != interval) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value != object) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value != this_ptr) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value == 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value == interval) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value == object) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value == this_ptr) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_ptr != 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_ptr == 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_used != 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_used != bias) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_used * bias) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_used * ht) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_used + 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_used + bias) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_used - 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_used - bias) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_used == 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (return_value_used == bias) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (this_ptr != 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (this_ptr != interval) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (this_ptr != object) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (this_ptr == 0) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (this_ptr == interval) - (intobj->diff->i * bias)", "dateobj->time->relative.i = (this_ptr == object) - (intobj->diff->i * bias)", "dateobj->time->relative.i = 0 - ((&bias)->diff->i * bias)", "dateobj->time->relative.i = 0 - ((&dateobj)->diff->i * bias)", "dateobj->time->relative.i = 0 - ((&ht)->diff->i * bias)", "dateobj->time->relative.i = 0 - ((&interval)->diff->i * bias)", "dateobj->time->relative.i = 0 - ((&intobj)->diff->i * bias)", "dateobj->time->relative.i = 0 - ((&object)->diff->i * bias)", "dateobj->time->relative.i = 0 - ((&return_value)->diff->i * bias)", "dateobj->time->relative.i = 0 - ((&return_value_ptr)->diff->i * bias)", "dateobj->time->relative.i = 0 - ((&return_value_used)->diff->i * bias)", "dateobj->time->relative.i = 0 - ((&this_ptr)->diff->i * bias)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.i = 0 - (intobj->diff->i * (0 * bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (0 * ht))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (0 * return_value_used))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (bias != 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (bias * ht))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (bias * return_value_used))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (bias + 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (bias - 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (bias == 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (dateobj != 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (dateobj == 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht != 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht != bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht != return_value_used))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht * bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht * return_value_used))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht + 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht + bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht + return_value_used))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht - 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht - bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht - return_value_used))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht == 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht == bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht == return_value_used))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (ht))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (interval != 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (interval == 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (intobj != 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (intobj == 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (object != 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (object != interval))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (object == 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (object == interval))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value != 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value != interval))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value != object))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value != this_ptr))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value == 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value == interval))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value == object))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value == this_ptr))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_ptr != 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_ptr == 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_used != 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_used != bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_used * bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_used * ht))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_used + 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_used + bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_used - 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_used - bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_used == 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_used == bias))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (return_value_used))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (this_ptr != 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (this_ptr != interval))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (this_ptr != object))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (this_ptr == 0))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (this_ptr == interval))", "dateobj->time->relative.i = 0 - (intobj->diff->i * (this_ptr == object))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3030269711639626, -6.3030269711639626, -4.6606564103639636, -6.5140740811639635, -5.3601022957639639, -5.7213997137639634, -6.5140740811639635, -5.4836376747639637, -5.2425230383639638, -4.9737803327639636, -5.5882931337639636, -5.4836376747639637, -4.9737803327639636, -5.8509759367639633, -5.4836376747639637, -4.9737803327639636, -5.854109856763964, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -6.6956489827639629, -6.4012981827639637, -5.854457192763963, -5.854457192763963, -6.4012981827639637, -5.9377608827639632, -6.6956489827639629, -6.4045556227639633, -6.4045556227639633, -6.6123452927639637, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -6.6123452927639637, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -6.3237171927639633, -6.6123452927639637, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963, -5.854457192763963]
								}, {
									"case":	2,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	3,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	4,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	5,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	6,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	7,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	8,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	9,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	10,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	11,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	12,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	13,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	14,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	15,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	16,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	17,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	18,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	19,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	20,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	21,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	22,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	23,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	24,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	25,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	26,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	27,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	28,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	29,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	30,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	31,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	32,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	33,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	34,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	35,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	36,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	37,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	38,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	39,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	40,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	41,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	42,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	43,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	44,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	45,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	46,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	47,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	48,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	49,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	50,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	51,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	52,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	53,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	54,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	55,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	56,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	57,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	58,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	59,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	60,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	61,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	62,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	63,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	64,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	65,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	66,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	67,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	68,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	69,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	70,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	71,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	72,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	73,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	74,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	75,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	76,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	77,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	78,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	79,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	80,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	81,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	82,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	83,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	84,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	85,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	86,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	87,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	88,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	89,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	90,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	91,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	92,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	93,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	94,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	95,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	96,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	97,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	98,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	99,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	100,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	101,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	102,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	103,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	104,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	105,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	106,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	107,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	108,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	109,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	110,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	111,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	112,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	113,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	114,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	115,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	116,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	117,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	118,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	119,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	120,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	121,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	122,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	123,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	124,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	125,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	126,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	127,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	128,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	129,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	130,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	131,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	132,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	133,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	134,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	135,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	136,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	137,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	138,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	139,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	140,
									"scores":	[-4.7605367127639635]
								}]
						}]
				}, {
					"line":	2910,
					"switches":	[{
							"switch":	74,
							"types":	[[], [], [], [], [401], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [], [], [], [], [], []],
							"begin_line":	2911,
							"begin_column":	0,
							"end_line":	2911,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj, 0, sizeof (*(intobj)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2911\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.740334005446444]
								}, {
									"case":	2,
									"scores":	[-4.740334005446444]
								}, {
									"case":	3,
									"scores":	[-4.740334005446444]
								}, {
									"case":	4,
									"scores":	[-4.740334005446444]
								}, {
									"case":	5,
									"scores":	[-4.740334005446444]
								}, {
									"case":	6,
									"scores":	[-4.740334005446444]
								}, {
									"case":	7,
									"scores":	[-4.740334005446444]
								}, {
									"case":	8,
									"scores":	[-4.740334005446444]
								}, {
									"case":	9,
									"scores":	[-4.740334005446444]
								}, {
									"case":	10,
									"scores":	[-4.740334005446444]
								}, {
									"case":	11,
									"scores":	[-4.740334005446444]
								}, {
									"case":	12,
									"scores":	[-4.740334005446444]
								}, {
									"case":	13,
									"scores":	[-4.740334005446444]
								}, {
									"case":	14,
									"scores":	[-4.740334005446444]
								}, {
									"case":	15,
									"scores":	[-4.740334005446444]
								}, {
									"case":	16,
									"scores":	[-4.740334005446444]
								}, {
									"case":	17,
									"scores":	[-4.740334005446444]
								}, {
									"case":	18,
									"scores":	[-4.740334005446444]
								}, {
									"case":	19,
									"scores":	[-4.740334005446444]
								}, {
									"case":	20,
									"scores":	[-4.740334005446444]
								}, {
									"case":	21,
									"scores":	[-4.740334005446444]
								}, {
									"case":	22,
									"scores":	[-4.740334005446444]
								}, {
									"case":	23,
									"scores":	[-4.740334005446444]
								}, {
									"case":	24,
									"scores":	[-4.740334005446444]
								}, {
									"case":	25,
									"scores":	[-4.740334005446444]
								}, {
									"case":	26,
									"scores":	[-4.740334005446444]
								}, {
									"case":	27,
									"scores":	[-4.740334005446444]
								}, {
									"case":	28,
									"scores":	[-4.740334005446444]
								}, {
									"case":	29,
									"scores":	[-4.740334005446444]
								}, {
									"case":	30,
									"scores":	[-4.740334005446444]
								}, {
									"case":	31,
									"scores":	[-4.740334005446444]
								}, {
									"case":	32,
									"scores":	[-4.740334005446444]
								}, {
									"case":	33,
									"scores":	[-4.740334005446444]
								}, {
									"case":	34,
									"scores":	[-4.740334005446444]
								}, {
									"case":	35,
									"scores":	[-4.740334005446444]
								}, {
									"case":	36,
									"scores":	[-4.740334005446444]
								}, {
									"case":	37,
									"scores":	[-4.740334005446444]
								}, {
									"case":	38,
									"scores":	[-4.740334005446444]
								}, {
									"case":	39,
									"scores":	[-4.740334005446444]
								}, {
									"case":	40,
									"scores":	[-4.740334005446444]
								}, {
									"case":	41,
									"scores":	[-4.740334005446444]
								}, {
									"case":	42,
									"scores":	[-4.740334005446444]
								}, {
									"case":	43,
									"scores":	[-4.740334005446444]
								}, {
									"case":	44,
									"scores":	[-4.740334005446444]
								}, {
									"case":	45,
									"scores":	[-4.740334005446444]
								}, {
									"case":	46,
									"scores":	[-4.740334005446444]
								}, {
									"case":	47,
									"scores":	[-4.740334005446444]
								}, {
									"case":	48,
									"scores":	[-4.740334005446444]
								}, {
									"case":	49,
									"scores":	[-4.740334005446444]
								}, {
									"case":	50,
									"scores":	[-4.740334005446444]
								}, {
									"case":	51,
									"scores":	[-4.740334005446444]
								}, {
									"case":	52,
									"scores":	[-4.740334005446444]
								}, {
									"case":	53,
									"scores":	[-4.740334005446444]
								}, {
									"case":	54,
									"scores":	[-4.740334005446444]
								}, {
									"case":	55,
									"scores":	[-4.740334005446444]
								}, {
									"case":	56,
									"scores":	[-4.740334005446444]
								}, {
									"case":	57,
									"scores":	[-4.740334005446444]
								}, {
									"case":	58,
									"scores":	[-4.740334005446444]
								}, {
									"case":	59,
									"scores":	[-4.740334005446444]
								}, {
									"case":	60,
									"scores":	[-4.740334005446444]
								}, {
									"case":	61,
									"scores":	[-4.740334005446444]
								}, {
									"case":	62,
									"scores":	[-4.740334005446444]
								}, {
									"case":	63,
									"scores":	[-4.740334005446444]
								}, {
									"case":	64,
									"scores":	[-4.740334005446444]
								}, {
									"case":	65,
									"scores":	[-4.740334005446444]
								}, {
									"case":	66,
									"scores":	[-4.740334005446444]
								}, {
									"case":	67,
									"scores":	[-4.740334005446444]
								}, {
									"case":	68,
									"scores":	[-4.740334005446444]
								}, {
									"case":	69,
									"scores":	[-4.740334005446444]
								}, {
									"case":	70,
									"scores":	[-4.740334005446444]
								}, {
									"case":	71,
									"scores":	[-4.740334005446444]
								}, {
									"case":	72,
									"scores":	[-4.740334005446444]
								}, {
									"case":	73,
									"scores":	[-4.740334005446444]
								}, {
									"case":	74,
									"scores":	[-4.740334005446444]
								}, {
									"case":	75,
									"scores":	[-4.740334005446444]
								}, {
									"case":	76,
									"scores":	[-4.740334005446444]
								}, {
									"case":	77,
									"scores":	[-4.740334005446444]
								}, {
									"case":	78,
									"scores":	[-4.740334005446444]
								}, {
									"case":	79,
									"scores":	[-4.740334005446444]
								}, {
									"case":	80,
									"scores":	[-4.740334005446444]
								}, {
									"case":	81,
									"scores":	[-4.740334005446444]
								}, {
									"case":	82,
									"scores":	[-4.740334005446444]
								}, {
									"case":	83,
									"scores":	[-4.740334005446444]
								}, {
									"case":	84,
									"scores":	[-4.740334005446444]
								}, {
									"case":	85,
									"scores":	[-4.740334005446444]
								}, {
									"case":	86,
									"scores":	[-4.740334005446444]
								}, {
									"case":	87,
									"scores":	[-4.740334005446444]
								}, {
									"case":	88,
									"scores":	[-4.740334005446444]
								}, {
									"case":	89,
									"scores":	[-4.740334005446444]
								}, {
									"case":	90,
									"scores":	[-4.740334005446444]
								}, {
									"case":	91,
									"scores":	[-4.740334005446444]
								}, {
									"case":	92,
									"scores":	[-4.740334005446444]
								}, {
									"case":	93,
									"scores":	[-4.740334005446444]
								}, {
									"case":	94,
									"scores":	[-4.740334005446444]
								}, {
									"case":	95,
									"scores":	[-4.740334005446444]
								}, {
									"case":	96,
									"scores":	[-4.740334005446444]
								}, {
									"case":	97,
									"scores":	[-4.740334005446444]
								}, {
									"case":	98,
									"scores":	[-4.740334005446444]
								}, {
									"case":	99,
									"scores":	[-4.740334005446444]
								}, {
									"case":	100,
									"scores":	[-4.740334005446444]
								}, {
									"case":	101,
									"scores":	[-4.740334005446444]
								}, {
									"case":	102,
									"scores":	[-4.740334005446444]
								}, {
									"case":	103,
									"scores":	[-4.740334005446444]
								}, {
									"case":	104,
									"scores":	[-4.740334005446444]
								}, {
									"case":	105,
									"scores":	[-4.740334005446444]
								}, {
									"case":	106,
									"scores":	[-4.740334005446444]
								}, {
									"case":	107,
									"scores":	[-4.740334005446444]
								}, {
									"case":	108,
									"scores":	[-4.740334005446444]
								}, {
									"case":	109,
									"scores":	[-4.740334005446444]
								}, {
									"case":	110,
									"scores":	[-4.740334005446444]
								}, {
									"case":	111,
									"scores":	[-4.740334005446444]
								}, {
									"case":	112,
									"scores":	[-4.740334005446444]
								}, {
									"case":	113,
									"scores":	[-4.740334005446444]
								}, {
									"case":	114,
									"scores":	[-4.740334005446444]
								}, {
									"case":	115,
									"scores":	[-4.740334005446444]
								}, {
									"case":	116,
									"scores":	[-4.740334005446444]
								}, {
									"case":	117,
									"scores":	[-4.740334005446444]
								}, {
									"case":	118,
									"scores":	[-4.740334005446444]
								}, {
									"case":	119,
									"scores":	[-4.740334005446444]
								}, {
									"case":	120,
									"scores":	[-4.740334005446444]
								}, {
									"case":	121,
									"scores":	[-4.740334005446444]
								}, {
									"case":	122,
									"scores":	[-4.740334005446444]
								}, {
									"case":	123,
									"scores":	[-4.740334005446444]
								}, {
									"case":	124,
									"scores":	[-4.740334005446444]
								}, {
									"case":	125,
									"scores":	[-4.740334005446444]
								}, {
									"case":	126,
									"scores":	[-4.740334005446444]
								}, {
									"case":	127,
									"scores":	[-4.740334005446444]
								}, {
									"case":	128,
									"scores":	[-4.740334005446444]
								}, {
									"case":	129,
									"scores":	[-4.740334005446444]
								}, {
									"case":	130,
									"scores":	[-4.740334005446444]
								}, {
									"case":	131,
									"scores":	[-4.740334005446444]
								}, {
									"case":	132,
									"scores":	[-4.740334005446444]
								}, {
									"case":	133,
									"scores":	[-4.740334005446444]
								}, {
									"case":	134,
									"scores":	[-4.740334005446444]
								}, {
									"case":	135,
									"scores":	[-4.740334005446444]
								}, {
									"case":	136,
									"scores":	[-4.740334005446444]
								}, {
									"case":	137,
									"scores":	[-4.740334005446444]
								}, {
									"case":	138,
									"scores":	[-4.740334005446444]
								}, {
									"case":	139,
									"scores":	[-4.740334005446444]
								}, {
									"case":	140,
									"scores":	[-4.740334005446444]
								}, {
									"case":	141,
									"scores":	[-4.740334005446444]
								}, {
									"case":	142,
									"scores":	[-4.740334005446444]
								}, {
									"case":	143,
									"scores":	[-4.740334005446444]
								}, {
									"case":	144,
									"scores":	[-4.740334005446444]
								}, {
									"case":	145,
									"scores":	[-4.740334005446444]
								}, {
									"case":	146,
									"scores":	[-4.740334005446444]
								}, {
									"case":	147,
									"scores":	[-4.740334005446444]
								}, {
									"case":	148,
									"scores":	[-4.740334005446444]
								}, {
									"case":	149,
									"scores":	[-4.740334005446444]
								}, {
									"case":	150,
									"scores":	[-4.740334005446444]
								}, {
									"case":	151,
									"scores":	[-4.740334005446444]
								}, {
									"case":	152,
									"scores":	[-4.740334005446444]
								}, {
									"case":	153,
									"scores":	[-4.740334005446444]
								}, {
									"case":	154,
									"scores":	[-4.740334005446444]
								}, {
									"case":	155,
									"scores":	[-4.740334005446444]
								}, {
									"case":	156,
									"scores":	[-4.740334005446444]
								}, {
									"case":	157,
									"scores":	[-4.740334005446444]
								}, {
									"case":	158,
									"scores":	[-4.740334005446444]
								}, {
									"case":	159,
									"scores":	[-4.740334005446444]
								}, {
									"case":	160,
									"scores":	[-4.740334005446444]
								}, {
									"case":	161,
									"scores":	[-4.740334005446444]
								}, {
									"case":	162,
									"scores":	[-4.740334005446444]
								}, {
									"case":	163,
									"scores":	[-4.740334005446444]
								}, {
									"case":	164,
									"scores":	[-4.740334005446444]
								}, {
									"case":	165,
									"scores":	[-4.740334005446444]
								}, {
									"case":	166,
									"scores":	[-4.740334005446444]
								}, {
									"case":	167,
									"scores":	[-4.740334005446444]
								}, {
									"case":	168,
									"scores":	[-4.740334005446444]
								}, {
									"case":	169,
									"scores":	[-4.740334005446444]
								}, {
									"case":	170,
									"scores":	[-4.740334005446444]
								}, {
									"case":	171,
									"scores":	[-4.740334005446444]
								}, {
									"case":	172,
									"scores":	[-4.740334005446444]
								}, {
									"case":	173,
									"scores":	[-4.740334005446444]
								}, {
									"case":	174,
									"scores":	[-4.740334005446444]
								}, {
									"case":	175,
									"scores":	[-4.740334005446444]
								}, {
									"case":	176,
									"scores":	[-4.740334005446444]
								}, {
									"case":	177,
									"scores":	[-4.740334005446444]
								}, {
									"case":	178,
									"scores":	[-4.740334005446444]
								}, {
									"case":	179,
									"scores":	[-4.740334005446444]
								}, {
									"case":	180,
									"scores":	[-4.740334005446444]
								}, {
									"case":	181,
									"scores":	[-4.740334005446444]
								}, {
									"case":	182,
									"scores":	[-4.740334005446444]
								}, {
									"case":	183,
									"scores":	[-4.740334005446444]
								}, {
									"case":	184,
									"scores":	[-4.740334005446444]
								}, {
									"case":	185,
									"scores":	[-4.740334005446444]
								}, {
									"case":	186,
									"scores":	[-4.740334005446444]
								}, {
									"case":	187,
									"scores":	[-4.740334005446444]
								}, {
									"case":	188,
									"scores":	[-4.740334005446444]
								}, {
									"case":	189,
									"scores":	[-4.740334005446444]
								}, {
									"case":	190,
									"scores":	[-4.740334005446444]
								}, {
									"case":	191,
									"scores":	[-4.740334005446444]
								}, {
									"case":	192,
									"scores":	[-4.740334005446444]
								}, {
									"case":	193,
									"scores":	[-4.740334005446444]
								}, {
									"case":	194,
									"scores":	[-4.740334005446444]
								}, {
									"case":	195,
									"scores":	[-4.740334005446444]
								}, {
									"case":	196,
									"scores":	[-4.740334005446444]
								}, {
									"case":	197,
									"scores":	[-4.740334005446444]
								}, {
									"case":	198,
									"scores":	[-4.740334005446444]
								}, {
									"case":	199,
									"scores":	[-4.740334005446444]
								}, {
									"case":	200,
									"scores":	[-4.740334005446444]
								}, {
									"case":	201,
									"scores":	[-4.740334005446444]
								}, {
									"case":	202,
									"scores":	[-4.740334005446444]
								}, {
									"case":	203,
									"scores":	[-4.740334005446444]
								}, {
									"case":	204,
									"scores":	[-4.740334005446444]
								}, {
									"case":	205,
									"scores":	[-4.740334005446444]
								}, {
									"case":	206,
									"scores":	[-4.740334005446444]
								}, {
									"case":	207,
									"scores":	[-4.740334005446444]
								}, {
									"case":	208,
									"scores":	[-4.740334005446444]
								}, {
									"case":	209,
									"scores":	[-4.740334005446444]
								}, {
									"case":	210,
									"scores":	[-4.740334005446444]
								}, {
									"case":	211,
									"scores":	[-4.740334005446444]
								}, {
									"case":	212,
									"scores":	[-4.740334005446444]
								}, {
									"case":	213,
									"scores":	[-4.740334005446444]
								}, {
									"case":	214,
									"scores":	[-4.740334005446444]
								}, {
									"case":	215,
									"scores":	[-4.740334005446444]
								}, {
									"case":	216,
									"scores":	[-4.740334005446444]
								}, {
									"case":	217,
									"scores":	[-4.740334005446444]
								}, {
									"case":	218,
									"scores":	[-4.740334005446444]
								}, {
									"case":	219,
									"scores":	[-4.740334005446444]
								}, {
									"case":	220,
									"scores":	[-4.740334005446444]
								}, {
									"case":	221,
									"scores":	[-4.740334005446444]
								}, {
									"case":	222,
									"scores":	[-4.740334005446444]
								}, {
									"case":	223,
									"scores":	[-4.740334005446444]
								}, {
									"case":	224,
									"scores":	[-4.740334005446444]
								}, {
									"case":	225,
									"scores":	[-4.740334005446444]
								}, {
									"case":	226,
									"scores":	[-4.740334005446444]
								}, {
									"case":	227,
									"scores":	[-4.740334005446444]
								}, {
									"case":	228,
									"scores":	[-4.740334005446444]
								}, {
									"case":	229,
									"scores":	[-4.740334005446444]
								}, {
									"case":	230,
									"scores":	[-4.740334005446444]
								}, {
									"case":	231,
									"scores":	[-4.740334005446444]
								}, {
									"case":	232,
									"scores":	[-4.740334005446444]
								}, {
									"case":	233,
									"scores":	[-4.740334005446444]
								}, {
									"case":	234,
									"scores":	[-4.740334005446444]
								}, {
									"case":	235,
									"scores":	[-4.740334005446444]
								}, {
									"case":	236,
									"scores":	[-4.740334005446444]
								}, {
									"case":	237,
									"scores":	[-4.740334005446444]
								}, {
									"case":	238,
									"scores":	[-4.740334005446444]
								}, {
									"case":	239,
									"scores":	[-4.740334005446444]
								}, {
									"case":	240,
									"scores":	[-4.740334005446444]
								}, {
									"case":	241,
									"scores":	[-4.740334005446444]
								}, {
									"case":	242,
									"scores":	[-4.740334005446444]
								}, {
									"case":	243,
									"scores":	[-4.740334005446444]
								}, {
									"case":	244,
									"scores":	[-4.740334005446444]
								}, {
									"case":	245,
									"scores":	[-4.740334005446444]
								}, {
									"case":	246,
									"scores":	[-4.740334005446444]
								}, {
									"case":	247,
									"scores":	[-4.740334005446444]
								}, {
									"case":	248,
									"scores":	[-4.740334005446444]
								}, {
									"case":	249,
									"scores":	[-4.740334005446444]
								}, {
									"case":	250,
									"scores":	[-4.740334005446444]
								}, {
									"case":	251,
									"scores":	[-4.740334005446444]
								}, {
									"case":	252,
									"scores":	[-4.740334005446444]
								}, {
									"case":	253,
									"scores":	[-4.740334005446444]
								}, {
									"case":	254,
									"scores":	[-4.740334005446444]
								}, {
									"case":	255,
									"scores":	[-4.740334005446444]
								}, {
									"case":	256,
									"scores":	[-4.740334005446444]
								}, {
									"case":	257,
									"scores":	[-4.740334005446444]
								}, {
									"case":	258,
									"scores":	[-4.740334005446444]
								}, {
									"case":	259,
									"scores":	[-4.740334005446444]
								}, {
									"case":	260,
									"scores":	[-4.740334005446444]
								}, {
									"case":	261,
									"scores":	[-4.740334005446444]
								}, {
									"case":	262,
									"scores":	[-4.740334005446444]
								}, {
									"case":	263,
									"scores":	[-4.740334005446444]
								}, {
									"case":	264,
									"scores":	[-4.740334005446444]
								}, {
									"case":	265,
									"scores":	[-4.740334005446444]
								}, {
									"case":	266,
									"scores":	[-4.740334005446444]
								}, {
									"case":	267,
									"scores":	[-4.740334005446444]
								}, {
									"case":	268,
									"scores":	[-4.740334005446444]
								}, {
									"case":	269,
									"scores":	[-4.740334005446444]
								}, {
									"case":	270,
									"scores":	[-4.740334005446444]
								}, {
									"case":	271,
									"scores":	[-4.740334005446444]
								}, {
									"case":	272,
									"scores":	[-4.740334005446444]
								}, {
									"case":	273,
									"scores":	[-4.740334005446444]
								}, {
									"case":	274,
									"scores":	[-4.740334005446444]
								}, {
									"case":	275,
									"scores":	[-4.740334005446444]
								}, {
									"case":	276,
									"scores":	[-4.740334005446444]
								}, {
									"case":	277,
									"scores":	[-4.740334005446444]
								}, {
									"case":	278,
									"scores":	[-4.740334005446444]
								}, {
									"case":	279,
									"scores":	[-4.740334005446444]
								}, {
									"case":	280,
									"scores":	[-4.740334005446444]
								}, {
									"case":	281,
									"scores":	[-4.740334005446444]
								}, {
									"case":	282,
									"scores":	[-4.740334005446444]
								}, {
									"case":	283,
									"scores":	[-4.740334005446444]
								}, {
									"case":	284,
									"scores":	[-4.740334005446444]
								}, {
									"case":	285,
									"scores":	[-4.740334005446444]
								}, {
									"case":	286,
									"scores":	[-4.740334005446444]
								}, {
									"case":	287,
									"scores":	[-4.740334005446444]
								}, {
									"case":	288,
									"scores":	[-4.740334005446444]
								}, {
									"case":	289,
									"scores":	[-4.740334005446444]
								}, {
									"case":	290,
									"scores":	[-4.740334005446444]
								}, {
									"case":	291,
									"scores":	[-4.740334005446444]
								}, {
									"case":	292,
									"scores":	[-4.740334005446444]
								}, {
									"case":	293,
									"scores":	[-4.740334005446444]
								}, {
									"case":	294,
									"scores":	[-4.740334005446444]
								}, {
									"case":	295,
									"scores":	[-4.740334005446444]
								}, {
									"case":	296,
									"scores":	[-4.740334005446444]
								}, {
									"case":	297,
									"scores":	[-4.740334005446444]
								}, {
									"case":	298,
									"scores":	[-4.740334005446444]
								}, {
									"case":	299,
									"scores":	[-4.740334005446444]
								}, {
									"case":	300,
									"scores":	[-4.740334005446444]
								}, {
									"case":	301,
									"scores":	[-4.740334005446444]
								}, {
									"case":	302,
									"scores":	[-4.740334005446444]
								}, {
									"case":	303,
									"scores":	[-4.740334005446444]
								}, {
									"case":	304,
									"scores":	[-4.740334005446444]
								}, {
									"case":	305,
									"scores":	[-4.740334005446444]
								}, {
									"case":	306,
									"scores":	[-4.740334005446444]
								}, {
									"case":	307,
									"scores":	[-4.740334005446444]
								}, {
									"case":	308,
									"scores":	[-4.740334005446444]
								}, {
									"case":	309,
									"scores":	[-4.740334005446444]
								}, {
									"case":	310,
									"scores":	[-4.740334005446444]
								}, {
									"case":	311,
									"scores":	[-4.740334005446444]
								}, {
									"case":	312,
									"scores":	[-4.740334005446444]
								}, {
									"case":	313,
									"scores":	[-4.740334005446444]
								}, {
									"case":	314,
									"scores":	[-4.740334005446444]
								}, {
									"case":	315,
									"scores":	[-4.740334005446444]
								}, {
									"case":	316,
									"scores":	[-4.740334005446444]
								}, {
									"case":	317,
									"scores":	[-4.740334005446444]
								}, {
									"case":	318,
									"scores":	[-4.740334005446444]
								}, {
									"case":	319,
									"scores":	[-4.740334005446444]
								}, {
									"case":	320,
									"scores":	[-4.740334005446444]
								}, {
									"case":	321,
									"scores":	[-4.740334005446444]
								}, {
									"case":	322,
									"scores":	[-4.740334005446444]
								}, {
									"case":	323,
									"scores":	[-4.740334005446444]
								}, {
									"case":	324,
									"scores":	[-4.740334005446444]
								}, {
									"case":	325,
									"scores":	[-4.740334005446444]
								}, {
									"case":	326,
									"scores":	[-4.740334005446444]
								}, {
									"case":	327,
									"scores":	[-4.740334005446444]
								}, {
									"case":	328,
									"scores":	[-4.740334005446444]
								}, {
									"case":	329,
									"scores":	[-4.740334005446444]
								}, {
									"case":	330,
									"scores":	[-4.740334005446444]
								}, {
									"case":	331,
									"scores":	[-4.740334005446444]
								}, {
									"case":	332,
									"scores":	[-4.740334005446444]
								}, {
									"case":	333,
									"scores":	[-4.740334005446444]
								}, {
									"case":	334,
									"scores":	[-4.740334005446444]
								}, {
									"case":	335,
									"scores":	[-4.740334005446444]
								}, {
									"case":	336,
									"scores":	[-4.740334005446444]
								}, {
									"case":	337,
									"scores":	[-4.740334005446444]
								}, {
									"case":	338,
									"scores":	[-4.740334005446444]
								}, {
									"case":	339,
									"scores":	[-4.740334005446444]
								}, {
									"case":	340,
									"scores":	[-4.740334005446444]
								}, {
									"case":	341,
									"scores":	[-4.740334005446444]
								}, {
									"case":	342,
									"scores":	[-4.740334005446444]
								}, {
									"case":	343,
									"scores":	[-4.740334005446444]
								}, {
									"case":	344,
									"scores":	[-4.740334005446444]
								}, {
									"case":	345,
									"scores":	[-4.740334005446444]
								}, {
									"case":	346,
									"scores":	[-4.740334005446444]
								}, {
									"case":	347,
									"scores":	[-4.740334005446444]
								}, {
									"case":	348,
									"scores":	[-4.740334005446444]
								}, {
									"case":	349,
									"scores":	[-4.740334005446444]
								}, {
									"case":	350,
									"scores":	[-4.740334005446444]
								}, {
									"case":	351,
									"scores":	[-4.740334005446444]
								}, {
									"case":	352,
									"scores":	[-4.740334005446444]
								}, {
									"case":	353,
									"scores":	[-4.740334005446444]
								}, {
									"case":	354,
									"scores":	[-4.740334005446444]
								}, {
									"case":	355,
									"scores":	[-4.740334005446444]
								}, {
									"case":	356,
									"scores":	[-4.740334005446444]
								}, {
									"case":	357,
									"scores":	[-4.740334005446444]
								}, {
									"case":	358,
									"scores":	[-4.740334005446444]
								}, {
									"case":	359,
									"scores":	[-4.740334005446444]
								}, {
									"case":	360,
									"scores":	[-4.740334005446444]
								}, {
									"case":	361,
									"scores":	[-4.740334005446444]
								}, {
									"case":	362,
									"scores":	[-4.740334005446444]
								}, {
									"case":	363,
									"scores":	[-4.740334005446444]
								}, {
									"case":	364,
									"scores":	[-4.740334005446444]
								}, {
									"case":	365,
									"scores":	[-4.740334005446444]
								}, {
									"case":	366,
									"scores":	[-4.740334005446444]
								}, {
									"case":	367,
									"scores":	[-4.740334005446444]
								}, {
									"case":	368,
									"scores":	[-4.740334005446444]
								}, {
									"case":	369,
									"scores":	[-4.740334005446444]
								}, {
									"case":	370,
									"scores":	[-4.740334005446444]
								}, {
									"case":	371,
									"scores":	[-4.740334005446444]
								}, {
									"case":	372,
									"scores":	[-4.740334005446444]
								}, {
									"case":	373,
									"scores":	[-4.740334005446444]
								}, {
									"case":	374,
									"scores":	[-4.740334005446444]
								}, {
									"case":	375,
									"scores":	[-4.740334005446444]
								}, {
									"case":	376,
									"scores":	[-4.740334005446444]
								}, {
									"case":	377,
									"scores":	[-4.740334005446444]
								}, {
									"case":	378,
									"scores":	[-4.740334005446444]
								}, {
									"case":	379,
									"scores":	[-4.740334005446444]
								}, {
									"case":	380,
									"scores":	[-4.740334005446444]
								}, {
									"case":	381,
									"scores":	[-4.740334005446444]
								}, {
									"case":	382,
									"scores":	[-4.740334005446444]
								}, {
									"case":	383,
									"scores":	[-4.740334005446444]
								}, {
									"case":	384,
									"scores":	[-4.740334005446444]
								}, {
									"case":	385,
									"scores":	[-4.740334005446444]
								}, {
									"case":	386,
									"scores":	[-4.740334005446444]
								}, {
									"case":	387,
									"scores":	[-4.740334005446444]
								}, {
									"case":	388,
									"scores":	[-4.740334005446444]
								}, {
									"case":	389,
									"scores":	[-4.740334005446444]
								}, {
									"case":	390,
									"scores":	[-4.740334005446444]
								}, {
									"case":	391,
									"scores":	[-4.740334005446444]
								}, {
									"case":	392,
									"scores":	[-4.740334005446444]
								}, {
									"case":	393,
									"scores":	[-4.740334005446444]
								}, {
									"case":	394,
									"scores":	[-4.740334005446444]
								}, {
									"case":	395,
									"scores":	[-4.740334005446444]
								}, {
									"case":	396,
									"scores":	[-4.740334005446444]
								}, {
									"case":	397,
									"scores":	[-4.740334005446444]
								}, {
									"case":	398,
									"scores":	[-4.740334005446444]
								}, {
									"case":	399,
									"scores":	[-4.740334005446444]
								}, {
									"case":	400,
									"scores":	[-4.740334005446444]
								}, {
									"case":	401,
									"scores":	[-7.4489095001464438, -7.4489095001464438, -5.3998166434464441, -8.0054705001464441, -6.1712229464464432, -6.9935196164464433, -8.0054705001464441, -7.6687010724464439, -6.0787148954464438, -7.9815263684464446, -7.6687010724464439, -6.0787148954464438, -7.9841248754464438, -7.6687010724464439, -6.0787148954464438, -7.9841248754464438, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.6101246892464438, -7.5730242892464439, -7.8835463754464445, -7.8835463754464445, -7.5730242892464439, -7.3640857754464442, -7.6101246892464438, -7.5745113232464441, -7.5745113232464441, -8.1295852892464442, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -8.1295852892464442, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -8.0944354924464434, -8.1295852892464442, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445, -7.8835463754464445]
								}]
						}, {
							"switch":	75,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2911,
							"begin_column":	2,
							"end_line":	2911,
							"end_column":	57,
							"patch_codes":	["if (!__is_neg(\"\", \"L2911\", 61, &(dateobj), sizeof (dateobj), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time), sizeof (dateobj->time), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.s = 0 - (intobj->diff->s * bias);\n", "{\n}\n", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0 * bias) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (0 * ht) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (0 * return_value_used) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = (bias != 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (bias * ht) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (bias * return_value_used) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (bias + 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (bias - 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (bias == 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (dateobj != 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (dateobj == 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht != 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht != bias) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht != return_value_used) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht * bias) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht * return_value_used) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht + 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht + bias) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht + return_value_used) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht - 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht - bias) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht - return_value_used) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht == 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht == bias) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (ht == return_value_used) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (interval != 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (interval == 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (intobj != 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (intobj == 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (object != 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (object != interval) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (object == 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (object == interval) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value != 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value != interval) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value != object) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value != this_ptr) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value == 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value == interval) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value == object) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value == this_ptr) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_ptr != 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_ptr == 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_used != 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_used != bias) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_used * bias) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_used * ht) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_used + 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_used + bias) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_used - 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_used - bias) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_used == 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (return_value_used == bias) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (this_ptr != 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (this_ptr != interval) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (this_ptr != object) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (this_ptr == 0) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (this_ptr == interval) - (intobj->diff->s * bias)", "dateobj->time->relative.s = (this_ptr == object) - (intobj->diff->s * bias)", "dateobj->time->relative.s = 0 - ((&bias)->diff->s * bias)", "dateobj->time->relative.s = 0 - ((&dateobj)->diff->s * bias)", "dateobj->time->relative.s = 0 - ((&ht)->diff->s * bias)", "dateobj->time->relative.s = 0 - ((&interval)->diff->s * bias)", "dateobj->time->relative.s = 0 - ((&intobj)->diff->s * bias)", "dateobj->time->relative.s = 0 - ((&object)->diff->s * bias)", "dateobj->time->relative.s = 0 - ((&return_value)->diff->s * bias)", "dateobj->time->relative.s = 0 - ((&return_value_ptr)->diff->s * bias)", "dateobj->time->relative.s = 0 - ((&return_value_used)->diff->s * bias)", "dateobj->time->relative.s = 0 - ((&this_ptr)->diff->s * bias)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * (0 * bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (0 * ht))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (0 * return_value_used))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (bias != 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (bias * ht))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (bias * return_value_used))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (bias + 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (bias - 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (bias == 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (dateobj != 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (dateobj == 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht != 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht != bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht != return_value_used))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht * bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht * return_value_used))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht + 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht + bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht + return_value_used))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht - 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht - bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht - return_value_used))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht == 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht == bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht == return_value_used))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (ht))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (interval != 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (interval == 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (intobj != 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (intobj == 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (object != 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (object != interval))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (object == 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (object == interval))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value != 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value != interval))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value != object))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value != this_ptr))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value == 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value == interval))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value == object))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value == this_ptr))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_ptr != 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_ptr == 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_used != 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_used != bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_used * bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_used * ht))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_used + 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_used + bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_used - 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_used - bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_used == 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_used == bias))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (return_value_used))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (this_ptr != 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (this_ptr != interval))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (this_ptr != object))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (this_ptr == 0))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (this_ptr == interval))", "dateobj->time->relative.s = 0 - (intobj->diff->s * (this_ptr == object))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2828242638464431, -5.8647769759464436, -4.7580329604464442, -6.0758240859464436, -5.3398995884464444, -5.7011970064464439, -6.493871373846444, -5.4634349674464442, -4.9535776254464441, -6.6075017504464437, -5.4634349674464442, -4.9535776254464441, -5.8339071494464445, -5.4634349674464442, -4.9535776254464441, -5.8339071494464445, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -6.6754462754464434, -6.3810954754464442, -5.8342544854464435, -5.8342544854464435, -6.3810954754464442, -5.9175581754464437, -6.6754462754464434, -6.3843529154464438, -6.3843529154464438, -6.5921425854464442, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -6.5921425854464442, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -6.3035144854464438, -6.5921425854464442, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435, -5.8342544854464435]
								}, {
									"case":	2,
									"scores":	[-4.740334005446444]
								}, {
									"case":	3,
									"scores":	[-4.740334005446444]
								}, {
									"case":	4,
									"scores":	[-4.740334005446444]
								}, {
									"case":	5,
									"scores":	[-4.740334005446444]
								}, {
									"case":	6,
									"scores":	[-4.740334005446444]
								}, {
									"case":	7,
									"scores":	[-4.740334005446444]
								}, {
									"case":	8,
									"scores":	[-4.740334005446444]
								}, {
									"case":	9,
									"scores":	[-4.740334005446444]
								}, {
									"case":	10,
									"scores":	[-4.740334005446444]
								}, {
									"case":	11,
									"scores":	[-4.740334005446444]
								}, {
									"case":	12,
									"scores":	[-4.740334005446444]
								}, {
									"case":	13,
									"scores":	[-4.740334005446444]
								}, {
									"case":	14,
									"scores":	[-4.740334005446444]
								}, {
									"case":	15,
									"scores":	[-4.740334005446444]
								}, {
									"case":	16,
									"scores":	[-4.740334005446444]
								}, {
									"case":	17,
									"scores":	[-4.740334005446444]
								}, {
									"case":	18,
									"scores":	[-4.740334005446444]
								}, {
									"case":	19,
									"scores":	[-4.740334005446444]
								}, {
									"case":	20,
									"scores":	[-4.740334005446444]
								}, {
									"case":	21,
									"scores":	[-4.740334005446444]
								}, {
									"case":	22,
									"scores":	[-4.740334005446444]
								}, {
									"case":	23,
									"scores":	[-4.740334005446444]
								}, {
									"case":	24,
									"scores":	[-4.740334005446444]
								}, {
									"case":	25,
									"scores":	[-4.740334005446444]
								}, {
									"case":	26,
									"scores":	[-4.740334005446444]
								}, {
									"case":	27,
									"scores":	[-4.740334005446444]
								}, {
									"case":	28,
									"scores":	[-4.740334005446444]
								}, {
									"case":	29,
									"scores":	[-4.740334005446444]
								}, {
									"case":	30,
									"scores":	[-4.740334005446444]
								}, {
									"case":	31,
									"scores":	[-4.740334005446444]
								}, {
									"case":	32,
									"scores":	[-4.740334005446444]
								}, {
									"case":	33,
									"scores":	[-4.740334005446444]
								}, {
									"case":	34,
									"scores":	[-4.740334005446444]
								}, {
									"case":	35,
									"scores":	[-4.740334005446444]
								}, {
									"case":	36,
									"scores":	[-4.740334005446444]
								}, {
									"case":	37,
									"scores":	[-4.740334005446444]
								}, {
									"case":	38,
									"scores":	[-4.740334005446444]
								}, {
									"case":	39,
									"scores":	[-4.740334005446444]
								}, {
									"case":	40,
									"scores":	[-4.740334005446444]
								}, {
									"case":	41,
									"scores":	[-4.740334005446444]
								}, {
									"case":	42,
									"scores":	[-4.740334005446444]
								}, {
									"case":	43,
									"scores":	[-4.740334005446444]
								}, {
									"case":	44,
									"scores":	[-4.740334005446444]
								}, {
									"case":	45,
									"scores":	[-4.740334005446444]
								}, {
									"case":	46,
									"scores":	[-4.740334005446444]
								}, {
									"case":	47,
									"scores":	[-4.740334005446444]
								}, {
									"case":	48,
									"scores":	[-4.740334005446444]
								}, {
									"case":	49,
									"scores":	[-4.740334005446444]
								}, {
									"case":	50,
									"scores":	[-4.740334005446444]
								}, {
									"case":	51,
									"scores":	[-4.740334005446444]
								}, {
									"case":	52,
									"scores":	[-4.740334005446444]
								}, {
									"case":	53,
									"scores":	[-4.740334005446444]
								}, {
									"case":	54,
									"scores":	[-4.740334005446444]
								}, {
									"case":	55,
									"scores":	[-4.740334005446444]
								}, {
									"case":	56,
									"scores":	[-4.740334005446444]
								}, {
									"case":	57,
									"scores":	[-4.740334005446444]
								}, {
									"case":	58,
									"scores":	[-4.740334005446444]
								}, {
									"case":	59,
									"scores":	[-4.740334005446444]
								}, {
									"case":	60,
									"scores":	[-4.740334005446444]
								}, {
									"case":	61,
									"scores":	[-4.740334005446444]
								}, {
									"case":	62,
									"scores":	[-4.740334005446444]
								}, {
									"case":	63,
									"scores":	[-4.740334005446444]
								}, {
									"case":	64,
									"scores":	[-4.740334005446444]
								}, {
									"case":	65,
									"scores":	[-4.740334005446444]
								}, {
									"case":	66,
									"scores":	[-4.740334005446444]
								}, {
									"case":	67,
									"scores":	[-4.740334005446444]
								}, {
									"case":	68,
									"scores":	[-4.740334005446444]
								}, {
									"case":	69,
									"scores":	[-4.740334005446444]
								}, {
									"case":	70,
									"scores":	[-4.740334005446444]
								}, {
									"case":	71,
									"scores":	[-4.740334005446444]
								}, {
									"case":	72,
									"scores":	[-4.740334005446444]
								}, {
									"case":	73,
									"scores":	[-4.740334005446444]
								}, {
									"case":	74,
									"scores":	[-4.740334005446444]
								}, {
									"case":	75,
									"scores":	[-4.740334005446444]
								}, {
									"case":	76,
									"scores":	[-4.740334005446444]
								}, {
									"case":	77,
									"scores":	[-4.740334005446444]
								}, {
									"case":	78,
									"scores":	[-4.740334005446444]
								}, {
									"case":	79,
									"scores":	[-4.740334005446444]
								}, {
									"case":	80,
									"scores":	[-4.740334005446444]
								}, {
									"case":	81,
									"scores":	[-4.740334005446444]
								}, {
									"case":	82,
									"scores":	[-4.740334005446444]
								}, {
									"case":	83,
									"scores":	[-4.740334005446444]
								}, {
									"case":	84,
									"scores":	[-4.740334005446444]
								}, {
									"case":	85,
									"scores":	[-4.740334005446444]
								}, {
									"case":	86,
									"scores":	[-4.740334005446444]
								}, {
									"case":	87,
									"scores":	[-4.740334005446444]
								}, {
									"case":	88,
									"scores":	[-4.740334005446444]
								}, {
									"case":	89,
									"scores":	[-4.740334005446444]
								}, {
									"case":	90,
									"scores":	[-4.740334005446444]
								}, {
									"case":	91,
									"scores":	[-4.740334005446444]
								}, {
									"case":	92,
									"scores":	[-4.740334005446444]
								}, {
									"case":	93,
									"scores":	[-4.740334005446444]
								}, {
									"case":	94,
									"scores":	[-4.740334005446444]
								}, {
									"case":	95,
									"scores":	[-4.740334005446444]
								}, {
									"case":	96,
									"scores":	[-4.740334005446444]
								}, {
									"case":	97,
									"scores":	[-4.740334005446444]
								}, {
									"case":	98,
									"scores":	[-4.740334005446444]
								}, {
									"case":	99,
									"scores":	[-4.740334005446444]
								}, {
									"case":	100,
									"scores":	[-4.740334005446444]
								}, {
									"case":	101,
									"scores":	[-4.740334005446444]
								}, {
									"case":	102,
									"scores":	[-4.740334005446444]
								}, {
									"case":	103,
									"scores":	[-4.740334005446444]
								}, {
									"case":	104,
									"scores":	[-4.740334005446444]
								}, {
									"case":	105,
									"scores":	[-4.740334005446444]
								}, {
									"case":	106,
									"scores":	[-4.740334005446444]
								}, {
									"case":	107,
									"scores":	[-4.740334005446444]
								}, {
									"case":	108,
									"scores":	[-4.740334005446444]
								}, {
									"case":	109,
									"scores":	[-4.740334005446444]
								}, {
									"case":	110,
									"scores":	[-4.740334005446444]
								}, {
									"case":	111,
									"scores":	[-4.740334005446444]
								}, {
									"case":	112,
									"scores":	[-4.740334005446444]
								}, {
									"case":	113,
									"scores":	[-4.740334005446444]
								}, {
									"case":	114,
									"scores":	[-4.740334005446444]
								}, {
									"case":	115,
									"scores":	[-4.740334005446444]
								}, {
									"case":	116,
									"scores":	[-4.740334005446444]
								}, {
									"case":	117,
									"scores":	[-4.740334005446444]
								}, {
									"case":	118,
									"scores":	[-4.740334005446444]
								}, {
									"case":	119,
									"scores":	[-4.740334005446444]
								}, {
									"case":	120,
									"scores":	[-4.740334005446444]
								}, {
									"case":	121,
									"scores":	[-4.740334005446444]
								}, {
									"case":	122,
									"scores":	[-4.740334005446444]
								}, {
									"case":	123,
									"scores":	[-4.740334005446444]
								}, {
									"case":	124,
									"scores":	[-4.740334005446444]
								}, {
									"case":	125,
									"scores":	[-4.740334005446444]
								}, {
									"case":	126,
									"scores":	[-4.740334005446444]
								}, {
									"case":	127,
									"scores":	[-4.740334005446444]
								}, {
									"case":	128,
									"scores":	[-4.740334005446444]
								}, {
									"case":	129,
									"scores":	[-4.740334005446444]
								}, {
									"case":	130,
									"scores":	[-4.740334005446444]
								}, {
									"case":	131,
									"scores":	[-4.740334005446444]
								}, {
									"case":	132,
									"scores":	[-4.740334005446444]
								}, {
									"case":	133,
									"scores":	[-4.740334005446444]
								}, {
									"case":	134,
									"scores":	[-4.740334005446444]
								}, {
									"case":	135,
									"scores":	[-4.740334005446444]
								}, {
									"case":	136,
									"scores":	[-4.740334005446444]
								}, {
									"case":	137,
									"scores":	[-4.740334005446444]
								}, {
									"case":	138,
									"scores":	[-4.740334005446444]
								}, {
									"case":	139,
									"scores":	[-4.740334005446444]
								}, {
									"case":	140,
									"scores":	[-4.740334005446444]
								}]
						}]
				}, {
					"line":	2911,
					"switches":	[{
							"switch":	76,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2912,
							"begin_column":	0,
							"end_line":	2912,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2912\", 61, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	2,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	3,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	4,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	5,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	6,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	7,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	8,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	9,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	10,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	11,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	12,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	13,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	14,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	15,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	16,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	17,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	18,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	19,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	20,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	21,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	22,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	23,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	24,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	25,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	26,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	27,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	28,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	29,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	30,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	31,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	32,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	33,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	34,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	35,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	36,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	37,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	38,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	39,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	40,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	41,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	42,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	43,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	44,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	45,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	46,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	47,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	48,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	49,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	50,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	51,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	52,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	53,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	54,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	55,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	56,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	57,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	58,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	59,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	60,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	61,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	62,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	63,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	64,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	65,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	66,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	67,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	68,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	69,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	70,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	71,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	72,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	73,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	74,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	75,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	76,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	77,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	78,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	79,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	80,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	81,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	82,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	83,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	84,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	85,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	86,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	87,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	88,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	89,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	90,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	91,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	92,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	93,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	94,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	95,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	96,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	97,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	98,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	99,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	100,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	101,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	102,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	103,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	104,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	105,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	106,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	107,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	108,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	109,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	110,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	111,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	112,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	113,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	114,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	115,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	116,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	117,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	118,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	119,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	120,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	121,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	122,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	123,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	124,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	125,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	126,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	127,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	128,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	129,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	130,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	131,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	132,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	133,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	134,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	135,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	136,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	137,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	138,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	139,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	140,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	141,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	142,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	143,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	144,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	145,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	146,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	147,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	148,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	149,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	150,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	151,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	152,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	153,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	154,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	155,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	156,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	157,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	158,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	159,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	160,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	161,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	162,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	163,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	164,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	165,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	166,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	167,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	168,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	169,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	170,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	171,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	172,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	173,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	174,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	175,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	176,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	177,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	178,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	179,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	180,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	181,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	182,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	183,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	184,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	185,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	186,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	187,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	188,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	189,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	190,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	191,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	192,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	193,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	194,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	195,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	196,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	197,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	198,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	199,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	200,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	201,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	202,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	203,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	204,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	205,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	206,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	207,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	208,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	209,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	210,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	211,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	212,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	213,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	214,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	215,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	216,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	217,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	218,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	219,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	220,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	221,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	222,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	223,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	224,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	225,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	226,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	227,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	228,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	229,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	230,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	231,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	232,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	233,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	234,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	235,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	236,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	237,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	238,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	239,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	240,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	241,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	242,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	243,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	244,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	245,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	246,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	247,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	248,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	249,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	250,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	251,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	252,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	253,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	254,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	255,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	256,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	257,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	258,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	259,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	260,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	261,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	262,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	263,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	264,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	265,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	266,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	267,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	268,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	269,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	270,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	271,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	272,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	273,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	274,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	275,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	276,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	277,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	278,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	279,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	280,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	281,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	282,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	283,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	284,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	285,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	286,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	287,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	288,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	289,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	290,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	291,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	292,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	293,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	294,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	295,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	296,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	297,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	298,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	299,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	300,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	301,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	302,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	303,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	304,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	305,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	306,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	307,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	308,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	309,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	310,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	311,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	312,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	313,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	314,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	315,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	316,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	317,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	318,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	319,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	320,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	321,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	322,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	323,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	324,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	325,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	326,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	327,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	328,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	329,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	330,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	331,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	332,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	333,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	334,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	335,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	336,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	337,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	338,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	339,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	340,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	341,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	342,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	343,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	344,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	345,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	346,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	347,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	348,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	349,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	350,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	351,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	352,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	353,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	354,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	355,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	356,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	357,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	358,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	359,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	360,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	361,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	362,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	363,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	364,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	365,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	366,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	367,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	368,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	369,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	370,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	371,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	372,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	373,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	374,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	375,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	376,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	377,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	378,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	379,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	380,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	381,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	382,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	383,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	384,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	385,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	386,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	387,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	388,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	389,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	390,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	391,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	392,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	393,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	394,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	395,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	396,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	397,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	398,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	399,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	400,
									"scores":	[-7.4287067928289243, -7.9852677928289246, -7.5995944851289243, -7.8740100019289248, -7.0919373651289241, -8.4305710019289251, -7.6484983651289244, -6.0585121881289243, -7.9639221681289243, -7.6484983651289244, -6.0585121881289243, -7.9639221681289243, -7.6484983651289244, -6.0585121881289243, -7.9639221681289243, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.5899219819289243, -7.5528215819289244, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.5528215819289244, -7.3438830681289247, -7.5899219819289243, -7.5543086159289246, -7.5543086159289246, -8.1093825819289247, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -8.1093825819289247, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -8.074232785128924, -8.1093825819289247, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925, -7.863343668128925]
								}]
						}, {
							"switch":	77,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2912,
							"begin_column":	2,
							"end_line":	2912,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L2912\", 61, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(intobj->diff), sizeof (intobj->diff), &(intobj->diff->s), sizeof (intobj->diff->s), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(intobj->diff->i), sizeof (intobj->diff->i), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(intobj->diff->h), sizeof (intobj->diff->h), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj->diff->d), sizeof (intobj->diff->d), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(intobj->diff->m), sizeof (intobj->diff->m), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(intobj->diff->y), sizeof (intobj->diff->y), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj->diff->invert), sizeof (intobj->diff->invert), &(intobj->diff->have_special_relative), sizeof (intobj->diff->have_special_relative), &(intobj->initialized), sizeof (intobj->initialized), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(intobj->props), sizeof (intobj->props), &(intobj->diff->weekday), sizeof (intobj->diff->weekday), &(intobj->diff->weekday_behavior), sizeof (intobj->diff->weekday_behavior), &(intobj->diff->first_last_day_of), sizeof (intobj->diff->first_last_day_of), &(intobj->diff->days), sizeof (intobj->diff->days), &(intobj->diff->have_weekday_relative), sizeof (intobj->diff->have_weekday_relative), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->have_relative = 1;\n", "{\n}\n", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0 * bias)", "dateobj->time->have_relative = (0 * ht)", "dateobj->time->have_relative = (0 * return_value_used)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->have_relative = (bias != 0)", "dateobj->time->have_relative = (bias * ht)", "dateobj->time->have_relative = (bias * return_value_used)", "dateobj->time->have_relative = (bias + 0)", "dateobj->time->have_relative = (bias - 0)", "dateobj->time->have_relative = (bias == 0)", "dateobj->time->have_relative = (dateobj != 0)", "dateobj->time->have_relative = (dateobj == 0)", "dateobj->time->have_relative = (ht != 0)", "dateobj->time->have_relative = (ht != bias)", "dateobj->time->have_relative = (ht != return_value_used)", "dateobj->time->have_relative = (ht * bias)", "dateobj->time->have_relative = (ht * return_value_used)", "dateobj->time->have_relative = (ht + 0)", "dateobj->time->have_relative = (ht + bias)", "dateobj->time->have_relative = (ht + return_value_used)", "dateobj->time->have_relative = (ht - 0)", "dateobj->time->have_relative = (ht - bias)", "dateobj->time->have_relative = (ht - return_value_used)", "dateobj->time->have_relative = (ht == 0)", "dateobj->time->have_relative = (ht == bias)", "dateobj->time->have_relative = (ht == return_value_used)", "dateobj->time->have_relative = (interval != 0)", "dateobj->time->have_relative = (interval == 0)", "dateobj->time->have_relative = (intobj != 0)", "dateobj->time->have_relative = (intobj == 0)", "dateobj->time->have_relative = (object != 0)", "dateobj->time->have_relative = (object != interval)", "dateobj->time->have_relative = (object == 0)", "dateobj->time->have_relative = (object == interval)", "dateobj->time->have_relative = (return_value != 0)", "dateobj->time->have_relative = (return_value != interval)", "dateobj->time->have_relative = (return_value != object)", "dateobj->time->have_relative = (return_value != this_ptr)", "dateobj->time->have_relative = (return_value == 0)", "dateobj->time->have_relative = (return_value == interval)", "dateobj->time->have_relative = (return_value == object)", "dateobj->time->have_relative = (return_value == this_ptr)", "dateobj->time->have_relative = (return_value_ptr != 0)", "dateobj->time->have_relative = (return_value_ptr == 0)", "dateobj->time->have_relative = (return_value_used != 0)", "dateobj->time->have_relative = (return_value_used != bias)", "dateobj->time->have_relative = (return_value_used * bias)", "dateobj->time->have_relative = (return_value_used * ht)", "dateobj->time->have_relative = (return_value_used + 0)", "dateobj->time->have_relative = (return_value_used + bias)", "dateobj->time->have_relative = (return_value_used - 0)", "dateobj->time->have_relative = (return_value_used - bias)", "dateobj->time->have_relative = (return_value_used == 0)", "dateobj->time->have_relative = (return_value_used == bias)", "dateobj->time->have_relative = (this_ptr != 0)", "dateobj->time->have_relative = (this_ptr != interval)", "dateobj->time->have_relative = (this_ptr != object)", "dateobj->time->have_relative = (this_ptr == 0)", "dateobj->time->have_relative = (this_ptr == interval)", "dateobj->time->have_relative = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2626215565289236, -6.4736686665289245, -6.5907802991289248, -6.2321172586289251, -5.2321851501289247, -6.4431643686289242, -5.4432322601289247, -4.9333749181289246, -6.6290671331289239, -5.4432322601289247, -4.9333749181289246, -5.813704442128925, -5.4432322601289247, -4.9333749181289246, -5.813704442128925, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -6.6552435681289239, -6.3608927681289247, -5.814051778128924, -5.814051778128924, -5.814051778128924, -6.3608927681289247, -5.8973554681289242, -6.6552435681289239, -6.3641502081289243, -6.3641502081289243, -6.5719398781289247, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -6.5719398781289247, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -6.2833117781289243, -6.5719398781289247, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924, -5.814051778128924]
								}, {
									"case":	2,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	3,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	4,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	5,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	6,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	7,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	8,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	9,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	10,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	11,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	12,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	13,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	14,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	15,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	16,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	17,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	18,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	19,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	20,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	21,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	22,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	23,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	24,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	25,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	26,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	27,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	28,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	29,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	30,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	31,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	32,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	33,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	34,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	35,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	36,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	37,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	38,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	39,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	40,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	41,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	42,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	43,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	44,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	45,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	46,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	47,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	48,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	49,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	50,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	51,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	52,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	53,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	54,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	55,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	56,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	57,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	58,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	59,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	60,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	61,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	62,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	63,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	64,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	65,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	66,
									"scores":	[-4.7201312981289245]
								}]
						}]
				}, {
					"line":	2912,
					"switches":	[{
							"switch":	78,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2913,
							"begin_column":	0,
							"end_line":	2913,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2913\", 45, &(dateobj), sizeof (dateobj), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(return_value), sizeof (return_value), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.699928590811405]
								}, {
									"case":	2,
									"scores":	[-4.699928590811405]
								}, {
									"case":	3,
									"scores":	[-4.699928590811405]
								}, {
									"case":	4,
									"scores":	[-4.699928590811405]
								}, {
									"case":	5,
									"scores":	[-4.699928590811405]
								}, {
									"case":	6,
									"scores":	[-4.699928590811405]
								}, {
									"case":	7,
									"scores":	[-4.699928590811405]
								}, {
									"case":	8,
									"scores":	[-4.699928590811405]
								}, {
									"case":	9,
									"scores":	[-4.699928590811405]
								}, {
									"case":	10,
									"scores":	[-4.699928590811405]
								}, {
									"case":	11,
									"scores":	[-4.699928590811405]
								}, {
									"case":	12,
									"scores":	[-4.699928590811405]
								}, {
									"case":	13,
									"scores":	[-4.699928590811405]
								}, {
									"case":	14,
									"scores":	[-4.699928590811405]
								}, {
									"case":	15,
									"scores":	[-4.699928590811405]
								}, {
									"case":	16,
									"scores":	[-4.699928590811405]
								}, {
									"case":	17,
									"scores":	[-4.699928590811405]
								}, {
									"case":	18,
									"scores":	[-4.699928590811405]
								}, {
									"case":	19,
									"scores":	[-4.699928590811405]
								}, {
									"case":	20,
									"scores":	[-4.699928590811405]
								}, {
									"case":	21,
									"scores":	[-4.699928590811405]
								}, {
									"case":	22,
									"scores":	[-4.699928590811405]
								}, {
									"case":	23,
									"scores":	[-4.699928590811405]
								}, {
									"case":	24,
									"scores":	[-4.699928590811405]
								}, {
									"case":	25,
									"scores":	[-4.699928590811405]
								}, {
									"case":	26,
									"scores":	[-4.699928590811405]
								}, {
									"case":	27,
									"scores":	[-4.699928590811405]
								}, {
									"case":	28,
									"scores":	[-4.699928590811405]
								}, {
									"case":	29,
									"scores":	[-4.699928590811405]
								}, {
									"case":	30,
									"scores":	[-4.699928590811405]
								}, {
									"case":	31,
									"scores":	[-4.699928590811405]
								}, {
									"case":	32,
									"scores":	[-4.699928590811405]
								}, {
									"case":	33,
									"scores":	[-4.699928590811405]
								}, {
									"case":	34,
									"scores":	[-4.699928590811405]
								}, {
									"case":	35,
									"scores":	[-4.699928590811405]
								}, {
									"case":	36,
									"scores":	[-4.699928590811405]
								}, {
									"case":	37,
									"scores":	[-4.699928590811405]
								}, {
									"case":	38,
									"scores":	[-4.699928590811405]
								}, {
									"case":	39,
									"scores":	[-4.699928590811405]
								}, {
									"case":	40,
									"scores":	[-4.699928590811405]
								}, {
									"case":	41,
									"scores":	[-4.699928590811405]
								}, {
									"case":	42,
									"scores":	[-4.699928590811405]
								}, {
									"case":	43,
									"scores":	[-4.699928590811405]
								}, {
									"case":	44,
									"scores":	[-4.699928590811405]
								}, {
									"case":	45,
									"scores":	[-4.699928590811405]
								}, {
									"case":	46,
									"scores":	[-4.699928590811405]
								}, {
									"case":	47,
									"scores":	[-4.699928590811405]
								}, {
									"case":	48,
									"scores":	[-4.699928590811405]
								}, {
									"case":	49,
									"scores":	[-4.699928590811405]
								}, {
									"case":	50,
									"scores":	[-4.699928590811405]
								}, {
									"case":	51,
									"scores":	[-4.699928590811405]
								}, {
									"case":	52,
									"scores":	[-4.699928590811405]
								}, {
									"case":	53,
									"scores":	[-4.699928590811405]
								}, {
									"case":	54,
									"scores":	[-4.699928590811405]
								}, {
									"case":	55,
									"scores":	[-4.699928590811405]
								}, {
									"case":	56,
									"scores":	[-4.699928590811405]
								}, {
									"case":	57,
									"scores":	[-4.699928590811405]
								}, {
									"case":	58,
									"scores":	[-4.699928590811405]
								}, {
									"case":	59,
									"scores":	[-4.699928590811405]
								}, {
									"case":	60,
									"scores":	[-4.699928590811405]
								}, {
									"case":	61,
									"scores":	[-4.699928590811405]
								}, {
									"case":	62,
									"scores":	[-4.699928590811405]
								}, {
									"case":	63,
									"scores":	[-4.699928590811405]
								}, {
									"case":	64,
									"scores":	[-4.699928590811405]
								}, {
									"case":	65,
									"scores":	[-4.699928590811405]
								}, {
									"case":	66,
									"scores":	[-4.699928590811405]
								}, {
									"case":	67,
									"scores":	[-4.699928590811405]
								}, {
									"case":	68,
									"scores":	[-4.699928590811405]
								}, {
									"case":	69,
									"scores":	[-4.699928590811405]
								}, {
									"case":	70,
									"scores":	[-4.699928590811405]
								}, {
									"case":	71,
									"scores":	[-4.699928590811405]
								}, {
									"case":	72,
									"scores":	[-4.699928590811405]
								}, {
									"case":	73,
									"scores":	[-4.699928590811405]
								}, {
									"case":	74,
									"scores":	[-4.699928590811405]
								}, {
									"case":	75,
									"scores":	[-4.699928590811405]
								}, {
									"case":	76,
									"scores":	[-4.699928590811405]
								}, {
									"case":	77,
									"scores":	[-4.699928590811405]
								}, {
									"case":	78,
									"scores":	[-4.699928590811405]
								}, {
									"case":	79,
									"scores":	[-4.699928590811405]
								}, {
									"case":	80,
									"scores":	[-4.699928590811405]
								}, {
									"case":	81,
									"scores":	[-4.699928590811405]
								}, {
									"case":	82,
									"scores":	[-4.699928590811405]
								}, {
									"case":	83,
									"scores":	[-4.699928590811405]
								}, {
									"case":	84,
									"scores":	[-4.699928590811405]
								}, {
									"case":	85,
									"scores":	[-4.699928590811405]
								}, {
									"case":	86,
									"scores":	[-4.699928590811405]
								}, {
									"case":	87,
									"scores":	[-4.699928590811405]
								}, {
									"case":	88,
									"scores":	[-4.699928590811405]
								}, {
									"case":	89,
									"scores":	[-4.699928590811405]
								}, {
									"case":	90,
									"scores":	[-4.699928590811405]
								}, {
									"case":	91,
									"scores":	[-4.699928590811405]
								}, {
									"case":	92,
									"scores":	[-4.699928590811405]
								}, {
									"case":	93,
									"scores":	[-4.699928590811405]
								}, {
									"case":	94,
									"scores":	[-4.699928590811405]
								}, {
									"case":	95,
									"scores":	[-4.699928590811405]
								}, {
									"case":	96,
									"scores":	[-4.699928590811405]
								}, {
									"case":	97,
									"scores":	[-4.699928590811405]
								}, {
									"case":	98,
									"scores":	[-4.699928590811405]
								}, {
									"case":	99,
									"scores":	[-4.699928590811405]
								}, {
									"case":	100,
									"scores":	[-4.699928590811405]
								}, {
									"case":	101,
									"scores":	[-4.699928590811405]
								}, {
									"case":	102,
									"scores":	[-4.699928590811405]
								}, {
									"case":	103,
									"scores":	[-4.699928590811405]
								}, {
									"case":	104,
									"scores":	[-4.699928590811405]
								}, {
									"case":	105,
									"scores":	[-4.699928590811405]
								}, {
									"case":	106,
									"scores":	[-4.699928590811405]
								}, {
									"case":	107,
									"scores":	[-4.699928590811405]
								}, {
									"case":	108,
									"scores":	[-4.699928590811405]
								}, {
									"case":	109,
									"scores":	[-4.699928590811405]
								}, {
									"case":	110,
									"scores":	[-4.699928590811405]
								}, {
									"case":	111,
									"scores":	[-4.699928590811405]
								}, {
									"case":	112,
									"scores":	[-4.699928590811405]
								}, {
									"case":	113,
									"scores":	[-4.699928590811405]
								}, {
									"case":	114,
									"scores":	[-4.699928590811405]
								}, {
									"case":	115,
									"scores":	[-4.699928590811405]
								}, {
									"case":	116,
									"scores":	[-4.699928590811405]
								}, {
									"case":	117,
									"scores":	[-4.699928590811405]
								}, {
									"case":	118,
									"scores":	[-4.699928590811405]
								}, {
									"case":	119,
									"scores":	[-4.699928590811405]
								}, {
									"case":	120,
									"scores":	[-4.699928590811405]
								}, {
									"case":	121,
									"scores":	[-4.699928590811405]
								}, {
									"case":	122,
									"scores":	[-4.699928590811405]
								}, {
									"case":	123,
									"scores":	[-4.699928590811405]
								}, {
									"case":	124,
									"scores":	[-4.699928590811405]
								}, {
									"case":	125,
									"scores":	[-4.699928590811405]
								}, {
									"case":	126,
									"scores":	[-4.699928590811405]
								}, {
									"case":	127,
									"scores":	[-4.699928590811405]
								}, {
									"case":	128,
									"scores":	[-4.699928590811405]
								}, {
									"case":	129,
									"scores":	[-4.699928590811405]
								}, {
									"case":	130,
									"scores":	[-4.699928590811405]
								}, {
									"case":	131,
									"scores":	[-4.699928590811405]
								}, {
									"case":	132,
									"scores":	[-4.699928590811405]
								}, {
									"case":	133,
									"scores":	[-4.699928590811405]
								}, {
									"case":	134,
									"scores":	[-4.699928590811405]
								}, {
									"case":	135,
									"scores":	[-4.699928590811405]
								}, {
									"case":	136,
									"scores":	[-4.699928590811405]
								}, {
									"case":	137,
									"scores":	[-4.699928590811405]
								}, {
									"case":	138,
									"scores":	[-4.699928590811405]
								}, {
									"case":	139,
									"scores":	[-4.699928590811405]
								}, {
									"case":	140,
									"scores":	[-4.699928590811405]
								}, {
									"case":	141,
									"scores":	[-4.699928590811405]
								}, {
									"case":	142,
									"scores":	[-4.699928590811405]
								}, {
									"case":	143,
									"scores":	[-4.699928590811405]
								}, {
									"case":	144,
									"scores":	[-4.699928590811405]
								}, {
									"case":	145,
									"scores":	[-4.699928590811405]
								}, {
									"case":	146,
									"scores":	[-4.699928590811405]
								}, {
									"case":	147,
									"scores":	[-4.699928590811405]
								}, {
									"case":	148,
									"scores":	[-4.699928590811405]
								}, {
									"case":	149,
									"scores":	[-4.699928590811405]
								}, {
									"case":	150,
									"scores":	[-4.699928590811405]
								}, {
									"case":	151,
									"scores":	[-4.699928590811405]
								}, {
									"case":	152,
									"scores":	[-4.699928590811405]
								}, {
									"case":	153,
									"scores":	[-4.699928590811405]
								}, {
									"case":	154,
									"scores":	[-4.699928590811405]
								}, {
									"case":	155,
									"scores":	[-4.699928590811405]
								}, {
									"case":	156,
									"scores":	[-4.699928590811405]
								}, {
									"case":	157,
									"scores":	[-4.699928590811405]
								}, {
									"case":	158,
									"scores":	[-4.699928590811405]
								}, {
									"case":	159,
									"scores":	[-4.699928590811405]
								}, {
									"case":	160,
									"scores":	[-4.699928590811405]
								}, {
									"case":	161,
									"scores":	[-4.699928590811405]
								}, {
									"case":	162,
									"scores":	[-4.699928590811405]
								}, {
									"case":	163,
									"scores":	[-4.699928590811405]
								}, {
									"case":	164,
									"scores":	[-4.699928590811405]
								}, {
									"case":	165,
									"scores":	[-4.699928590811405]
								}, {
									"case":	166,
									"scores":	[-4.699928590811405]
								}, {
									"case":	167,
									"scores":	[-4.699928590811405]
								}, {
									"case":	168,
									"scores":	[-4.699928590811405]
								}, {
									"case":	169,
									"scores":	[-4.699928590811405]
								}, {
									"case":	170,
									"scores":	[-4.699928590811405]
								}, {
									"case":	171,
									"scores":	[-4.699928590811405]
								}, {
									"case":	172,
									"scores":	[-4.699928590811405]
								}, {
									"case":	173,
									"scores":	[-4.699928590811405]
								}, {
									"case":	174,
									"scores":	[-4.699928590811405]
								}, {
									"case":	175,
									"scores":	[-4.699928590811405]
								}, {
									"case":	176,
									"scores":	[-4.699928590811405]
								}, {
									"case":	177,
									"scores":	[-4.699928590811405]
								}, {
									"case":	178,
									"scores":	[-4.699928590811405]
								}, {
									"case":	179,
									"scores":	[-4.699928590811405]
								}, {
									"case":	180,
									"scores":	[-4.699928590811405]
								}, {
									"case":	181,
									"scores":	[-4.699928590811405]
								}, {
									"case":	182,
									"scores":	[-4.699928590811405]
								}, {
									"case":	183,
									"scores":	[-4.699928590811405]
								}, {
									"case":	184,
									"scores":	[-4.699928590811405]
								}, {
									"case":	185,
									"scores":	[-4.699928590811405]
								}, {
									"case":	186,
									"scores":	[-4.699928590811405]
								}, {
									"case":	187,
									"scores":	[-4.699928590811405]
								}, {
									"case":	188,
									"scores":	[-4.699928590811405]
								}, {
									"case":	189,
									"scores":	[-4.699928590811405]
								}, {
									"case":	190,
									"scores":	[-4.699928590811405]
								}, {
									"case":	191,
									"scores":	[-4.699928590811405]
								}, {
									"case":	192,
									"scores":	[-4.699928590811405]
								}, {
									"case":	193,
									"scores":	[-4.699928590811405]
								}, {
									"case":	194,
									"scores":	[-4.699928590811405]
								}, {
									"case":	195,
									"scores":	[-4.699928590811405]
								}, {
									"case":	196,
									"scores":	[-4.699928590811405]
								}, {
									"case":	197,
									"scores":	[-4.699928590811405]
								}, {
									"case":	198,
									"scores":	[-4.699928590811405]
								}, {
									"case":	199,
									"scores":	[-4.699928590811405]
								}, {
									"case":	200,
									"scores":	[-4.699928590811405]
								}, {
									"case":	201,
									"scores":	[-4.699928590811405]
								}, {
									"case":	202,
									"scores":	[-4.699928590811405]
								}, {
									"case":	203,
									"scores":	[-4.699928590811405]
								}, {
									"case":	204,
									"scores":	[-4.699928590811405]
								}, {
									"case":	205,
									"scores":	[-4.699928590811405]
								}, {
									"case":	206,
									"scores":	[-4.699928590811405]
								}, {
									"case":	207,
									"scores":	[-4.699928590811405]
								}, {
									"case":	208,
									"scores":	[-4.699928590811405]
								}, {
									"case":	209,
									"scores":	[-4.699928590811405]
								}, {
									"case":	210,
									"scores":	[-4.699928590811405]
								}, {
									"case":	211,
									"scores":	[-4.699928590811405]
								}, {
									"case":	212,
									"scores":	[-4.699928590811405]
								}, {
									"case":	213,
									"scores":	[-4.699928590811405]
								}, {
									"case":	214,
									"scores":	[-4.699928590811405]
								}, {
									"case":	215,
									"scores":	[-4.699928590811405]
								}, {
									"case":	216,
									"scores":	[-4.699928590811405]
								}, {
									"case":	217,
									"scores":	[-4.699928590811405]
								}, {
									"case":	218,
									"scores":	[-4.699928590811405]
								}, {
									"case":	219,
									"scores":	[-4.699928590811405]
								}, {
									"case":	220,
									"scores":	[-4.699928590811405]
								}, {
									"case":	221,
									"scores":	[-4.699928590811405]
								}, {
									"case":	222,
									"scores":	[-4.699928590811405]
								}, {
									"case":	223,
									"scores":	[-4.699928590811405]
								}, {
									"case":	224,
									"scores":	[-4.699928590811405]
								}, {
									"case":	225,
									"scores":	[-4.699928590811405]
								}, {
									"case":	226,
									"scores":	[-4.699928590811405]
								}, {
									"case":	227,
									"scores":	[-4.699928590811405]
								}, {
									"case":	228,
									"scores":	[-4.699928590811405]
								}, {
									"case":	229,
									"scores":	[-4.699928590811405]
								}, {
									"case":	230,
									"scores":	[-4.699928590811405]
								}, {
									"case":	231,
									"scores":	[-4.699928590811405]
								}, {
									"case":	232,
									"scores":	[-4.699928590811405]
								}, {
									"case":	233,
									"scores":	[-4.699928590811405]
								}, {
									"case":	234,
									"scores":	[-4.699928590811405]
								}, {
									"case":	235,
									"scores":	[-4.699928590811405]
								}, {
									"case":	236,
									"scores":	[-4.699928590811405]
								}, {
									"case":	237,
									"scores":	[-4.699928590811405]
								}, {
									"case":	238,
									"scores":	[-4.699928590811405]
								}, {
									"case":	239,
									"scores":	[-4.699928590811405]
								}, {
									"case":	240,
									"scores":	[-4.699928590811405]
								}, {
									"case":	241,
									"scores":	[-4.699928590811405]
								}, {
									"case":	242,
									"scores":	[-4.699928590811405]
								}, {
									"case":	243,
									"scores":	[-4.699928590811405]
								}, {
									"case":	244,
									"scores":	[-4.699928590811405]
								}, {
									"case":	245,
									"scores":	[-4.699928590811405]
								}, {
									"case":	246,
									"scores":	[-4.699928590811405]
								}, {
									"case":	247,
									"scores":	[-4.699928590811405]
								}, {
									"case":	248,
									"scores":	[-4.699928590811405]
								}, {
									"case":	249,
									"scores":	[-4.699928590811405]
								}, {
									"case":	250,
									"scores":	[-4.699928590811405]
								}, {
									"case":	251,
									"scores":	[-4.699928590811405]
								}, {
									"case":	252,
									"scores":	[-4.699928590811405]
								}, {
									"case":	253,
									"scores":	[-4.699928590811405]
								}, {
									"case":	254,
									"scores":	[-4.699928590811405]
								}, {
									"case":	255,
									"scores":	[-4.699928590811405]
								}, {
									"case":	256,
									"scores":	[-4.699928590811405]
								}, {
									"case":	257,
									"scores":	[-4.699928590811405]
								}, {
									"case":	258,
									"scores":	[-4.699928590811405]
								}, {
									"case":	259,
									"scores":	[-4.699928590811405]
								}, {
									"case":	260,
									"scores":	[-4.699928590811405]
								}, {
									"case":	261,
									"scores":	[-4.699928590811405]
								}, {
									"case":	262,
									"scores":	[-4.699928590811405]
								}, {
									"case":	263,
									"scores":	[-4.699928590811405]
								}, {
									"case":	264,
									"scores":	[-4.699928590811405]
								}, {
									"case":	265,
									"scores":	[-4.699928590811405]
								}, {
									"case":	266,
									"scores":	[-4.699928590811405]
								}, {
									"case":	267,
									"scores":	[-4.699928590811405]
								}, {
									"case":	268,
									"scores":	[-4.699928590811405]
								}, {
									"case":	269,
									"scores":	[-4.699928590811405]
								}, {
									"case":	270,
									"scores":	[-4.699928590811405]
								}, {
									"case":	271,
									"scores":	[-4.699928590811405]
								}, {
									"case":	272,
									"scores":	[-4.699928590811405]
								}, {
									"case":	273,
									"scores":	[-4.699928590811405]
								}, {
									"case":	274,
									"scores":	[-4.699928590811405]
								}, {
									"case":	275,
									"scores":	[-4.699928590811405]
								}, {
									"case":	276,
									"scores":	[-4.699928590811405]
								}, {
									"case":	277,
									"scores":	[-4.699928590811405]
								}, {
									"case":	278,
									"scores":	[-4.699928590811405]
								}, {
									"case":	279,
									"scores":	[-4.699928590811405]
								}, {
									"case":	280,
									"scores":	[-4.699928590811405]
								}, {
									"case":	281,
									"scores":	[-4.699928590811405]
								}, {
									"case":	282,
									"scores":	[-4.699928590811405]
								}, {
									"case":	283,
									"scores":	[-4.699928590811405]
								}, {
									"case":	284,
									"scores":	[-4.699928590811405]
								}, {
									"case":	285,
									"scores":	[-4.699928590811405]
								}, {
									"case":	286,
									"scores":	[-4.699928590811405]
								}, {
									"case":	287,
									"scores":	[-4.699928590811405]
								}, {
									"case":	288,
									"scores":	[-4.699928590811405]
								}, {
									"case":	289,
									"scores":	[-4.699928590811405]
								}, {
									"case":	290,
									"scores":	[-4.699928590811405]
								}, {
									"case":	291,
									"scores":	[-4.699928590811405]
								}, {
									"case":	292,
									"scores":	[-4.699928590811405]
								}, {
									"case":	293,
									"scores":	[-4.699928590811405]
								}, {
									"case":	294,
									"scores":	[-4.699928590811405]
								}, {
									"case":	295,
									"scores":	[-4.699928590811405]
								}, {
									"case":	296,
									"scores":	[-4.699928590811405]
								}, {
									"case":	297,
									"scores":	[-4.699928590811405]
								}, {
									"case":	298,
									"scores":	[-4.699928590811405]
								}, {
									"case":	299,
									"scores":	[-4.699928590811405]
								}, {
									"case":	300,
									"scores":	[-4.699928590811405]
								}, {
									"case":	301,
									"scores":	[-4.699928590811405]
								}, {
									"case":	302,
									"scores":	[-4.699928590811405]
								}, {
									"case":	303,
									"scores":	[-4.699928590811405]
								}, {
									"case":	304,
									"scores":	[-4.699928590811405]
								}, {
									"case":	305,
									"scores":	[-4.699928590811405]
								}, {
									"case":	306,
									"scores":	[-4.699928590811405]
								}, {
									"case":	307,
									"scores":	[-4.699928590811405]
								}, {
									"case":	308,
									"scores":	[-4.699928590811405]
								}, {
									"case":	309,
									"scores":	[-4.699928590811405]
								}, {
									"case":	310,
									"scores":	[-4.699928590811405]
								}, {
									"case":	311,
									"scores":	[-4.699928590811405]
								}, {
									"case":	312,
									"scores":	[-4.699928590811405]
								}, {
									"case":	313,
									"scores":	[-4.699928590811405]
								}, {
									"case":	314,
									"scores":	[-4.699928590811405]
								}, {
									"case":	315,
									"scores":	[-4.699928590811405]
								}, {
									"case":	316,
									"scores":	[-4.699928590811405]
								}, {
									"case":	317,
									"scores":	[-4.699928590811405]
								}, {
									"case":	318,
									"scores":	[-4.699928590811405]
								}, {
									"case":	319,
									"scores":	[-4.699928590811405]
								}, {
									"case":	320,
									"scores":	[-4.699928590811405]
								}, {
									"case":	321,
									"scores":	[-4.699928590811405]
								}, {
									"case":	322,
									"scores":	[-4.699928590811405]
								}, {
									"case":	323,
									"scores":	[-4.699928590811405]
								}, {
									"case":	324,
									"scores":	[-4.699928590811405]
								}, {
									"case":	325,
									"scores":	[-4.699928590811405]
								}, {
									"case":	326,
									"scores":	[-4.699928590811405]
								}, {
									"case":	327,
									"scores":	[-4.699928590811405]
								}, {
									"case":	328,
									"scores":	[-4.699928590811405]
								}, {
									"case":	329,
									"scores":	[-4.699928590811405]
								}, {
									"case":	330,
									"scores":	[-4.699928590811405]
								}, {
									"case":	331,
									"scores":	[-4.699928590811405]
								}, {
									"case":	332,
									"scores":	[-4.699928590811405]
								}, {
									"case":	333,
									"scores":	[-4.699928590811405]
								}, {
									"case":	334,
									"scores":	[-4.699928590811405]
								}, {
									"case":	335,
									"scores":	[-4.699928590811405]
								}, {
									"case":	336,
									"scores":	[-4.699928590811405]
								}, {
									"case":	337,
									"scores":	[-4.699928590811405]
								}, {
									"case":	338,
									"scores":	[-4.699928590811405]
								}, {
									"case":	339,
									"scores":	[-4.699928590811405]
								}, {
									"case":	340,
									"scores":	[-4.699928590811405]
								}, {
									"case":	341,
									"scores":	[-4.699928590811405]
								}, {
									"case":	342,
									"scores":	[-4.699928590811405]
								}, {
									"case":	343,
									"scores":	[-4.699928590811405]
								}, {
									"case":	344,
									"scores":	[-4.699928590811405]
								}, {
									"case":	345,
									"scores":	[-4.699928590811405]
								}, {
									"case":	346,
									"scores":	[-4.699928590811405]
								}, {
									"case":	347,
									"scores":	[-4.699928590811405]
								}, {
									"case":	348,
									"scores":	[-4.699928590811405]
								}, {
									"case":	349,
									"scores":	[-4.699928590811405]
								}, {
									"case":	350,
									"scores":	[-4.699928590811405]
								}, {
									"case":	351,
									"scores":	[-4.699928590811405]
								}, {
									"case":	352,
									"scores":	[-4.699928590811405]
								}, {
									"case":	353,
									"scores":	[-4.699928590811405]
								}, {
									"case":	354,
									"scores":	[-4.699928590811405]
								}, {
									"case":	355,
									"scores":	[-4.699928590811405]
								}, {
									"case":	356,
									"scores":	[-4.699928590811405]
								}, {
									"case":	357,
									"scores":	[-4.699928590811405]
								}, {
									"case":	358,
									"scores":	[-4.699928590811405]
								}, {
									"case":	359,
									"scores":	[-4.699928590811405]
								}, {
									"case":	360,
									"scores":	[-4.699928590811405]
								}, {
									"case":	361,
									"scores":	[-4.699928590811405]
								}, {
									"case":	362,
									"scores":	[-4.699928590811405]
								}, {
									"case":	363,
									"scores":	[-4.699928590811405]
								}, {
									"case":	364,
									"scores":	[-4.699928590811405]
								}, {
									"case":	365,
									"scores":	[-4.699928590811405]
								}, {
									"case":	366,
									"scores":	[-4.699928590811405]
								}, {
									"case":	367,
									"scores":	[-4.699928590811405]
								}, {
									"case":	368,
									"scores":	[-4.699928590811405]
								}, {
									"case":	369,
									"scores":	[-4.699928590811405]
								}, {
									"case":	370,
									"scores":	[-4.699928590811405]
								}, {
									"case":	371,
									"scores":	[-4.699928590811405]
								}, {
									"case":	372,
									"scores":	[-4.699928590811405]
								}, {
									"case":	373,
									"scores":	[-4.699928590811405]
								}, {
									"case":	374,
									"scores":	[-4.699928590811405]
								}, {
									"case":	375,
									"scores":	[-4.699928590811405]
								}, {
									"case":	376,
									"scores":	[-4.699928590811405]
								}, {
									"case":	377,
									"scores":	[-4.699928590811405]
								}, {
									"case":	378,
									"scores":	[-4.699928590811405]
								}, {
									"case":	379,
									"scores":	[-4.699928590811405]
								}, {
									"case":	380,
									"scores":	[-4.699928590811405]
								}, {
									"case":	381,
									"scores":	[-4.699928590811405]
								}, {
									"case":	382,
									"scores":	[-4.699928590811405]
								}, {
									"case":	383,
									"scores":	[-4.699928590811405]
								}, {
									"case":	384,
									"scores":	[-4.699928590811405]
								}, {
									"case":	385,
									"scores":	[-4.699928590811405]
								}, {
									"case":	386,
									"scores":	[-4.699928590811405]
								}, {
									"case":	387,
									"scores":	[-4.699928590811405]
								}, {
									"case":	388,
									"scores":	[-4.699928590811405]
								}, {
									"case":	389,
									"scores":	[-4.699928590811405]
								}, {
									"case":	390,
									"scores":	[-4.699928590811405]
								}, {
									"case":	391,
									"scores":	[-4.699928590811405]
								}, {
									"case":	392,
									"scores":	[-4.699928590811405]
								}, {
									"case":	393,
									"scores":	[-4.699928590811405]
								}, {
									"case":	394,
									"scores":	[-4.699928590811405]
								}, {
									"case":	395,
									"scores":	[-4.699928590811405]
								}, {
									"case":	396,
									"scores":	[-4.699928590811405]
								}, {
									"case":	397,
									"scores":	[-4.699928590811405]
								}, {
									"case":	398,
									"scores":	[-4.699928590811405]
								}, {
									"case":	399,
									"scores":	[-4.699928590811405]
								}, {
									"case":	400,
									"scores":	[-7.6862061469114042, -7.6140273772114053, -8.1107177999114057, -7.9436895222114057, -6.5924528572114047, -7.8537773560114044, -7.0717047192114046, -6.0382795422114048, -7.9436895222114057, -6.0382795422114048, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.5696893360114048, -7.532588936011404, -7.532588936011404, -7.3236504222114052, -7.5696893360114048, -7.5340759700114051, -7.5340759700114051, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -8.0891499360114061, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -8.0540001392114053, -8.0891499360114061, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047, -7.8431110222114047]
								}]
						}, {
							"switch":	79,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2913,
							"begin_column":	2,
							"end_line":	2913,
							"end_column":	36,
							"patch_codes":	["if (!__is_neg(\"\", \"L2913\", 45, &(dateobj), sizeof (dateobj), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(return_value), sizeof (return_value), &(object), sizeof (object), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.weekday = 0;\n", "{\n}\n", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0 * bias)", "dateobj->time->relative.weekday = (0 * ht)", "dateobj->time->relative.weekday = (0 * return_value_used)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias != 0)", "dateobj->time->relative.weekday = (bias * ht)", "dateobj->time->relative.weekday = (bias * return_value_used)", "dateobj->time->relative.weekday = (bias + 0)", "dateobj->time->relative.weekday = (bias - 0)", "dateobj->time->relative.weekday = (bias == 0)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (dateobj != 0)", "dateobj->time->relative.weekday = (dateobj == 0)", "dateobj->time->relative.weekday = (ht != 0)", "dateobj->time->relative.weekday = (ht != bias)", "dateobj->time->relative.weekday = (ht != return_value_used)", "dateobj->time->relative.weekday = (ht * bias)", "dateobj->time->relative.weekday = (ht * return_value_used)", "dateobj->time->relative.weekday = (ht + 0)", "dateobj->time->relative.weekday = (ht + bias)", "dateobj->time->relative.weekday = (ht + return_value_used)", "dateobj->time->relative.weekday = (ht - 0)", "dateobj->time->relative.weekday = (ht - bias)", "dateobj->time->relative.weekday = (ht - return_value_used)", "dateobj->time->relative.weekday = (ht == 0)", "dateobj->time->relative.weekday = (ht == bias)", "dateobj->time->relative.weekday = (ht == return_value_used)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (interval != 0)", "dateobj->time->relative.weekday = (interval == 0)", "dateobj->time->relative.weekday = (intobj != 0)", "dateobj->time->relative.weekday = (intobj == 0)", "dateobj->time->relative.weekday = (object != 0)", "dateobj->time->relative.weekday = (object != interval)", "dateobj->time->relative.weekday = (object == 0)", "dateobj->time->relative.weekday = (object == interval)", "dateobj->time->relative.weekday = (return_value != 0)", "dateobj->time->relative.weekday = (return_value != interval)", "dateobj->time->relative.weekday = (return_value != object)", "dateobj->time->relative.weekday = (return_value != this_ptr)", "dateobj->time->relative.weekday = (return_value == 0)", "dateobj->time->relative.weekday = (return_value == interval)", "dateobj->time->relative.weekday = (return_value == object)", "dateobj->time->relative.weekday = (return_value == this_ptr)", "dateobj->time->relative.weekday = (return_value_ptr != 0)", "dateobj->time->relative.weekday = (return_value_ptr == 0)", "dateobj->time->relative.weekday = (return_value_used != 0)", "dateobj->time->relative.weekday = (return_value_used != bias)", "dateobj->time->relative.weekday = (return_value_used * bias)", "dateobj->time->relative.weekday = (return_value_used * ht)", "dateobj->time->relative.weekday = (return_value_used + 0)", "dateobj->time->relative.weekday = (return_value_used + bias)", "dateobj->time->relative.weekday = (return_value_used - 0)", "dateobj->time->relative.weekday = (return_value_used - bias)", "dateobj->time->relative.weekday = (return_value_used == 0)", "dateobj->time->relative.weekday = (return_value_used == bias)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.weekday = (this_ptr != 0)", "dateobj->time->relative.weekday = (this_ptr != interval)", "dateobj->time->relative.weekday = (this_ptr != object)", "dateobj->time->relative.weekday = (this_ptr == 0)", "dateobj->time->relative.weekday = (this_ptr == interval)", "dateobj->time->relative.weekday = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0747461592114051, -6.2768117618114054, -6.1542414682114046, -6.2764644258114046, -5.4962012108114049, -5.8795145513114049, -4.8795824428114045, -4.5807722108114053, -5.4611017348114048, -4.5807722108114053, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -6.3026408608114046, -6.0082900608114045, -6.0082900608114045, -5.5447527608114049, -6.3026408608114046, -6.011547500811405, -6.011547500811405, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -6.2193371708114054, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.930709070811405, -6.2193371708114054, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047, -5.4614490708114047]
								}, {
									"case":	2,
									"scores":	[-4.699928590811405]
								}, {
									"case":	3,
									"scores":	[-4.699928590811405]
								}, {
									"case":	4,
									"scores":	[-4.699928590811405]
								}, {
									"case":	5,
									"scores":	[-4.699928590811405]
								}, {
									"case":	6,
									"scores":	[-4.699928590811405]
								}, {
									"case":	7,
									"scores":	[-4.699928590811405]
								}, {
									"case":	8,
									"scores":	[-4.699928590811405]
								}, {
									"case":	9,
									"scores":	[-4.699928590811405]
								}, {
									"case":	10,
									"scores":	[-4.699928590811405]
								}, {
									"case":	11,
									"scores":	[-4.699928590811405]
								}, {
									"case":	12,
									"scores":	[-4.699928590811405]
								}, {
									"case":	13,
									"scores":	[-4.699928590811405]
								}, {
									"case":	14,
									"scores":	[-4.699928590811405]
								}, {
									"case":	15,
									"scores":	[-4.699928590811405]
								}, {
									"case":	16,
									"scores":	[-4.699928590811405]
								}, {
									"case":	17,
									"scores":	[-4.699928590811405]
								}, {
									"case":	18,
									"scores":	[-4.699928590811405]
								}, {
									"case":	19,
									"scores":	[-4.699928590811405]
								}, {
									"case":	20,
									"scores":	[-4.699928590811405]
								}, {
									"case":	21,
									"scores":	[-4.699928590811405]
								}, {
									"case":	22,
									"scores":	[-4.699928590811405]
								}, {
									"case":	23,
									"scores":	[-4.699928590811405]
								}, {
									"case":	24,
									"scores":	[-4.699928590811405]
								}, {
									"case":	25,
									"scores":	[-4.699928590811405]
								}, {
									"case":	26,
									"scores":	[-4.699928590811405]
								}, {
									"case":	27,
									"scores":	[-4.699928590811405]
								}, {
									"case":	28,
									"scores":	[-4.699928590811405]
								}, {
									"case":	29,
									"scores":	[-4.699928590811405]
								}, {
									"case":	30,
									"scores":	[-4.699928590811405]
								}, {
									"case":	31,
									"scores":	[-4.699928590811405]
								}, {
									"case":	32,
									"scores":	[-4.699928590811405]
								}, {
									"case":	33,
									"scores":	[-4.699928590811405]
								}, {
									"case":	34,
									"scores":	[-4.699928590811405]
								}, {
									"case":	35,
									"scores":	[-4.699928590811405]
								}, {
									"case":	36,
									"scores":	[-4.699928590811405]
								}, {
									"case":	37,
									"scores":	[-4.699928590811405]
								}, {
									"case":	38,
									"scores":	[-4.699928590811405]
								}, {
									"case":	39,
									"scores":	[-4.699928590811405]
								}, {
									"case":	40,
									"scores":	[-4.699928590811405]
								}, {
									"case":	41,
									"scores":	[-4.699928590811405]
								}, {
									"case":	42,
									"scores":	[-4.699928590811405]
								}, {
									"case":	43,
									"scores":	[-4.699928590811405]
								}, {
									"case":	44,
									"scores":	[-4.699928590811405]
								}, {
									"case":	45,
									"scores":	[-4.699928590811405]
								}, {
									"case":	46,
									"scores":	[-4.699928590811405]
								}, {
									"case":	47,
									"scores":	[-4.699928590811405]
								}, {
									"case":	48,
									"scores":	[-4.699928590811405]
								}, {
									"case":	49,
									"scores":	[-4.699928590811405]
								}, {
									"case":	50,
									"scores":	[-4.699928590811405]
								}, {
									"case":	51,
									"scores":	[-4.699928590811405]
								}, {
									"case":	52,
									"scores":	[-4.699928590811405]
								}, {
									"case":	53,
									"scores":	[-4.699928590811405]
								}, {
									"case":	54,
									"scores":	[-4.699928590811405]
								}, {
									"case":	55,
									"scores":	[-4.699928590811405]
								}, {
									"case":	56,
									"scores":	[-4.699928590811405]
								}, {
									"case":	57,
									"scores":	[-4.699928590811405]
								}, {
									"case":	58,
									"scores":	[-4.699928590811405]
								}, {
									"case":	59,
									"scores":	[-4.699928590811405]
								}, {
									"case":	60,
									"scores":	[-4.699928590811405]
								}, {
									"case":	61,
									"scores":	[-4.699928590811405]
								}, {
									"case":	62,
									"scores":	[-4.699928590811405]
								}, {
									"case":	63,
									"scores":	[-4.699928590811405]
								}, {
									"case":	64,
									"scores":	[-4.699928590811405]
								}, {
									"case":	65,
									"scores":	[-4.699928590811405]
								}, {
									"case":	66,
									"scores":	[-4.699928590811405]
								}, {
									"case":	67,
									"scores":	[-4.699928590811405]
								}, {
									"case":	68,
									"scores":	[-4.699928590811405]
								}, {
									"case":	69,
									"scores":	[-4.699928590811405]
								}]
						}]
				}, {
					"line":	2913,
					"switches":	[{
							"switch":	80,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2914,
							"begin_column":	0,
							"end_line":	2914,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2914\", 45, &(dateobj), sizeof (dateobj), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	2,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	3,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	4,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	5,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	6,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	7,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	8,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	9,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	10,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	11,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	12,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	13,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	14,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	15,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	16,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	17,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	18,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	19,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	20,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	21,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	22,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	23,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	24,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	25,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	26,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	27,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	28,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	29,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	30,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	31,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	32,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	33,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	34,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	35,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	36,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	37,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	38,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	39,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	40,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	41,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	42,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	43,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	44,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	45,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	46,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	47,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	48,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	49,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	50,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	51,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	52,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	53,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	54,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	55,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	56,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	57,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	58,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	59,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	60,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	61,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	62,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	63,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	64,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	65,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	66,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	67,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	68,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	69,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	70,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	71,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	72,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	73,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	74,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	75,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	76,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	77,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	78,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	79,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	80,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	81,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	82,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	83,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	84,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	85,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	86,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	87,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	88,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	89,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	90,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	91,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	92,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	93,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	94,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	95,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	96,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	97,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	98,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	99,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	100,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	101,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	102,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	103,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	104,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	105,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	106,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	107,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	108,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	109,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	110,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	111,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	112,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	113,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	114,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	115,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	116,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	117,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	118,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	119,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	120,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	121,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	122,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	123,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	124,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	125,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	126,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	127,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	128,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	129,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	130,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	131,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	132,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	133,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	134,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	135,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	136,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	137,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	138,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	139,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	140,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	141,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	142,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	143,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	144,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	145,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	146,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	147,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	148,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	149,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	150,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	151,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	152,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	153,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	154,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	155,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	156,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	157,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	158,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	159,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	160,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	161,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	162,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	163,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	164,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	165,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	166,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	167,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	168,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	169,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	170,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	171,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	172,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	173,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	174,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	175,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	176,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	177,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	178,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	179,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	180,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	181,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	182,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	183,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	184,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	185,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	186,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	187,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	188,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	189,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	190,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	191,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	192,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	193,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	194,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	195,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	196,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	197,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	198,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	199,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	200,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	201,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	202,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	203,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	204,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	205,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	206,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	207,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	208,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	209,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	210,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	211,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	212,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	213,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	214,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	215,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	216,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	217,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	218,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	219,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	220,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	221,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	222,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	223,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	224,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	225,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	226,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	227,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	228,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	229,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	230,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	231,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	232,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	233,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	234,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	235,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	236,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	237,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	238,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	239,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	240,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	241,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	242,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	243,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	244,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	245,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	246,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	247,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	248,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	249,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	250,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	251,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	252,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	253,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	254,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	255,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	256,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	257,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	258,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	259,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	260,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	261,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	262,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	263,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	264,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	265,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	266,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	267,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	268,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	269,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	270,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	271,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	272,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	273,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	274,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	275,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	276,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	277,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	278,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	279,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	280,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	281,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	282,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	283,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	284,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	285,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	286,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	287,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	288,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	289,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	290,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	291,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	292,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	293,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	294,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	295,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	296,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	297,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	298,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	299,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	300,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	301,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	302,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	303,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	304,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	305,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	306,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	307,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	308,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	309,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	310,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	311,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	312,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	313,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	314,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	315,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	316,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	317,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	318,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	319,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	320,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	321,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	322,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	323,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	324,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	325,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	326,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	327,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	328,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	329,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	330,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	331,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	332,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	333,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	334,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	335,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	336,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	337,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	338,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	339,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	340,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	341,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	342,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	343,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	344,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	345,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	346,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	347,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	348,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	349,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	350,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	351,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	352,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	353,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	354,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	355,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	356,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	357,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	358,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	359,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	360,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	361,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	362,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	363,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	364,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	365,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	366,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	367,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	368,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	369,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	370,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	371,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	372,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	373,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	374,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	375,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	376,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	377,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	378,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	379,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	380,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	381,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	382,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	383,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	384,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	385,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	386,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	387,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	388,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	389,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	390,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	391,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	392,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	393,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	394,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	395,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	396,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	397,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	398,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	399,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	400,
									"scores":	[-7.6660034395938847, -7.5938246698938858, -8.0905150925938862, -6.6866961698938852, -7.9234868148938862, -6.5722501498938852, -7.8335746486938849, -7.0515020118938851, -6.0180768348938853, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.5494866286938853, -7.5123862286938845, -7.8229083148938852, -7.5123862286938845, -7.3034477148938857, -7.5494866286938853, -7.5138732626938856, -7.5138732626938856, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -8.0689472286938866, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -8.0337974318938858, -8.0689472286938866, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852, -7.8229083148938852]
								}]
						}, {
							"switch":	81,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2914,
							"begin_column":	2,
							"end_line":	2914,
							"end_column":	50,
							"patch_codes":	["if (!__is_neg(\"\", \"L2914\", 45, &(dateobj), sizeof (dateobj), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->relative.have_weekday_relative = 0;\n", "{\n}\n", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0 * bias)", "dateobj->time->relative.have_weekday_relative = (0 * ht)", "dateobj->time->relative.have_weekday_relative = (0 * return_value_used)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.have_weekday_relative = (bias != 0)", "dateobj->time->relative.have_weekday_relative = (bias * ht)", "dateobj->time->relative.have_weekday_relative = (bias * return_value_used)", "dateobj->time->relative.have_weekday_relative = (bias + 0)", "dateobj->time->relative.have_weekday_relative = (bias - 0)", "dateobj->time->relative.have_weekday_relative = (bias == 0)", "dateobj->time->relative.have_weekday_relative = (dateobj != 0)", "dateobj->time->relative.have_weekday_relative = (dateobj == 0)", "dateobj->time->relative.have_weekday_relative = (ht != 0)", "dateobj->time->relative.have_weekday_relative = (ht != bias)", "dateobj->time->relative.have_weekday_relative = (ht != return_value_used)", "dateobj->time->relative.have_weekday_relative = (ht * bias)", "dateobj->time->relative.have_weekday_relative = (ht * return_value_used)", "dateobj->time->relative.have_weekday_relative = (ht + 0)", "dateobj->time->relative.have_weekday_relative = (ht + bias)", "dateobj->time->relative.have_weekday_relative = (ht + return_value_used)", "dateobj->time->relative.have_weekday_relative = (ht - 0)", "dateobj->time->relative.have_weekday_relative = (ht - bias)", "dateobj->time->relative.have_weekday_relative = (ht - return_value_used)", "dateobj->time->relative.have_weekday_relative = (ht == 0)", "dateobj->time->relative.have_weekday_relative = (ht == bias)", "dateobj->time->relative.have_weekday_relative = (ht == return_value_used)", "dateobj->time->relative.have_weekday_relative = (interval != 0)", "dateobj->time->relative.have_weekday_relative = (interval == 0)", "dateobj->time->relative.have_weekday_relative = (intobj != 0)", "dateobj->time->relative.have_weekday_relative = (intobj == 0)", "dateobj->time->relative.have_weekday_relative = (object != 0)", "dateobj->time->relative.have_weekday_relative = (object != interval)", "dateobj->time->relative.have_weekday_relative = (object == 0)", "dateobj->time->relative.have_weekday_relative = (object == interval)", "dateobj->time->relative.have_weekday_relative = (return_value != 0)", "dateobj->time->relative.have_weekday_relative = (return_value != interval)", "dateobj->time->relative.have_weekday_relative = (return_value != object)", "dateobj->time->relative.have_weekday_relative = (return_value != this_ptr)", "dateobj->time->relative.have_weekday_relative = (return_value == 0)", "dateobj->time->relative.have_weekday_relative = (return_value == interval)", "dateobj->time->relative.have_weekday_relative = (return_value == object)", "dateobj->time->relative.have_weekday_relative = (return_value == this_ptr)", "dateobj->time->relative.have_weekday_relative = (return_value_ptr != 0)", "dateobj->time->relative.have_weekday_relative = (return_value_ptr == 0)", "dateobj->time->relative.have_weekday_relative = (return_value_used != 0)", "dateobj->time->relative.have_weekday_relative = (return_value_used != bias)", "dateobj->time->relative.have_weekday_relative = (return_value_used * bias)", "dateobj->time->relative.have_weekday_relative = (return_value_used * ht)", "dateobj->time->relative.have_weekday_relative = (return_value_used + 0)", "dateobj->time->relative.have_weekday_relative = (return_value_used + bias)", "dateobj->time->relative.have_weekday_relative = (return_value_used - 0)", "dateobj->time->relative.have_weekday_relative = (return_value_used - bias)", "dateobj->time->relative.have_weekday_relative = (return_value_used == 0)", "dateobj->time->relative.have_weekday_relative = (return_value_used == bias)", "dateobj->time->relative.have_weekday_relative = (this_ptr != 0)", "dateobj->time->relative.have_weekday_relative = (this_ptr != interval)", "dateobj->time->relative.have_weekday_relative = (this_ptr != object)", "dateobj->time->relative.have_weekday_relative = (this_ptr == 0)", "dateobj->time->relative.have_weekday_relative = (this_ptr == interval)", "dateobj->time->relative.have_weekday_relative = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0545434518938857, -6.2566090544938859, -6.1340387608938851, -5.7069165034938854, -6.2562617184938851, -5.4759985034938854, -5.8593118439938854, -4.859379735493885, -4.5605695034938858, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -6.2824381534938851, -5.988087353493885, -5.4412463634938852, -5.988087353493885, -5.5245500534938854, -6.2824381534938851, -5.9913447934938855, -5.9913447934938855, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -6.1991344634938859, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.9105063634938855, -6.1991344634938859, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852, -5.4412463634938852]
								}, {
									"case":	2,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	3,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	4,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	5,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	6,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	7,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	8,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	9,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	10,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	11,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	12,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	13,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	14,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	15,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	16,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	17,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	18,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	19,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	20,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	21,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	22,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	23,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	24,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	25,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	26,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	27,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	28,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	29,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	30,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	31,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	32,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	33,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	34,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	35,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	36,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	37,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	38,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	39,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	40,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	41,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	42,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	43,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	44,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	45,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	46,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	47,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	48,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	49,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	50,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	51,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	52,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	53,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	54,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	55,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	56,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	57,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	58,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	59,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	60,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	61,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	62,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	63,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	64,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	65,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	66,
									"scores":	[-4.6797258834938855]
								}]
						}]
				}, {
					"line":	2914,
					"switches":	[{
							"switch":	82,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2915,
							"begin_column":	0,
							"end_line":	2915,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2915\", 45, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.659523176176366]
								}, {
									"case":	2,
									"scores":	[-4.659523176176366]
								}, {
									"case":	3,
									"scores":	[-4.659523176176366]
								}, {
									"case":	4,
									"scores":	[-4.659523176176366]
								}, {
									"case":	5,
									"scores":	[-4.659523176176366]
								}, {
									"case":	6,
									"scores":	[-4.659523176176366]
								}, {
									"case":	7,
									"scores":	[-4.659523176176366]
								}, {
									"case":	8,
									"scores":	[-4.659523176176366]
								}, {
									"case":	9,
									"scores":	[-4.659523176176366]
								}, {
									"case":	10,
									"scores":	[-4.659523176176366]
								}, {
									"case":	11,
									"scores":	[-4.659523176176366]
								}, {
									"case":	12,
									"scores":	[-4.659523176176366]
								}, {
									"case":	13,
									"scores":	[-4.659523176176366]
								}, {
									"case":	14,
									"scores":	[-4.659523176176366]
								}, {
									"case":	15,
									"scores":	[-4.659523176176366]
								}, {
									"case":	16,
									"scores":	[-4.659523176176366]
								}, {
									"case":	17,
									"scores":	[-4.659523176176366]
								}, {
									"case":	18,
									"scores":	[-4.659523176176366]
								}, {
									"case":	19,
									"scores":	[-4.659523176176366]
								}, {
									"case":	20,
									"scores":	[-4.659523176176366]
								}, {
									"case":	21,
									"scores":	[-4.659523176176366]
								}, {
									"case":	22,
									"scores":	[-4.659523176176366]
								}, {
									"case":	23,
									"scores":	[-4.659523176176366]
								}, {
									"case":	24,
									"scores":	[-4.659523176176366]
								}, {
									"case":	25,
									"scores":	[-4.659523176176366]
								}, {
									"case":	26,
									"scores":	[-4.659523176176366]
								}, {
									"case":	27,
									"scores":	[-4.659523176176366]
								}, {
									"case":	28,
									"scores":	[-4.659523176176366]
								}, {
									"case":	29,
									"scores":	[-4.659523176176366]
								}, {
									"case":	30,
									"scores":	[-4.659523176176366]
								}, {
									"case":	31,
									"scores":	[-4.659523176176366]
								}, {
									"case":	32,
									"scores":	[-4.659523176176366]
								}, {
									"case":	33,
									"scores":	[-4.659523176176366]
								}, {
									"case":	34,
									"scores":	[-4.659523176176366]
								}, {
									"case":	35,
									"scores":	[-4.659523176176366]
								}, {
									"case":	36,
									"scores":	[-4.659523176176366]
								}, {
									"case":	37,
									"scores":	[-4.659523176176366]
								}, {
									"case":	38,
									"scores":	[-4.659523176176366]
								}, {
									"case":	39,
									"scores":	[-4.659523176176366]
								}, {
									"case":	40,
									"scores":	[-4.659523176176366]
								}, {
									"case":	41,
									"scores":	[-4.659523176176366]
								}, {
									"case":	42,
									"scores":	[-4.659523176176366]
								}, {
									"case":	43,
									"scores":	[-4.659523176176366]
								}, {
									"case":	44,
									"scores":	[-4.659523176176366]
								}, {
									"case":	45,
									"scores":	[-4.659523176176366]
								}, {
									"case":	46,
									"scores":	[-4.659523176176366]
								}, {
									"case":	47,
									"scores":	[-4.659523176176366]
								}, {
									"case":	48,
									"scores":	[-4.659523176176366]
								}, {
									"case":	49,
									"scores":	[-4.659523176176366]
								}, {
									"case":	50,
									"scores":	[-4.659523176176366]
								}, {
									"case":	51,
									"scores":	[-4.659523176176366]
								}, {
									"case":	52,
									"scores":	[-4.659523176176366]
								}, {
									"case":	53,
									"scores":	[-4.659523176176366]
								}, {
									"case":	54,
									"scores":	[-4.659523176176366]
								}, {
									"case":	55,
									"scores":	[-4.659523176176366]
								}, {
									"case":	56,
									"scores":	[-4.659523176176366]
								}, {
									"case":	57,
									"scores":	[-4.659523176176366]
								}, {
									"case":	58,
									"scores":	[-4.659523176176366]
								}, {
									"case":	59,
									"scores":	[-4.659523176176366]
								}, {
									"case":	60,
									"scores":	[-4.659523176176366]
								}, {
									"case":	61,
									"scores":	[-4.659523176176366]
								}, {
									"case":	62,
									"scores":	[-4.659523176176366]
								}, {
									"case":	63,
									"scores":	[-4.659523176176366]
								}, {
									"case":	64,
									"scores":	[-4.659523176176366]
								}, {
									"case":	65,
									"scores":	[-4.659523176176366]
								}, {
									"case":	66,
									"scores":	[-4.659523176176366]
								}, {
									"case":	67,
									"scores":	[-4.659523176176366]
								}, {
									"case":	68,
									"scores":	[-4.659523176176366]
								}, {
									"case":	69,
									"scores":	[-4.659523176176366]
								}, {
									"case":	70,
									"scores":	[-4.659523176176366]
								}, {
									"case":	71,
									"scores":	[-4.659523176176366]
								}, {
									"case":	72,
									"scores":	[-4.659523176176366]
								}, {
									"case":	73,
									"scores":	[-4.659523176176366]
								}, {
									"case":	74,
									"scores":	[-4.659523176176366]
								}, {
									"case":	75,
									"scores":	[-4.659523176176366]
								}, {
									"case":	76,
									"scores":	[-4.659523176176366]
								}, {
									"case":	77,
									"scores":	[-4.659523176176366]
								}, {
									"case":	78,
									"scores":	[-4.659523176176366]
								}, {
									"case":	79,
									"scores":	[-4.659523176176366]
								}, {
									"case":	80,
									"scores":	[-4.659523176176366]
								}, {
									"case":	81,
									"scores":	[-4.659523176176366]
								}, {
									"case":	82,
									"scores":	[-4.659523176176366]
								}, {
									"case":	83,
									"scores":	[-4.659523176176366]
								}, {
									"case":	84,
									"scores":	[-4.659523176176366]
								}, {
									"case":	85,
									"scores":	[-4.659523176176366]
								}, {
									"case":	86,
									"scores":	[-4.659523176176366]
								}, {
									"case":	87,
									"scores":	[-4.659523176176366]
								}, {
									"case":	88,
									"scores":	[-4.659523176176366]
								}, {
									"case":	89,
									"scores":	[-4.659523176176366]
								}, {
									"case":	90,
									"scores":	[-4.659523176176366]
								}, {
									"case":	91,
									"scores":	[-4.659523176176366]
								}, {
									"case":	92,
									"scores":	[-4.659523176176366]
								}, {
									"case":	93,
									"scores":	[-4.659523176176366]
								}, {
									"case":	94,
									"scores":	[-4.659523176176366]
								}, {
									"case":	95,
									"scores":	[-4.659523176176366]
								}, {
									"case":	96,
									"scores":	[-4.659523176176366]
								}, {
									"case":	97,
									"scores":	[-4.659523176176366]
								}, {
									"case":	98,
									"scores":	[-4.659523176176366]
								}, {
									"case":	99,
									"scores":	[-4.659523176176366]
								}, {
									"case":	100,
									"scores":	[-4.659523176176366]
								}, {
									"case":	101,
									"scores":	[-4.659523176176366]
								}, {
									"case":	102,
									"scores":	[-4.659523176176366]
								}, {
									"case":	103,
									"scores":	[-4.659523176176366]
								}, {
									"case":	104,
									"scores":	[-4.659523176176366]
								}, {
									"case":	105,
									"scores":	[-4.659523176176366]
								}, {
									"case":	106,
									"scores":	[-4.659523176176366]
								}, {
									"case":	107,
									"scores":	[-4.659523176176366]
								}, {
									"case":	108,
									"scores":	[-4.659523176176366]
								}, {
									"case":	109,
									"scores":	[-4.659523176176366]
								}, {
									"case":	110,
									"scores":	[-4.659523176176366]
								}, {
									"case":	111,
									"scores":	[-4.659523176176366]
								}, {
									"case":	112,
									"scores":	[-4.659523176176366]
								}, {
									"case":	113,
									"scores":	[-4.659523176176366]
								}, {
									"case":	114,
									"scores":	[-4.659523176176366]
								}, {
									"case":	115,
									"scores":	[-4.659523176176366]
								}, {
									"case":	116,
									"scores":	[-4.659523176176366]
								}, {
									"case":	117,
									"scores":	[-4.659523176176366]
								}, {
									"case":	118,
									"scores":	[-4.659523176176366]
								}, {
									"case":	119,
									"scores":	[-4.659523176176366]
								}, {
									"case":	120,
									"scores":	[-4.659523176176366]
								}, {
									"case":	121,
									"scores":	[-4.659523176176366]
								}, {
									"case":	122,
									"scores":	[-4.659523176176366]
								}, {
									"case":	123,
									"scores":	[-4.659523176176366]
								}, {
									"case":	124,
									"scores":	[-4.659523176176366]
								}, {
									"case":	125,
									"scores":	[-4.659523176176366]
								}, {
									"case":	126,
									"scores":	[-4.659523176176366]
								}, {
									"case":	127,
									"scores":	[-4.659523176176366]
								}, {
									"case":	128,
									"scores":	[-4.659523176176366]
								}, {
									"case":	129,
									"scores":	[-4.659523176176366]
								}, {
									"case":	130,
									"scores":	[-4.659523176176366]
								}, {
									"case":	131,
									"scores":	[-4.659523176176366]
								}, {
									"case":	132,
									"scores":	[-4.659523176176366]
								}, {
									"case":	133,
									"scores":	[-4.659523176176366]
								}, {
									"case":	134,
									"scores":	[-4.659523176176366]
								}, {
									"case":	135,
									"scores":	[-4.659523176176366]
								}, {
									"case":	136,
									"scores":	[-4.659523176176366]
								}, {
									"case":	137,
									"scores":	[-4.659523176176366]
								}, {
									"case":	138,
									"scores":	[-4.659523176176366]
								}, {
									"case":	139,
									"scores":	[-4.659523176176366]
								}, {
									"case":	140,
									"scores":	[-4.659523176176366]
								}, {
									"case":	141,
									"scores":	[-4.659523176176366]
								}, {
									"case":	142,
									"scores":	[-4.659523176176366]
								}, {
									"case":	143,
									"scores":	[-4.659523176176366]
								}, {
									"case":	144,
									"scores":	[-4.659523176176366]
								}, {
									"case":	145,
									"scores":	[-4.659523176176366]
								}, {
									"case":	146,
									"scores":	[-4.659523176176366]
								}, {
									"case":	147,
									"scores":	[-4.659523176176366]
								}, {
									"case":	148,
									"scores":	[-4.659523176176366]
								}, {
									"case":	149,
									"scores":	[-4.659523176176366]
								}, {
									"case":	150,
									"scores":	[-4.659523176176366]
								}, {
									"case":	151,
									"scores":	[-4.659523176176366]
								}, {
									"case":	152,
									"scores":	[-4.659523176176366]
								}, {
									"case":	153,
									"scores":	[-4.659523176176366]
								}, {
									"case":	154,
									"scores":	[-4.659523176176366]
								}, {
									"case":	155,
									"scores":	[-4.659523176176366]
								}, {
									"case":	156,
									"scores":	[-4.659523176176366]
								}, {
									"case":	157,
									"scores":	[-4.659523176176366]
								}, {
									"case":	158,
									"scores":	[-4.659523176176366]
								}, {
									"case":	159,
									"scores":	[-4.659523176176366]
								}, {
									"case":	160,
									"scores":	[-4.659523176176366]
								}, {
									"case":	161,
									"scores":	[-4.659523176176366]
								}, {
									"case":	162,
									"scores":	[-4.659523176176366]
								}, {
									"case":	163,
									"scores":	[-4.659523176176366]
								}, {
									"case":	164,
									"scores":	[-4.659523176176366]
								}, {
									"case":	165,
									"scores":	[-4.659523176176366]
								}, {
									"case":	166,
									"scores":	[-4.659523176176366]
								}, {
									"case":	167,
									"scores":	[-4.659523176176366]
								}, {
									"case":	168,
									"scores":	[-4.659523176176366]
								}, {
									"case":	169,
									"scores":	[-4.659523176176366]
								}, {
									"case":	170,
									"scores":	[-4.659523176176366]
								}, {
									"case":	171,
									"scores":	[-4.659523176176366]
								}, {
									"case":	172,
									"scores":	[-4.659523176176366]
								}, {
									"case":	173,
									"scores":	[-4.659523176176366]
								}, {
									"case":	174,
									"scores":	[-4.659523176176366]
								}, {
									"case":	175,
									"scores":	[-4.659523176176366]
								}, {
									"case":	176,
									"scores":	[-4.659523176176366]
								}, {
									"case":	177,
									"scores":	[-4.659523176176366]
								}, {
									"case":	178,
									"scores":	[-4.659523176176366]
								}, {
									"case":	179,
									"scores":	[-4.659523176176366]
								}, {
									"case":	180,
									"scores":	[-4.659523176176366]
								}, {
									"case":	181,
									"scores":	[-4.659523176176366]
								}, {
									"case":	182,
									"scores":	[-4.659523176176366]
								}, {
									"case":	183,
									"scores":	[-4.659523176176366]
								}, {
									"case":	184,
									"scores":	[-4.659523176176366]
								}, {
									"case":	185,
									"scores":	[-4.659523176176366]
								}, {
									"case":	186,
									"scores":	[-4.659523176176366]
								}, {
									"case":	187,
									"scores":	[-4.659523176176366]
								}, {
									"case":	188,
									"scores":	[-4.659523176176366]
								}, {
									"case":	189,
									"scores":	[-4.659523176176366]
								}, {
									"case":	190,
									"scores":	[-4.659523176176366]
								}, {
									"case":	191,
									"scores":	[-4.659523176176366]
								}, {
									"case":	192,
									"scores":	[-4.659523176176366]
								}, {
									"case":	193,
									"scores":	[-4.659523176176366]
								}, {
									"case":	194,
									"scores":	[-4.659523176176366]
								}, {
									"case":	195,
									"scores":	[-4.659523176176366]
								}, {
									"case":	196,
									"scores":	[-4.659523176176366]
								}, {
									"case":	197,
									"scores":	[-4.659523176176366]
								}, {
									"case":	198,
									"scores":	[-4.659523176176366]
								}, {
									"case":	199,
									"scores":	[-4.659523176176366]
								}, {
									"case":	200,
									"scores":	[-4.659523176176366]
								}, {
									"case":	201,
									"scores":	[-4.659523176176366]
								}, {
									"case":	202,
									"scores":	[-4.659523176176366]
								}, {
									"case":	203,
									"scores":	[-4.659523176176366]
								}, {
									"case":	204,
									"scores":	[-4.659523176176366]
								}, {
									"case":	205,
									"scores":	[-4.659523176176366]
								}, {
									"case":	206,
									"scores":	[-4.659523176176366]
								}, {
									"case":	207,
									"scores":	[-4.659523176176366]
								}, {
									"case":	208,
									"scores":	[-4.659523176176366]
								}, {
									"case":	209,
									"scores":	[-4.659523176176366]
								}, {
									"case":	210,
									"scores":	[-4.659523176176366]
								}, {
									"case":	211,
									"scores":	[-4.659523176176366]
								}, {
									"case":	212,
									"scores":	[-4.659523176176366]
								}, {
									"case":	213,
									"scores":	[-4.659523176176366]
								}, {
									"case":	214,
									"scores":	[-4.659523176176366]
								}, {
									"case":	215,
									"scores":	[-4.659523176176366]
								}, {
									"case":	216,
									"scores":	[-4.659523176176366]
								}, {
									"case":	217,
									"scores":	[-4.659523176176366]
								}, {
									"case":	218,
									"scores":	[-4.659523176176366]
								}, {
									"case":	219,
									"scores":	[-4.659523176176366]
								}, {
									"case":	220,
									"scores":	[-4.659523176176366]
								}, {
									"case":	221,
									"scores":	[-4.659523176176366]
								}, {
									"case":	222,
									"scores":	[-4.659523176176366]
								}, {
									"case":	223,
									"scores":	[-4.659523176176366]
								}, {
									"case":	224,
									"scores":	[-4.659523176176366]
								}, {
									"case":	225,
									"scores":	[-4.659523176176366]
								}, {
									"case":	226,
									"scores":	[-4.659523176176366]
								}, {
									"case":	227,
									"scores":	[-4.659523176176366]
								}, {
									"case":	228,
									"scores":	[-4.659523176176366]
								}, {
									"case":	229,
									"scores":	[-4.659523176176366]
								}, {
									"case":	230,
									"scores":	[-4.659523176176366]
								}, {
									"case":	231,
									"scores":	[-4.659523176176366]
								}, {
									"case":	232,
									"scores":	[-4.659523176176366]
								}, {
									"case":	233,
									"scores":	[-4.659523176176366]
								}, {
									"case":	234,
									"scores":	[-4.659523176176366]
								}, {
									"case":	235,
									"scores":	[-4.659523176176366]
								}, {
									"case":	236,
									"scores":	[-4.659523176176366]
								}, {
									"case":	237,
									"scores":	[-4.659523176176366]
								}, {
									"case":	238,
									"scores":	[-4.659523176176366]
								}, {
									"case":	239,
									"scores":	[-4.659523176176366]
								}, {
									"case":	240,
									"scores":	[-4.659523176176366]
								}, {
									"case":	241,
									"scores":	[-4.659523176176366]
								}, {
									"case":	242,
									"scores":	[-4.659523176176366]
								}, {
									"case":	243,
									"scores":	[-4.659523176176366]
								}, {
									"case":	244,
									"scores":	[-4.659523176176366]
								}, {
									"case":	245,
									"scores":	[-4.659523176176366]
								}, {
									"case":	246,
									"scores":	[-4.659523176176366]
								}, {
									"case":	247,
									"scores":	[-4.659523176176366]
								}, {
									"case":	248,
									"scores":	[-4.659523176176366]
								}, {
									"case":	249,
									"scores":	[-4.659523176176366]
								}, {
									"case":	250,
									"scores":	[-4.659523176176366]
								}, {
									"case":	251,
									"scores":	[-4.659523176176366]
								}, {
									"case":	252,
									"scores":	[-4.659523176176366]
								}, {
									"case":	253,
									"scores":	[-4.659523176176366]
								}, {
									"case":	254,
									"scores":	[-4.659523176176366]
								}, {
									"case":	255,
									"scores":	[-4.659523176176366]
								}, {
									"case":	256,
									"scores":	[-4.659523176176366]
								}, {
									"case":	257,
									"scores":	[-4.659523176176366]
								}, {
									"case":	258,
									"scores":	[-4.659523176176366]
								}, {
									"case":	259,
									"scores":	[-4.659523176176366]
								}, {
									"case":	260,
									"scores":	[-4.659523176176366]
								}, {
									"case":	261,
									"scores":	[-4.659523176176366]
								}, {
									"case":	262,
									"scores":	[-4.659523176176366]
								}, {
									"case":	263,
									"scores":	[-4.659523176176366]
								}, {
									"case":	264,
									"scores":	[-4.659523176176366]
								}, {
									"case":	265,
									"scores":	[-4.659523176176366]
								}, {
									"case":	266,
									"scores":	[-4.659523176176366]
								}, {
									"case":	267,
									"scores":	[-4.659523176176366]
								}, {
									"case":	268,
									"scores":	[-4.659523176176366]
								}, {
									"case":	269,
									"scores":	[-4.659523176176366]
								}, {
									"case":	270,
									"scores":	[-4.659523176176366]
								}, {
									"case":	271,
									"scores":	[-4.659523176176366]
								}, {
									"case":	272,
									"scores":	[-4.659523176176366]
								}, {
									"case":	273,
									"scores":	[-4.659523176176366]
								}, {
									"case":	274,
									"scores":	[-4.659523176176366]
								}, {
									"case":	275,
									"scores":	[-4.659523176176366]
								}, {
									"case":	276,
									"scores":	[-4.659523176176366]
								}, {
									"case":	277,
									"scores":	[-4.659523176176366]
								}, {
									"case":	278,
									"scores":	[-4.659523176176366]
								}, {
									"case":	279,
									"scores":	[-4.659523176176366]
								}, {
									"case":	280,
									"scores":	[-4.659523176176366]
								}, {
									"case":	281,
									"scores":	[-4.659523176176366]
								}, {
									"case":	282,
									"scores":	[-4.659523176176366]
								}, {
									"case":	283,
									"scores":	[-4.659523176176366]
								}, {
									"case":	284,
									"scores":	[-4.659523176176366]
								}, {
									"case":	285,
									"scores":	[-4.659523176176366]
								}, {
									"case":	286,
									"scores":	[-4.659523176176366]
								}, {
									"case":	287,
									"scores":	[-4.659523176176366]
								}, {
									"case":	288,
									"scores":	[-4.659523176176366]
								}, {
									"case":	289,
									"scores":	[-4.659523176176366]
								}, {
									"case":	290,
									"scores":	[-4.659523176176366]
								}, {
									"case":	291,
									"scores":	[-4.659523176176366]
								}, {
									"case":	292,
									"scores":	[-4.659523176176366]
								}, {
									"case":	293,
									"scores":	[-4.659523176176366]
								}, {
									"case":	294,
									"scores":	[-4.659523176176366]
								}, {
									"case":	295,
									"scores":	[-4.659523176176366]
								}, {
									"case":	296,
									"scores":	[-4.659523176176366]
								}, {
									"case":	297,
									"scores":	[-4.659523176176366]
								}, {
									"case":	298,
									"scores":	[-4.659523176176366]
								}, {
									"case":	299,
									"scores":	[-4.659523176176366]
								}, {
									"case":	300,
									"scores":	[-4.659523176176366]
								}, {
									"case":	301,
									"scores":	[-4.659523176176366]
								}, {
									"case":	302,
									"scores":	[-4.659523176176366]
								}, {
									"case":	303,
									"scores":	[-4.659523176176366]
								}, {
									"case":	304,
									"scores":	[-4.659523176176366]
								}, {
									"case":	305,
									"scores":	[-4.659523176176366]
								}, {
									"case":	306,
									"scores":	[-4.659523176176366]
								}, {
									"case":	307,
									"scores":	[-4.659523176176366]
								}, {
									"case":	308,
									"scores":	[-4.659523176176366]
								}, {
									"case":	309,
									"scores":	[-4.659523176176366]
								}, {
									"case":	310,
									"scores":	[-4.659523176176366]
								}, {
									"case":	311,
									"scores":	[-4.659523176176366]
								}, {
									"case":	312,
									"scores":	[-4.659523176176366]
								}, {
									"case":	313,
									"scores":	[-4.659523176176366]
								}, {
									"case":	314,
									"scores":	[-4.659523176176366]
								}, {
									"case":	315,
									"scores":	[-4.659523176176366]
								}, {
									"case":	316,
									"scores":	[-4.659523176176366]
								}, {
									"case":	317,
									"scores":	[-4.659523176176366]
								}, {
									"case":	318,
									"scores":	[-4.659523176176366]
								}, {
									"case":	319,
									"scores":	[-4.659523176176366]
								}, {
									"case":	320,
									"scores":	[-4.659523176176366]
								}, {
									"case":	321,
									"scores":	[-4.659523176176366]
								}, {
									"case":	322,
									"scores":	[-4.659523176176366]
								}, {
									"case":	323,
									"scores":	[-4.659523176176366]
								}, {
									"case":	324,
									"scores":	[-4.659523176176366]
								}, {
									"case":	325,
									"scores":	[-4.659523176176366]
								}, {
									"case":	326,
									"scores":	[-4.659523176176366]
								}, {
									"case":	327,
									"scores":	[-4.659523176176366]
								}, {
									"case":	328,
									"scores":	[-4.659523176176366]
								}, {
									"case":	329,
									"scores":	[-4.659523176176366]
								}, {
									"case":	330,
									"scores":	[-4.659523176176366]
								}, {
									"case":	331,
									"scores":	[-4.659523176176366]
								}, {
									"case":	332,
									"scores":	[-4.659523176176366]
								}, {
									"case":	333,
									"scores":	[-4.659523176176366]
								}, {
									"case":	334,
									"scores":	[-4.659523176176366]
								}, {
									"case":	335,
									"scores":	[-4.659523176176366]
								}, {
									"case":	336,
									"scores":	[-4.659523176176366]
								}, {
									"case":	337,
									"scores":	[-4.659523176176366]
								}, {
									"case":	338,
									"scores":	[-4.659523176176366]
								}, {
									"case":	339,
									"scores":	[-4.659523176176366]
								}, {
									"case":	340,
									"scores":	[-4.659523176176366]
								}, {
									"case":	341,
									"scores":	[-4.659523176176366]
								}, {
									"case":	342,
									"scores":	[-4.659523176176366]
								}, {
									"case":	343,
									"scores":	[-4.659523176176366]
								}, {
									"case":	344,
									"scores":	[-4.659523176176366]
								}, {
									"case":	345,
									"scores":	[-4.659523176176366]
								}, {
									"case":	346,
									"scores":	[-4.659523176176366]
								}, {
									"case":	347,
									"scores":	[-4.659523176176366]
								}, {
									"case":	348,
									"scores":	[-4.659523176176366]
								}, {
									"case":	349,
									"scores":	[-4.659523176176366]
								}, {
									"case":	350,
									"scores":	[-4.659523176176366]
								}, {
									"case":	351,
									"scores":	[-4.659523176176366]
								}, {
									"case":	352,
									"scores":	[-4.659523176176366]
								}, {
									"case":	353,
									"scores":	[-4.659523176176366]
								}, {
									"case":	354,
									"scores":	[-4.659523176176366]
								}, {
									"case":	355,
									"scores":	[-4.659523176176366]
								}, {
									"case":	356,
									"scores":	[-4.659523176176366]
								}, {
									"case":	357,
									"scores":	[-4.659523176176366]
								}, {
									"case":	358,
									"scores":	[-4.659523176176366]
								}, {
									"case":	359,
									"scores":	[-4.659523176176366]
								}, {
									"case":	360,
									"scores":	[-4.659523176176366]
								}, {
									"case":	361,
									"scores":	[-4.659523176176366]
								}, {
									"case":	362,
									"scores":	[-4.659523176176366]
								}, {
									"case":	363,
									"scores":	[-4.659523176176366]
								}, {
									"case":	364,
									"scores":	[-4.659523176176366]
								}, {
									"case":	365,
									"scores":	[-4.659523176176366]
								}, {
									"case":	366,
									"scores":	[-4.659523176176366]
								}, {
									"case":	367,
									"scores":	[-4.659523176176366]
								}, {
									"case":	368,
									"scores":	[-4.659523176176366]
								}, {
									"case":	369,
									"scores":	[-4.659523176176366]
								}, {
									"case":	370,
									"scores":	[-4.659523176176366]
								}, {
									"case":	371,
									"scores":	[-4.659523176176366]
								}, {
									"case":	372,
									"scores":	[-4.659523176176366]
								}, {
									"case":	373,
									"scores":	[-4.659523176176366]
								}, {
									"case":	374,
									"scores":	[-4.659523176176366]
								}, {
									"case":	375,
									"scores":	[-4.659523176176366]
								}, {
									"case":	376,
									"scores":	[-4.659523176176366]
								}, {
									"case":	377,
									"scores":	[-4.659523176176366]
								}, {
									"case":	378,
									"scores":	[-4.659523176176366]
								}, {
									"case":	379,
									"scores":	[-4.659523176176366]
								}, {
									"case":	380,
									"scores":	[-4.659523176176366]
								}, {
									"case":	381,
									"scores":	[-4.659523176176366]
								}, {
									"case":	382,
									"scores":	[-4.659523176176366]
								}, {
									"case":	383,
									"scores":	[-4.659523176176366]
								}, {
									"case":	384,
									"scores":	[-4.659523176176366]
								}, {
									"case":	385,
									"scores":	[-4.659523176176366]
								}, {
									"case":	386,
									"scores":	[-4.659523176176366]
								}, {
									"case":	387,
									"scores":	[-4.659523176176366]
								}, {
									"case":	388,
									"scores":	[-4.659523176176366]
								}, {
									"case":	389,
									"scores":	[-4.659523176176366]
								}, {
									"case":	390,
									"scores":	[-4.659523176176366]
								}, {
									"case":	391,
									"scores":	[-4.659523176176366]
								}, {
									"case":	392,
									"scores":	[-4.659523176176366]
								}, {
									"case":	393,
									"scores":	[-4.659523176176366]
								}, {
									"case":	394,
									"scores":	[-4.659523176176366]
								}, {
									"case":	395,
									"scores":	[-4.659523176176366]
								}, {
									"case":	396,
									"scores":	[-4.659523176176366]
								}, {
									"case":	397,
									"scores":	[-4.659523176176366]
								}, {
									"case":	398,
									"scores":	[-4.659523176176366]
								}, {
									"case":	399,
									"scores":	[-4.659523176176366]
								}, {
									"case":	400,
									"scores":	[-7.6458007322763653, -8.0703123852763667, -7.5736219625763663, -6.6664934625763657, -6.6664934625763657, -6.6526259425763659, -7.492183521376365, -7.2461446075763654, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.5292839213763658, -7.492183521376365, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.492183521376365, -7.2832450075763662, -7.5292839213763658, -7.4936705553763661, -7.4936705553763661, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -8.0487445213763671, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -8.0135947245763663, -8.0487445213763671, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657, -7.8027056075763657]
								}]
						}, {
							"switch":	83,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2915,
							"begin_column":	2,
							"end_line":	2915,
							"end_column":	32,
							"patch_codes":	["if (!__is_neg(\"\", \"L2915\", 45, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->relative.have_weekday_relative), sizeof (dateobj->time->relative.have_weekday_relative), &(dateobj->time->relative.weekday), sizeof (dateobj->time->relative.weekday), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(dateobj->time->relative.s), sizeof (dateobj->time->relative.s), &(dateobj->time->relative.i), sizeof (dateobj->time->relative.i), &(dateobj->time->relative.h), sizeof (dateobj->time->relative.h), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->relative.d), sizeof (dateobj->time->relative.d), &(dateobj->time->relative.m), sizeof (dateobj->time->relative.m), &(dateobj->time->relative.y), sizeof (dateobj->time->relative.y), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->time->relative.weekday_behavior), sizeof (dateobj->time->relative.weekday_behavior), &(dateobj->time->relative.first_last_day_of), sizeof (dateobj->time->relative.first_last_day_of), &(dateobj->time->relative.invert), sizeof (dateobj->time->relative.invert), &(dateobj->time->relative.days), sizeof (dateobj->time->relative.days), &(dateobj->time->relative.have_special_relative), sizeof (dateobj->time->relative.have_special_relative), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->sse_uptodate = 0;\n", "{\n}\n", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0 * bias)", "dateobj->time->sse_uptodate = (0 * ht)", "dateobj->time->sse_uptodate = (0 * return_value_used)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "dateobj->time->sse_uptodate = (bias != 0)", "dateobj->time->sse_uptodate = (bias * ht)", "dateobj->time->sse_uptodate = (bias * return_value_used)", "dateobj->time->sse_uptodate = (bias + 0)", "dateobj->time->sse_uptodate = (bias - 0)", "dateobj->time->sse_uptodate = (bias == 0)", "dateobj->time->sse_uptodate = (dateobj != 0)", "dateobj->time->sse_uptodate = (dateobj == 0)", "dateobj->time->sse_uptodate = (ht != 0)", "dateobj->time->sse_uptodate = (ht != bias)", "dateobj->time->sse_uptodate = (ht != return_value_used)", "dateobj->time->sse_uptodate = (ht * bias)", "dateobj->time->sse_uptodate = (ht * return_value_used)", "dateobj->time->sse_uptodate = (ht + 0)", "dateobj->time->sse_uptodate = (ht + bias)", "dateobj->time->sse_uptodate = (ht + return_value_used)", "dateobj->time->sse_uptodate = (ht - 0)", "dateobj->time->sse_uptodate = (ht - bias)", "dateobj->time->sse_uptodate = (ht - return_value_used)", "dateobj->time->sse_uptodate = (ht == 0)", "dateobj->time->sse_uptodate = (ht == bias)", "dateobj->time->sse_uptodate = (ht == return_value_used)", "dateobj->time->sse_uptodate = (interval != 0)", "dateobj->time->sse_uptodate = (interval == 0)", "dateobj->time->sse_uptodate = (intobj != 0)", "dateobj->time->sse_uptodate = (intobj == 0)", "dateobj->time->sse_uptodate = (object != 0)", "dateobj->time->sse_uptodate = (object != interval)", "dateobj->time->sse_uptodate = (object == 0)", "dateobj->time->sse_uptodate = (object == interval)", "dateobj->time->sse_uptodate = (return_value != 0)", "dateobj->time->sse_uptodate = (return_value != interval)", "dateobj->time->sse_uptodate = (return_value != object)", "dateobj->time->sse_uptodate = (return_value != this_ptr)", "dateobj->time->sse_uptodate = (return_value == 0)", "dateobj->time->sse_uptodate = (return_value == interval)", "dateobj->time->sse_uptodate = (return_value == object)", "dateobj->time->sse_uptodate = (return_value == this_ptr)", "dateobj->time->sse_uptodate = (return_value_ptr != 0)", "dateobj->time->sse_uptodate = (return_value_ptr == 0)", "dateobj->time->sse_uptodate = (return_value_used != 0)", "dateobj->time->sse_uptodate = (return_value_used != bias)", "dateobj->time->sse_uptodate = (return_value_used * bias)", "dateobj->time->sse_uptodate = (return_value_used * ht)", "dateobj->time->sse_uptodate = (return_value_used + 0)", "dateobj->time->sse_uptodate = (return_value_used + bias)", "dateobj->time->sse_uptodate = (return_value_used - 0)", "dateobj->time->sse_uptodate = (return_value_used - bias)", "dateobj->time->sse_uptodate = (return_value_used == 0)", "dateobj->time->sse_uptodate = (return_value_used == bias)", "dateobj->time->sse_uptodate = (this_ptr != 0)", "dateobj->time->sse_uptodate = (this_ptr != interval)", "dateobj->time->sse_uptodate = (this_ptr != object)", "dateobj->time->sse_uptodate = (this_ptr == 0)", "dateobj->time->sse_uptodate = (this_ptr == interval)", "dateobj->time->sse_uptodate = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3044237445763658, -5.2865867535763664, -6.1225923471763659, -5.5728997961763662, -5.5728997961763662, -5.3416344601763655, -5.8540706461763659, -5.0961825461763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -6.148421446176366, -5.8540706461763659, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.8540706461763659, -5.3905333461763654, -6.148421446176366, -5.8573280861763664, -5.8573280861763664, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -6.0651177561763658, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.7764896561763663, -6.0651177561763658, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661, -5.3072296561763661]
								}, {
									"case":	2,
									"scores":	[-4.659523176176366]
								}, {
									"case":	3,
									"scores":	[-4.659523176176366]
								}, {
									"case":	4,
									"scores":	[-4.659523176176366]
								}, {
									"case":	5,
									"scores":	[-4.659523176176366]
								}, {
									"case":	6,
									"scores":	[-4.659523176176366]
								}, {
									"case":	7,
									"scores":	[-4.659523176176366]
								}, {
									"case":	8,
									"scores":	[-4.659523176176366]
								}, {
									"case":	9,
									"scores":	[-4.659523176176366]
								}, {
									"case":	10,
									"scores":	[-4.659523176176366]
								}, {
									"case":	11,
									"scores":	[-4.659523176176366]
								}, {
									"case":	12,
									"scores":	[-4.659523176176366]
								}, {
									"case":	13,
									"scores":	[-4.659523176176366]
								}, {
									"case":	14,
									"scores":	[-4.659523176176366]
								}, {
									"case":	15,
									"scores":	[-4.659523176176366]
								}, {
									"case":	16,
									"scores":	[-4.659523176176366]
								}, {
									"case":	17,
									"scores":	[-4.659523176176366]
								}, {
									"case":	18,
									"scores":	[-4.659523176176366]
								}, {
									"case":	19,
									"scores":	[-4.659523176176366]
								}, {
									"case":	20,
									"scores":	[-4.659523176176366]
								}, {
									"case":	21,
									"scores":	[-4.659523176176366]
								}, {
									"case":	22,
									"scores":	[-4.659523176176366]
								}, {
									"case":	23,
									"scores":	[-4.659523176176366]
								}, {
									"case":	24,
									"scores":	[-4.659523176176366]
								}, {
									"case":	25,
									"scores":	[-4.659523176176366]
								}, {
									"case":	26,
									"scores":	[-4.659523176176366]
								}, {
									"case":	27,
									"scores":	[-4.659523176176366]
								}, {
									"case":	28,
									"scores":	[-4.659523176176366]
								}, {
									"case":	29,
									"scores":	[-4.659523176176366]
								}, {
									"case":	30,
									"scores":	[-4.659523176176366]
								}, {
									"case":	31,
									"scores":	[-4.659523176176366]
								}, {
									"case":	32,
									"scores":	[-4.659523176176366]
								}, {
									"case":	33,
									"scores":	[-4.659523176176366]
								}, {
									"case":	34,
									"scores":	[-4.659523176176366]
								}, {
									"case":	35,
									"scores":	[-4.659523176176366]
								}, {
									"case":	36,
									"scores":	[-4.659523176176366]
								}, {
									"case":	37,
									"scores":	[-4.659523176176366]
								}, {
									"case":	38,
									"scores":	[-4.659523176176366]
								}, {
									"case":	39,
									"scores":	[-4.659523176176366]
								}, {
									"case":	40,
									"scores":	[-4.659523176176366]
								}, {
									"case":	41,
									"scores":	[-4.659523176176366]
								}, {
									"case":	42,
									"scores":	[-4.659523176176366]
								}, {
									"case":	43,
									"scores":	[-4.659523176176366]
								}, {
									"case":	44,
									"scores":	[-4.659523176176366]
								}, {
									"case":	45,
									"scores":	[-4.659523176176366]
								}, {
									"case":	46,
									"scores":	[-4.659523176176366]
								}, {
									"case":	47,
									"scores":	[-4.659523176176366]
								}, {
									"case":	48,
									"scores":	[-4.659523176176366]
								}, {
									"case":	49,
									"scores":	[-4.659523176176366]
								}, {
									"case":	50,
									"scores":	[-4.659523176176366]
								}, {
									"case":	51,
									"scores":	[-4.659523176176366]
								}, {
									"case":	52,
									"scores":	[-4.659523176176366]
								}, {
									"case":	53,
									"scores":	[-4.659523176176366]
								}, {
									"case":	54,
									"scores":	[-4.659523176176366]
								}, {
									"case":	55,
									"scores":	[-4.659523176176366]
								}, {
									"case":	56,
									"scores":	[-4.659523176176366]
								}, {
									"case":	57,
									"scores":	[-4.659523176176366]
								}, {
									"case":	58,
									"scores":	[-4.659523176176366]
								}, {
									"case":	59,
									"scores":	[-4.659523176176366]
								}, {
									"case":	60,
									"scores":	[-4.659523176176366]
								}, {
									"case":	61,
									"scores":	[-4.659523176176366]
								}, {
									"case":	62,
									"scores":	[-4.659523176176366]
								}, {
									"case":	63,
									"scores":	[-4.659523176176366]
								}, {
									"case":	64,
									"scores":	[-4.659523176176366]
								}, {
									"case":	65,
									"scores":	[-4.659523176176366]
								}, {
									"case":	66,
									"scores":	[-4.659523176176366]
								}]
						}]
				}, {
					"line":	2916,
					"switches":	[{
							"switch":	84,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2917,
							"begin_column":	0,
							"end_line":	2917,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2917\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	2,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	3,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	4,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	5,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	6,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	7,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	8,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	9,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	10,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	11,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	12,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	13,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	14,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	15,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	16,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	17,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	18,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	19,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	20,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	21,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	22,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	23,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	24,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	25,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	26,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	27,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	28,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	29,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	30,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	31,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	32,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	33,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	34,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	35,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	36,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	37,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	38,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	39,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	40,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	41,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	42,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	43,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	44,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	45,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	46,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	47,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	48,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	49,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	50,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	51,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	52,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	53,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	54,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	55,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	56,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	57,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	58,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	59,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	60,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	61,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	62,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	63,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	64,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	65,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	66,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	67,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	68,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	69,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	70,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	71,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	72,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	73,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	74,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	75,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	76,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	77,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	78,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	79,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	80,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	81,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	82,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	83,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	84,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	85,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	86,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	87,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	88,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	89,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	90,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	91,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	92,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	93,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	94,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	95,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	96,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	97,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	98,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	99,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	100,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	101,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	102,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	103,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	104,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	105,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	106,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	107,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	108,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	109,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	110,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	111,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	112,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	113,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	114,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	115,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	116,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	117,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	118,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	119,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	120,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	121,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	122,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	123,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	124,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	125,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	126,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	127,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	128,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	129,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	130,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	131,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	132,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	133,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	134,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	135,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	136,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	137,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	138,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	139,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	140,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	141,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	142,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	143,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	144,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	145,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	146,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	147,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	148,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	149,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	150,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	151,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	152,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	153,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	154,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	155,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	156,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	157,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	158,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	159,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	160,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	161,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	162,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	163,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	164,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	165,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	166,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	167,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	168,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	169,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	170,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	171,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	172,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	173,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	174,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	175,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	176,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	177,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	178,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	179,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	180,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	181,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	182,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	183,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	184,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	185,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	186,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	187,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	188,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	189,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	190,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	191,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	192,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	193,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	194,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	195,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	196,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	197,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	198,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	199,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	200,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	201,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	202,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	203,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	204,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	205,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	206,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	207,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	208,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	209,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	210,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	211,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	212,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	213,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	214,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	215,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	216,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	217,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	218,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	219,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	220,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	221,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	222,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	223,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	224,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	225,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	226,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	227,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	228,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	229,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	230,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	231,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	232,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	233,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	234,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	235,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	236,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	237,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	238,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	239,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	240,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	241,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	242,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	243,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	244,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	245,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	246,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	247,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	248,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	249,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	250,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	251,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	252,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	253,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	254,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	255,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	256,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	257,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	258,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	259,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	260,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	261,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	262,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	263,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	264,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	265,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	266,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	267,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	268,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	269,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	270,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	271,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	272,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	273,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	274,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	275,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	276,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	277,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	278,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	279,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	280,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	281,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	282,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	283,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	284,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	285,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	286,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	287,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	288,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	289,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	290,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	291,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	292,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	293,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	294,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	295,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	296,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	297,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	298,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	299,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	300,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	301,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	302,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	303,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	304,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	305,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	306,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	307,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	308,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	309,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	310,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	311,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	312,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	313,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	314,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	315,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	316,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	317,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	318,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	319,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	320,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	321,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	322,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	323,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	324,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	325,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	326,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	327,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	328,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	329,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	330,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	331,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	332,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	333,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	334,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	335,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	336,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	337,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	338,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	339,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	340,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	341,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	342,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	343,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	344,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	345,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	346,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	347,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	348,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	349,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	350,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	351,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	352,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	353,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	354,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	355,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	356,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	357,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	358,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	359,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	360,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	361,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	362,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	363,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	364,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	365,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	366,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	367,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	368,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	369,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	370,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	371,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	372,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	373,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	374,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	375,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	376,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	377,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	378,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	379,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	380,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	381,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	382,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	383,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	384,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	385,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	386,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	387,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	388,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	389,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	390,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	391,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	392,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	393,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	394,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	395,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	396,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	397,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	398,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	399,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	400,
									"scores":	[-9.5813802029588473, -9.0131453219588451, -7.8415475552588463, -9.0783382002588446, -9.1734869239588459, -9.51050788095885, -8.6672376140588465, -8.4211987002588451, -8.6672376140588465, -8.4582991002588468, -8.7043380140588464, -8.6687246480588449, -8.6687246480588449, -9.2237986140588468, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472, -9.1886488172588443, -9.2237986140588468, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472, -8.9777597002588472]
								}]
						}, {
							"switch":	85,
							"types":	[[], [], [1], [], [], [], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [], [], [12]],
							"begin_line":	2917,
							"begin_column":	2,
							"end_line":	2917,
							"end_column":	39,
							"patch_codes":	["if (!__is_neg(\"\", \"L2917\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    timelib_update_ts(dateobj->time, ((void *)0));\n", "timelib_fill_holes(dateobj->time, ((void *)0), -1)", "timelib_fill_holes(dateobj->time, ((void *)0), 0)", "timelib_fill_holes(dateobj->time, ((void *)0), 1)", "timelib_fill_holes(dateobj->time, ((void *)0), 2)", "timelib_fill_holes(dateobj->time, ((void *)0), 3)", "timelib_fill_holes(dateobj->time, ((void *)0), bias)", "timelib_fill_holes(dateobj->time, ((void *)0), ht)", "timelib_fill_holes(dateobj->time, ((void *)0), le_index_ptr)", "timelib_fill_holes(dateobj->time, ((void *)0), php_date_global_timezone_db_enabled)", "timelib_fill_holes(dateobj->time, ((void *)0), return_value_used)", "{\n}\n", "Debug(dateobj->time, ((void *)0))", "php_printf(dateobj->time, ((void *)0))", "printf(dateobj->time, ((void *)0))", "timelib_date_to_int(dateobj->time, ((void *)0))", "timelib_diff(dateobj->time, ((void *)0))", "timelib_do_rel_normalize(dateobj->time, ((void *)0))", "timelib_set_timezone(dateobj->time, ((void *)0))", "timelib_time_tz_abbr_update(dateobj->time, ((void *)0))", "timelib_time_tz_name_update(dateobj->time, ((void *)0))", "wprintf(dateobj->time, ((void *)0))", "timelib_update_ts((&bias)->time, ((void *)0))", "timelib_update_ts((&dateobj)->time, ((void *)0))", "timelib_update_ts((&ht)->time, ((void *)0))", "timelib_update_ts((&interval)->time, ((void *)0))", "timelib_update_ts((&intobj)->time, ((void *)0))", "timelib_update_ts((&object)->time, ((void *)0))", "timelib_update_ts((&return_value)->time, ((void *)0))", "timelib_update_ts((&return_value_ptr)->time, ((void *)0))", "timelib_update_ts((&return_value_used)->time, ((void *)0))", "timelib_update_ts((&this_ptr)->time, ((void *)0))", "timelib_update_ts((dateobj)->time, ((void *)0))", "timelib_update_ts(dateobj->time, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9822424172588464, -5.8570394262588463, -5.755809478858847, -5.4897920028588461, -6.7825539257588465, -6.9338660267588468, -6.0369803288588466, -5.2790922288588469, -6.0369803288588466, -5.573443028858847, -6.3313311288588467, -6.0402377688588462, -6.0402377688588462, -6.2480274388588466, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469, -5.9593993388588462, -6.2480274388588466, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469, -5.4901393388588469]
								}, {
									"case":	2,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	3,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	4,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	5,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	6,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	7,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	8,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	9,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	10,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	11,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	12,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	13,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	14,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	15,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	16,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	17,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	18,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	19,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	20,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	21,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	22,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	23,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	24,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	25,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	26,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	27,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	28,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	29,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	30,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	31,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	32,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	33,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	34,
									"scores":	[-4.6393204688588465]
								}]
						}]
				}, {
					"line":	2917,
					"switches":	[{
							"switch":	86,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2918,
							"begin_column":	0,
							"end_line":	2918,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2918\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.619117761541327]
								}, {
									"case":	2,
									"scores":	[-4.619117761541327]
								}, {
									"case":	3,
									"scores":	[-4.619117761541327]
								}, {
									"case":	4,
									"scores":	[-4.619117761541327]
								}, {
									"case":	5,
									"scores":	[-4.619117761541327]
								}, {
									"case":	6,
									"scores":	[-4.619117761541327]
								}, {
									"case":	7,
									"scores":	[-4.619117761541327]
								}, {
									"case":	8,
									"scores":	[-4.619117761541327]
								}, {
									"case":	9,
									"scores":	[-4.619117761541327]
								}, {
									"case":	10,
									"scores":	[-4.619117761541327]
								}, {
									"case":	11,
									"scores":	[-4.619117761541327]
								}, {
									"case":	12,
									"scores":	[-4.619117761541327]
								}, {
									"case":	13,
									"scores":	[-4.619117761541327]
								}, {
									"case":	14,
									"scores":	[-4.619117761541327]
								}, {
									"case":	15,
									"scores":	[-4.619117761541327]
								}, {
									"case":	16,
									"scores":	[-4.619117761541327]
								}, {
									"case":	17,
									"scores":	[-4.619117761541327]
								}, {
									"case":	18,
									"scores":	[-4.619117761541327]
								}, {
									"case":	19,
									"scores":	[-4.619117761541327]
								}, {
									"case":	20,
									"scores":	[-4.619117761541327]
								}, {
									"case":	21,
									"scores":	[-4.619117761541327]
								}, {
									"case":	22,
									"scores":	[-4.619117761541327]
								}, {
									"case":	23,
									"scores":	[-4.619117761541327]
								}, {
									"case":	24,
									"scores":	[-4.619117761541327]
								}, {
									"case":	25,
									"scores":	[-4.619117761541327]
								}, {
									"case":	26,
									"scores":	[-4.619117761541327]
								}, {
									"case":	27,
									"scores":	[-4.619117761541327]
								}, {
									"case":	28,
									"scores":	[-4.619117761541327]
								}, {
									"case":	29,
									"scores":	[-4.619117761541327]
								}, {
									"case":	30,
									"scores":	[-4.619117761541327]
								}, {
									"case":	31,
									"scores":	[-4.619117761541327]
								}, {
									"case":	32,
									"scores":	[-4.619117761541327]
								}, {
									"case":	33,
									"scores":	[-4.619117761541327]
								}, {
									"case":	34,
									"scores":	[-4.619117761541327]
								}, {
									"case":	35,
									"scores":	[-4.619117761541327]
								}, {
									"case":	36,
									"scores":	[-4.619117761541327]
								}, {
									"case":	37,
									"scores":	[-4.619117761541327]
								}, {
									"case":	38,
									"scores":	[-4.619117761541327]
								}, {
									"case":	39,
									"scores":	[-4.619117761541327]
								}, {
									"case":	40,
									"scores":	[-4.619117761541327]
								}, {
									"case":	41,
									"scores":	[-4.619117761541327]
								}, {
									"case":	42,
									"scores":	[-4.619117761541327]
								}, {
									"case":	43,
									"scores":	[-4.619117761541327]
								}, {
									"case":	44,
									"scores":	[-4.619117761541327]
								}, {
									"case":	45,
									"scores":	[-4.619117761541327]
								}, {
									"case":	46,
									"scores":	[-4.619117761541327]
								}, {
									"case":	47,
									"scores":	[-4.619117761541327]
								}, {
									"case":	48,
									"scores":	[-4.619117761541327]
								}, {
									"case":	49,
									"scores":	[-4.619117761541327]
								}, {
									"case":	50,
									"scores":	[-4.619117761541327]
								}, {
									"case":	51,
									"scores":	[-4.619117761541327]
								}, {
									"case":	52,
									"scores":	[-4.619117761541327]
								}, {
									"case":	53,
									"scores":	[-4.619117761541327]
								}, {
									"case":	54,
									"scores":	[-4.619117761541327]
								}, {
									"case":	55,
									"scores":	[-4.619117761541327]
								}, {
									"case":	56,
									"scores":	[-4.619117761541327]
								}, {
									"case":	57,
									"scores":	[-4.619117761541327]
								}, {
									"case":	58,
									"scores":	[-4.619117761541327]
								}, {
									"case":	59,
									"scores":	[-4.619117761541327]
								}, {
									"case":	60,
									"scores":	[-4.619117761541327]
								}, {
									"case":	61,
									"scores":	[-4.619117761541327]
								}, {
									"case":	62,
									"scores":	[-4.619117761541327]
								}, {
									"case":	63,
									"scores":	[-4.619117761541327]
								}, {
									"case":	64,
									"scores":	[-4.619117761541327]
								}, {
									"case":	65,
									"scores":	[-4.619117761541327]
								}, {
									"case":	66,
									"scores":	[-4.619117761541327]
								}, {
									"case":	67,
									"scores":	[-4.619117761541327]
								}, {
									"case":	68,
									"scores":	[-4.619117761541327]
								}, {
									"case":	69,
									"scores":	[-4.619117761541327]
								}, {
									"case":	70,
									"scores":	[-4.619117761541327]
								}, {
									"case":	71,
									"scores":	[-4.619117761541327]
								}, {
									"case":	72,
									"scores":	[-4.619117761541327]
								}, {
									"case":	73,
									"scores":	[-4.619117761541327]
								}, {
									"case":	74,
									"scores":	[-4.619117761541327]
								}, {
									"case":	75,
									"scores":	[-4.619117761541327]
								}, {
									"case":	76,
									"scores":	[-4.619117761541327]
								}, {
									"case":	77,
									"scores":	[-4.619117761541327]
								}, {
									"case":	78,
									"scores":	[-4.619117761541327]
								}, {
									"case":	79,
									"scores":	[-4.619117761541327]
								}, {
									"case":	80,
									"scores":	[-4.619117761541327]
								}, {
									"case":	81,
									"scores":	[-4.619117761541327]
								}, {
									"case":	82,
									"scores":	[-4.619117761541327]
								}, {
									"case":	83,
									"scores":	[-4.619117761541327]
								}, {
									"case":	84,
									"scores":	[-4.619117761541327]
								}, {
									"case":	85,
									"scores":	[-4.619117761541327]
								}, {
									"case":	86,
									"scores":	[-4.619117761541327]
								}, {
									"case":	87,
									"scores":	[-4.619117761541327]
								}, {
									"case":	88,
									"scores":	[-4.619117761541327]
								}, {
									"case":	89,
									"scores":	[-4.619117761541327]
								}, {
									"case":	90,
									"scores":	[-4.619117761541327]
								}, {
									"case":	91,
									"scores":	[-4.619117761541327]
								}, {
									"case":	92,
									"scores":	[-4.619117761541327]
								}, {
									"case":	93,
									"scores":	[-4.619117761541327]
								}, {
									"case":	94,
									"scores":	[-4.619117761541327]
								}, {
									"case":	95,
									"scores":	[-4.619117761541327]
								}, {
									"case":	96,
									"scores":	[-4.619117761541327]
								}, {
									"case":	97,
									"scores":	[-4.619117761541327]
								}, {
									"case":	98,
									"scores":	[-4.619117761541327]
								}, {
									"case":	99,
									"scores":	[-4.619117761541327]
								}, {
									"case":	100,
									"scores":	[-4.619117761541327]
								}, {
									"case":	101,
									"scores":	[-4.619117761541327]
								}, {
									"case":	102,
									"scores":	[-4.619117761541327]
								}, {
									"case":	103,
									"scores":	[-4.619117761541327]
								}, {
									"case":	104,
									"scores":	[-4.619117761541327]
								}, {
									"case":	105,
									"scores":	[-4.619117761541327]
								}, {
									"case":	106,
									"scores":	[-4.619117761541327]
								}, {
									"case":	107,
									"scores":	[-4.619117761541327]
								}, {
									"case":	108,
									"scores":	[-4.619117761541327]
								}, {
									"case":	109,
									"scores":	[-4.619117761541327]
								}, {
									"case":	110,
									"scores":	[-4.619117761541327]
								}, {
									"case":	111,
									"scores":	[-4.619117761541327]
								}, {
									"case":	112,
									"scores":	[-4.619117761541327]
								}, {
									"case":	113,
									"scores":	[-4.619117761541327]
								}, {
									"case":	114,
									"scores":	[-4.619117761541327]
								}, {
									"case":	115,
									"scores":	[-4.619117761541327]
								}, {
									"case":	116,
									"scores":	[-4.619117761541327]
								}, {
									"case":	117,
									"scores":	[-4.619117761541327]
								}, {
									"case":	118,
									"scores":	[-4.619117761541327]
								}, {
									"case":	119,
									"scores":	[-4.619117761541327]
								}, {
									"case":	120,
									"scores":	[-4.619117761541327]
								}, {
									"case":	121,
									"scores":	[-4.619117761541327]
								}, {
									"case":	122,
									"scores":	[-4.619117761541327]
								}, {
									"case":	123,
									"scores":	[-4.619117761541327]
								}, {
									"case":	124,
									"scores":	[-4.619117761541327]
								}, {
									"case":	125,
									"scores":	[-4.619117761541327]
								}, {
									"case":	126,
									"scores":	[-4.619117761541327]
								}, {
									"case":	127,
									"scores":	[-4.619117761541327]
								}, {
									"case":	128,
									"scores":	[-4.619117761541327]
								}, {
									"case":	129,
									"scores":	[-4.619117761541327]
								}, {
									"case":	130,
									"scores":	[-4.619117761541327]
								}, {
									"case":	131,
									"scores":	[-4.619117761541327]
								}, {
									"case":	132,
									"scores":	[-4.619117761541327]
								}, {
									"case":	133,
									"scores":	[-4.619117761541327]
								}, {
									"case":	134,
									"scores":	[-4.619117761541327]
								}, {
									"case":	135,
									"scores":	[-4.619117761541327]
								}, {
									"case":	136,
									"scores":	[-4.619117761541327]
								}, {
									"case":	137,
									"scores":	[-4.619117761541327]
								}, {
									"case":	138,
									"scores":	[-4.619117761541327]
								}, {
									"case":	139,
									"scores":	[-4.619117761541327]
								}, {
									"case":	140,
									"scores":	[-4.619117761541327]
								}, {
									"case":	141,
									"scores":	[-4.619117761541327]
								}, {
									"case":	142,
									"scores":	[-4.619117761541327]
								}, {
									"case":	143,
									"scores":	[-4.619117761541327]
								}, {
									"case":	144,
									"scores":	[-4.619117761541327]
								}, {
									"case":	145,
									"scores":	[-4.619117761541327]
								}, {
									"case":	146,
									"scores":	[-4.619117761541327]
								}, {
									"case":	147,
									"scores":	[-4.619117761541327]
								}, {
									"case":	148,
									"scores":	[-4.619117761541327]
								}, {
									"case":	149,
									"scores":	[-4.619117761541327]
								}, {
									"case":	150,
									"scores":	[-4.619117761541327]
								}, {
									"case":	151,
									"scores":	[-4.619117761541327]
								}, {
									"case":	152,
									"scores":	[-4.619117761541327]
								}, {
									"case":	153,
									"scores":	[-4.619117761541327]
								}, {
									"case":	154,
									"scores":	[-4.619117761541327]
								}, {
									"case":	155,
									"scores":	[-4.619117761541327]
								}, {
									"case":	156,
									"scores":	[-4.619117761541327]
								}, {
									"case":	157,
									"scores":	[-4.619117761541327]
								}, {
									"case":	158,
									"scores":	[-4.619117761541327]
								}, {
									"case":	159,
									"scores":	[-4.619117761541327]
								}, {
									"case":	160,
									"scores":	[-4.619117761541327]
								}, {
									"case":	161,
									"scores":	[-4.619117761541327]
								}, {
									"case":	162,
									"scores":	[-4.619117761541327]
								}, {
									"case":	163,
									"scores":	[-4.619117761541327]
								}, {
									"case":	164,
									"scores":	[-4.619117761541327]
								}, {
									"case":	165,
									"scores":	[-4.619117761541327]
								}, {
									"case":	166,
									"scores":	[-4.619117761541327]
								}, {
									"case":	167,
									"scores":	[-4.619117761541327]
								}, {
									"case":	168,
									"scores":	[-4.619117761541327]
								}, {
									"case":	169,
									"scores":	[-4.619117761541327]
								}, {
									"case":	170,
									"scores":	[-4.619117761541327]
								}, {
									"case":	171,
									"scores":	[-4.619117761541327]
								}, {
									"case":	172,
									"scores":	[-4.619117761541327]
								}, {
									"case":	173,
									"scores":	[-4.619117761541327]
								}, {
									"case":	174,
									"scores":	[-4.619117761541327]
								}, {
									"case":	175,
									"scores":	[-4.619117761541327]
								}, {
									"case":	176,
									"scores":	[-4.619117761541327]
								}, {
									"case":	177,
									"scores":	[-4.619117761541327]
								}, {
									"case":	178,
									"scores":	[-4.619117761541327]
								}, {
									"case":	179,
									"scores":	[-4.619117761541327]
								}, {
									"case":	180,
									"scores":	[-4.619117761541327]
								}, {
									"case":	181,
									"scores":	[-4.619117761541327]
								}, {
									"case":	182,
									"scores":	[-4.619117761541327]
								}, {
									"case":	183,
									"scores":	[-4.619117761541327]
								}, {
									"case":	184,
									"scores":	[-4.619117761541327]
								}, {
									"case":	185,
									"scores":	[-4.619117761541327]
								}, {
									"case":	186,
									"scores":	[-4.619117761541327]
								}, {
									"case":	187,
									"scores":	[-4.619117761541327]
								}, {
									"case":	188,
									"scores":	[-4.619117761541327]
								}, {
									"case":	189,
									"scores":	[-4.619117761541327]
								}, {
									"case":	190,
									"scores":	[-4.619117761541327]
								}, {
									"case":	191,
									"scores":	[-4.619117761541327]
								}, {
									"case":	192,
									"scores":	[-4.619117761541327]
								}, {
									"case":	193,
									"scores":	[-4.619117761541327]
								}, {
									"case":	194,
									"scores":	[-4.619117761541327]
								}, {
									"case":	195,
									"scores":	[-4.619117761541327]
								}, {
									"case":	196,
									"scores":	[-4.619117761541327]
								}, {
									"case":	197,
									"scores":	[-4.619117761541327]
								}, {
									"case":	198,
									"scores":	[-4.619117761541327]
								}, {
									"case":	199,
									"scores":	[-4.619117761541327]
								}, {
									"case":	200,
									"scores":	[-4.619117761541327]
								}, {
									"case":	201,
									"scores":	[-4.619117761541327]
								}, {
									"case":	202,
									"scores":	[-4.619117761541327]
								}, {
									"case":	203,
									"scores":	[-4.619117761541327]
								}, {
									"case":	204,
									"scores":	[-4.619117761541327]
								}, {
									"case":	205,
									"scores":	[-4.619117761541327]
								}, {
									"case":	206,
									"scores":	[-4.619117761541327]
								}, {
									"case":	207,
									"scores":	[-4.619117761541327]
								}, {
									"case":	208,
									"scores":	[-4.619117761541327]
								}, {
									"case":	209,
									"scores":	[-4.619117761541327]
								}, {
									"case":	210,
									"scores":	[-4.619117761541327]
								}, {
									"case":	211,
									"scores":	[-4.619117761541327]
								}, {
									"case":	212,
									"scores":	[-4.619117761541327]
								}, {
									"case":	213,
									"scores":	[-4.619117761541327]
								}, {
									"case":	214,
									"scores":	[-4.619117761541327]
								}, {
									"case":	215,
									"scores":	[-4.619117761541327]
								}, {
									"case":	216,
									"scores":	[-4.619117761541327]
								}, {
									"case":	217,
									"scores":	[-4.619117761541327]
								}, {
									"case":	218,
									"scores":	[-4.619117761541327]
								}, {
									"case":	219,
									"scores":	[-4.619117761541327]
								}, {
									"case":	220,
									"scores":	[-4.619117761541327]
								}, {
									"case":	221,
									"scores":	[-4.619117761541327]
								}, {
									"case":	222,
									"scores":	[-4.619117761541327]
								}, {
									"case":	223,
									"scores":	[-4.619117761541327]
								}, {
									"case":	224,
									"scores":	[-4.619117761541327]
								}, {
									"case":	225,
									"scores":	[-4.619117761541327]
								}, {
									"case":	226,
									"scores":	[-4.619117761541327]
								}, {
									"case":	227,
									"scores":	[-4.619117761541327]
								}, {
									"case":	228,
									"scores":	[-4.619117761541327]
								}, {
									"case":	229,
									"scores":	[-4.619117761541327]
								}, {
									"case":	230,
									"scores":	[-4.619117761541327]
								}, {
									"case":	231,
									"scores":	[-4.619117761541327]
								}, {
									"case":	232,
									"scores":	[-4.619117761541327]
								}, {
									"case":	233,
									"scores":	[-4.619117761541327]
								}, {
									"case":	234,
									"scores":	[-4.619117761541327]
								}, {
									"case":	235,
									"scores":	[-4.619117761541327]
								}, {
									"case":	236,
									"scores":	[-4.619117761541327]
								}, {
									"case":	237,
									"scores":	[-4.619117761541327]
								}, {
									"case":	238,
									"scores":	[-4.619117761541327]
								}, {
									"case":	239,
									"scores":	[-4.619117761541327]
								}, {
									"case":	240,
									"scores":	[-4.619117761541327]
								}, {
									"case":	241,
									"scores":	[-4.619117761541327]
								}, {
									"case":	242,
									"scores":	[-4.619117761541327]
								}, {
									"case":	243,
									"scores":	[-4.619117761541327]
								}, {
									"case":	244,
									"scores":	[-4.619117761541327]
								}, {
									"case":	245,
									"scores":	[-4.619117761541327]
								}, {
									"case":	246,
									"scores":	[-4.619117761541327]
								}, {
									"case":	247,
									"scores":	[-4.619117761541327]
								}, {
									"case":	248,
									"scores":	[-4.619117761541327]
								}, {
									"case":	249,
									"scores":	[-4.619117761541327]
								}, {
									"case":	250,
									"scores":	[-4.619117761541327]
								}, {
									"case":	251,
									"scores":	[-4.619117761541327]
								}, {
									"case":	252,
									"scores":	[-4.619117761541327]
								}, {
									"case":	253,
									"scores":	[-4.619117761541327]
								}, {
									"case":	254,
									"scores":	[-4.619117761541327]
								}, {
									"case":	255,
									"scores":	[-4.619117761541327]
								}, {
									"case":	256,
									"scores":	[-4.619117761541327]
								}, {
									"case":	257,
									"scores":	[-4.619117761541327]
								}, {
									"case":	258,
									"scores":	[-4.619117761541327]
								}, {
									"case":	259,
									"scores":	[-4.619117761541327]
								}, {
									"case":	260,
									"scores":	[-4.619117761541327]
								}, {
									"case":	261,
									"scores":	[-4.619117761541327]
								}, {
									"case":	262,
									"scores":	[-4.619117761541327]
								}, {
									"case":	263,
									"scores":	[-4.619117761541327]
								}, {
									"case":	264,
									"scores":	[-4.619117761541327]
								}, {
									"case":	265,
									"scores":	[-4.619117761541327]
								}, {
									"case":	266,
									"scores":	[-4.619117761541327]
								}, {
									"case":	267,
									"scores":	[-4.619117761541327]
								}, {
									"case":	268,
									"scores":	[-4.619117761541327]
								}, {
									"case":	269,
									"scores":	[-4.619117761541327]
								}, {
									"case":	270,
									"scores":	[-4.619117761541327]
								}, {
									"case":	271,
									"scores":	[-4.619117761541327]
								}, {
									"case":	272,
									"scores":	[-4.619117761541327]
								}, {
									"case":	273,
									"scores":	[-4.619117761541327]
								}, {
									"case":	274,
									"scores":	[-4.619117761541327]
								}, {
									"case":	275,
									"scores":	[-4.619117761541327]
								}, {
									"case":	276,
									"scores":	[-4.619117761541327]
								}, {
									"case":	277,
									"scores":	[-4.619117761541327]
								}, {
									"case":	278,
									"scores":	[-4.619117761541327]
								}, {
									"case":	279,
									"scores":	[-4.619117761541327]
								}, {
									"case":	280,
									"scores":	[-4.619117761541327]
								}, {
									"case":	281,
									"scores":	[-4.619117761541327]
								}, {
									"case":	282,
									"scores":	[-4.619117761541327]
								}, {
									"case":	283,
									"scores":	[-4.619117761541327]
								}, {
									"case":	284,
									"scores":	[-4.619117761541327]
								}, {
									"case":	285,
									"scores":	[-4.619117761541327]
								}, {
									"case":	286,
									"scores":	[-4.619117761541327]
								}, {
									"case":	287,
									"scores":	[-4.619117761541327]
								}, {
									"case":	288,
									"scores":	[-4.619117761541327]
								}, {
									"case":	289,
									"scores":	[-4.619117761541327]
								}, {
									"case":	290,
									"scores":	[-4.619117761541327]
								}, {
									"case":	291,
									"scores":	[-4.619117761541327]
								}, {
									"case":	292,
									"scores":	[-4.619117761541327]
								}, {
									"case":	293,
									"scores":	[-4.619117761541327]
								}, {
									"case":	294,
									"scores":	[-4.619117761541327]
								}, {
									"case":	295,
									"scores":	[-4.619117761541327]
								}, {
									"case":	296,
									"scores":	[-4.619117761541327]
								}, {
									"case":	297,
									"scores":	[-4.619117761541327]
								}, {
									"case":	298,
									"scores":	[-4.619117761541327]
								}, {
									"case":	299,
									"scores":	[-4.619117761541327]
								}, {
									"case":	300,
									"scores":	[-4.619117761541327]
								}, {
									"case":	301,
									"scores":	[-4.619117761541327]
								}, {
									"case":	302,
									"scores":	[-4.619117761541327]
								}, {
									"case":	303,
									"scores":	[-4.619117761541327]
								}, {
									"case":	304,
									"scores":	[-4.619117761541327]
								}, {
									"case":	305,
									"scores":	[-4.619117761541327]
								}, {
									"case":	306,
									"scores":	[-4.619117761541327]
								}, {
									"case":	307,
									"scores":	[-4.619117761541327]
								}, {
									"case":	308,
									"scores":	[-4.619117761541327]
								}, {
									"case":	309,
									"scores":	[-4.619117761541327]
								}, {
									"case":	310,
									"scores":	[-4.619117761541327]
								}, {
									"case":	311,
									"scores":	[-4.619117761541327]
								}, {
									"case":	312,
									"scores":	[-4.619117761541327]
								}, {
									"case":	313,
									"scores":	[-4.619117761541327]
								}, {
									"case":	314,
									"scores":	[-4.619117761541327]
								}, {
									"case":	315,
									"scores":	[-4.619117761541327]
								}, {
									"case":	316,
									"scores":	[-4.619117761541327]
								}, {
									"case":	317,
									"scores":	[-4.619117761541327]
								}, {
									"case":	318,
									"scores":	[-4.619117761541327]
								}, {
									"case":	319,
									"scores":	[-4.619117761541327]
								}, {
									"case":	320,
									"scores":	[-4.619117761541327]
								}, {
									"case":	321,
									"scores":	[-4.619117761541327]
								}, {
									"case":	322,
									"scores":	[-4.619117761541327]
								}, {
									"case":	323,
									"scores":	[-4.619117761541327]
								}, {
									"case":	324,
									"scores":	[-4.619117761541327]
								}, {
									"case":	325,
									"scores":	[-4.619117761541327]
								}, {
									"case":	326,
									"scores":	[-4.619117761541327]
								}, {
									"case":	327,
									"scores":	[-4.619117761541327]
								}, {
									"case":	328,
									"scores":	[-4.619117761541327]
								}, {
									"case":	329,
									"scores":	[-4.619117761541327]
								}, {
									"case":	330,
									"scores":	[-4.619117761541327]
								}, {
									"case":	331,
									"scores":	[-4.619117761541327]
								}, {
									"case":	332,
									"scores":	[-4.619117761541327]
								}, {
									"case":	333,
									"scores":	[-4.619117761541327]
								}, {
									"case":	334,
									"scores":	[-4.619117761541327]
								}, {
									"case":	335,
									"scores":	[-4.619117761541327]
								}, {
									"case":	336,
									"scores":	[-4.619117761541327]
								}, {
									"case":	337,
									"scores":	[-4.619117761541327]
								}, {
									"case":	338,
									"scores":	[-4.619117761541327]
								}, {
									"case":	339,
									"scores":	[-4.619117761541327]
								}, {
									"case":	340,
									"scores":	[-4.619117761541327]
								}, {
									"case":	341,
									"scores":	[-4.619117761541327]
								}, {
									"case":	342,
									"scores":	[-4.619117761541327]
								}, {
									"case":	343,
									"scores":	[-4.619117761541327]
								}, {
									"case":	344,
									"scores":	[-4.619117761541327]
								}, {
									"case":	345,
									"scores":	[-4.619117761541327]
								}, {
									"case":	346,
									"scores":	[-4.619117761541327]
								}, {
									"case":	347,
									"scores":	[-4.619117761541327]
								}, {
									"case":	348,
									"scores":	[-4.619117761541327]
								}, {
									"case":	349,
									"scores":	[-4.619117761541327]
								}, {
									"case":	350,
									"scores":	[-4.619117761541327]
								}, {
									"case":	351,
									"scores":	[-4.619117761541327]
								}, {
									"case":	352,
									"scores":	[-4.619117761541327]
								}, {
									"case":	353,
									"scores":	[-4.619117761541327]
								}, {
									"case":	354,
									"scores":	[-4.619117761541327]
								}, {
									"case":	355,
									"scores":	[-4.619117761541327]
								}, {
									"case":	356,
									"scores":	[-4.619117761541327]
								}, {
									"case":	357,
									"scores":	[-4.619117761541327]
								}, {
									"case":	358,
									"scores":	[-4.619117761541327]
								}, {
									"case":	359,
									"scores":	[-4.619117761541327]
								}, {
									"case":	360,
									"scores":	[-4.619117761541327]
								}, {
									"case":	361,
									"scores":	[-4.619117761541327]
								}, {
									"case":	362,
									"scores":	[-4.619117761541327]
								}, {
									"case":	363,
									"scores":	[-4.619117761541327]
								}, {
									"case":	364,
									"scores":	[-4.619117761541327]
								}, {
									"case":	365,
									"scores":	[-4.619117761541327]
								}, {
									"case":	366,
									"scores":	[-4.619117761541327]
								}, {
									"case":	367,
									"scores":	[-4.619117761541327]
								}, {
									"case":	368,
									"scores":	[-4.619117761541327]
								}, {
									"case":	369,
									"scores":	[-4.619117761541327]
								}, {
									"case":	370,
									"scores":	[-4.619117761541327]
								}, {
									"case":	371,
									"scores":	[-4.619117761541327]
								}, {
									"case":	372,
									"scores":	[-4.619117761541327]
								}, {
									"case":	373,
									"scores":	[-4.619117761541327]
								}, {
									"case":	374,
									"scores":	[-4.619117761541327]
								}, {
									"case":	375,
									"scores":	[-4.619117761541327]
								}, {
									"case":	376,
									"scores":	[-4.619117761541327]
								}, {
									"case":	377,
									"scores":	[-4.619117761541327]
								}, {
									"case":	378,
									"scores":	[-4.619117761541327]
								}, {
									"case":	379,
									"scores":	[-4.619117761541327]
								}, {
									"case":	380,
									"scores":	[-4.619117761541327]
								}, {
									"case":	381,
									"scores":	[-4.619117761541327]
								}, {
									"case":	382,
									"scores":	[-4.619117761541327]
								}, {
									"case":	383,
									"scores":	[-4.619117761541327]
								}, {
									"case":	384,
									"scores":	[-4.619117761541327]
								}, {
									"case":	385,
									"scores":	[-4.619117761541327]
								}, {
									"case":	386,
									"scores":	[-4.619117761541327]
								}, {
									"case":	387,
									"scores":	[-4.619117761541327]
								}, {
									"case":	388,
									"scores":	[-4.619117761541327]
								}, {
									"case":	389,
									"scores":	[-4.619117761541327]
								}, {
									"case":	390,
									"scores":	[-4.619117761541327]
								}, {
									"case":	391,
									"scores":	[-4.619117761541327]
								}, {
									"case":	392,
									"scores":	[-4.619117761541327]
								}, {
									"case":	393,
									"scores":	[-4.619117761541327]
								}, {
									"case":	394,
									"scores":	[-4.619117761541327]
								}, {
									"case":	395,
									"scores":	[-4.619117761541327]
								}, {
									"case":	396,
									"scores":	[-4.619117761541327]
								}, {
									"case":	397,
									"scores":	[-4.619117761541327]
								}, {
									"case":	398,
									"scores":	[-4.619117761541327]
								}, {
									"case":	399,
									"scores":	[-4.619117761541327]
								}, {
									"case":	400,
									"scores":	[-9.7509487356413267, -9.1871616946413255, -9.232240492941326, -7.9954498479413267, -9.3273892166413255, -9.6644101736413255, -8.8211399067413261, -8.5751009929413264, -8.8211399067413261, -8.6122013929413264, -8.858240306741326, -8.8226269407413263, -8.8226269407413263, -9.3777009067413264, -9.131661992941325, -9.131661992941325, -9.131661992941325, -9.131661992941325, -9.131661992941325, -9.131661992941325, -9.131661992941325, -9.3425511099413256, -9.3777009067413264, -9.131661992941325, -9.131661992941325, -9.131661992941325, -9.131661992941325, -9.131661992941325, -9.131661992941325, -9.131661992941325, -9.131661992941325, -9.131661992941325]
								}]
						}, {
							"switch":	87,
							"types":	[[], [], [1], [], [], [], [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [], [35, 36, 37], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [], [], [34]],
							"begin_line":	2918,
							"begin_column":	2,
							"end_line":	2918,
							"end_column":	39,
							"patch_codes":	["if (!__is_neg(\"\", \"L2918\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    timelib_update_from_sse(dateobj->time);\n", "timelib_apply_localtime(dateobj->time, -1)", "timelib_apply_localtime(dateobj->time, 0)", "timelib_apply_localtime(dateobj->time, 1)", "timelib_apply_localtime(dateobj->time, 2)", "timelib_apply_localtime(dateobj->time, 3)", "timelib_date_to_int(dateobj->time, 0)", "timelib_diff(dateobj->time, 0)", "timelib_do_rel_normalize(dateobj->time, 0)", "timelib_dump_date(dateobj->time, -1)", "timelib_dump_date(dateobj->time, 0)", "timelib_dump_date(dateobj->time, 1)", "timelib_dump_date(dateobj->time, 2)", "timelib_dump_date(dateobj->time, 3)", "timelib_dump_date(dateobj->time, bias)", "timelib_dump_date(dateobj->time, ht)", "timelib_dump_date(dateobj->time, le_index_ptr)", "timelib_dump_date(dateobj->time, php_date_global_timezone_db_enabled)", "timelib_dump_date(dateobj->time, return_value_used)", "timelib_set_timezone(dateobj->time, 0)", "timelib_time_tz_abbr_update(dateobj->time, 0)", "timelib_time_tz_name_update(dateobj->time, 0)", "timelib_unixtime2gmt(dateobj->time, -1)", "timelib_unixtime2gmt(dateobj->time, 0)", "timelib_unixtime2gmt(dateobj->time, 1)", "timelib_unixtime2gmt(dateobj->time, 2)", "timelib_unixtime2gmt(dateobj->time, 3)", "timelib_unixtime2local(dateobj->time, -1)", "timelib_unixtime2local(dateobj->time, 0)", "timelib_unixtime2local(dateobj->time, 1)", "timelib_unixtime2local(dateobj->time, 2)", "timelib_unixtime2local(dateobj->time, 3)", "timelib_update_ts(dateobj->time, 0)", "{\n}\n", "timelib_get_current_offset(dateobj->time)", "timelib_time_clone(dateobj->time)", "timelib_time_dtor(dateobj->time)", "timelib_update_from_sse((&bias)->time)", "timelib_update_from_sse((&dateobj)->time)", "timelib_update_from_sse((&ht)->time)", "timelib_update_from_sse((&interval)->time)", "timelib_update_from_sse((&intobj)->time)", "timelib_update_from_sse((&object)->time)", "timelib_update_from_sse((&return_value)->time)", "timelib_update_from_sse((&return_value_ptr)->time)", "timelib_update_from_sse((&return_value_used)->time)", "timelib_update_from_sse((&this_ptr)->time)", "timelib_update_from_sse((dateobj)->time)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7204622099413269, -5.8388860659413266, -6.618736986541327, -6.0693917715413273, -7.0961362184413268, -7.2474483194413271, -6.3505626215413269, -5.5926745215413272, -6.3505626215413269, -5.8870253215413264, -6.644913421541327, -6.3538200615413274, -6.3538200615413274, -6.5616097315413269, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271, -6.2729816315413274, -6.5616097315413269, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271, -5.8037216315413271]
								}, {
									"case":	2,
									"scores":	[-4.619117761541327]
								}, {
									"case":	3,
									"scores":	[-4.619117761541327]
								}, {
									"case":	4,
									"scores":	[-4.619117761541327]
								}, {
									"case":	5,
									"scores":	[-4.619117761541327]
								}, {
									"case":	6,
									"scores":	[-4.619117761541327]
								}, {
									"case":	7,
									"scores":	[-4.619117761541327]
								}, {
									"case":	8,
									"scores":	[-4.619117761541327]
								}, {
									"case":	9,
									"scores":	[-4.619117761541327]
								}, {
									"case":	10,
									"scores":	[-4.619117761541327]
								}, {
									"case":	11,
									"scores":	[-4.619117761541327]
								}, {
									"case":	12,
									"scores":	[-4.619117761541327]
								}, {
									"case":	13,
									"scores":	[-4.619117761541327]
								}, {
									"case":	14,
									"scores":	[-4.619117761541327]
								}, {
									"case":	15,
									"scores":	[-4.619117761541327]
								}, {
									"case":	16,
									"scores":	[-4.619117761541327]
								}, {
									"case":	17,
									"scores":	[-4.619117761541327]
								}, {
									"case":	18,
									"scores":	[-4.619117761541327]
								}, {
									"case":	19,
									"scores":	[-4.619117761541327]
								}, {
									"case":	20,
									"scores":	[-4.619117761541327]
								}, {
									"case":	21,
									"scores":	[-4.619117761541327]
								}, {
									"case":	22,
									"scores":	[-4.619117761541327]
								}, {
									"case":	23,
									"scores":	[-4.619117761541327]
								}, {
									"case":	24,
									"scores":	[-4.619117761541327]
								}, {
									"case":	25,
									"scores":	[-4.619117761541327]
								}, {
									"case":	26,
									"scores":	[-4.619117761541327]
								}, {
									"case":	27,
									"scores":	[-4.619117761541327]
								}, {
									"case":	28,
									"scores":	[-4.619117761541327]
								}, {
									"case":	29,
									"scores":	[-4.619117761541327]
								}, {
									"case":	30,
									"scores":	[-4.619117761541327]
								}, {
									"case":	31,
									"scores":	[-4.619117761541327]
								}, {
									"case":	32,
									"scores":	[-4.619117761541327]
								}, {
									"case":	33,
									"scores":	[-4.619117761541327]
								}, {
									"case":	34,
									"scores":	[-4.619117761541327]
								}, {
									"case":	35,
									"scores":	[-4.619117761541327]
								}, {
									"case":	36,
									"scores":	[-4.619117761541327]
								}, {
									"case":	37,
									"scores":	[-4.619117761541327]
								}, {
									"case":	38,
									"scores":	[-4.619117761541327]
								}, {
									"case":	39,
									"scores":	[-4.619117761541327]
								}, {
									"case":	40,
									"scores":	[-4.619117761541327]
								}, {
									"case":	41,
									"scores":	[-4.619117761541327]
								}, {
									"case":	42,
									"scores":	[-4.619117761541327]
								}, {
									"case":	43,
									"scores":	[-4.619117761541327]
								}, {
									"case":	44,
									"scores":	[-4.619117761541327]
								}, {
									"case":	45,
									"scores":	[-4.619117761541327]
								}, {
									"case":	46,
									"scores":	[-4.619117761541327]
								}, {
									"case":	47,
									"scores":	[-4.619117761541327]
								}, {
									"case":	48,
									"scores":	[-4.619117761541327]
								}]
						}]
				}, {
					"line":	2919,
					"switches":	[{
							"switch":	88,
							"types":	[[], [], [], [], [400], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], [], [], [], [], [], []],
							"begin_line":	2920,
							"begin_column":	0,
							"end_line":	2920,
							"end_column":	0,
							"patch_codes":	["memset(&dateobj->props, 0, sizeof (*(&dateobj->props)))", "memset(&dateobj->std, 0, sizeof (*(&dateobj->std)))", "memset(&dateobj->time, 0, sizeof (*(&dateobj->time)))", "memset(&dateobj->time->d, 0, sizeof (*(&dateobj->time->d)))", "memset(&dateobj->time->dst, 0, sizeof (*(&dateobj->time->dst)))", "memset(&dateobj->time->f, 0, sizeof (*(&dateobj->time->f)))", "memset(&dateobj->time->h, 0, sizeof (*(&dateobj->time->h)))", "memset(&dateobj->time->have_date, 0, sizeof (*(&dateobj->time->have_date)))", "memset(&dateobj->time->have_relative, 0, sizeof (*(&dateobj->time->have_relative)))", "memset(&dateobj->time->have_time, 0, sizeof (*(&dateobj->time->have_time)))", "memset(&dateobj->time->have_weeknr_day, 0, sizeof (*(&dateobj->time->have_weeknr_day)))", "memset(&dateobj->time->have_zone, 0, sizeof (*(&dateobj->time->have_zone)))", "memset(&dateobj->time->i, 0, sizeof (*(&dateobj->time->i)))", "memset(&dateobj->time->is_localtime, 0, sizeof (*(&dateobj->time->is_localtime)))", "memset(&dateobj->time->m, 0, sizeof (*(&dateobj->time->m)))", "memset(&dateobj->time->relative, 0, sizeof (*(&dateobj->time->relative)))", "memset(&dateobj->time->relative.d, 0, sizeof (*(&dateobj->time->relative.d)))", "memset(&dateobj->time->relative.days, 0, sizeof (*(&dateobj->time->relative.days)))", "memset(&dateobj->time->relative.first_last_day_of, 0, sizeof (*(&dateobj->time->relative.first_last_day_of)))", "memset(&dateobj->time->relative.h, 0, sizeof (*(&dateobj->time->relative.h)))", "memset(&dateobj->time->relative.have_special_relative, 0, sizeof (*(&dateobj->time->relative.have_special_relative)))", "memset(&dateobj->time->relative.have_weekday_relative, 0, sizeof (*(&dateobj->time->relative.have_weekday_relative)))", "memset(&dateobj->time->relative.i, 0, sizeof (*(&dateobj->time->relative.i)))", "memset(&dateobj->time->relative.invert, 0, sizeof (*(&dateobj->time->relative.invert)))", "memset(&dateobj->time->relative.m, 0, sizeof (*(&dateobj->time->relative.m)))", "memset(&dateobj->time->relative.s, 0, sizeof (*(&dateobj->time->relative.s)))", "memset(&dateobj->time->relative.special, 0, sizeof (*(&dateobj->time->relative.special)))", "memset(&dateobj->time->relative.weekday, 0, sizeof (*(&dateobj->time->relative.weekday)))", "memset(&dateobj->time->relative.weekday_behavior, 0, sizeof (*(&dateobj->time->relative.weekday_behavior)))", "memset(&dateobj->time->relative.y, 0, sizeof (*(&dateobj->time->relative.y)))", "memset(&dateobj->time->s, 0, sizeof (*(&dateobj->time->s)))", "memset(&dateobj->time->sse, 0, sizeof (*(&dateobj->time->sse)))", "memset(&dateobj->time->sse_uptodate, 0, sizeof (*(&dateobj->time->sse_uptodate)))", "memset(&dateobj->time->tim_uptodate, 0, sizeof (*(&dateobj->time->tim_uptodate)))", "memset(&dateobj->time->tz_abbr, 0, sizeof (*(&dateobj->time->tz_abbr)))", "memset(&dateobj->time->tz_info, 0, sizeof (*(&dateobj->time->tz_info)))", "memset(&dateobj->time->y, 0, sizeof (*(&dateobj->time->y)))", "memset(&dateobj->time->z, 0, sizeof (*(&dateobj->time->z)))", "memset(&dateobj->time->zone_type, 0, sizeof (*(&dateobj->time->zone_type)))", "memset(&intobj->diff, 0, sizeof (*(&intobj->diff)))", "memset(&intobj->diff->d, 0, sizeof (*(&intobj->diff->d)))", "memset(&intobj->diff->days, 0, sizeof (*(&intobj->diff->days)))", "memset(&intobj->diff->first_last_day_of, 0, sizeof (*(&intobj->diff->first_last_day_of)))", "memset(&intobj->diff->h, 0, sizeof (*(&intobj->diff->h)))", "memset(&intobj->diff->have_special_relative, 0, sizeof (*(&intobj->diff->have_special_relative)))", "memset(&intobj->diff->have_weekday_relative, 0, sizeof (*(&intobj->diff->have_weekday_relative)))", "memset(&intobj->diff->i, 0, sizeof (*(&intobj->diff->i)))", "memset(&intobj->diff->invert, 0, sizeof (*(&intobj->diff->invert)))", "memset(&intobj->diff->m, 0, sizeof (*(&intobj->diff->m)))", "memset(&intobj->diff->s, 0, sizeof (*(&intobj->diff->s)))", "memset(&intobj->diff->special, 0, sizeof (*(&intobj->diff->special)))", "memset(&intobj->diff->weekday, 0, sizeof (*(&intobj->diff->weekday)))", "memset(&intobj->diff->weekday_behavior, 0, sizeof (*(&intobj->diff->weekday_behavior)))", "memset(&intobj->diff->y, 0, sizeof (*(&intobj->diff->y)))", "memset(&intobj->initialized, 0, sizeof (*(&intobj->initialized)))", "memset(&intobj->props, 0, sizeof (*(&intobj->props)))", "memset(&intobj->std, 0, sizeof (*(&intobj->std)))", "memset(dateobj, 0, sizeof (*(dateobj)))", "memset(dateobj->props, 0, sizeof (*(dateobj->props)))", "memset(dateobj->time, 0, sizeof (*(dateobj->time)))", "memset(dateobj->time->tz_abbr, 0, sizeof (*(dateobj->time->tz_abbr)))", "memset(dateobj->time->tz_info, 0, sizeof (*(dateobj->time->tz_info)))", "memset(intobj->diff, 0, sizeof (*(intobj->diff)))", "memset(intobj->props, 0, sizeof (*(intobj->props)))", "_array_init(((interval)), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval)))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((interval)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((interval))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((interval)))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((interval))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(interval)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((interval), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((interval), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((interval), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((interval), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((interval), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((interval), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((interval), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((interval), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((interval), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((object), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((object), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((object), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((object), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((object), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((object), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((object), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((object), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((object), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((object), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((interval), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((object), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "bias = (-1)", "bias = (0)", "bias = (1)", "bias = (2)", "bias = (3)", "bias = (bias)", "bias = (ht)", "bias = (return_value_used)", "convert_to_boolean((interval))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "dateobj = (dateobj)", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->relative.d = (-1)", "dateobj->time->relative.d = (0)", "dateobj->time->relative.d = (1)", "dateobj->time->relative.d = (2)", "dateobj->time->relative.d = (3)", "dateobj->time->relative.d = 0 - ((intobj)->diff->d * bias)", "dateobj->time->relative.h = (-1)", "dateobj->time->relative.h = (0)", "dateobj->time->relative.h = (1)", "dateobj->time->relative.h = (2)", "dateobj->time->relative.h = (3)", "dateobj->time->relative.h = 0 - ((intobj)->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = (-1)", "dateobj->time->relative.have_weekday_relative = (0)", "dateobj->time->relative.have_weekday_relative = (1)", "dateobj->time->relative.have_weekday_relative = (2)", "dateobj->time->relative.have_weekday_relative = (3)", "dateobj->time->relative.i = (-1)", "dateobj->time->relative.i = (0)", "dateobj->time->relative.i = (1)", "dateobj->time->relative.i = (2)", "dateobj->time->relative.i = (3)", "dateobj->time->relative.i = 0 - ((intobj)->diff->i * bias)", "dateobj->time->relative.m = (-1)", "dateobj->time->relative.m = (0)", "dateobj->time->relative.m = (1)", "dateobj->time->relative.m = (2)", "dateobj->time->relative.m = (3)", "dateobj->time->relative.m = 0 - ((intobj)->diff->m * bias)", "dateobj->time->relative.s = (-1)", "dateobj->time->relative.s = (0)", "dateobj->time->relative.s = (1)", "dateobj->time->relative.s = (2)", "dateobj->time->relative.s = (3)", "dateobj->time->relative.s = 0 - ((intobj)->diff->s * bias)", "dateobj->time->relative.weekday = (-1)", "dateobj->time->relative.weekday = (0)", "dateobj->time->relative.weekday = (1)", "dateobj->time->relative.weekday = (2)", "dateobj->time->relative.weekday = (3)", "dateobj->time->relative.weekday = (bias)", "dateobj->time->relative.weekday = (ht)", "dateobj->time->relative.weekday = (return_value_used)", "dateobj->time->relative.y = (-1)", "dateobj->time->relative.y = (0)", "dateobj->time->relative.y = (1)", "dateobj->time->relative.y = (2)", "dateobj->time->relative.y = (3)", "dateobj->time->relative.y = 0 - ((intobj)->diff->y * bias)", "dateobj->time->sse_uptodate = (-1)", "dateobj->time->sse_uptodate = (0)", "dateobj->time->sse_uptodate = (1)", "dateobj->time->sse_uptodate = (2)", "dateobj->time->sse_uptodate = (3)", "gc_remove_zval_from_buffer((interval))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((interval)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((interval))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((interval))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intobj = (intobj)", "memset((dateobj), 0, sizeof(php_date_obj))", "memset((intobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (3)", "php_date_global_timezone_db_enabled = (bias)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (interval))", "php_date_instantiate(date_ce_date, (object))", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (interval))", "php_date_instantiate(date_ce_interval, (object))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (interval))", "php_date_instantiate(date_ce_timezone, (object))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "timelib_rel_time_dtor((intobj)->diff)", "timelib_time_dtor((dateobj)->time)", "timelib_update_from_sse((dateobj)->time)", "timelib_update_ts((dateobj)->time, ((void *)0))", "zend_object_std_dtor(&(dateobj)->std)", "zend_object_std_dtor(&(intobj)->std)", "zval_addref_p((interval))", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((interval), (date_globals.last_errors))", "zval_from_error_container((object), (date_globals.last_errors))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((interval), 0)", "zval_set_refcount_p((interval), 1)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((interval))", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "_zval_copy_ctor((return_value))", "_zval_ptr_dtor((&object))", "bias = -1", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "dateobj = (php_date_obj *)zend_object_store_get_object(object)", "dateobj->time->have_relative = 0", "dateobj->time->have_relative = 1", "dateobj->time->relative.d = 0 - (intobj->diff->d * bias)", "dateobj->time->relative.h = 0 - (intobj->diff->h * bias)", "dateobj->time->relative.have_weekday_relative = 0", "dateobj->time->relative.i = 0 - (intobj->diff->i * bias)", "dateobj->time->relative.m = 0 - (intobj->diff->m * bias)", "dateobj->time->relative.s = 0 - (intobj->diff->s * bias)", "dateobj->time->relative.weekday = 0", "dateobj->time->relative.y = 0 - (intobj->diff->y * bias)", "dateobj->time->sse_uptodate = 0", "exit(1)", "intobj = (php_interval_obj *)zend_object_store_get_object(interval)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_update_from_sse(dateobj->time)", "timelib_update_ts(dateobj->time, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L2920\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	2,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	3,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	4,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	5,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	6,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	7,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	8,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	9,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	10,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	11,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	12,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	13,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	14,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	15,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	16,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	17,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	18,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	19,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	20,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	21,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	22,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	23,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	24,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	25,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	26,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	27,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	28,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	29,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	30,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	31,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	32,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	33,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	34,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	35,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	36,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	37,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	38,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	39,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	40,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	41,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	42,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	43,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	44,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	45,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	46,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	47,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	48,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	49,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	50,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	51,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	52,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	53,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	54,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	55,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	56,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	57,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	58,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	59,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	60,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	61,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	62,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	63,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	64,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	65,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	66,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	67,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	68,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	69,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	70,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	71,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	72,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	73,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	74,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	75,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	76,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	77,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	78,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	79,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	80,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	81,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	82,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	83,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	84,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	85,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	86,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	87,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	88,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	89,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	90,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	91,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	92,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	93,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	94,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	95,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	96,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	97,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	98,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	99,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	100,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	101,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	102,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	103,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	104,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	105,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	106,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	107,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	108,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	109,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	110,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	111,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	112,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	113,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	114,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	115,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	116,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	117,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	118,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	119,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	120,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	121,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	122,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	123,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	124,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	125,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	126,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	127,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	128,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	129,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	130,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	131,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	132,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	133,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	134,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	135,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	136,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	137,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	138,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	139,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	140,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	141,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	142,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	143,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	144,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	145,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	146,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	147,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	148,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	149,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	150,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	151,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	152,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	153,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	154,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	155,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	156,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	157,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	158,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	159,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	160,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	161,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	162,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	163,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	164,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	165,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	166,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	167,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	168,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	169,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	170,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	171,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	172,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	173,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	174,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	175,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	176,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	177,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	178,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	179,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	180,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	181,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	182,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	183,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	184,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	185,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	186,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	187,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	188,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	189,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	190,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	191,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	192,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	193,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	194,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	195,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	196,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	197,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	198,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	199,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	200,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	201,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	202,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	203,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	204,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	205,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	206,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	207,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	208,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	209,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	210,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	211,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	212,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	213,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	214,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	215,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	216,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	217,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	218,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	219,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	220,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	221,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	222,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	223,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	224,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	225,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	226,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	227,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	228,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	229,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	230,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	231,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	232,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	233,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	234,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	235,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	236,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	237,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	238,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	239,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	240,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	241,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	242,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	243,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	244,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	245,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	246,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	247,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	248,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	249,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	250,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	251,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	252,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	253,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	254,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	255,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	256,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	257,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	258,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	259,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	260,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	261,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	262,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	263,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	264,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	265,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	266,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	267,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	268,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	269,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	270,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	271,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	272,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	273,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	274,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	275,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	276,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	277,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	278,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	279,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	280,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	281,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	282,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	283,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	284,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	285,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	286,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	287,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	288,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	289,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	290,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	291,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	292,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	293,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	294,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	295,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	296,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	297,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	298,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	299,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	300,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	301,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	302,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	303,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	304,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	305,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	306,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	307,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	308,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	309,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	310,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	311,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	312,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	313,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	314,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	315,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	316,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	317,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	318,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	319,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	320,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	321,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	322,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	323,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	324,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	325,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	326,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	327,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	328,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	329,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	330,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	331,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	332,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	333,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	334,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	335,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	336,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	337,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	338,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	339,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	340,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	341,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	342,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	343,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	344,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	345,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	346,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	347,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	348,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	349,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	350,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	351,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	352,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	353,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	354,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	355,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	356,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	357,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	358,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	359,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	360,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	361,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	362,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	363,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	364,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	365,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	366,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	367,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	368,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	369,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	370,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	371,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	372,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	373,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	374,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	375,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	376,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	377,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	378,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	379,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	380,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	381,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	382,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	383,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	384,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	385,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	386,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	387,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	388,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	389,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	390,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	391,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	392,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	393,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	394,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	395,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	396,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	397,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	398,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	399,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	400,
									"scores":	[-8.527271788923807, -9.08828062892381, -8.7171587792238068, -9.14196964792381, -9.47899060492381, -7.8100302792238079, -8.63572033802381, -8.38968142422381, -8.63572033802381, -8.42678182422381, -8.67282073802381, -8.63720737202381, -8.63720737202381, -9.19228133802381, -8.94624242422381, -8.94624242422381, -8.94624242422381, -8.94624242422381, -8.94624242422381, -8.94624242422381, -8.94624242422381, -9.1571315412238068, -9.19228133802381, -8.94624242422381, -8.94624242422381, -8.94624242422381, -8.94624242422381, -8.94624242422381, -8.94624242422381, -8.94624242422381, -8.94624242422381, -8.94624242422381]
								}]
						}, {
							"switch":	89,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2920,
							"begin_column":	2,
							"end_line":	2920,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L2920\", 32, &(dateobj), sizeof (dateobj), &(dateobj->time), sizeof (dateobj->time), &(dateobj->time->have_relative), sizeof (dateobj->time->have_relative), &(return_value), sizeof (return_value), &(object), sizeof (object), &(dateobj->time->sse_uptodate), sizeof (dateobj->time->sse_uptodate), &(intobj), sizeof (intobj), &(bias), sizeof (bias), &(interval), sizeof (interval), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(date_ce_date), sizeof (date_ce_date), &(date_ce_interval), sizeof (date_ce_interval), &(dateobj->props), sizeof (dateobj->props), &(dateobj->time->y), sizeof (dateobj->time->y), &(dateobj->time->m), sizeof (dateobj->time->m), &(dateobj->time->d), sizeof (dateobj->time->d), &(dateobj->time->h), sizeof (dateobj->time->h), &(dateobj->time->i), sizeof (dateobj->time->i), &(dateobj->time->s), sizeof (dateobj->time->s), &(dateobj->time->z), sizeof (dateobj->time->z), &(dateobj->time->tz_abbr), sizeof (dateobj->time->tz_abbr), &(dateobj->time->tz_info), sizeof (dateobj->time->tz_info), &(dateobj->time->dst), sizeof (dateobj->time->dst), &(dateobj->time->sse), sizeof (dateobj->time->sse), &(dateobj->time->have_time), sizeof (dateobj->time->have_time), &(dateobj->time->have_date), sizeof (dateobj->time->have_date), &(dateobj->time->have_zone), sizeof (dateobj->time->have_zone), &(dateobj->time->have_weeknr_day), sizeof (dateobj->time->have_weeknr_day), &(dateobj->time->tim_uptodate), sizeof (dateobj->time->tim_uptodate), &(dateobj->time->is_localtime), sizeof (dateobj->time->is_localtime), &(dateobj->time->zone_type), sizeof (dateobj->time->zone_type)))\n    dateobj->time->have_relative = 0;\n", "{\n}\n", "dateobj->time->have_relative = (-1)", "dateobj->time->have_relative = (0 * bias)", "dateobj->time->have_relative = (0 * ht)", "dateobj->time->have_relative = (0 * return_value_used)", "dateobj->time->have_relative = (0)", "dateobj->time->have_relative = (1)", "dateobj->time->have_relative = (2)", "dateobj->time->have_relative = (3)", "dateobj->time->have_relative = (bias != 0)", "dateobj->time->have_relative = (bias * ht)", "dateobj->time->have_relative = (bias * return_value_used)", "dateobj->time->have_relative = (bias + 0)", "dateobj->time->have_relative = (bias - 0)", "dateobj->time->have_relative = (bias == 0)", "dateobj->time->have_relative = (dateobj != 0)", "dateobj->time->have_relative = (dateobj == 0)", "dateobj->time->have_relative = (ht != 0)", "dateobj->time->have_relative = (ht != bias)", "dateobj->time->have_relative = (ht != return_value_used)", "dateobj->time->have_relative = (ht * bias)", "dateobj->time->have_relative = (ht * return_value_used)", "dateobj->time->have_relative = (ht + 0)", "dateobj->time->have_relative = (ht + bias)", "dateobj->time->have_relative = (ht + return_value_used)", "dateobj->time->have_relative = (ht - 0)", "dateobj->time->have_relative = (ht - bias)", "dateobj->time->have_relative = (ht - return_value_used)", "dateobj->time->have_relative = (ht == 0)", "dateobj->time->have_relative = (ht == bias)", "dateobj->time->have_relative = (ht == return_value_used)", "dateobj->time->have_relative = (interval != 0)", "dateobj->time->have_relative = (interval == 0)", "dateobj->time->have_relative = (intobj != 0)", "dateobj->time->have_relative = (intobj == 0)", "dateobj->time->have_relative = (object != 0)", "dateobj->time->have_relative = (object != interval)", "dateobj->time->have_relative = (object == 0)", "dateobj->time->have_relative = (object == interval)", "dateobj->time->have_relative = (return_value != 0)", "dateobj->time->have_relative = (return_value != interval)", "dateobj->time->have_relative = (return_value != object)", "dateobj->time->have_relative = (return_value != this_ptr)", "dateobj->time->have_relative = (return_value == 0)", "dateobj->time->have_relative = (return_value == interval)", "dateobj->time->have_relative = (return_value == object)", "dateobj->time->have_relative = (return_value == this_ptr)", "dateobj->time->have_relative = (return_value_ptr != 0)", "dateobj->time->have_relative = (return_value_ptr == 0)", "dateobj->time->have_relative = (return_value_used != 0)", "dateobj->time->have_relative = (return_value_used != bias)", "dateobj->time->have_relative = (return_value_used * bias)", "dateobj->time->have_relative = (return_value_used * ht)", "dateobj->time->have_relative = (return_value_used + 0)", "dateobj->time->have_relative = (return_value_used + bias)", "dateobj->time->have_relative = (return_value_used - 0)", "dateobj->time->have_relative = (return_value_used - bias)", "dateobj->time->have_relative = (return_value_used == 0)", "dateobj->time->have_relative = (return_value_used == bias)", "dateobj->time->have_relative = (this_ptr != 0)", "dateobj->time->have_relative = (this_ptr != interval)", "dateobj->time->have_relative = (this_ptr != object)", "dateobj->time->have_relative = (this_ptr == 0)", "dateobj->time->have_relative = (this_ptr == interval)", "dateobj->time->have_relative = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5220042147238075, -7.737760370723807, -8.2225706152238072, -7.5986442211238074, -8.0080407221238072, -7.6728780642238075, -7.954048914223808, -7.1961608142238074, -7.954048914223808, -7.4905116142238075, -8.24839971422381, -7.9573063542238067, -7.9573063542238067, -8.1650960242238071, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074, -7.8764679242238067, -8.1650960242238071, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074, -7.4072079242238074]
								}, {
									"case":	2,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	3,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	4,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	5,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	6,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	7,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	8,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	9,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	10,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	11,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	12,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	13,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	14,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	15,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	16,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	17,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	18,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	19,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	20,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	21,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	22,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	23,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	24,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	25,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	26,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	27,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	28,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	29,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	30,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	31,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	32,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	33,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	34,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	35,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	36,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	37,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	38,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	39,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	40,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	41,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	42,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	43,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	44,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	45,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	46,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	47,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	48,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	49,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	50,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	51,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	52,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	53,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	54,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	55,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	56,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	57,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	58,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	59,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	60,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	61,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	62,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	63,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	64,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	65,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	66,
									"scores":	[-4.5989150542238075]
								}]
						}]
				}, {
					"line":	3448,
					"switches":	[]
				}, {
					"line":	3449,
					"switches":	[]
				}, {
					"line":	3450,
					"switches":	[]
				}, {
					"line":	3451,
					"switches":	[]
				}, {
					"line":	3452,
					"switches":	[]
				}, {
					"line":	3454,
					"switches":	[{
							"switch":	90,
							"types":	[[], [], [], [], [138, 139, 140, 141], [1, 2, 3, 4, 5, 6, 7], [], [], [], [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [], [], [], [], [], []],
							"begin_line":	3455,
							"begin_column":	0,
							"end_line":	3455,
							"end_column":	0,
							"patch_codes":	["memset(&errors->error_count, 0, sizeof (*(&errors->error_count)))", "memset(&errors->error_messages, 0, sizeof (*(&errors->error_messages)))", "memset(&errors->warning_count, 0, sizeof (*(&errors->warning_count)))", "memset(&errors->warning_messages, 0, sizeof (*(&errors->warning_messages)))", "memset(errors, 0, sizeof (*(errors)))", "memset(errors->error_messages, 0, sizeof (*(errors->error_messages)))", "memset(errors->warning_messages, 0, sizeof (*(errors->warning_messages)))", "(date_globals.last_errors) = (errors)", "(date_globals.timezone) = (format)", "(format)++", "_efree(((format)))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (format_length)", "php_date_global_timezone_db_enabled = (r)", "php_date_global_timezone_db_enabled = (retval)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (format))", "retval = (-1)", "retval = (0)", "retval = (1)", "retval = (2)", "retval = (format_length)", "retval = (r)", "retval = (retval)", "timelib_error_container_dtor((errors))", "timelib_strtointerval((format), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(b), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(e), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(b), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(e), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(p), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(errors))", "timelib_time_dtor((b))", "timelib_time_dtor((e))", "timelib_unixtime2gmt((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2gmt((e), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((e), (timelib_sll)time(((void *)0)))", "timelib_update_from_sse((b))", "timelib_update_from_sse((e))", "timelib_update_ts((b), ((void *)0))", "timelib_update_ts((e), ((void *)0))", "update_errors_warnings((errors))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "retval = -1", "retval = 0", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_error_container_dtor(errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &errors)", "timelib_update_ts(b, ((void *)0))", "timelib_update_ts(e, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3455\", 13, &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return -1;\n", "if (__is_neg(\"\", \"L3455\", 13, &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 0;\n", "if (__is_neg(\"\", \"L3455\", 13, &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 1;\n", "if (__is_neg(\"\", \"L3455\", 13, &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	2,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	3,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	4,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	5,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	6,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	7,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-12.708020601156846, -11.996196484156844, -13.130334949956843, -13.130334949956843, -13.262384296956846, -13.559382383156844, -14.539875206856845, -14.591920311156844, -13.610538059156845, -13.886397570156845, -14.129485227156845, -14.375524140956845, -14.375524140956845]
								}, {
									"case":	139,
									"scores":	[-9.8835516011568458, -9.171727484156845, -10.305865949956845, -10.305865949956845, -10.437915296956845, -10.734913383156844, -11.715406206856844, -11.767451311156844, -10.786069059156844, -11.061928570156844, -11.305016227156845, -11.551055140956844, -11.551055140956844]
								}, {
									"case":	140,
									"scores":	[-12.708020601156846, -11.996196484156844, -13.130334949956843, -13.130334949956843, -13.262384296956846, -13.559382383156844, -14.539875206856845, -14.591920311156844, -13.610538059156845, -13.886397570156845, -14.129485227156845, -14.375524140956845, -14.375524140956845]
								}, {
									"case":	141,
									"scores":	[-12.708020601156846, -11.996196484156844, -13.130334949956843, -13.130334949956843, -13.262384296956846, -13.559382383156844, -14.539875206856845, -14.591920311156844, -13.610538059156845, -13.886397570156845, -14.129485227156845, -14.375524140956845, -14.375524140956845]
								}]
						}, {
							"switch":	91,
							"types":	[[], [], [1], [], [], [], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], [], [3, 4, 5, 6, 7, 8, 9, 10, 11], [], [], [], [], [], [], [], [2]],
							"begin_line":	3455,
							"begin_column":	2,
							"end_line":	3455,
							"end_column":	70,
							"patch_codes":	["if (!__is_neg(\"\", \"L3455\", 13, &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    timelib_strtointerval(format, format_length, &b, &e, &p, &r, &errors);\n", "{\n}\n", "Debug(format, format_length, &b, &e, &p, &r, &errors)", "php_printf(format, format_length, &b, &e, &p, &r, &errors)", "printf(format, format_length, &b, &e, &p, &r, &errors)", "virtual_open(format, format_length, &b, &e, &p, &r, &errors)", "wprintf(format, format_length, &b, &e, &p, &r, &errors)", "zend_class_implements(format, format_length, &b, &e, &p, &r, &errors)", "zend_fcall_info_argn(format, format_length, &b, &e, &p, &r, &errors)", "zend_ptr_stack_n_pop(format, format_length, &b, &e, &p, &r, &errors)", "zend_ptr_stack_n_push(format, format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval((&b), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval((&e), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval((&errors), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval((&format), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval((&format_length), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval((&p), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval((&r), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval((&retval), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval((&rt), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval((format), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (0 * format_length), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (0 * r), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (0 * retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (b != 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (b != e), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (b == 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (b == e), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (e != 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (e == 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (errors != 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (errors == 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format != 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format == 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length != 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length != r), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length != retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length * r), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length * retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length + 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length + r), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length + retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length - 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length - r), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length - retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length == 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length == r), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length == retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (format_length), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (p != 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (p == 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (r != 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (r != retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (r * format_length), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (r * retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (r + 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (r + retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (r - 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (r - retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (r == 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (r == retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (r), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (retval != 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (retval * format_length), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (retval * r), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (retval + 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (retval - 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (retval == 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (retval), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (rt != 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, (rt == 0), &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(&b), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(&e), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(&errors), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(&format), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(&format_length), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(&p), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(&r), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(&retval), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(&rt), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(b), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(e), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(&b), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(&e), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(&errors), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(&format), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(&format_length), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(&p), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(&r), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(&retval), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(&rt), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(b), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(e), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(&b), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(&e), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(&errors), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(&format), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(&format_length), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(&p), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(&r), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(&retval), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(&rt), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(p), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(0 * format_length), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(0 * r), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(0 * retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(b != 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(b != e), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(b == 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(b == e), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(e != 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(e == 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(errors != 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(errors == 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format != 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format == 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length != 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length != r), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length != retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length * r), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length * retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length + 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length + r), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length + retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length - 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length - r), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length - retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length == 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length == r), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length == retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(format_length), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(p != 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(p == 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(r != 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(r != retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(r * format_length), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(r * retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(r + 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(r + retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(r - 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(r - retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(r == 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(r == retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(r), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(retval != 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(retval * format_length), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(retval * r), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(retval + 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(retval - 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(retval == 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(retval), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(rt != 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &(rt == 0), &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(&b))", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(&e))", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(&errors))", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(&format))", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(&format_length))", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(&p))", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(&r))", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(&retval))", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(&rt))", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(errors))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8866310647568447, -8.0621845257568445, -8.4279770247568457, -8.4279770247568457, -8.4921338157568442, -8.3479291557568445, -9.7831805026568439, -8.6380508657568456, -9.493590916756844, -8.4399842157568443, -9.3281248657568447, -10.086012965756844, -10.086012965756844]
								}, {
									"case":	2,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	3,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	4,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	5,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	6,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	7,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	8,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	9,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	10,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	11,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	12,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	13,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	14,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	15,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	16,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	17,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	18,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	19,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	20,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	21,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	22,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	23,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	24,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	25,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	26,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	27,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	28,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	29,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	30,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	31,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	32,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	33,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	34,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	35,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	36,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	37,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	38,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	39,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	40,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	41,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	42,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	43,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	44,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	45,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	46,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	47,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	48,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	49,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	50,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	51,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	52,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	53,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	54,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	55,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	56,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	57,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	58,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	59,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	60,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	61,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	62,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	63,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	64,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	65,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	66,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	67,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	68,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	69,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	70,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	71,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	72,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	73,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	74,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	75,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	76,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	77,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	78,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	79,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	80,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	81,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	82,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	83,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	84,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	85,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	86,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	87,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	88,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	89,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	90,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	91,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	92,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	93,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	94,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	95,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	96,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	97,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	98,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	99,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	100,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	101,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	102,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	103,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	104,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	105,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	106,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	107,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	108,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	109,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	110,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	111,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	112,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	113,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	114,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	115,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	116,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	117,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	118,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	119,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	120,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	121,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	122,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	123,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	124,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	125,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	126,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	127,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	128,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	129,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	130,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	131,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	132,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	133,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	134,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	135,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	136,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	137,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	138,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	139,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	140,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	141,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	142,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	143,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	144,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	145,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	146,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	147,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	148,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	149,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	150,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	151,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	152,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	153,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	154,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	155,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	156,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	157,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	158,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	159,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	160,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	161,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	162,
									"scores":	[-7.7505373957568446]
								}, {
									"case":	163,
									"scores":	[-7.7505373957568446]
								}]
						}]
				}, {
					"line":	3461,
					"switches":	[{
							"switch":	96,
							"types":	[[], [], [], [], [137, 138, 139, 140], [1, 2, 3, 4, 5, 6], [], [], [], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [], [], []],
							"begin_line":	3462,
							"begin_column":	2,
							"end_line":	3462,
							"end_column":	2,
							"patch_codes":	["memset(&errors->error_count, 0, sizeof (*(&errors->error_count)))", "memset(&errors->error_messages, 0, sizeof (*(&errors->error_messages)))", "memset(&errors->warning_count, 0, sizeof (*(&errors->warning_count)))", "memset(&errors->warning_messages, 0, sizeof (*(&errors->warning_messages)))", "memset(errors->error_messages, 0, sizeof (*(errors->error_messages)))", "memset(errors->warning_messages, 0, sizeof (*(errors->warning_messages)))", "(date_globals.last_errors) = (errors)", "(date_globals.timezone) = (format)", "(format)++", "_efree(((format)))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (format_length)", "php_date_global_timezone_db_enabled = (r)", "php_date_global_timezone_db_enabled = (retval)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (format))", "retval = (-1)", "retval = (0)", "retval = (1)", "retval = (2)", "retval = (format_length)", "retval = (r)", "retval = (retval)", "timelib_error_container_dtor((errors))", "timelib_strtointerval((format), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(b), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(e), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(b), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(e), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(p), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(errors))", "timelib_time_dtor((b))", "timelib_time_dtor((e))", "timelib_unixtime2gmt((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2gmt((e), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((e), (timelib_sll)time(((void *)0)))", "timelib_update_from_sse((b))", "timelib_update_from_sse((e))", "timelib_update_ts((b), ((void *)0))", "timelib_update_ts((e), ((void *)0))", "update_errors_warnings((errors))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "retval = -1", "retval = 0", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_error_container_dtor(errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &errors)", "timelib_update_ts(b, ((void *)0))", "timelib_update_ts(e, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3462\", 9, &(rt), sizeof (rt), &(p), sizeof (p), &(retval), sizeof (retval), &(b), sizeof (b), &(e), sizeof (e), &(format), sizeof (format), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return -1;\n", "if (__is_neg(\"\", \"L3462\", 9, &(rt), sizeof (rt), &(p), sizeof (p), &(retval), sizeof (retval), &(b), sizeof (b), &(e), sizeof (e), &(format), sizeof (format), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return 0;\n", "if (__is_neg(\"\", \"L3462\", 9, &(rt), sizeof (rt), &(p), sizeof (p), &(retval), sizeof (retval), &(b), sizeof (b), &(e), sizeof (e), &(format), sizeof (format), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return 1;\n", "if (__is_neg(\"\", \"L3462\", 9, &(rt), sizeof (rt), &(p), sizeof (p), &(retval), sizeof (retval), &(b), sizeof (b), &(e), sizeof (e), &(format), sizeof (format), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	2,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	3,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	4,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	5,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	6,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	7,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	8,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	9,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	10,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	11,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	12,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	13,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	14,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	15,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	16,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	17,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	18,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	19,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	20,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	21,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	22,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	23,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	24,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	25,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	26,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	27,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	28,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	29,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	30,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	31,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	32,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	33,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	34,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	35,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	36,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	37,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	38,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	39,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	40,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	41,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	42,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	43,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	44,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	45,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	46,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	47,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	48,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	49,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	50,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	51,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	52,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	53,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	54,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	55,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	56,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	57,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	58,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	59,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	60,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	61,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	62,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	63,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	64,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	65,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	66,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	67,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	68,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	69,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	70,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	71,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	72,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	73,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	74,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	75,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	76,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	77,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	78,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	79,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	80,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	81,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	82,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	83,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	84,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	85,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	86,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	87,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	88,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	89,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	90,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	91,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	92,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	93,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	94,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	95,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	96,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	97,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	98,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	99,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	100,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	101,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	102,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	103,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	104,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	105,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	106,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	107,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	108,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	109,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	110,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	111,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	112,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	113,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	114,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	115,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	116,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	117,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	118,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	119,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	120,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	121,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	122,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	123,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	124,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	125,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	126,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	127,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	128,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	129,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	130,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	131,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	132,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	133,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	134,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	135,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	136,
									"scores":	[-6.8414155664684682]
								}, {
									"case":	137,
									"scores":	[-10.650176379468469, -10.126021976268468, -11.697029562468469, -11.842489976268467, -11.842489976268467, -11.844440579468468, -11.842489976268467, -11.132616462468469, -11.596451062468468]
								}, {
									"case":	138,
									"scores":	[-7.8257073794684686, -7.3015529762684679, -8.87256056246847, -9.0180209762684669, -9.0180209762684669, -9.01997157946847, -9.0180209762684669, -8.30814746246847, -8.7719820624684672]
								}, {
									"case":	139,
									"scores":	[-10.650176379468469, -10.126021976268468, -11.697029562468469, -11.842489976268467, -11.842489976268467, -11.844440579468468, -11.842489976268467, -11.132616462468469, -11.596451062468468]
								}, {
									"case":	140,
									"scores":	[-10.650176379468469, -10.126021976268468, -11.697029562468469, -11.842489976268467, -11.842489976268467, -11.844440579468468, -11.842489976268467, -11.132616462468469, -11.596451062468468]
								}]
						}, {
							"switch":	97,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3462,
							"begin_column":	4,
							"end_line":	3462,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L3462\", 9, &(rt), sizeof (rt), &(p), sizeof (p), &(retval), sizeof (retval), &(b), sizeof (b), &(e), sizeof (e), &(format), sizeof (format), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    *rt = p;\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0641253464684679, -7.2567886464684683, -7.8088248914684684, -7.7516976364684682, -7.7516976364684682, -7.757420336468468, -7.7516976364684682, -6.9661493064684681, -6.9938095364684685]
								}, {
									"case":	2,
									"scores":	[-6.8414155664684682]
								}]
						}]
				}, {
					"line":	3462,
					"switches":	[{
							"switch":	98,
							"types":	[[], [], [], [], [137, 138, 139, 140], [1, 2, 3, 4, 5, 6], [], [], [], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [], [], []],
							"begin_line":	3463,
							"begin_column":	2,
							"end_line":	3463,
							"end_column":	2,
							"patch_codes":	["memset(&errors->error_count, 0, sizeof (*(&errors->error_count)))", "memset(&errors->error_messages, 0, sizeof (*(&errors->error_messages)))", "memset(&errors->warning_count, 0, sizeof (*(&errors->warning_count)))", "memset(&errors->warning_messages, 0, sizeof (*(&errors->warning_messages)))", "memset(errors->error_messages, 0, sizeof (*(errors->error_messages)))", "memset(errors->warning_messages, 0, sizeof (*(errors->warning_messages)))", "(date_globals.last_errors) = (errors)", "(date_globals.timezone) = (format)", "(format)++", "_efree(((format)))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (format_length)", "php_date_global_timezone_db_enabled = (r)", "php_date_global_timezone_db_enabled = (retval)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (format))", "retval = (-1)", "retval = (0)", "retval = (1)", "retval = (2)", "retval = (format_length)", "retval = (r)", "retval = (retval)", "timelib_error_container_dtor((errors))", "timelib_strtointerval((format), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(b), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(e), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(b), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(e), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(p), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(errors))", "timelib_time_dtor((b))", "timelib_time_dtor((e))", "timelib_unixtime2gmt((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2gmt((e), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((e), (timelib_sll)time(((void *)0)))", "timelib_update_from_sse((b))", "timelib_update_from_sse((e))", "timelib_update_ts((b), ((void *)0))", "timelib_update_ts((e), ((void *)0))", "update_errors_warnings((errors))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "retval = -1", "retval = 0", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_error_container_dtor(errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &errors)", "timelib_update_ts(b, ((void *)0))", "timelib_update_ts(e, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3463\", 9, &(retval), sizeof (retval), &(rt), sizeof (rt), &(p), sizeof (p), &(b), sizeof (b), &(e), sizeof (e), &(format), sizeof (format), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return -1;\n", "if (__is_neg(\"\", \"L3463\", 9, &(retval), sizeof (retval), &(rt), sizeof (rt), &(p), sizeof (p), &(b), sizeof (b), &(e), sizeof (e), &(format), sizeof (format), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return 0;\n", "if (__is_neg(\"\", \"L3463\", 9, &(retval), sizeof (retval), &(rt), sizeof (rt), &(p), sizeof (p), &(b), sizeof (b), &(e), sizeof (e), &(format), sizeof (format), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return 1;\n", "if (__is_neg(\"\", \"L3463\", 9, &(retval), sizeof (retval), &(rt), sizeof (rt), &(p), sizeof (p), &(b), sizeof (b), &(e), sizeof (e), &(format), sizeof (format), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	2,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	3,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	4,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	5,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	6,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	7,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	8,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	9,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	10,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	11,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	12,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	13,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	14,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	15,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	16,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	17,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	18,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	19,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	20,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	21,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	22,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	23,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	24,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	25,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	26,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	27,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	28,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	29,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	30,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	31,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	32,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	33,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	34,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	35,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	36,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	37,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	38,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	39,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	40,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	41,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	42,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	43,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	44,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	45,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	46,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	47,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	48,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	49,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	50,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	51,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	52,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	53,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	54,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	55,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	56,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	57,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	58,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	59,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	60,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	61,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	62,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	63,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	64,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	65,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	66,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	67,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	68,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	69,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	70,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	71,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	72,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	73,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	74,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	75,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	76,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	77,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	78,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	79,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	80,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	81,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	82,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	83,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	84,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	85,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	86,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	87,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	88,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	89,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	90,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	91,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	92,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	93,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	94,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	95,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	96,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	97,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	98,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	99,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	100,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	101,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	102,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	103,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	104,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	105,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	106,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	107,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	108,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	109,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	110,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	111,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	112,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	113,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	114,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	115,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	116,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	117,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	118,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	119,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	120,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	121,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	122,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	123,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	124,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	125,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	126,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	127,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	128,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	129,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	130,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	131,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	132,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	133,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	134,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	135,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	136,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	137,
									"scores":	[-11.954418710150948, -12.526469992150949, -12.215465988950948, -12.429541268950947, -12.429541268950947, -12.431491872150948, -12.429541268950947, -11.719667755150947, -12.183502355150948]
								}, {
									"case":	138,
									"scores":	[-9.12994971015095, -9.70200099215095, -9.39099698895095, -9.60507226895095, -9.60507226895095, -9.60702287215095, -9.60507226895095, -8.89519875515095, -9.35903335515095]
								}, {
									"case":	139,
									"scores":	[-11.954418710150948, -12.526469992150949, -12.215465988950948, -12.429541268950947, -12.429541268950947, -12.431491872150948, -12.429541268950947, -11.719667755150947, -12.183502355150948]
								}, {
									"case":	140,
									"scores":	[-11.954418710150948, -12.526469992150949, -12.215465988950948, -12.429541268950947, -12.429541268950947, -12.431491872150948, -12.429541268950947, -11.719667755150947, -12.183502355150948]
								}]
						}, {
							"switch":	99,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3463,
							"begin_column":	4,
							"end_line":	3463,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L3463\", 9, &(retval), sizeof (retval), &(rt), sizeof (rt), &(p), sizeof (p), &(b), sizeof (b), &(e), sizeof (e), &(format), sizeof (format), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    retval = 0;\n", "{\n}\n", "retval = (-1)", "retval = (0 * format_length)", "retval = (0 * r)", "retval = (0 * retval)", "retval = (0)", "retval = (1)", "retval = (2)", "retval = (b != 0)", "retval = (b != e)", "retval = (b == 0)", "retval = (b == e)", "retval = (e != 0)", "retval = (e == 0)", "retval = (errors != 0)", "retval = (errors == 0)", "retval = (format != 0)", "retval = (format == 0)", "retval = (format_length != 0)", "retval = (format_length != r)", "retval = (format_length != retval)", "retval = (format_length * r)", "retval = (format_length * retval)", "retval = (format_length + 0)", "retval = (format_length + r)", "retval = (format_length + retval)", "retval = (format_length - 0)", "retval = (format_length - r)", "retval = (format_length - retval)", "retval = (format_length == 0)", "retval = (format_length == r)", "retval = (format_length == retval)", "retval = (format_length)", "retval = (p != 0)", "retval = (p == 0)", "retval = (r != 0)", "retval = (r != retval)", "retval = (r * format_length)", "retval = (r * retval)", "retval = (r + 0)", "retval = (r + retval)", "retval = (r - 0)", "retval = (r - retval)", "retval = (r == 0)", "retval = (r == retval)", "retval = (r)", "retval = (retval != 0)", "retval = (retval * format_length)", "retval = (retval * r)", "retval = (retval + 0)", "retval = (retval - 0)", "retval = (retval == 0)", "retval = (retval)", "retval = (rt != 0)", "retval = (rt == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.52849952015095, -8.18268833965095, -8.10046192915095, -8.47102492915095, -8.47102492915095, -8.47674762915095, -8.47102492915095, -7.68547659915095, -7.7131368291509483]
								}, {
									"case":	2,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	3,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	4,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	5,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	6,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	7,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	8,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	9,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	10,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	11,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	12,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	13,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	14,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	15,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	16,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	17,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	18,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	19,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	20,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	21,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	22,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	23,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	24,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	25,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	26,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	27,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	28,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	29,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	30,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	31,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	32,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	33,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	34,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	35,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	36,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	37,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	38,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	39,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	40,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	41,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	42,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	43,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	44,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	45,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	46,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	47,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	48,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	49,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	50,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	51,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	52,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	53,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	54,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	55,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	56,
									"scores":	[-6.8212128591509487]
								}]
						}]
				}, {
					"line":	3460,
					"switches":	[{
							"switch":	94,
							"types":	[[], [], [], [], [137, 138, 139, 140], [1, 2, 3, 4, 5, 6], [], [], [], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [], [], []],
							"begin_line":	3461,
							"begin_column":	1,
							"end_line":	3461,
							"end_column":	1,
							"patch_codes":	["memset(&errors->error_count, 0, sizeof (*(&errors->error_count)))", "memset(&errors->error_messages, 0, sizeof (*(&errors->error_messages)))", "memset(&errors->warning_count, 0, sizeof (*(&errors->warning_count)))", "memset(&errors->warning_messages, 0, sizeof (*(&errors->warning_messages)))", "memset(errors->error_messages, 0, sizeof (*(errors->error_messages)))", "memset(errors->warning_messages, 0, sizeof (*(errors->warning_messages)))", "(date_globals.last_errors) = (errors)", "(date_globals.timezone) = (format)", "(format)++", "_efree(((format)))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (format_length)", "php_date_global_timezone_db_enabled = (r)", "php_date_global_timezone_db_enabled = (retval)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (format))", "retval = (-1)", "retval = (0)", "retval = (1)", "retval = (2)", "retval = (format_length)", "retval = (r)", "retval = (retval)", "timelib_error_container_dtor((errors))", "timelib_strtointerval((format), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(b), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(e), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(b), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(e), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(p), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(errors))", "timelib_time_dtor((b))", "timelib_time_dtor((e))", "timelib_unixtime2gmt((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2gmt((e), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((e), (timelib_sll)time(((void *)0)))", "timelib_update_from_sse((b))", "timelib_update_from_sse((e))", "timelib_update_ts((b), ((void *)0))", "timelib_update_ts((e), ((void *)0))", "update_errors_warnings((errors))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "retval = -1", "retval = 0", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_error_container_dtor(errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &errors)", "timelib_update_ts(b, ((void *)0))", "timelib_update_ts(e, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3461\", 9, &(p), sizeof (p), &(rt), sizeof (rt), &(retval), sizeof (retval), &(format), sizeof (format), &(b), sizeof (b), &(e), sizeof (e), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return -1;\n", "if (__is_neg(\"\", \"L3461\", 9, &(p), sizeof (p), &(rt), sizeof (rt), &(retval), sizeof (retval), &(format), sizeof (format), &(b), sizeof (b), &(e), sizeof (e), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return 0;\n", "if (__is_neg(\"\", \"L3461\", 9, &(p), sizeof (p), &(rt), sizeof (rt), &(retval), sizeof (retval), &(format), sizeof (format), &(b), sizeof (b), &(e), sizeof (e), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return 1;\n", "if (__is_neg(\"\", \"L3461\", 9, &(p), sizeof (p), &(rt), sizeof (rt), &(retval), sizeof (retval), &(format), sizeof (format), &(b), sizeof (b), &(e), sizeof (e), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	2,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	3,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	4,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	5,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	6,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	7,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	8,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	9,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	10,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	11,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	12,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	13,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	14,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	15,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	16,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	17,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	18,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	19,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	20,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	21,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	22,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	23,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	24,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	25,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	26,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	27,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	28,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	29,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	30,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	31,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	32,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	33,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	34,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	35,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	36,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	37,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	38,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	39,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	40,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	41,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	42,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	43,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	44,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	45,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	46,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	47,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	48,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	49,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	50,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	51,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	52,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	53,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	54,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	55,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	56,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	57,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	58,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	59,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	60,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	61,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	62,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	63,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	64,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	65,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	66,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	67,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	68,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	69,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	70,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	71,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	72,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	73,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	74,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	75,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	76,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	77,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	78,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	79,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	80,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	81,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	82,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	83,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	84,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	85,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	86,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	87,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	88,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	89,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	90,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	91,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	92,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	93,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	94,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	95,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	96,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	97,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	98,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	99,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	100,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	101,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	102,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	103,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	104,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	105,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	106,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	107,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	108,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	109,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	110,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	111,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	112,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	113,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	114,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	115,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	116,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	117,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	118,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	119,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	120,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	121,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	122,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	123,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	124,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	125,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	126,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	127,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	128,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	129,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	130,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	131,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	132,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	133,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	134,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	135,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	136,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	137,
									"scores":	[-11.557467342126145, -12.081621745326144, -12.798812783326143, -12.420577976326143, -10.702159373126143, -10.702159373126143, -13.273935342126144, -12.564061828326144, -13.027896428326144]
								}, {
									"case":	138,
									"scores":	[-8.7329983421261446, -9.2571527453261435, -9.9743437833261428, -9.5961089763261445, -7.8776903731261445, -7.8776903731261445, -10.449466342126144, -9.7395928283261437, -10.203427428326144]
								}, {
									"case":	139,
									"scores":	[-11.557467342126145, -12.081621745326144, -12.798812783326143, -12.420577976326143, -10.702159373126143, -10.702159373126143, -13.273935342126144, -12.564061828326144, -13.027896428326144]
								}, {
									"case":	140,
									"scores":	[-11.557467342126145, -12.081621745326144, -12.798812783326143, -12.420577976326143, -10.702159373126143, -10.702159373126143, -13.273935342126144, -12.564061828326144, -13.027896428326144]
								}]
						}, {
							"switch":	95,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	3461,
							"begin_column":	3,
							"end_line":	3474,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L3461\", 9, &(p), sizeof (p), &(rt), sizeof (rt), &(retval), sizeof (retval), &(format), sizeof (format), &(b), sizeof (b), &(e), sizeof (e), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r))) {\n    *rt = p;\n    retval = 0;\n} else {\n    if (b && e) {\n        timelib_update_ts(b, ((void *)0));\n        timelib_update_ts(e, ((void *)0));\n        *rt = timelib_diff(b, e);\n        retval = 0;\n    } else {\n        php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format);\n        retval = -1;\n    }\n}\n", "if ((p) || __is_neg(\"\", \"L3461\", 9, &(p), sizeof (p), &(rt), sizeof (rt), &(retval), sizeof (retval), &(format), sizeof (format), &(b), sizeof (b), &(e), sizeof (e), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r))) {\n    *rt = p;\n    retval = 0;\n} else {\n    if (b && e) {\n        timelib_update_ts(b, ((void *)0));\n        timelib_update_ts(e, ((void *)0));\n        *rt = timelib_diff(b, e);\n        retval = 0;\n    } else {\n        php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format);\n        retval = -1;\n    }\n}\n", "if ((p) && !__is_neg(\"\", \"L3461\", 9, &(p), sizeof (p), &(rt), sizeof (rt), &(retval), sizeof (retval), &(format), sizeof (format), &(b), sizeof (b), &(e), sizeof (e), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r))) {\n    *rt = p;\n    retval = 0;\n} else {\n    if (b && e) {\n        timelib_update_ts(b, ((void *)0));\n        timelib_update_ts(e, ((void *)0));\n        *rt = timelib_diff(b, e);\n        retval = 0;\n    } else {\n        php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format);\n        retval = -1;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.454959503428146, -2.2622962034281455, -4.0073430844281459, -3.242155893428146, -2.7415242034281468, -2.7415242034281468, -3.9498684934281467, -3.1643201634281466, -3.1919803934281461]
								}, {
									"case":	2,
									"scores":	[-4.541025185428146, -3.3483618854281461, -5.093408766428146, -4.3282215754281461, -3.827589885428146, -3.827589885428146, -5.0359341754281459, -4.2503858454281458, -4.2780460754281462]
								}, {
									"case":	3,
									"scores":	[-4.541025185428146, -3.3483618854281461, -5.093408766428146, -4.3282215754281461, -3.827589885428146, -3.827589885428146, -5.0359341754281459, -4.2503858454281458, -4.2780460754281462]
								}]
						}, {
							"switch":	100,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	3461,
							"begin_column":	3,
							"end_line":	3474,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L3461\", 9, &(p), sizeof (p), &(rt), sizeof (rt), &(retval), sizeof (retval), &(format), sizeof (format), &(b), sizeof (b), &(e), sizeof (e), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)))\n    if (p) {\n        *rt = p;\n        retval = 0;\n    } else {\n        if (b && e) {\n            timelib_update_ts(b, ((void *)0));\n            timelib_update_ts(e, ((void *)0));\n            *rt = timelib_diff(b, e);\n            retval = 0;\n        } else {\n            php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format);\n            retval = -1;\n        }\n    }\n", "if (!__is_neg(\"\", \"L3461\", 9, &(p), sizeof (p), &(rt), sizeof (rt), &(retval), sizeof (retval), &(format), sizeof (format), &(b), sizeof (b), &(e), sizeof (e), &(errors), sizeof (errors), &(format_length), sizeof (format_length), &(r), sizeof (r)) && (p)) {\n    *rt = p;\n    retval = 0;\n} else {\n    if (b && e) {\n        timelib_update_ts(b, ((void *)0));\n        timelib_update_ts(e, ((void *)0));\n        *rt = timelib_diff(b, e);\n        retval = 0;\n    } else {\n        php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format);\n        retval = -1;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.1454070123261442, -7.9527437123261437, -9.6977905933261432, -8.9326034023261442, -8.4319717123261437, -8.4319717123261437, -9.6403160023261432, -8.8547676723261439, -8.8824279023261443]
								}, {
									"case":	2,
									"scores":	[-8.948488012326143, -7.7558247123261435, -9.50087159332614, -8.7356844023261431, -8.2350527123261443, -8.2350527123261443, -9.4433970023261438, -8.6578486723261445, -8.6855089023261431]
								}]
						}]
				}, {
					"line":	3456,
					"switches":	[{
							"switch":	92,
							"types":	[[], [], [], [], [138, 139, 140, 141], [1, 2, 3, 4, 5, 6, 7], [], [], [], [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [], [], [], [], [], []],
							"begin_line":	3457,
							"begin_column":	0,
							"end_line":	3457,
							"end_column":	0,
							"patch_codes":	["memset(&errors->error_count, 0, sizeof (*(&errors->error_count)))", "memset(&errors->error_messages, 0, sizeof (*(&errors->error_messages)))", "memset(&errors->warning_count, 0, sizeof (*(&errors->warning_count)))", "memset(&errors->warning_messages, 0, sizeof (*(&errors->warning_messages)))", "memset(errors, 0, sizeof (*(errors)))", "memset(errors->error_messages, 0, sizeof (*(errors->error_messages)))", "memset(errors->warning_messages, 0, sizeof (*(errors->warning_messages)))", "(date_globals.last_errors) = (errors)", "(date_globals.timezone) = (format)", "(format)++", "_efree(((format)))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (format_length)", "php_date_global_timezone_db_enabled = (r)", "php_date_global_timezone_db_enabled = (retval)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (format))", "retval = (-1)", "retval = (0)", "retval = (1)", "retval = (2)", "retval = (format_length)", "retval = (r)", "retval = (retval)", "timelib_error_container_dtor((errors))", "timelib_strtointerval((format), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(b), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(e), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(b), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(e), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(p), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(errors))", "timelib_time_dtor((b))", "timelib_time_dtor((e))", "timelib_unixtime2gmt((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2gmt((e), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((e), (timelib_sll)time(((void *)0)))", "timelib_update_from_sse((b))", "timelib_update_from_sse((e))", "timelib_update_ts((b), ((void *)0))", "timelib_update_ts((e), ((void *)0))", "update_errors_warnings((errors))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "retval = -1", "retval = 0", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_error_container_dtor(errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &errors)", "timelib_update_ts(b, ((void *)0))", "timelib_update_ts(e, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3457\", 13, &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return -1;\n", "if (__is_neg(\"\", \"L3457\", 13, &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 0;\n", "if (__is_neg(\"\", \"L3457\", 13, &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 1;\n", "if (__is_neg(\"\", \"L3457\", 13, &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	2,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	3,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	4,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	5,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	6,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	7,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	8,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	9,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	10,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	11,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	12,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	13,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	14,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	15,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	16,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	17,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	18,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	19,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	20,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	21,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	22,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	23,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	24,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	25,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	26,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	27,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	28,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	29,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	30,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	31,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	32,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	33,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	34,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	35,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	36,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	37,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	38,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	39,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	40,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	41,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	42,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	43,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	44,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	45,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	46,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	47,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	48,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	49,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	50,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	51,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	52,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	53,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	54,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	55,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	56,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	57,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	58,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	59,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	60,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	61,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	62,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	63,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	64,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	65,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	66,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	67,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	68,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	69,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	70,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	71,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	72,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	73,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	74,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	75,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	76,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	77,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	78,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	79,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	80,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	81,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	82,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	83,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	84,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	85,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	86,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	87,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	88,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	89,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	90,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	91,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	92,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	93,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	94,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	95,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	96,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	97,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	98,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	99,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	100,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	101,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	102,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	103,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	104,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	105,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	106,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	107,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	108,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	109,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	110,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	111,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	112,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	113,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	114,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	115,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	116,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	117,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	118,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	119,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	120,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	121,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	122,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	123,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	124,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	125,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	126,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	127,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	128,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	129,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	130,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	131,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	132,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	133,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	134,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	135,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	136,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	137,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	138,
									"scores":	[-14.841707494743664, -14.112156139043663, -12.933301125043663, -13.076784977043664, -10.853084081843663, -10.853084081843663, -11.708392050843663, -13.178821137043663, -13.486042358043662, -12.574230814043663, -14.334651671043662, -14.580690584843662, -14.580690584843662]
								}, {
									"case":	139,
									"scores":	[-12.017238494743664, -11.287687139043662, -10.108832125043664, -10.252315977043663, -8.0286150818436628, -8.0286150818436628, -8.8839230508436628, -10.354352137043662, -10.661573358043661, -9.7497618140436639, -11.510182671043662, -11.756221584843662, -11.756221584843662]
								}, {
									"case":	140,
									"scores":	[-14.841707494743664, -14.112156139043663, -12.933301125043663, -13.076784977043664, -10.853084081843663, -10.853084081843663, -11.708392050843663, -13.178821137043663, -13.486042358043662, -12.574230814043663, -14.334651671043662, -14.580690584843662, -14.580690584843662]
								}, {
									"case":	141,
									"scores":	[-14.841707494743664, -14.112156139043663, -12.933301125043663, -13.076784977043664, -10.853084081843663, -10.853084081843663, -11.708392050843663, -13.178821137043663, -13.486042358043662, -12.574230814043663, -14.334651671043662, -14.580690584843662, -14.580690584843662]
								}]
						}, {
							"switch":	93,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	3457,
							"begin_column":	2,
							"end_line":	3475,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L3457\", 13, &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format);\n    retval = -1;\n} else {\n    if (p) {\n        *rt = p;\n        retval = 0;\n    } else {\n        if (b && e) {\n            timelib_update_ts(b, ((void *)0));\n            timelib_update_ts(e, ((void *)0));\n            *rt = timelib_diff(b, e);\n            retval = 0;\n        } else {\n            php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format);\n            retval = -1;\n        }\n    }\n}\n", "if ((errors->error_count > 0) || __is_neg(\"\", \"L3457\", 13, &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format);\n    retval = -1;\n} else {\n    if (p) {\n        *rt = p;\n        retval = 0;\n    } else {\n        if (b && e) {\n            timelib_update_ts(b, ((void *)0));\n            timelib_update_ts(e, ((void *)0));\n            *rt = timelib_diff(b, e);\n            retval = 0;\n        } else {\n            php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format);\n            retval = -1;\n        }\n    }\n}\n", "if ((errors->error_count > 0) && !__is_neg(\"\", \"L3457\", 13, &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages))) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format);\n    retval = -1;\n} else {\n    if (p) {\n        *rt = p;\n        retval = 0;\n    } else {\n        if (b && e) {\n            timelib_update_ts(b, ((void *)0));\n            timelib_update_ts(e, ((void *)0));\n            *rt = timelib_diff(b, e);\n            retval = 0;\n        } else {\n            php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format);\n            retval = -1;\n        }\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.5744168644281449, -0.94125084142814641, -2.0111183774281458, -1.9332826474281446, -1.225531065428147, -1.225531065428147, -1.9389663654281457, -1.6759872554281454, -2.5626182284281445, -0.9422758414281458, -2.3968048414281453, -3.1546929414281455, -3.1546929414281455]
								}, {
									"case":	2,
									"scores":	[-4.6234006904281451, -2.9902346674281457, -4.060102203428146, -3.9822664734281457, -3.2745148914281463, -3.2745148914281463, -3.9879501914281459, -3.7249710814281456, -4.611602054428146, -2.991259667428146, -4.445788667428145, -5.2036767674281457, -5.2036767674281457]
								}, {
									"case":	3,
									"scores":	[-4.6234006904281451, -2.9902346674281457, -4.060102203428146, -3.9822664734281457, -3.2745148914281463, -3.2745148914281463, -3.9879501914281459, -3.7249710814281456, -4.611602054428146, -2.991259667428146, -4.445788667428145, -5.2036767674281457, -5.2036767674281457]
								}]
						}, {
							"switch":	101,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	3457,
							"begin_column":	2,
							"end_line":	3475,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L3457\", 13, &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    if (errors->error_count > 0) {\n        php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format);\n        retval = -1;\n    } else {\n        if (p) {\n            *rt = p;\n            retval = 0;\n        } else {\n            if (b && e) {\n                timelib_update_ts(b, ((void *)0));\n                timelib_update_ts(e, ((void *)0));\n                *rt = timelib_diff(b, e);\n                retval = 0;\n            } else {\n                php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format);\n                retval = -1;\n            }\n        }\n    }\n", "if (!__is_neg(\"\", \"L3457\", 13, &(errors), sizeof (errors), &(errors->error_count), sizeof (errors->error_count), &(format), sizeof (format), &(format_length), sizeof (format_length), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(r), sizeof (r), &(retval), sizeof (retval), &(rt), sizeof (rt), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)) && (errors->error_count > 0)) {\n    php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format);\n    retval = -1;\n} else {\n    if (p) {\n        *rt = p;\n        retval = 0;\n    } else {\n        if (b && e) {\n            timelib_update_ts(b, ((void *)0));\n            timelib_update_ts(e, ((void *)0));\n            *rt = timelib_diff(b, e);\n            retval = 0;\n        } else {\n            php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format);\n            retval = -1;\n        }\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.277317442643664, -7.3575867196436633, -8.4274542556436636, -8.3496185256436632, -7.641866943643663, -7.641866943643663, -8.3553022436436635, -8.0923231336436636, -8.9789541066436627, -7.3586117196436636, -8.81314071964366, -9.5710288196436633, -9.5710288196436633]
								}, {
									"case":	2,
									"scores":	[-8.1793660646436628, -6.5462000416436625, -7.6160675776436628, -7.5382318476436634, -6.8304802656436641, -6.8304802656436641, -7.5439155656436627, -7.2809364556436629, -8.1675674286436628, -6.5472250416436637, -8.0017540416436628, -8.7596421416436634, -8.7596421416436634]
								}]
						}]
				}, {
					"line":	3475,
					"switches":	[{
							"switch":	102,
							"types":	[[], [], [], [], [138, 139, 140, 141], [1, 2, 3, 4, 5, 6, 7], [], [], [], [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [], [], [], [], [], []],
							"begin_line":	3476,
							"begin_column":	0,
							"end_line":	3476,
							"end_column":	0,
							"patch_codes":	["memset(&errors->error_count, 0, sizeof (*(&errors->error_count)))", "memset(&errors->error_messages, 0, sizeof (*(&errors->error_messages)))", "memset(&errors->warning_count, 0, sizeof (*(&errors->warning_count)))", "memset(&errors->warning_messages, 0, sizeof (*(&errors->warning_messages)))", "memset(errors, 0, sizeof (*(errors)))", "memset(errors->error_messages, 0, sizeof (*(errors->error_messages)))", "memset(errors->warning_messages, 0, sizeof (*(errors->warning_messages)))", "(date_globals.last_errors) = (errors)", "(date_globals.timezone) = (format)", "(format)++", "_efree(((format)))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (format_length)", "php_date_global_timezone_db_enabled = (r)", "php_date_global_timezone_db_enabled = (retval)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (format))", "retval = (-1)", "retval = (0)", "retval = (1)", "retval = (2)", "retval = (format_length)", "retval = (r)", "retval = (retval)", "timelib_error_container_dtor((errors))", "timelib_strtointerval((format), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(b), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(e), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(b), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(e), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(p), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(errors))", "timelib_time_dtor((b))", "timelib_time_dtor((e))", "timelib_unixtime2gmt((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2gmt((e), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((e), (timelib_sll)time(((void *)0)))", "timelib_update_from_sse((b))", "timelib_update_from_sse((e))", "timelib_update_ts((b), ((void *)0))", "timelib_update_ts((e), ((void *)0))", "update_errors_warnings((errors))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "retval = -1", "retval = 0", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_error_container_dtor(errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &errors)", "timelib_update_ts(b, ((void *)0))", "timelib_update_ts(e, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3476\", 13, &(errors), sizeof (errors), &(retval), sizeof (retval), &(format), sizeof (format), &(rt), sizeof (rt), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(errors->error_count), sizeof (errors->error_count), &(format_length), sizeof (format_length), &(r), sizeof (r), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return -1;\n", "if (__is_neg(\"\", \"L3476\", 13, &(errors), sizeof (errors), &(retval), sizeof (retval), &(format), sizeof (format), &(rt), sizeof (rt), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(errors->error_count), sizeof (errors->error_count), &(format_length), sizeof (format_length), &(r), sizeof (r), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 0;\n", "if (__is_neg(\"\", \"L3476\", 13, &(errors), sizeof (errors), &(retval), sizeof (retval), &(format), sizeof (format), &(rt), sizeof (rt), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(errors->error_count), sizeof (errors->error_count), &(format_length), sizeof (format_length), &(r), sizeof (r), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 1;\n", "if (__is_neg(\"\", \"L3476\", 13, &(errors), sizeof (errors), &(retval), sizeof (retval), &(format), sizeof (format), &(rt), sizeof (rt), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(errors->error_count), sizeof (errors->error_count), &(format_length), sizeof (format_length), &(r), sizeof (r), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	2,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	3,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	4,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	5,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	6,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	7,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	8,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	9,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	10,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	11,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	12,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	13,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	14,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	15,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	16,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	17,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	18,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	19,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	20,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	21,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	22,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	23,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	24,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	25,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	26,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	27,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	28,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	29,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	30,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	31,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	32,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	33,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	34,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	35,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	36,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	37,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	38,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	39,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	40,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	41,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	42,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	43,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	44,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	45,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	46,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	47,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	48,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	49,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	50,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	51,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	52,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	53,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	54,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	55,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	56,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	57,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	58,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	59,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	60,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	61,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	62,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	63,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	64,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	65,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	66,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	67,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	68,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	69,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	70,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	71,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	72,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	73,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	74,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	75,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	76,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	77,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	78,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	79,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	80,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	81,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	82,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	83,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	84,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	85,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	86,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	87,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	88,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	89,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	90,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	91,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	92,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	93,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	94,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	95,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	96,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	97,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	98,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	99,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	100,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	101,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	102,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	103,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	104,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	105,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	106,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	107,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	108,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	109,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	110,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	111,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	112,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	113,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	114,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	115,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	116,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	117,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	118,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	119,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	120,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	121,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	122,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	123,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	124,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	125,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	126,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	127,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	128,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	129,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	130,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	131,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	132,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	133,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	134,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	135,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	136,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	137,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	138,
									"scores":	[-11.797046167208624, -11.271144243408624, -12.480839479408623, -12.555703519408624, -11.907462996208624, -11.907462996208624, -11.903015156208625, -12.762142056408624, -11.769015362408624, -11.871051522408624, -13.026882056408624, -13.272920970208624, -13.272920970208624]
								}, {
									"case":	139,
									"scores":	[-8.9725771672086232, -8.4466752434086239, -9.6563704794086238, -9.7312345194086234, -9.082993996208625, -9.082993996208625, -9.078546156208624, -9.9376730564086238, -8.944546362408623, -9.0465825224086238, -10.202413056408624, -10.448451970208623, -10.448451970208623]
								}, {
									"case":	140,
									"scores":	[-11.797046167208624, -11.271144243408624, -12.480839479408623, -12.555703519408624, -11.907462996208624, -11.907462996208624, -11.903015156208625, -12.762142056408624, -11.769015362408624, -11.871051522408624, -13.026882056408624, -13.272920970208624, -13.272920970208624]
								}, {
									"case":	141,
									"scores":	[-11.797046167208624, -11.271144243408624, -12.480839479408623, -12.555703519408624, -11.907462996208624, -11.907462996208624, -11.903015156208625, -12.762142056408624, -11.769015362408624, -11.871051522408624, -13.026882056408624, -13.272920970208624, -13.272920970208624]
								}]
						}, {
							"switch":	103,
							"types":	[[], [], [1], [], [], [], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [], [3], [], [], [], [], [], [], [], [2]],
							"begin_line":	3476,
							"begin_column":	2,
							"end_line":	3476,
							"end_column":	37,
							"patch_codes":	["if (!__is_neg(\"\", \"L3476\", 13, &(errors), sizeof (errors), &(retval), sizeof (retval), &(format), sizeof (format), &(rt), sizeof (rt), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(errors->error_count), sizeof (errors->error_count), &(format_length), sizeof (format_length), &(r), sizeof (r), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    timelib_error_container_dtor(errors);\n", "{\n}\n", "update_errors_warnings(errors)", "timelib_error_container_dtor((&b))", "timelib_error_container_dtor((&e))", "timelib_error_container_dtor((&errors))", "timelib_error_container_dtor((&format))", "timelib_error_container_dtor((&format_length))", "timelib_error_container_dtor((&p))", "timelib_error_container_dtor((&r))", "timelib_error_container_dtor((&retval))", "timelib_error_container_dtor((&rt))", "timelib_error_container_dtor((errors))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7269896095086246, -7.7784819370086247, -8.4893157410086246, -8.1062736055086244, -7.8327834650086245, -7.8327834650086245, -7.8280744190086242, -7.9608808590086237, -7.6980447110086239, -7.4407493190086242, -8.1615669050086233, -8.9194550050086239, -8.9194550050086239]
								}, {
									"case":	2,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	3,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	4,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	5,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	6,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	7,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	8,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	9,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	10,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	11,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	12,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	13,
									"scores":	[-7.0030372250086241]
								}]
						}]
				}, {
					"line":	3476,
					"switches":	[{
							"switch":	104,
							"types":	[[], [], [], [], [137, 138, 139, 140], [1, 2, 3, 4, 5, 6], [], [], [], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [], [], [], [], []],
							"begin_line":	3477,
							"begin_column":	0,
							"end_line":	3477,
							"end_column":	0,
							"patch_codes":	["memset(&errors->error_count, 0, sizeof (*(&errors->error_count)))", "memset(&errors->error_messages, 0, sizeof (*(&errors->error_messages)))", "memset(&errors->warning_count, 0, sizeof (*(&errors->warning_count)))", "memset(&errors->warning_messages, 0, sizeof (*(&errors->warning_messages)))", "memset(errors->error_messages, 0, sizeof (*(errors->error_messages)))", "memset(errors->warning_messages, 0, sizeof (*(errors->warning_messages)))", "(date_globals.last_errors) = (errors)", "(date_globals.timezone) = (format)", "(format)++", "_efree(((format)))", "php_date_global_timezone_db_enabled = (-1)", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (2)", "php_date_global_timezone_db_enabled = (format_length)", "php_date_global_timezone_db_enabled = (r)", "php_date_global_timezone_db_enabled = (retval)", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (format))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (format))", "retval = (-1)", "retval = (0)", "retval = (1)", "retval = (2)", "retval = (format_length)", "retval = (r)", "retval = (retval)", "timelib_error_container_dtor((errors))", "timelib_strtointerval((format), format_length, &b, &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(b), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &(e), &e, &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(b), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &(e), &p, &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &(p), &r, &errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &(errors))", "timelib_time_dtor((b))", "timelib_time_dtor((e))", "timelib_unixtime2gmt((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2gmt((e), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((b), (timelib_sll)time(((void *)0)))", "timelib_unixtime2local((e), (timelib_sll)time(((void *)0)))", "timelib_update_from_sse((b))", "timelib_update_from_sse((e))", "timelib_update_ts((b), ((void *)0))", "timelib_update_ts((e), ((void *)0))", "update_errors_warnings((errors))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", format)", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "retval = -1", "retval = 0", "timelib_error_container_dtor((date_globals.last_errors))", "timelib_error_container_dtor(errors)", "timelib_strtointerval(format, format_length, &b, &e, &p, &r, &errors)", "timelib_update_ts(b, ((void *)0))", "timelib_update_ts(e, ((void *)0))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "if (__is_neg(\"\", \"L3477\", 13, &(retval), sizeof (retval), &(errors), sizeof (errors), &(format), sizeof (format), &(rt), sizeof (rt), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(errors->error_count), sizeof (errors->error_count), &(format_length), sizeof (format_length), &(r), sizeof (r), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return -1;\n", "if (__is_neg(\"\", \"L3477\", 13, &(retval), sizeof (retval), &(errors), sizeof (errors), &(format), sizeof (format), &(rt), sizeof (rt), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(errors->error_count), sizeof (errors->error_count), &(format_length), sizeof (format_length), &(r), sizeof (r), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 0;\n", "if (__is_neg(\"\", \"L3477\", 13, &(retval), sizeof (retval), &(errors), sizeof (errors), &(format), sizeof (format), &(rt), sizeof (rt), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(errors->error_count), sizeof (errors->error_count), &(format_length), sizeof (format_length), &(r), sizeof (r), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 1;\n", "if (__is_neg(\"\", \"L3477\", 13, &(retval), sizeof (retval), &(errors), sizeof (errors), &(format), sizeof (format), &(rt), sizeof (rt), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(errors->error_count), sizeof (errors->error_count), &(format_length), sizeof (format_length), &(r), sizeof (r), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	2,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	3,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	4,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	5,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	6,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	7,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	8,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	9,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	10,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	11,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	12,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	13,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	14,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	15,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	16,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	17,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	18,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	19,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	20,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	21,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	22,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	23,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	24,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	25,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	26,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	27,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	28,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	29,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	30,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	31,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	32,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	33,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	34,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	35,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	36,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	37,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	38,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	39,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	40,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	41,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	42,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	43,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	44,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	45,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	46,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	47,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	48,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	49,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	50,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	51,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	52,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	53,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	54,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	55,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	56,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	57,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	58,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	59,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	60,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	61,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	62,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	63,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	64,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	65,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	66,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	67,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	68,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	69,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	70,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	71,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	72,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	73,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	74,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	75,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	76,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	77,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	78,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	79,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	80,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	81,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	82,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	83,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	84,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	85,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	86,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	87,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	88,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	89,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	90,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	91,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	92,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	93,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	94,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	95,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	96,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	97,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	98,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	99,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	100,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	101,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	102,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	103,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	104,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	105,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	106,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	107,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	108,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	109,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	110,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	111,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	112,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	113,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	114,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	115,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	116,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	117,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	118,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	119,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	120,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	121,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	122,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	123,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	124,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	125,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	126,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	127,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	128,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	129,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	130,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	131,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	132,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	133,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	134,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	135,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	136,
									"scores":	[-6.9828345176911046]
								}, {
									"case":	137,
									"scores":	[-11.020664381691105, -12.404901407491105, -12.228938910691104, -12.303802950691104, -11.655562427491105, -11.655562427491105, -11.651114587491104, -12.510241487691104, -11.517114793691103, -11.619150953691104, -12.774981487691106, -13.021020401491105, -13.021020401491105]
								}, {
									"case":	138,
									"scores":	[-8.1961953816911048, -9.580432407491104, -9.4044699106911036, -9.479333950691105, -8.8310934274911048, -8.8310934274911048, -8.8266455874911038, -9.6857724876911053, -8.6926457936911046, -8.7946819536911054, -9.9505124876911051, -10.196551401491105, -10.196551401491105]
								}, {
									"case":	139,
									"scores":	[-11.020664381691105, -12.404901407491105, -12.228938910691104, -12.303802950691104, -11.655562427491105, -11.655562427491105, -11.651114587491104, -12.510241487691104, -11.517114793691103, -11.619150953691104, -12.774981487691106, -13.021020401491105, -13.021020401491105]
								}, {
									"case":	140,
									"scores":	[-11.020664381691105, -12.404901407491105, -12.228938910691104, -12.303802950691104, -11.655562427491105, -11.655562427491105, -11.651114587491104, -12.510241487691104, -11.517114793691103, -11.619150953691104, -12.774981487691106, -13.021020401491105, -13.021020401491105]
								}]
						}, {
							"switch":	105,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	3477,
							"begin_column":	2,
							"end_line":	3477,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L3477\", 13, &(retval), sizeof (retval), &(errors), sizeof (errors), &(format), sizeof (format), &(rt), sizeof (rt), &(b), sizeof (b), &(e), sizeof (e), &(p), sizeof (p), &(errors->error_count), sizeof (errors->error_count), &(format_length), sizeof (format_length), &(r), sizeof (r), &(errors->warning_count), sizeof (errors->warning_count), &(errors->warning_messages), sizeof (errors->warning_messages), &(errors->error_messages), sizeof (errors->error_messages)))\n    return retval;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.3817097236911042, -8.9236572481911054, -8.9678390336911047, -8.5847968981911045, -8.3113067576911046, -8.3113067576911046, -8.3065977116911043, -8.4394041516911038, -8.1765680036911057, -7.9192726116911043, -8.6400901976911051, -9.3979782976911039, -9.3979782976911039]
								}]
						}]
				}, {
					"line":	3590,
					"switches":	[]
				}, {
					"line":	3592,
					"switches":	[{
							"switch":	106,
							"types":	[[], [], [], [], [192], [], [], [], [], [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], [], [], [], [], [], []],
							"begin_line":	3593,
							"begin_column":	0,
							"end_line":	3593,
							"end_column":	0,
							"patch_codes":	["(date_globals.timezone) = (interval_string)", "(interval_string)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval_string)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "diobj = (diobj)", "diobj = zend_object_store_get_object(((return_value)))", "diobj = zend_object_store_get_object(((this_ptr)))", "diobj->diff = (reltime)", "diobj->initialized = (0)", "diobj->initialized = (1)", "diobj->initialized = (ht)", "diobj->initialized = (interval_string_length)", "diobj->initialized = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((diobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (interval_string_length)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (interval_string))", "timelib_rel_time_dtor((diobj)->diff)", "zend_object_std_dtor(&(diobj)->std)", "zend_replace_error_handling((EH_NORMAL), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_THROW), ((void *)0), &error_handling)", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "diobj = zend_object_store_get_object((this_ptr))", "diobj->diff = reltime", "diobj->initialized = 1", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "zend_replace_error_handling(EH_THROW, ((void *)0), &error_handling)", "zend_restore_error_handling(&error_handling)", "if (__is_neg(\"\", \"L3593\", 6, &(ht), sizeof (ht), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-10.650307638697, -10.808583191697, -10.096759074697, -10.432745335497, -11.219415552497, -11.291083102397]
								}]
						}, {
							"switch":	107,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3593,
							"begin_column":	2,
							"end_line":	3593,
							"end_column":	71,
							"patch_codes":	["if (!__is_neg(\"\", \"L3593\", 6, &(ht), sizeof (ht), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj)))\n    zend_replace_error_handling(EH_THROW, ((void *)0), &error_handling);\n", "{\n}\n", "zend_replace_error_handling((0 * ht), ((void *)0), &error_handling)", "zend_replace_error_handling((0 * interval_string_length), ((void *)0), &error_handling)", "zend_replace_error_handling((0 * return_value_used), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_NORMAL), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_THROW), ((void *)0), &error_handling)", "zend_replace_error_handling((diobj != 0), ((void *)0), &error_handling)", "zend_replace_error_handling((diobj == 0), ((void *)0), &error_handling)", "zend_replace_error_handling((error_handling != 0), ((void *)0), &error_handling)", "zend_replace_error_handling((error_handling == 0), ((void *)0), &error_handling)", "zend_replace_error_handling((ht != 0), ((void *)0), &error_handling)", "zend_replace_error_handling((ht != interval_string_length), ((void *)0), &error_handling)", "zend_replace_error_handling((ht != return_value_used), ((void *)0), &error_handling)", "zend_replace_error_handling((ht * interval_string_length), ((void *)0), &error_handling)", "zend_replace_error_handling((ht * return_value_used), ((void *)0), &error_handling)", "zend_replace_error_handling((ht + 0), ((void *)0), &error_handling)", "zend_replace_error_handling((ht + interval_string_length), ((void *)0), &error_handling)", "zend_replace_error_handling((ht + return_value_used), ((void *)0), &error_handling)", "zend_replace_error_handling((ht - 0), ((void *)0), &error_handling)", "zend_replace_error_handling((ht - interval_string_length), ((void *)0), &error_handling)", "zend_replace_error_handling((ht - return_value_used), ((void *)0), &error_handling)", "zend_replace_error_handling((ht == 0), ((void *)0), &error_handling)", "zend_replace_error_handling((ht == interval_string_length), ((void *)0), &error_handling)", "zend_replace_error_handling((ht == return_value_used), ((void *)0), &error_handling)", "zend_replace_error_handling((interval_string != 0), ((void *)0), &error_handling)", "zend_replace_error_handling((interval_string == 0), ((void *)0), &error_handling)", "zend_replace_error_handling((interval_string_length != 0), ((void *)0), &error_handling)", "zend_replace_error_handling((interval_string_length * ht), ((void *)0), &error_handling)", "zend_replace_error_handling((interval_string_length * return_value_used), ((void *)0), &error_handling)", "zend_replace_error_handling((interval_string_length + 0), ((void *)0), &error_handling)", "zend_replace_error_handling((interval_string_length - 0), ((void *)0), &error_handling)", "zend_replace_error_handling((interval_string_length == 0), ((void *)0), &error_handling)", "zend_replace_error_handling((reltime != 0), ((void *)0), &error_handling)", "zend_replace_error_handling((reltime == 0), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value != 0), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value != this_ptr), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value == 0), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value == this_ptr), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_ptr != 0), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_ptr == 0), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_used != 0), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_used != interval_string_length), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_used * ht), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_used * interval_string_length), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_used + 0), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_used + interval_string_length), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_used - 0), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_used - interval_string_length), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_used == 0), ((void *)0), &error_handling)", "zend_replace_error_handling((return_value_used == interval_string_length), ((void *)0), &error_handling)", "zend_replace_error_handling((this_ptr != 0), ((void *)0), &error_handling)", "zend_replace_error_handling((this_ptr == 0), ((void *)0), &error_handling)", "zend_replace_error_handling(EH_THROW, ((void *)0), &(error_handling))", "zend_replace_error_handling(EH_THROW, ((void *)0), &error_handling)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.259215123297, -9.595189823297, -8.803918793297, -9.499018584297, -8.890196583297, -10.467238193197]
								}, {
									"case":	2,
									"scores":	[-7.912159054297]
								}, {
									"case":	3,
									"scores":	[-7.912159054297]
								}, {
									"case":	4,
									"scores":	[-7.912159054297]
								}, {
									"case":	5,
									"scores":	[-7.912159054297]
								}, {
									"case":	6,
									"scores":	[-7.912159054297]
								}, {
									"case":	7,
									"scores":	[-7.912159054297]
								}, {
									"case":	8,
									"scores":	[-7.912159054297]
								}, {
									"case":	9,
									"scores":	[-7.912159054297]
								}, {
									"case":	10,
									"scores":	[-7.912159054297]
								}, {
									"case":	11,
									"scores":	[-7.912159054297]
								}, {
									"case":	12,
									"scores":	[-7.912159054297]
								}, {
									"case":	13,
									"scores":	[-7.912159054297]
								}, {
									"case":	14,
									"scores":	[-7.912159054297]
								}, {
									"case":	15,
									"scores":	[-7.912159054297]
								}, {
									"case":	16,
									"scores":	[-7.912159054297]
								}, {
									"case":	17,
									"scores":	[-7.912159054297]
								}, {
									"case":	18,
									"scores":	[-7.912159054297]
								}, {
									"case":	19,
									"scores":	[-7.912159054297]
								}, {
									"case":	20,
									"scores":	[-7.912159054297]
								}, {
									"case":	21,
									"scores":	[-7.912159054297]
								}, {
									"case":	22,
									"scores":	[-7.912159054297]
								}, {
									"case":	23,
									"scores":	[-7.912159054297]
								}, {
									"case":	24,
									"scores":	[-7.912159054297]
								}, {
									"case":	25,
									"scores":	[-7.912159054297]
								}, {
									"case":	26,
									"scores":	[-7.912159054297]
								}, {
									"case":	27,
									"scores":	[-7.912159054297]
								}, {
									"case":	28,
									"scores":	[-7.912159054297]
								}, {
									"case":	29,
									"scores":	[-7.912159054297]
								}, {
									"case":	30,
									"scores":	[-7.912159054297]
								}, {
									"case":	31,
									"scores":	[-7.912159054297]
								}, {
									"case":	32,
									"scores":	[-7.912159054297]
								}, {
									"case":	33,
									"scores":	[-7.912159054297]
								}, {
									"case":	34,
									"scores":	[-7.912159054297]
								}, {
									"case":	35,
									"scores":	[-7.912159054297]
								}, {
									"case":	36,
									"scores":	[-7.912159054297]
								}, {
									"case":	37,
									"scores":	[-7.912159054297]
								}, {
									"case":	38,
									"scores":	[-7.912159054297]
								}, {
									"case":	39,
									"scores":	[-7.912159054297]
								}, {
									"case":	40,
									"scores":	[-7.912159054297]
								}, {
									"case":	41,
									"scores":	[-7.912159054297]
								}, {
									"case":	42,
									"scores":	[-7.912159054297]
								}, {
									"case":	43,
									"scores":	[-7.912159054297]
								}, {
									"case":	44,
									"scores":	[-7.912159054297]
								}, {
									"case":	45,
									"scores":	[-7.912159054297]
								}, {
									"case":	46,
									"scores":	[-7.912159054297]
								}, {
									"case":	47,
									"scores":	[-7.912159054297]
								}, {
									"case":	48,
									"scores":	[-7.912159054297]
								}, {
									"case":	49,
									"scores":	[-7.912159054297]
								}, {
									"case":	50,
									"scores":	[-7.912159054297]
								}, {
									"case":	51,
									"scores":	[-7.912159054297]
								}, {
									"case":	52,
									"scores":	[-7.912159054297]
								}, {
									"case":	53,
									"scores":	[-7.912159054297]
								}, {
									"case":	54,
									"scores":	[-7.912159054297]
								}, {
									"case":	55,
									"scores":	[-7.912159054297]
								}, {
									"case":	56,
									"scores":	[-7.912159054297]
								}]
						}]
				}, {
					"line":	3595,
					"switches":	[{
							"switch":	112,
							"types":	[[], [], [], [], [199], [1, 2, 3, 4, 5, 6, 7], [], [], [], [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], [], [], [], [], [], []],
							"begin_line":	3596,
							"begin_column":	2,
							"end_line":	3596,
							"end_column":	2,
							"patch_codes":	["memset(&diobj->diff, 0, sizeof (*(&diobj->diff)))", "memset(&diobj->initialized, 0, sizeof (*(&diobj->initialized)))", "memset(&diobj->props, 0, sizeof (*(&diobj->props)))", "memset(&diobj->std, 0, sizeof (*(&diobj->std)))", "memset(diobj, 0, sizeof (*(diobj)))", "memset(diobj->diff, 0, sizeof (*(diobj->diff)))", "memset(diobj->props, 0, sizeof (*(diobj->props)))", "(date_globals.timezone) = (interval_string)", "(interval_string)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval_string)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "diobj = (diobj)", "diobj = zend_object_store_get_object(((return_value)))", "diobj = zend_object_store_get_object(((this_ptr)))", "diobj->diff = (reltime)", "diobj->initialized = (0)", "diobj->initialized = (1)", "diobj->initialized = (ht)", "diobj->initialized = (interval_string_length)", "diobj->initialized = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((diobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (interval_string_length)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (interval_string))", "timelib_rel_time_dtor((diobj)->diff)", "zend_object_std_dtor(&(diobj)->std)", "zend_replace_error_handling((EH_NORMAL), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_THROW), ((void *)0), &error_handling)", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "diobj = zend_object_store_get_object((this_ptr))", "diobj->diff = reltime", "diobj->initialized = 1", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "zend_replace_error_handling(EH_THROW, ((void *)0), &error_handling)", "zend_restore_error_handling(&error_handling)", "if (__is_neg(\"\", \"L3596\", 9, &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(diobj->diff), sizeof (diobj->diff), &(ht), sizeof (ht), &(diobj->initialized), sizeof (diobj->initialized), &(diobj->props), sizeof (diobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	2,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	3,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	4,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	5,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	6,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	7,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	8,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	9,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	10,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	11,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	12,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	13,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	14,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	15,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	16,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	17,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	18,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	19,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	20,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	21,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	22,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	23,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	24,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	25,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	26,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	27,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	28,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	29,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	30,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	31,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	32,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	33,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	34,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	35,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	36,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	37,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	38,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	39,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	40,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	41,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	42,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	43,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	44,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	45,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	46,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	47,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	48,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	49,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	50,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	51,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	52,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	53,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	54,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	55,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	56,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	57,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	58,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	59,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	60,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	61,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	62,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	63,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	64,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	65,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	66,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	67,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	68,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	69,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	70,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	71,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	72,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	73,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	74,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	75,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	76,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	77,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	78,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	79,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	80,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	81,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	82,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	83,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	84,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	85,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	86,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	87,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	88,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	89,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	90,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	91,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	92,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	93,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	94,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	95,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	96,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	97,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	98,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	99,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	100,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	101,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	102,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	103,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	104,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	105,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	106,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	107,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	108,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	109,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	110,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	111,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	112,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	113,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	114,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	115,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	116,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	117,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	118,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	119,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	120,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	121,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	122,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	123,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	124,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	125,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	126,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	127,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	128,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	129,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	130,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	131,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	132,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	133,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	134,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	135,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	136,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	137,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	138,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	139,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	140,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	141,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	142,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	143,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	144,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	145,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	146,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	147,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	148,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	149,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	150,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	151,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	152,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	153,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	154,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	155,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	156,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	157,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	158,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	159,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	160,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	161,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	162,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	163,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	164,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	165,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	166,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	167,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	168,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	169,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	170,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	171,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	172,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	173,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	174,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	175,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	176,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	177,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	178,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	179,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	180,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	181,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	182,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	183,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	184,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	185,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	186,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	187,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	188,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	189,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	190,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	191,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	192,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	193,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	194,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	195,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	196,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	197,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	198,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	199,
									"scores":	[-6.736413125173585, -8.9899800180735845, -8.9783537233735853, -8.2665296063735845, -8.4704665201735843, -9.7962512141735854, -9.0621501803735853, -9.6795907733735866, -9.8276496941735854]
								}]
						}, {
							"switch":	113,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3596,
							"begin_column":	4,
							"end_line":	3596,
							"end_column":	60,
							"patch_codes":	["if (!__is_neg(\"\", \"L3596\", 9, &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(diobj->diff), sizeof (diobj->diff), &(ht), sizeof (ht), &(diobj->initialized), sizeof (diobj->initialized), &(diobj->props), sizeof (diobj->props)))\n    diobj = zend_object_store_get_object((this_ptr));\n", "{\n}\n", "diobj = (diobj)", "diobj = zend_object_store_get_object(((&diobj)))", "diobj = zend_object_store_get_object(((&error_handling)))", "diobj = zend_object_store_get_object(((&ht)))", "diobj = zend_object_store_get_object(((&interval_string)))", "diobj = zend_object_store_get_object(((&interval_string_length)))", "diobj = zend_object_store_get_object(((&reltime)))", "diobj = zend_object_store_get_object(((&return_value)))", "diobj = zend_object_store_get_object(((&return_value_ptr)))", "diobj = zend_object_store_get_object(((&return_value_used)))", "diobj = zend_object_store_get_object(((&this_ptr)))", "diobj = zend_object_store_get_object(((return_value)))", "diobj = zend_object_store_get_object(((this_ptr)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2912053903735856, -8.2837569892735843, -7.6027730803735851, -6.8115020503735852, -7.2777177403735855, -8.1500819313735846, -7.7416615803735844, -7.6548766343735846, -8.4162459903735858]
								}, {
									"case":	2,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	3,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	4,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	5,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	6,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	7,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	8,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	9,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	10,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	11,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	12,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	13,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	14,
									"scores":	[-6.9626318103735851]
								}, {
									"case":	15,
									"scores":	[-6.9626318103735851]
								}]
						}]
				}, {
					"line":	3596,
					"switches":	[{
							"switch":	114,
							"types":	[[], [], [], [], [199], [1, 2, 3, 4, 5, 6, 7], [], [], [], [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], [], [], [], [], [], []],
							"begin_line":	3597,
							"begin_column":	2,
							"end_line":	3597,
							"end_column":	2,
							"patch_codes":	["memset(&diobj->diff, 0, sizeof (*(&diobj->diff)))", "memset(&diobj->initialized, 0, sizeof (*(&diobj->initialized)))", "memset(&diobj->props, 0, sizeof (*(&diobj->props)))", "memset(&diobj->std, 0, sizeof (*(&diobj->std)))", "memset(diobj, 0, sizeof (*(diobj)))", "memset(diobj->diff, 0, sizeof (*(diobj->diff)))", "memset(diobj->props, 0, sizeof (*(diobj->props)))", "(date_globals.timezone) = (interval_string)", "(interval_string)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval_string)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "diobj = (diobj)", "diobj = zend_object_store_get_object(((return_value)))", "diobj = zend_object_store_get_object(((this_ptr)))", "diobj->diff = (reltime)", "diobj->initialized = (0)", "diobj->initialized = (1)", "diobj->initialized = (ht)", "diobj->initialized = (interval_string_length)", "diobj->initialized = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((diobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (interval_string_length)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (interval_string))", "timelib_rel_time_dtor((diobj)->diff)", "zend_object_std_dtor(&(diobj)->std)", "zend_replace_error_handling((EH_NORMAL), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_THROW), ((void *)0), &error_handling)", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "diobj = zend_object_store_get_object((this_ptr))", "diobj->diff = reltime", "diobj->initialized = 1", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "zend_replace_error_handling(EH_THROW, ((void *)0), &error_handling)", "zend_restore_error_handling(&error_handling)", "if (__is_neg(\"\", \"L3597\", 9, &(diobj), sizeof (diobj), &(reltime), sizeof (reltime), &(diobj->diff), sizeof (diobj->diff), &(this_ptr), sizeof (this_ptr), &(diobj->initialized), sizeof (diobj->initialized), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(ht), sizeof (ht), &(diobj->props), sizeof (diobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	2,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	3,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	4,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	5,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	6,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	7,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	8,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	9,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	10,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	11,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	12,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	13,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	14,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	15,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	16,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	17,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	18,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	19,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	20,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	21,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	22,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	23,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	24,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	25,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	26,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	27,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	28,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	29,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	30,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	31,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	32,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	33,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	34,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	35,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	36,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	37,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	38,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	39,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	40,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	41,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	42,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	43,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	44,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	45,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	46,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	47,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	48,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	49,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	50,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	51,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	52,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	53,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	54,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	55,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	56,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	57,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	58,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	59,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	60,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	61,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	62,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	63,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	64,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	65,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	66,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	67,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	68,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	69,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	70,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	71,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	72,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	73,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	74,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	75,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	76,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	77,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	78,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	79,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	80,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	81,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	82,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	83,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	84,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	85,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	86,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	87,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	88,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	89,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	90,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	91,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	92,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	93,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	94,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	95,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	96,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	97,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	98,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	99,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	100,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	101,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	102,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	103,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	104,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	105,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	106,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	107,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	108,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	109,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	110,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	111,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	112,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	113,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	114,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	115,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	116,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	117,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	118,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	119,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	120,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	121,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	122,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	123,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	124,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	125,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	126,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	127,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	128,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	129,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	130,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	131,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	132,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	133,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	134,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	135,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	136,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	137,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	138,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	139,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	140,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	141,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	142,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	143,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	144,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	145,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	146,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	147,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	148,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	149,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	150,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	151,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	152,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	153,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	154,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	155,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	156,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	157,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	158,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	159,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	160,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	161,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	162,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	163,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	164,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	165,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	166,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	167,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	168,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	169,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	170,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	171,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	172,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	173,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	174,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	175,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	176,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	177,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	178,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	179,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	180,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	181,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	182,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	183,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	184,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	185,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	186,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	187,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	188,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	189,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	190,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	191,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	192,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	193,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	194,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	195,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	196,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	197,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	198,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	199,
									"scores":	[-7.3504201237560656, -7.8840868128560651, -9.5246742278560657, -9.7012791868560662, -10.266642066056066, -9.5654050160560651, -8.8535808990560643, -9.6492014730560651, -10.414700986856065]
								}]
						}, {
							"switch":	115,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3597,
							"begin_column":	4,
							"end_line":	3597,
							"end_column":	18,
							"patch_codes":	["if (!__is_neg(\"\", \"L3597\", 9, &(diobj), sizeof (diobj), &(reltime), sizeof (reltime), &(diobj->diff), sizeof (diobj->diff), &(this_ptr), sizeof (this_ptr), &(diobj->initialized), sizeof (diobj->initialized), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(ht), sizeof (ht), &(diobj->props), sizeof (diobj->props)))\n    diobj->diff = reltime;\n", "{\n}\n", "diobj->diff = (&diobj)", "diobj->diff = (&error_handling)", "diobj->diff = (&ht)", "diobj->diff = (&interval_string)", "diobj->diff = (&interval_string_length)", "diobj->diff = (&reltime)", "diobj->diff = (&return_value)", "diobj->diff = (&return_value_ptr)", "diobj->diff = (&return_value_used)", "diobj->diff = (&this_ptr)", "diobj->diff = (reltime)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5022409109560657, -7.8575044830560659, -8.7442008040560655, -8.6789818190560659, -8.8926174480560647, -8.0637853730560654, -7.2725143430560655, -8.2026738730560655, -8.8772582830560651]
								}, {
									"case":	2,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	3,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	4,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	5,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	6,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	7,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	8,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	9,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	10,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	11,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	12,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	13,
									"scores":	[-6.9424291030560656]
								}]
						}]
				}, {
					"line":	3597,
					"switches":	[{
							"switch":	116,
							"types":	[[], [], [], [], [199], [1, 2, 3, 4, 5, 6, 7], [], [], [], [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], [], [], [], [], [], []],
							"begin_line":	3598,
							"begin_column":	2,
							"end_line":	3598,
							"end_column":	2,
							"patch_codes":	["memset(&diobj->diff, 0, sizeof (*(&diobj->diff)))", "memset(&diobj->initialized, 0, sizeof (*(&diobj->initialized)))", "memset(&diobj->props, 0, sizeof (*(&diobj->props)))", "memset(&diobj->std, 0, sizeof (*(&diobj->std)))", "memset(diobj, 0, sizeof (*(diobj)))", "memset(diobj->diff, 0, sizeof (*(diobj->diff)))", "memset(diobj->props, 0, sizeof (*(diobj->props)))", "(date_globals.timezone) = (interval_string)", "(interval_string)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval_string)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "diobj = (diobj)", "diobj = zend_object_store_get_object(((return_value)))", "diobj = zend_object_store_get_object(((this_ptr)))", "diobj->diff = (reltime)", "diobj->initialized = (0)", "diobj->initialized = (1)", "diobj->initialized = (ht)", "diobj->initialized = (interval_string_length)", "diobj->initialized = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((diobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (interval_string_length)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (interval_string))", "timelib_rel_time_dtor((diobj)->diff)", "zend_object_std_dtor(&(diobj)->std)", "zend_replace_error_handling((EH_NORMAL), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_THROW), ((void *)0), &error_handling)", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "diobj = zend_object_store_get_object((this_ptr))", "diobj->diff = reltime", "diobj->initialized = 1", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "zend_replace_error_handling(EH_THROW, ((void *)0), &error_handling)", "zend_restore_error_handling(&error_handling)", "if (__is_neg(\"\", \"L3598\", 9, &(diobj), sizeof (diobj), &(diobj->initialized), sizeof (diobj->initialized), &(reltime), sizeof (reltime), &(diobj->diff), sizeof (diobj->diff), &(this_ptr), sizeof (this_ptr), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(ht), sizeof (ht), &(diobj->props), sizeof (diobj->props)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	2,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	3,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	4,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	5,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	6,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	7,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	8,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	9,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	10,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	11,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	12,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	13,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	14,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	15,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	16,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	17,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	18,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	19,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	20,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	21,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	22,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	23,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	24,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	25,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	26,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	27,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	28,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	29,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	30,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	31,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	32,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	33,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	34,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	35,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	36,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	37,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	38,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	39,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	40,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	41,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	42,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	43,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	44,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	45,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	46,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	47,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	48,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	49,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	50,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	51,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	52,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	53,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	54,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	55,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	56,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	57,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	58,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	59,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	60,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	61,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	62,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	63,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	64,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	65,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	66,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	67,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	68,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	69,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	70,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	71,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	72,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	73,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	74,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	75,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	76,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	77,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	78,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	79,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	80,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	81,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	82,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	83,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	84,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	85,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	86,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	87,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	88,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	89,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	90,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	91,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	92,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	93,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	94,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	95,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	96,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	97,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	98,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	99,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	100,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	101,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	102,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	103,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	104,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	105,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	106,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	107,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	108,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	109,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	110,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	111,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	112,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	113,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	114,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	115,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	116,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	117,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	118,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	119,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	120,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	121,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	122,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	123,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	124,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	125,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	126,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	127,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	128,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	129,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	130,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	131,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	132,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	133,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	134,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	135,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	136,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	137,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	138,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	139,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	140,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	141,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	142,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	143,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	144,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	145,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	146,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	147,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	148,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	149,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	150,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	151,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	152,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	153,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	154,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	155,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	156,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	157,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	158,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	159,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	160,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	161,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	162,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	163,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	164,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	165,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	166,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	167,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	168,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	169,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	170,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	171,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	172,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	173,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	174,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	175,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	176,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	177,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	178,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	179,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	180,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	181,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	182,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	183,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	184,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	185,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	186,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	187,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	188,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	189,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	190,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	191,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	192,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	193,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	194,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	195,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	196,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	197,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	198,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	199,
									"scores":	[-7.8654811164385459, -9.8847101827385462, -9.3662768255385451, -8.589666799538545, -9.6810764795385467, -9.5452023087385456, -8.8333781917385448, -9.6289987657385456, -10.394498279538546]
								}]
						}, {
							"switch":	117,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	3598,
							"begin_column":	4,
							"end_line":	3598,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L3598\", 9, &(diobj), sizeof (diobj), &(diobj->initialized), sizeof (diobj->initialized), &(reltime), sizeof (reltime), &(diobj->diff), sizeof (diobj->diff), &(this_ptr), sizeof (this_ptr), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(ht), sizeof (ht), &(diobj->props), sizeof (diobj->props)))\n    diobj->initialized = 1;\n", "{\n}\n", "diobj->initialized = (0 * ht)", "diobj->initialized = (0 * interval_string_length)", "diobj->initialized = (0 * return_value_used)", "diobj->initialized = (0)", "diobj->initialized = (1)", "diobj->initialized = (diobj != 0)", "diobj->initialized = (diobj == 0)", "diobj->initialized = (error_handling != 0)", "diobj->initialized = (error_handling == 0)", "diobj->initialized = (ht != 0)", "diobj->initialized = (ht != interval_string_length)", "diobj->initialized = (ht != return_value_used)", "diobj->initialized = (ht * interval_string_length)", "diobj->initialized = (ht * return_value_used)", "diobj->initialized = (ht + 0)", "diobj->initialized = (ht + interval_string_length)", "diobj->initialized = (ht + return_value_used)", "diobj->initialized = (ht - 0)", "diobj->initialized = (ht - interval_string_length)", "diobj->initialized = (ht - return_value_used)", "diobj->initialized = (ht == 0)", "diobj->initialized = (ht == interval_string_length)", "diobj->initialized = (ht == return_value_used)", "diobj->initialized = (ht)", "diobj->initialized = (interval_string != 0)", "diobj->initialized = (interval_string == 0)", "diobj->initialized = (interval_string_length != 0)", "diobj->initialized = (interval_string_length * ht)", "diobj->initialized = (interval_string_length * return_value_used)", "diobj->initialized = (interval_string_length + 0)", "diobj->initialized = (interval_string_length - 0)", "diobj->initialized = (interval_string_length == 0)", "diobj->initialized = (interval_string_length)", "diobj->initialized = (reltime != 0)", "diobj->initialized = (reltime == 0)", "diobj->initialized = (return_value != 0)", "diobj->initialized = (return_value != this_ptr)", "diobj->initialized = (return_value == 0)", "diobj->initialized = (return_value == this_ptr)", "diobj->initialized = (return_value_ptr != 0)", "diobj->initialized = (return_value_ptr == 0)", "diobj->initialized = (return_value_used != 0)", "diobj->initialized = (return_value_used != interval_string_length)", "diobj->initialized = (return_value_used * ht)", "diobj->initialized = (return_value_used * interval_string_length)", "diobj->initialized = (return_value_used + 0)", "diobj->initialized = (return_value_used + interval_string_length)", "diobj->initialized = (return_value_used - 0)", "diobj->initialized = (return_value_used - interval_string_length)", "diobj->initialized = (return_value_used == 0)", "diobj->initialized = (return_value_used == interval_string_length)", "diobj->initialized = (return_value_used)", "diobj->initialized = (this_ptr != 0)", "diobj->initialized = (this_ptr == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5640934062385465, -9.1342109967385454, -8.219962765738547, -8.2346937157385458, -8.917094111738546, -8.3018976657385455, -7.5106266357385465, -8.4407861657385457, -9.1153705757385453]
								}, {
									"case":	2,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	3,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	4,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	5,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	6,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	7,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	8,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	9,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	10,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	11,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	12,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	13,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	14,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	15,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	16,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	17,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	18,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	19,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	20,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	21,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	22,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	23,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	24,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	25,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	26,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	27,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	28,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	29,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	30,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	31,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	32,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	33,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	34,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	35,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	36,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	37,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	38,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	39,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	40,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	41,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	42,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	43,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	44,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	45,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	46,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	47,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	48,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	49,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	50,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	51,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	52,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	53,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	54,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	55,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	56,
									"scores":	[-6.9222263957385461]
								}]
						}]
				}, {
					"line":	3594,
					"switches":	[{
							"switch":	110,
							"types":	[[], [], [], [], [192], [], [], [], [], [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], [], [], [], [], [], []],
							"begin_line":	3595,
							"begin_column":	1,
							"end_line":	3595,
							"end_column":	1,
							"patch_codes":	["(date_globals.timezone) = (interval_string)", "(interval_string)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval_string)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "diobj = (diobj)", "diobj = zend_object_store_get_object(((return_value)))", "diobj = zend_object_store_get_object(((this_ptr)))", "diobj->diff = (reltime)", "diobj->initialized = (0)", "diobj->initialized = (1)", "diobj->initialized = (ht)", "diobj->initialized = (interval_string_length)", "diobj->initialized = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((diobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (interval_string_length)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (interval_string))", "timelib_rel_time_dtor((diobj)->diff)", "zend_object_std_dtor(&(diobj)->std)", "zend_replace_error_handling((EH_NORMAL), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_THROW), ((void *)0), &error_handling)", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "diobj = zend_object_store_get_object((this_ptr))", "diobj->diff = reltime", "diobj->initialized = 1", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "zend_replace_error_handling(EH_THROW, ((void *)0), &error_handling)", "zend_restore_error_handling(&error_handling)", "if (__is_neg(\"\", \"L3595\", 6, &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.87175363966196]
								}, {
									"case":	2,
									"scores":	[-7.87175363966196]
								}, {
									"case":	3,
									"scores":	[-7.87175363966196]
								}, {
									"case":	4,
									"scores":	[-7.87175363966196]
								}, {
									"case":	5,
									"scores":	[-7.87175363966196]
								}, {
									"case":	6,
									"scores":	[-7.87175363966196]
								}, {
									"case":	7,
									"scores":	[-7.87175363966196]
								}, {
									"case":	8,
									"scores":	[-7.87175363966196]
								}, {
									"case":	9,
									"scores":	[-7.87175363966196]
								}, {
									"case":	10,
									"scores":	[-7.87175363966196]
								}, {
									"case":	11,
									"scores":	[-7.87175363966196]
								}, {
									"case":	12,
									"scores":	[-7.87175363966196]
								}, {
									"case":	13,
									"scores":	[-7.87175363966196]
								}, {
									"case":	14,
									"scores":	[-7.87175363966196]
								}, {
									"case":	15,
									"scores":	[-7.87175363966196]
								}, {
									"case":	16,
									"scores":	[-7.87175363966196]
								}, {
									"case":	17,
									"scores":	[-7.87175363966196]
								}, {
									"case":	18,
									"scores":	[-7.87175363966196]
								}, {
									"case":	19,
									"scores":	[-7.87175363966196]
								}, {
									"case":	20,
									"scores":	[-7.87175363966196]
								}, {
									"case":	21,
									"scores":	[-7.87175363966196]
								}, {
									"case":	22,
									"scores":	[-7.87175363966196]
								}, {
									"case":	23,
									"scores":	[-7.87175363966196]
								}, {
									"case":	24,
									"scores":	[-7.87175363966196]
								}, {
									"case":	25,
									"scores":	[-7.87175363966196]
								}, {
									"case":	26,
									"scores":	[-7.87175363966196]
								}, {
									"case":	27,
									"scores":	[-7.87175363966196]
								}, {
									"case":	28,
									"scores":	[-7.87175363966196]
								}, {
									"case":	29,
									"scores":	[-7.87175363966196]
								}, {
									"case":	30,
									"scores":	[-7.87175363966196]
								}, {
									"case":	31,
									"scores":	[-7.87175363966196]
								}, {
									"case":	32,
									"scores":	[-7.87175363966196]
								}, {
									"case":	33,
									"scores":	[-7.87175363966196]
								}, {
									"case":	34,
									"scores":	[-7.87175363966196]
								}, {
									"case":	35,
									"scores":	[-7.87175363966196]
								}, {
									"case":	36,
									"scores":	[-7.87175363966196]
								}, {
									"case":	37,
									"scores":	[-7.87175363966196]
								}, {
									"case":	38,
									"scores":	[-7.87175363966196]
								}, {
									"case":	39,
									"scores":	[-7.87175363966196]
								}, {
									"case":	40,
									"scores":	[-7.87175363966196]
								}, {
									"case":	41,
									"scores":	[-7.87175363966196]
								}, {
									"case":	42,
									"scores":	[-7.87175363966196]
								}, {
									"case":	43,
									"scores":	[-7.87175363966196]
								}, {
									"case":	44,
									"scores":	[-7.87175363966196]
								}, {
									"case":	45,
									"scores":	[-7.87175363966196]
								}, {
									"case":	46,
									"scores":	[-7.87175363966196]
								}, {
									"case":	47,
									"scores":	[-7.87175363966196]
								}, {
									"case":	48,
									"scores":	[-7.87175363966196]
								}, {
									"case":	49,
									"scores":	[-7.87175363966196]
								}, {
									"case":	50,
									"scores":	[-7.87175363966196]
								}, {
									"case":	51,
									"scores":	[-7.87175363966196]
								}, {
									"case":	52,
									"scores":	[-7.87175363966196]
								}, {
									"case":	53,
									"scores":	[-7.87175363966196]
								}, {
									"case":	54,
									"scores":	[-7.87175363966196]
								}, {
									"case":	55,
									"scores":	[-7.87175363966196]
								}, {
									"case":	56,
									"scores":	[-7.87175363966196]
								}, {
									"case":	57,
									"scores":	[-7.87175363966196]
								}, {
									"case":	58,
									"scores":	[-7.87175363966196]
								}, {
									"case":	59,
									"scores":	[-7.87175363966196]
								}, {
									"case":	60,
									"scores":	[-7.87175363966196]
								}, {
									"case":	61,
									"scores":	[-7.87175363966196]
								}, {
									"case":	62,
									"scores":	[-7.87175363966196]
								}, {
									"case":	63,
									"scores":	[-7.87175363966196]
								}, {
									"case":	64,
									"scores":	[-7.87175363966196]
								}, {
									"case":	65,
									"scores":	[-7.87175363966196]
								}, {
									"case":	66,
									"scores":	[-7.87175363966196]
								}, {
									"case":	67,
									"scores":	[-7.87175363966196]
								}, {
									"case":	68,
									"scores":	[-7.87175363966196]
								}, {
									"case":	69,
									"scores":	[-7.87175363966196]
								}, {
									"case":	70,
									"scores":	[-7.87175363966196]
								}, {
									"case":	71,
									"scores":	[-7.87175363966196]
								}, {
									"case":	72,
									"scores":	[-7.87175363966196]
								}, {
									"case":	73,
									"scores":	[-7.87175363966196]
								}, {
									"case":	74,
									"scores":	[-7.87175363966196]
								}, {
									"case":	75,
									"scores":	[-7.87175363966196]
								}, {
									"case":	76,
									"scores":	[-7.87175363966196]
								}, {
									"case":	77,
									"scores":	[-7.87175363966196]
								}, {
									"case":	78,
									"scores":	[-7.87175363966196]
								}, {
									"case":	79,
									"scores":	[-7.87175363966196]
								}, {
									"case":	80,
									"scores":	[-7.87175363966196]
								}, {
									"case":	81,
									"scores":	[-7.87175363966196]
								}, {
									"case":	82,
									"scores":	[-7.87175363966196]
								}, {
									"case":	83,
									"scores":	[-7.87175363966196]
								}, {
									"case":	84,
									"scores":	[-7.87175363966196]
								}, {
									"case":	85,
									"scores":	[-7.87175363966196]
								}, {
									"case":	86,
									"scores":	[-7.87175363966196]
								}, {
									"case":	87,
									"scores":	[-7.87175363966196]
								}, {
									"case":	88,
									"scores":	[-7.87175363966196]
								}, {
									"case":	89,
									"scores":	[-7.87175363966196]
								}, {
									"case":	90,
									"scores":	[-7.87175363966196]
								}, {
									"case":	91,
									"scores":	[-7.87175363966196]
								}, {
									"case":	92,
									"scores":	[-7.87175363966196]
								}, {
									"case":	93,
									"scores":	[-7.87175363966196]
								}, {
									"case":	94,
									"scores":	[-7.87175363966196]
								}, {
									"case":	95,
									"scores":	[-7.87175363966196]
								}, {
									"case":	96,
									"scores":	[-7.87175363966196]
								}, {
									"case":	97,
									"scores":	[-7.87175363966196]
								}, {
									"case":	98,
									"scores":	[-7.87175363966196]
								}, {
									"case":	99,
									"scores":	[-7.87175363966196]
								}, {
									"case":	100,
									"scores":	[-7.87175363966196]
								}, {
									"case":	101,
									"scores":	[-7.87175363966196]
								}, {
									"case":	102,
									"scores":	[-7.87175363966196]
								}, {
									"case":	103,
									"scores":	[-7.87175363966196]
								}, {
									"case":	104,
									"scores":	[-7.87175363966196]
								}, {
									"case":	105,
									"scores":	[-7.87175363966196]
								}, {
									"case":	106,
									"scores":	[-7.87175363966196]
								}, {
									"case":	107,
									"scores":	[-7.87175363966196]
								}, {
									"case":	108,
									"scores":	[-7.87175363966196]
								}, {
									"case":	109,
									"scores":	[-7.87175363966196]
								}, {
									"case":	110,
									"scores":	[-7.87175363966196]
								}, {
									"case":	111,
									"scores":	[-7.87175363966196]
								}, {
									"case":	112,
									"scores":	[-7.87175363966196]
								}, {
									"case":	113,
									"scores":	[-7.87175363966196]
								}, {
									"case":	114,
									"scores":	[-7.87175363966196]
								}, {
									"case":	115,
									"scores":	[-7.87175363966196]
								}, {
									"case":	116,
									"scores":	[-7.87175363966196]
								}, {
									"case":	117,
									"scores":	[-7.87175363966196]
								}, {
									"case":	118,
									"scores":	[-7.87175363966196]
								}, {
									"case":	119,
									"scores":	[-7.87175363966196]
								}, {
									"case":	120,
									"scores":	[-7.87175363966196]
								}, {
									"case":	121,
									"scores":	[-7.87175363966196]
								}, {
									"case":	122,
									"scores":	[-7.87175363966196]
								}, {
									"case":	123,
									"scores":	[-7.87175363966196]
								}, {
									"case":	124,
									"scores":	[-7.87175363966196]
								}, {
									"case":	125,
									"scores":	[-7.87175363966196]
								}, {
									"case":	126,
									"scores":	[-7.87175363966196]
								}, {
									"case":	127,
									"scores":	[-7.87175363966196]
								}, {
									"case":	128,
									"scores":	[-7.87175363966196]
								}, {
									"case":	129,
									"scores":	[-7.87175363966196]
								}, {
									"case":	130,
									"scores":	[-7.87175363966196]
								}, {
									"case":	131,
									"scores":	[-7.87175363966196]
								}, {
									"case":	132,
									"scores":	[-7.87175363966196]
								}, {
									"case":	133,
									"scores":	[-7.87175363966196]
								}, {
									"case":	134,
									"scores":	[-7.87175363966196]
								}, {
									"case":	135,
									"scores":	[-7.87175363966196]
								}, {
									"case":	136,
									"scores":	[-7.87175363966196]
								}, {
									"case":	137,
									"scores":	[-7.87175363966196]
								}, {
									"case":	138,
									"scores":	[-7.87175363966196]
								}, {
									"case":	139,
									"scores":	[-7.87175363966196]
								}, {
									"case":	140,
									"scores":	[-7.87175363966196]
								}, {
									"case":	141,
									"scores":	[-7.87175363966196]
								}, {
									"case":	142,
									"scores":	[-7.87175363966196]
								}, {
									"case":	143,
									"scores":	[-7.87175363966196]
								}, {
									"case":	144,
									"scores":	[-7.87175363966196]
								}, {
									"case":	145,
									"scores":	[-7.87175363966196]
								}, {
									"case":	146,
									"scores":	[-7.87175363966196]
								}, {
									"case":	147,
									"scores":	[-7.87175363966196]
								}, {
									"case":	148,
									"scores":	[-7.87175363966196]
								}, {
									"case":	149,
									"scores":	[-7.87175363966196]
								}, {
									"case":	150,
									"scores":	[-7.87175363966196]
								}, {
									"case":	151,
									"scores":	[-7.87175363966196]
								}, {
									"case":	152,
									"scores":	[-7.87175363966196]
								}, {
									"case":	153,
									"scores":	[-7.87175363966196]
								}, {
									"case":	154,
									"scores":	[-7.87175363966196]
								}, {
									"case":	155,
									"scores":	[-7.87175363966196]
								}, {
									"case":	156,
									"scores":	[-7.87175363966196]
								}, {
									"case":	157,
									"scores":	[-7.87175363966196]
								}, {
									"case":	158,
									"scores":	[-7.87175363966196]
								}, {
									"case":	159,
									"scores":	[-7.87175363966196]
								}, {
									"case":	160,
									"scores":	[-7.87175363966196]
								}, {
									"case":	161,
									"scores":	[-7.87175363966196]
								}, {
									"case":	162,
									"scores":	[-7.87175363966196]
								}, {
									"case":	163,
									"scores":	[-7.87175363966196]
								}, {
									"case":	164,
									"scores":	[-7.87175363966196]
								}, {
									"case":	165,
									"scores":	[-7.87175363966196]
								}, {
									"case":	166,
									"scores":	[-7.87175363966196]
								}, {
									"case":	167,
									"scores":	[-7.87175363966196]
								}, {
									"case":	168,
									"scores":	[-7.87175363966196]
								}, {
									"case":	169,
									"scores":	[-7.87175363966196]
								}, {
									"case":	170,
									"scores":	[-7.87175363966196]
								}, {
									"case":	171,
									"scores":	[-7.87175363966196]
								}, {
									"case":	172,
									"scores":	[-7.87175363966196]
								}, {
									"case":	173,
									"scores":	[-7.87175363966196]
								}, {
									"case":	174,
									"scores":	[-7.87175363966196]
								}, {
									"case":	175,
									"scores":	[-7.87175363966196]
								}, {
									"case":	176,
									"scores":	[-7.87175363966196]
								}, {
									"case":	177,
									"scores":	[-7.87175363966196]
								}, {
									"case":	178,
									"scores":	[-7.87175363966196]
								}, {
									"case":	179,
									"scores":	[-7.87175363966196]
								}, {
									"case":	180,
									"scores":	[-7.87175363966196]
								}, {
									"case":	181,
									"scores":	[-7.87175363966196]
								}, {
									"case":	182,
									"scores":	[-7.87175363966196]
								}, {
									"case":	183,
									"scores":	[-7.87175363966196]
								}, {
									"case":	184,
									"scores":	[-7.87175363966196]
								}, {
									"case":	185,
									"scores":	[-7.87175363966196]
								}, {
									"case":	186,
									"scores":	[-7.87175363966196]
								}, {
									"case":	187,
									"scores":	[-7.87175363966196]
								}, {
									"case":	188,
									"scores":	[-7.87175363966196]
								}, {
									"case":	189,
									"scores":	[-7.87175363966196]
								}, {
									"case":	190,
									"scores":	[-7.87175363966196]
								}, {
									"case":	191,
									"scores":	[-7.87175363966196]
								}, {
									"case":	192,
									"scores":	[-10.26330128366196, -9.55147716666196, -9.68133437946196, -11.202405709661962, -9.39887245446196, -11.53489708136196]
								}]
						}, {
							"switch":	111,
							"types":	[[10], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9], []],
							"begin_line":	3595,
							"begin_column":	3,
							"end_line":	3601,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L3595\", 6, &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj))) {\n    diobj = zend_object_store_get_object((this_ptr));\n    diobj->diff = reltime;\n    diobj->initialized = 1;\n} else {\n    {\n        (*(this_ptr)).type = 0;\n    }\n    ;\n}\n", "if ((date_interval_initialize(&reltime, interval_string, interval_string_length) == 0) || __is_neg(\"\", \"L3595\", 6, &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj))) {\n    diobj = zend_object_store_get_object((this_ptr));\n    diobj->diff = reltime;\n    diobj->initialized = 1;\n} else {\n    {\n        (*(this_ptr)).type = 0;\n    }\n    ;\n}\n", "if (Debug(&reltime, interval_string, interval_string_length) == 0) {\n    diobj = zend_object_store_get_object((this_ptr));\n    diobj->diff = reltime;\n    diobj->initialized = 1;\n} else {\n    {\n        (*(this_ptr)).type = 0;\n    }\n    ;\n}\n", "if (__trident_output(&reltime, interval_string, interval_string_length) == 0) {\n    diobj = zend_object_store_get_object((this_ptr));\n    diobj->diff = reltime;\n    diobj->initialized = 1;\n} else {\n    {\n        (*(this_ptr)).type = 0;\n    }\n    ;\n}\n", "if (php_printf(&reltime, interval_string, interval_string_length) == 0) {\n    diobj = zend_object_store_get_object((this_ptr));\n    diobj->diff = reltime;\n    diobj->initialized = 1;\n} else {\n    {\n        (*(this_ptr)).type = 0;\n    }\n    ;\n}\n", "if (printf(&reltime, interval_string, interval_string_length) == 0) {\n    diobj = zend_object_store_get_object((this_ptr));\n    diobj->diff = reltime;\n    diobj->initialized = 1;\n} else {\n    {\n        (*(this_ptr)).type = 0;\n    }\n    ;\n}\n", "if (wprintf(&reltime, interval_string, interval_string_length) == 0) {\n    diobj = zend_object_store_get_object((this_ptr));\n    diobj->diff = reltime;\n    diobj->initialized = 1;\n} else {\n    {\n        (*(this_ptr)).type = 0;\n    }\n    ;\n}\n", "if (zend_check_property_access(&reltime, interval_string, interval_string_length) == 0) {\n    diobj = zend_object_store_get_object((this_ptr));\n    diobj->diff = reltime;\n    diobj->initialized = 1;\n} else {\n    {\n        (*(this_ptr)).type = 0;\n    }\n    ;\n}\n", "if (zend_update_static_property_null(&reltime, interval_string, interval_string_length) == 0) {\n    diobj = zend_object_store_get_object((this_ptr));\n    diobj->diff = reltime;\n    diobj->initialized = 1;\n} else {\n    {\n        (*(this_ptr)).type = 0;\n    }\n    ;\n}\n", "if ((date_interval_initialize(&reltime, interval_string, interval_string_length) == 0) && !__is_neg(\"\", \"L3595\", 6, &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj))) {\n    diobj = zend_object_store_get_object((this_ptr));\n    diobj->diff = reltime;\n    diobj->initialized = 1;\n} else {\n    {\n        (*(this_ptr)).type = 0;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.9295805695281447, -2.1383095395281444, -2.9813840795281452, -3.7819043695281453, -2.1330621795281437, -3.9059524905281457]
								}, {
									"case":	2,
									"scores":	[-4.8857307354281456, -4.0944597054281449, -4.9375342454281457, -5.7380545354281454, -4.0892123454281446, -5.8621026564281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-4.8857307354281456, -4.0944597054281449, -4.9375342454281457, -5.7380545354281454, -4.0892123454281446, -5.8621026564281458]
								}]
						}, {
							"switch":	118,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	3595,
							"begin_column":	3,
							"end_line":	3601,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L3595\", 6, &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj)))\n    if (date_interval_initialize(&reltime, interval_string, interval_string_length) == 0) {\n        diobj = zend_object_store_get_object((this_ptr));\n        diobj->diff = reltime;\n        diobj->initialized = 1;\n    } else {\n        {\n            (*(this_ptr)).type = 0;\n        }\n        ;\n    }\n", "if (!__is_neg(\"\", \"L3595\", 6, &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj)) && (date_interval_initialize(&reltime, interval_string, interval_string_length) == 0)) {\n    diobj = zend_object_store_get_object((this_ptr));\n    diobj->diff = reltime;\n    diobj->initialized = 1;\n} else {\n    {\n        (*(this_ptr)).type = 0;\n    }\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.48676630966196, -8.69549527966196, -9.53856981966196, -10.33909010966196, -8.69024791966196, -10.463138230661961]
								}, {
									"case":	2,
									"scores":	[-10.141707269661961, -9.35043623966196, -10.19351077966196, -10.994031069661961, -9.34518887966196, -11.118079190661959]
								}]
						}]
				}, {
					"line":	3593,
					"switches":	[{
							"switch":	108,
							"types":	[[], [], [], [], [192], [], [], [], [], [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], [], [], [], [], [], []],
							"begin_line":	3594,
							"begin_column":	0,
							"end_line":	3594,
							"end_column":	0,
							"patch_codes":	["(date_globals.timezone) = (interval_string)", "(interval_string)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval_string)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "diobj = (diobj)", "diobj = zend_object_store_get_object(((return_value)))", "diobj = zend_object_store_get_object(((this_ptr)))", "diobj->diff = (reltime)", "diobj->initialized = (0)", "diobj->initialized = (1)", "diobj->initialized = (ht)", "diobj->initialized = (interval_string_length)", "diobj->initialized = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((diobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (interval_string_length)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (interval_string))", "timelib_rel_time_dtor((diobj)->diff)", "zend_object_std_dtor(&(diobj)->std)", "zend_replace_error_handling((EH_NORMAL), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_THROW), ((void *)0), &error_handling)", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "diobj = zend_object_store_get_object((this_ptr))", "diobj->diff = reltime", "diobj->initialized = 1", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "zend_replace_error_handling(EH_THROW, ((void *)0), &error_handling)", "zend_restore_error_handling(&error_handling)", "if (__is_neg(\"\", \"L3594\", 6, &(ht), sizeof (ht), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.89195634697948]
								}, {
									"case":	2,
									"scores":	[-7.89195634697948]
								}, {
									"case":	3,
									"scores":	[-7.89195634697948]
								}, {
									"case":	4,
									"scores":	[-7.89195634697948]
								}, {
									"case":	5,
									"scores":	[-7.89195634697948]
								}, {
									"case":	6,
									"scores":	[-7.89195634697948]
								}, {
									"case":	7,
									"scores":	[-7.89195634697948]
								}, {
									"case":	8,
									"scores":	[-7.89195634697948]
								}, {
									"case":	9,
									"scores":	[-7.89195634697948]
								}, {
									"case":	10,
									"scores":	[-7.89195634697948]
								}, {
									"case":	11,
									"scores":	[-7.89195634697948]
								}, {
									"case":	12,
									"scores":	[-7.89195634697948]
								}, {
									"case":	13,
									"scores":	[-7.89195634697948]
								}, {
									"case":	14,
									"scores":	[-7.89195634697948]
								}, {
									"case":	15,
									"scores":	[-7.89195634697948]
								}, {
									"case":	16,
									"scores":	[-7.89195634697948]
								}, {
									"case":	17,
									"scores":	[-7.89195634697948]
								}, {
									"case":	18,
									"scores":	[-7.89195634697948]
								}, {
									"case":	19,
									"scores":	[-7.89195634697948]
								}, {
									"case":	20,
									"scores":	[-7.89195634697948]
								}, {
									"case":	21,
									"scores":	[-7.89195634697948]
								}, {
									"case":	22,
									"scores":	[-7.89195634697948]
								}, {
									"case":	23,
									"scores":	[-7.89195634697948]
								}, {
									"case":	24,
									"scores":	[-7.89195634697948]
								}, {
									"case":	25,
									"scores":	[-7.89195634697948]
								}, {
									"case":	26,
									"scores":	[-7.89195634697948]
								}, {
									"case":	27,
									"scores":	[-7.89195634697948]
								}, {
									"case":	28,
									"scores":	[-7.89195634697948]
								}, {
									"case":	29,
									"scores":	[-7.89195634697948]
								}, {
									"case":	30,
									"scores":	[-7.89195634697948]
								}, {
									"case":	31,
									"scores":	[-7.89195634697948]
								}, {
									"case":	32,
									"scores":	[-7.89195634697948]
								}, {
									"case":	33,
									"scores":	[-7.89195634697948]
								}, {
									"case":	34,
									"scores":	[-7.89195634697948]
								}, {
									"case":	35,
									"scores":	[-7.89195634697948]
								}, {
									"case":	36,
									"scores":	[-7.89195634697948]
								}, {
									"case":	37,
									"scores":	[-7.89195634697948]
								}, {
									"case":	38,
									"scores":	[-7.89195634697948]
								}, {
									"case":	39,
									"scores":	[-7.89195634697948]
								}, {
									"case":	40,
									"scores":	[-7.89195634697948]
								}, {
									"case":	41,
									"scores":	[-7.89195634697948]
								}, {
									"case":	42,
									"scores":	[-7.89195634697948]
								}, {
									"case":	43,
									"scores":	[-7.89195634697948]
								}, {
									"case":	44,
									"scores":	[-7.89195634697948]
								}, {
									"case":	45,
									"scores":	[-7.89195634697948]
								}, {
									"case":	46,
									"scores":	[-7.89195634697948]
								}, {
									"case":	47,
									"scores":	[-7.89195634697948]
								}, {
									"case":	48,
									"scores":	[-7.89195634697948]
								}, {
									"case":	49,
									"scores":	[-7.89195634697948]
								}, {
									"case":	50,
									"scores":	[-7.89195634697948]
								}, {
									"case":	51,
									"scores":	[-7.89195634697948]
								}, {
									"case":	52,
									"scores":	[-7.89195634697948]
								}, {
									"case":	53,
									"scores":	[-7.89195634697948]
								}, {
									"case":	54,
									"scores":	[-7.89195634697948]
								}, {
									"case":	55,
									"scores":	[-7.89195634697948]
								}, {
									"case":	56,
									"scores":	[-7.89195634697948]
								}, {
									"case":	57,
									"scores":	[-7.89195634697948]
								}, {
									"case":	58,
									"scores":	[-7.89195634697948]
								}, {
									"case":	59,
									"scores":	[-7.89195634697948]
								}, {
									"case":	60,
									"scores":	[-7.89195634697948]
								}, {
									"case":	61,
									"scores":	[-7.89195634697948]
								}, {
									"case":	62,
									"scores":	[-7.89195634697948]
								}, {
									"case":	63,
									"scores":	[-7.89195634697948]
								}, {
									"case":	64,
									"scores":	[-7.89195634697948]
								}, {
									"case":	65,
									"scores":	[-7.89195634697948]
								}, {
									"case":	66,
									"scores":	[-7.89195634697948]
								}, {
									"case":	67,
									"scores":	[-7.89195634697948]
								}, {
									"case":	68,
									"scores":	[-7.89195634697948]
								}, {
									"case":	69,
									"scores":	[-7.89195634697948]
								}, {
									"case":	70,
									"scores":	[-7.89195634697948]
								}, {
									"case":	71,
									"scores":	[-7.89195634697948]
								}, {
									"case":	72,
									"scores":	[-7.89195634697948]
								}, {
									"case":	73,
									"scores":	[-7.89195634697948]
								}, {
									"case":	74,
									"scores":	[-7.89195634697948]
								}, {
									"case":	75,
									"scores":	[-7.89195634697948]
								}, {
									"case":	76,
									"scores":	[-7.89195634697948]
								}, {
									"case":	77,
									"scores":	[-7.89195634697948]
								}, {
									"case":	78,
									"scores":	[-7.89195634697948]
								}, {
									"case":	79,
									"scores":	[-7.89195634697948]
								}, {
									"case":	80,
									"scores":	[-7.89195634697948]
								}, {
									"case":	81,
									"scores":	[-7.89195634697948]
								}, {
									"case":	82,
									"scores":	[-7.89195634697948]
								}, {
									"case":	83,
									"scores":	[-7.89195634697948]
								}, {
									"case":	84,
									"scores":	[-7.89195634697948]
								}, {
									"case":	85,
									"scores":	[-7.89195634697948]
								}, {
									"case":	86,
									"scores":	[-7.89195634697948]
								}, {
									"case":	87,
									"scores":	[-7.89195634697948]
								}, {
									"case":	88,
									"scores":	[-7.89195634697948]
								}, {
									"case":	89,
									"scores":	[-7.89195634697948]
								}, {
									"case":	90,
									"scores":	[-7.89195634697948]
								}, {
									"case":	91,
									"scores":	[-7.89195634697948]
								}, {
									"case":	92,
									"scores":	[-7.89195634697948]
								}, {
									"case":	93,
									"scores":	[-7.89195634697948]
								}, {
									"case":	94,
									"scores":	[-7.89195634697948]
								}, {
									"case":	95,
									"scores":	[-7.89195634697948]
								}, {
									"case":	96,
									"scores":	[-7.89195634697948]
								}, {
									"case":	97,
									"scores":	[-7.89195634697948]
								}, {
									"case":	98,
									"scores":	[-7.89195634697948]
								}, {
									"case":	99,
									"scores":	[-7.89195634697948]
								}, {
									"case":	100,
									"scores":	[-7.89195634697948]
								}, {
									"case":	101,
									"scores":	[-7.89195634697948]
								}, {
									"case":	102,
									"scores":	[-7.89195634697948]
								}, {
									"case":	103,
									"scores":	[-7.89195634697948]
								}, {
									"case":	104,
									"scores":	[-7.89195634697948]
								}, {
									"case":	105,
									"scores":	[-7.89195634697948]
								}, {
									"case":	106,
									"scores":	[-7.89195634697948]
								}, {
									"case":	107,
									"scores":	[-7.89195634697948]
								}, {
									"case":	108,
									"scores":	[-7.89195634697948]
								}, {
									"case":	109,
									"scores":	[-7.89195634697948]
								}, {
									"case":	110,
									"scores":	[-7.89195634697948]
								}, {
									"case":	111,
									"scores":	[-7.89195634697948]
								}, {
									"case":	112,
									"scores":	[-7.89195634697948]
								}, {
									"case":	113,
									"scores":	[-7.89195634697948]
								}, {
									"case":	114,
									"scores":	[-7.89195634697948]
								}, {
									"case":	115,
									"scores":	[-7.89195634697948]
								}, {
									"case":	116,
									"scores":	[-7.89195634697948]
								}, {
									"case":	117,
									"scores":	[-7.89195634697948]
								}, {
									"case":	118,
									"scores":	[-7.89195634697948]
								}, {
									"case":	119,
									"scores":	[-7.89195634697948]
								}, {
									"case":	120,
									"scores":	[-7.89195634697948]
								}, {
									"case":	121,
									"scores":	[-7.89195634697948]
								}, {
									"case":	122,
									"scores":	[-7.89195634697948]
								}, {
									"case":	123,
									"scores":	[-7.89195634697948]
								}, {
									"case":	124,
									"scores":	[-7.89195634697948]
								}, {
									"case":	125,
									"scores":	[-7.89195634697948]
								}, {
									"case":	126,
									"scores":	[-7.89195634697948]
								}, {
									"case":	127,
									"scores":	[-7.89195634697948]
								}, {
									"case":	128,
									"scores":	[-7.89195634697948]
								}, {
									"case":	129,
									"scores":	[-7.89195634697948]
								}, {
									"case":	130,
									"scores":	[-7.89195634697948]
								}, {
									"case":	131,
									"scores":	[-7.89195634697948]
								}, {
									"case":	132,
									"scores":	[-7.89195634697948]
								}, {
									"case":	133,
									"scores":	[-7.89195634697948]
								}, {
									"case":	134,
									"scores":	[-7.89195634697948]
								}, {
									"case":	135,
									"scores":	[-7.89195634697948]
								}, {
									"case":	136,
									"scores":	[-7.89195634697948]
								}, {
									"case":	137,
									"scores":	[-7.89195634697948]
								}, {
									"case":	138,
									"scores":	[-7.89195634697948]
								}, {
									"case":	139,
									"scores":	[-7.89195634697948]
								}, {
									"case":	140,
									"scores":	[-7.89195634697948]
								}, {
									"case":	141,
									"scores":	[-7.89195634697948]
								}, {
									"case":	142,
									"scores":	[-7.89195634697948]
								}, {
									"case":	143,
									"scores":	[-7.89195634697948]
								}, {
									"case":	144,
									"scores":	[-7.89195634697948]
								}, {
									"case":	145,
									"scores":	[-7.89195634697948]
								}, {
									"case":	146,
									"scores":	[-7.89195634697948]
								}, {
									"case":	147,
									"scores":	[-7.89195634697948]
								}, {
									"case":	148,
									"scores":	[-7.89195634697948]
								}, {
									"case":	149,
									"scores":	[-7.89195634697948]
								}, {
									"case":	150,
									"scores":	[-7.89195634697948]
								}, {
									"case":	151,
									"scores":	[-7.89195634697948]
								}, {
									"case":	152,
									"scores":	[-7.89195634697948]
								}, {
									"case":	153,
									"scores":	[-7.89195634697948]
								}, {
									"case":	154,
									"scores":	[-7.89195634697948]
								}, {
									"case":	155,
									"scores":	[-7.89195634697948]
								}, {
									"case":	156,
									"scores":	[-7.89195634697948]
								}, {
									"case":	157,
									"scores":	[-7.89195634697948]
								}, {
									"case":	158,
									"scores":	[-7.89195634697948]
								}, {
									"case":	159,
									"scores":	[-7.89195634697948]
								}, {
									"case":	160,
									"scores":	[-7.89195634697948]
								}, {
									"case":	161,
									"scores":	[-7.89195634697948]
								}, {
									"case":	162,
									"scores":	[-7.89195634697948]
								}, {
									"case":	163,
									"scores":	[-7.89195634697948]
								}, {
									"case":	164,
									"scores":	[-7.89195634697948]
								}, {
									"case":	165,
									"scores":	[-7.89195634697948]
								}, {
									"case":	166,
									"scores":	[-7.89195634697948]
								}, {
									"case":	167,
									"scores":	[-7.89195634697948]
								}, {
									"case":	168,
									"scores":	[-7.89195634697948]
								}, {
									"case":	169,
									"scores":	[-7.89195634697948]
								}, {
									"case":	170,
									"scores":	[-7.89195634697948]
								}, {
									"case":	171,
									"scores":	[-7.89195634697948]
								}, {
									"case":	172,
									"scores":	[-7.89195634697948]
								}, {
									"case":	173,
									"scores":	[-7.89195634697948]
								}, {
									"case":	174,
									"scores":	[-7.89195634697948]
								}, {
									"case":	175,
									"scores":	[-7.89195634697948]
								}, {
									"case":	176,
									"scores":	[-7.89195634697948]
								}, {
									"case":	177,
									"scores":	[-7.89195634697948]
								}, {
									"case":	178,
									"scores":	[-7.89195634697948]
								}, {
									"case":	179,
									"scores":	[-7.89195634697948]
								}, {
									"case":	180,
									"scores":	[-7.89195634697948]
								}, {
									"case":	181,
									"scores":	[-7.89195634697948]
								}, {
									"case":	182,
									"scores":	[-7.89195634697948]
								}, {
									"case":	183,
									"scores":	[-7.89195634697948]
								}, {
									"case":	184,
									"scores":	[-7.89195634697948]
								}, {
									"case":	185,
									"scores":	[-7.89195634697948]
								}, {
									"case":	186,
									"scores":	[-7.89195634697948]
								}, {
									"case":	187,
									"scores":	[-7.89195634697948]
								}, {
									"case":	188,
									"scores":	[-7.89195634697948]
								}, {
									"case":	189,
									"scores":	[-7.89195634697948]
								}, {
									"case":	190,
									"scores":	[-7.89195634697948]
								}, {
									"case":	191,
									"scores":	[-7.89195634697948]
								}, {
									"case":	192,
									"scores":	[-10.541375509379481, -10.83679600437948, -10.124971887379481, -9.87561214817948, -9.59315022317948, -11.729174850079479]
								}]
						}, {
							"switch":	109,
							"types":	[[5], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4], []],
							"begin_line":	3594,
							"begin_column":	2,
							"end_line":	3602,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L3594\", 6, &(ht), sizeof (ht), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj))) {\n    if (date_interval_initialize(&reltime, interval_string, interval_string_length) == 0) {\n        diobj = zend_object_store_get_object((this_ptr));\n        diobj->diff = reltime;\n        diobj->initialized = 1;\n    } else {\n        {\n            (*(this_ptr)).type = 0;\n        }\n        ;\n    }\n}\n", "if ((zend_parse_parameters((ht), \"s\", &interval_string, &interval_string_length) == 0) || __is_neg(\"\", \"L3594\", 6, &(ht), sizeof (ht), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj))) {\n    if (date_interval_initialize(&reltime, interval_string, interval_string_length) == 0) {\n        diobj = zend_object_store_get_object((this_ptr));\n        diobj->diff = reltime;\n        diobj->initialized = 1;\n    } else {\n        {\n            (*(this_ptr)).type = 0;\n        }\n        ;\n    }\n}\n", "if (dprintf((ht), \"s\", &interval_string, &interval_string_length) == 0) {\n    if (date_interval_initialize(&reltime, interval_string, interval_string_length) == 0) {\n        diobj = zend_object_store_get_object((this_ptr));\n        diobj->diff = reltime;\n        diobj->initialized = 1;\n    } else {\n        {\n            (*(this_ptr)).type = 0;\n        }\n        ;\n    }\n}\n", "if (zend_get_parameters_ex((ht), \"s\", &interval_string, &interval_string_length) == 0) {\n    if (date_interval_initialize(&reltime, interval_string, interval_string_length) == 0) {\n        diobj = zend_object_store_get_object((this_ptr));\n        diobj->diff = reltime;\n        diobj->initialized = 1;\n    } else {\n        {\n            (*(this_ptr)).type = 0;\n        }\n        ;\n    }\n}\n", "if ((zend_parse_parameters((ht), \"s\", &interval_string, &interval_string_length) == 0) && !__is_neg(\"\", \"L3594\", 6, &(ht), sizeof (ht), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj))) {\n    if (date_interval_initialize(&reltime, interval_string, interval_string_length) == 0) {\n        diobj = zend_object_store_get_object((this_ptr));\n        diobj->diff = reltime;\n        diobj->initialized = 1;\n    } else {\n        {\n            (*(this_ptr)).type = 0;\n        }\n        ;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4465725005281458, -4.4684361005281454, -3.6771650705281456, -4.3594875105281465, -3.511165610528145, -5.2840559215281457]
								}, {
									"case":	2,
									"scores":	[-5.3061932104281455, -5.3280568104281461, -4.5367857804281462, -5.2191082204281454, -4.3707863204281461, -6.1436766314281455]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-5.3061932104281455, -5.3280568104281461, -4.5367857804281462, -5.2191082204281454, -4.3707863204281461, -6.1436766314281455]
								}]
						}, {
							"switch":	119,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	3594,
							"begin_column":	2,
							"end_line":	3602,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L3594\", 6, &(ht), sizeof (ht), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj)))\n    if (zend_parse_parameters((ht), \"s\", &interval_string, &interval_string_length) == 0) {\n        if (date_interval_initialize(&reltime, interval_string, interval_string_length) == 0) {\n            diobj = zend_object_store_get_object((this_ptr));\n            diobj->diff = reltime;\n            diobj->initialized = 1;\n        } else {\n            {\n                (*(this_ptr)).type = 0;\n            }\n            ;\n        }\n    }\n", "if (!__is_neg(\"\", \"L3594\", 6, &(ht), sizeof (ht), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(reltime), sizeof (reltime), &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj)) && (zend_parse_parameters((ht), \"s\", &interval_string, &interval_string_length) == 0)) {\n    if (date_interval_initialize(&reltime, interval_string, interval_string_length) == 0) {\n        diobj = zend_object_store_get_object((this_ptr));\n        diobj->diff = reltime;\n        diobj->initialized = 1;\n    } else {\n        {\n            (*(this_ptr)).type = 0;\n        }\n        ;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.39794751697948, -9.41981111697948, -8.62854008697948, -9.31086252697948, -8.46254062697948, -10.23543093797948]
								}, {
									"case":	2,
									"scores":	[-10.40379379197948, -10.425657391979479, -9.63438636197948, -10.31670880197948, -9.46838690197948, -11.24127721297948]
								}]
						}]
				}, {
					"line":	3602,
					"switches":	[{
							"switch":	120,
							"types":	[[], [], [], [], [192], [], [], [], [], [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], [], [], [], [], [], []],
							"begin_line":	3603,
							"begin_column":	0,
							"end_line":	3603,
							"end_column":	0,
							"patch_codes":	["(date_globals.timezone) = (interval_string)", "(interval_string)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string((*(return_value_ptr)))", "_efree(((interval_string)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((return_value), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((return_value), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((return_value), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((return_value), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((return_value), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((return_value), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((return_value), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((return_value), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((return_value), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"astronomical_twilight_end\", strlen(\"astronomical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"civil_twilight_end\", strlen(\"civil_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"day\", strlen(\"day\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"fraction\", strlen(\"fraction\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"hour\", strlen(\"hour\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"minute\", strlen(\"minute\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"month\", strlen(\"month\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"nautical_twilight_end\", strlen(\"nautical_twilight_end\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"second\", strlen(\"second\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"sunset\", strlen(\"sunset\") + 1, 1)", "add_assoc_bool_ex((this_ptr), \"year\", strlen(\"year\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone\", strlen(\"zone\") + 1, 0)", "add_assoc_bool_ex((this_ptr), \"zone_type\", strlen(\"zone_type\") + 1, 0)", "add_assoc_null_ex((return_value), \"timezone_id\", strlen(\"timezone_id\") + 1)", "add_assoc_null_ex((this_ptr), \"timezone_id\", strlen(\"timezone_id\") + 1)", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long(*(return_value_ptr))", "diobj = (diobj)", "diobj = zend_object_store_get_object(((return_value)))", "diobj = zend_object_store_get_object(((this_ptr)))", "diobj->diff = (reltime)", "diobj->initialized = (0)", "diobj->initialized = (1)", "diobj->initialized = (ht)", "diobj->initialized = (interval_string_length)", "diobj->initialized = (return_value_used)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((diobj), 0, sizeof(php_interval_obj))", "php_date_global_timezone_db_enabled = (0)", "php_date_global_timezone_db_enabled = (1)", "php_date_global_timezone_db_enabled = (ht)", "php_date_global_timezone_db_enabled = (interval_string_length)", "php_date_global_timezone_db_enabled = (return_value_used)", "php_date_instantiate(date_ce_date, (return_value))", "php_date_instantiate(date_ce_date, (this_ptr))", "php_date_instantiate(date_ce_interval, (return_value))", "php_date_instantiate(date_ce_interval, (this_ptr))", "php_date_instantiate(date_ce_timezone, (return_value))", "php_date_instantiate(date_ce_timezone, (this_ptr))", "php_error_docref0(((void *)0), (1 << 1L), \"Failed to parse interval (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain a start date.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an end date or a recurrence count.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"The ISO interval '%s' did not contain an interval.\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad format (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 1L), \"Unknown or bad timezone (%s)\", (interval_string))", "php_error_docref0(((void *)0), (1 << 3L), \"Timezone ID '%s' is invalid\", (interval_string))", "timelib_rel_time_dtor((diobj)->diff)", "zend_object_std_dtor(&(diobj)->std)", "zend_replace_error_handling((EH_NORMAL), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), ((void *)0), &error_handling)", "zend_replace_error_handling((EH_THROW), ((void *)0), &error_handling)", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_from_error_container((return_value), (date_globals.last_errors))", "zval_from_error_container((this_ptr), (date_globals.last_errors))", "zval_set_refcount_p((return_value), 0)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 0)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "((date_globals.tzcache)) = (HashTable *)_emalloc((sizeof(HashTable)))", "(date_globals.last_errors) = ((void *)0)", "(date_globals.timezone) = ((void *)0)", "(date_globals.timezone) = _estrndup((zone), (zone_len))", "(date_globals.tzcache) = ((void *)0)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree(((date_globals.timezone)))", "_efree(((date_globals.tzcache)))", "_zend_hash_init(((date_globals.tzcache)), (4), (((void *)0)), (_php_date_tzinfo_dtor), (0))", "date_ce_period->get_iterator = date_object_period_get_iterator", "date_ce_period->iterator_funcs.funcs = &date_period_it_funcs", "date_object_handlers_date.clone_obj = date_object_clone_date", "date_object_handlers_date.compare_objects = date_object_compare_date", "date_object_handlers_date.get_properties = date_object_get_properties", "date_object_handlers_interval.clone_obj = date_object_clone_interval", "date_object_handlers_interval.get_properties = date_object_get_properties_interval", "date_object_handlers_interval.get_property_ptr_ptr = ((void *)0)", "date_object_handlers_interval.read_property = date_interval_read_property", "date_object_handlers_interval.write_property = date_interval_write_property", "date_object_handlers_period.clone_obj = date_object_clone_period", "date_object_handlers_timezone.clone_obj = date_object_clone_timezone", "date_register_classes()", "diobj = zend_object_store_get_object((this_ptr))", "diobj->diff = reltime", "diobj->initialized = 1", "exit(1)", "memcpy(&date_object_handlers_date, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_interval, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_period, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&date_object_handlers_timezone, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_date_global_timezone_db = ((void *)0)", "php_date_global_timezone_db_enabled = 0", "php_date_global_timezone_db_enabled = 1", "php_error_docref0(((void *)0), (1 << 0L), \"Timezone database is corrupt - this should *never* happen!\")", "php_error_docref0(((void *)0), (1 << 13L), \"The is_dst parameter is deprecated\")", "php_error_docref0(((void *)0), (1 << 1L), \"Can only do this for zones with ID for now\")", "php_error_docref0(((void *)0), (1 << 1L), \"It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We had to select 'UTC' because your platform doesn't provide functionality for the guessing algorithm\")", "php_error_docref0(((void *)0), (1 << 1L), \"Only non-special relative time specifications are supported for subtraction\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateInterval object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTime object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"The DateTimeZone object has not been correctly initialized by its constructor\")", "php_error_docref0(((void *)0), (1 << 1L), \"This constructor accepts either (DateTime, DateInterval, int) OR (DateTime, DateInterval, DateTime) OR (string) as arguments.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Unrecognized date format token.\")", "php_error_docref0(((void *)0), (1 << 1L), \"Wrong return format given, pick one of SUNFUNCS_RET_TIMESTAMP, SUNFUNCS_RET_STRING or SUNFUNCS_RET_DOUBLE\")", "php_error_docref0(((void *)0), (1 << 1L), \"idate format is one char\")", "php_error_docref0(((void *)0), (1 << 3L), \"A two-letter ISO 3166-1 compatible country code is expected\")", "php_info_print_table_end()", "php_info_print_table_row(2, \"Timezone Database\", php_date_global_timezone_db_enabled ? \"external\" : \"internal\")", "php_info_print_table_row(2, \"date/time support\", \"enabled\")", "php_info_print_table_start()", "timelib_error_container_dtor((date_globals.last_errors))", "zend_class_implements(date_ce_period, 1, zend_ce_traversable)", "zend_declare_class_constant_long(date_ce_period, \"EXCLUDE_START_DATE\", sizeof (\"EXCLUDE_START_DATE\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"AFRICA\", sizeof (\"AFRICA\") - 1, 1)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL\", sizeof (\"ALL\") - 1, 2047)", "zend_declare_class_constant_long(date_ce_timezone, \"ALL_WITH_BC\", sizeof (\"ALL_WITH_BC\") - 1, 4095)", "zend_declare_class_constant_long(date_ce_timezone, \"AMERICA\", sizeof (\"AMERICA\") - 1, 2)", "zend_declare_class_constant_long(date_ce_timezone, \"ANTARCTICA\", sizeof (\"ANTARCTICA\") - 1, 4)", "zend_declare_class_constant_long(date_ce_timezone, \"ARCTIC\", sizeof (\"ARCTIC\") - 1, 8)", "zend_declare_class_constant_long(date_ce_timezone, \"ASIA\", sizeof (\"ASIA\") - 1, 16)", "zend_declare_class_constant_long(date_ce_timezone, \"ATLANTIC\", sizeof (\"ATLANTIC\") - 1, 32)", "zend_declare_class_constant_long(date_ce_timezone, \"AUSTRALIA\", sizeof (\"AUSTRALIA\") - 1, 64)", "zend_declare_class_constant_long(date_ce_timezone, \"EUROPE\", sizeof (\"EUROPE\") - 1, 128)", "zend_declare_class_constant_long(date_ce_timezone, \"INDIAN\", sizeof (\"INDIAN\") - 1, 256)", "zend_declare_class_constant_long(date_ce_timezone, \"PACIFIC\", sizeof (\"PACIFIC\") - 1, 512)", "zend_declare_class_constant_long(date_ce_timezone, \"PER_COUNTRY\", sizeof (\"PER_COUNTRY\") - 1, 4096)", "zend_declare_class_constant_long(date_ce_timezone, \"UTC\", sizeof (\"UTC\") - 1, 1024)", "zend_declare_class_constant_stringl(date_ce_date, \"ATOM\", sizeof (\"ATOM\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"COOKIE\", sizeof (\"COOKIE\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"ISO8601\", sizeof (\"ISO8601\") - 1, \"Y-m-d\\\\TH:i:sO\", sizeof (\"Y-m-d\\\\TH:i:sO\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1036\", sizeof (\"RFC1036\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC1123\", sizeof (\"RFC1123\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC2822\", sizeof (\"RFC2822\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC3339\", sizeof (\"RFC3339\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC822\", sizeof (\"RFC822\") - 1, \"D, d M y H:i:s O\", sizeof (\"D, d M y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RFC850\", sizeof (\"RFC850\") - 1, \"l, d-M-y H:i:s T\", sizeof (\"l, d-M-y H:i:s T\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"RSS\", sizeof (\"RSS\") - 1, \"D, d M Y H:i:s O\", sizeof (\"D, d M Y H:i:s O\") - 1)", "zend_declare_class_constant_stringl(date_ce_date, \"W3C\", sizeof (\"W3C\") - 1, \"Y-m-d\\\\TH:i:sP\", sizeof (\"Y-m-d\\\\TH:i:sP\") - 1)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_destroy((date_globals.tzcache))", "zend_replace_error_handling(EH_THROW, ((void *)0), &error_handling)", "zend_restore_error_handling(&error_handling)", "if (__is_neg(\"\", \"L3603\", 6, &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj), &(reltime), sizeof (reltime), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(ht), sizeof (ht)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	2,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	3,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	4,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	5,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	6,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	7,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	8,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	9,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	10,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	11,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	12,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	13,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	14,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	15,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	16,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	17,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	18,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	19,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	20,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	21,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	22,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	23,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	24,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	25,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	26,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	27,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	28,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	29,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	30,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	31,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	32,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	33,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	34,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	35,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	36,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	37,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	38,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	39,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	40,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	41,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	42,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	43,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	44,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	45,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	46,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	47,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	48,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	49,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	50,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	51,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	52,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	53,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	54,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	55,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	56,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	57,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	58,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	59,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	60,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	61,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	62,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	63,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	64,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	65,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	66,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	67,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	68,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	69,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	70,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	71,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	72,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	73,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	74,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	75,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	76,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	77,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	78,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	79,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	80,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	81,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	82,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	83,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	84,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	85,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	86,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	87,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	88,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	89,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	90,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	91,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	92,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	93,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	94,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	95,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	96,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	97,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	98,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	99,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	100,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	101,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	102,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	103,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	104,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	105,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	106,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	107,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	108,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	109,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	110,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	111,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	112,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	113,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	114,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	115,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	116,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	117,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	118,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	119,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	120,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	121,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	122,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	123,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	124,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	125,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	126,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	127,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	128,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	129,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	130,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	131,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	132,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	133,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	134,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	135,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	136,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	137,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	138,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	139,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	140,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	141,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	142,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	143,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	144,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	145,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	146,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	147,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	148,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	149,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	150,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	151,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	152,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	153,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	154,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	155,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	156,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	157,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	158,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	159,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	160,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	161,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	162,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	163,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	164,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	165,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	166,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	167,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	168,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	169,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	170,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	171,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	172,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	173,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	174,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	175,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	176,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	177,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	178,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	179,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	180,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	181,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	182,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	183,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	184,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	185,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	186,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	187,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	188,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	189,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	190,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	191,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	192,
									"scores":	[-9.50051773362103, -7.8211721796210263, -8.5349803196210257, -8.7183536428210271, -8.0065295258210263, -9.1595006998210273]
								}]
						}, {
							"switch":	121,
							"types":	[[], [], [1], [], [], [], [4], [], [3], [], [], [], [], [], [], [], [2]],
							"begin_line":	3603,
							"begin_column":	2,
							"end_line":	3603,
							"end_column":	55,
							"patch_codes":	["if (!__is_neg(\"\", \"L3603\", 6, &(this_ptr), sizeof (this_ptr), &(diobj), sizeof (diobj), &(reltime), sizeof (reltime), &(interval_string), sizeof (interval_string), &(interval_string_length), sizeof (interval_string_length), &(ht), sizeof (ht)))\n    zend_restore_error_handling(&error_handling);\n", "{\n}\n", "zend_save_error_handling(&error_handling)", "zend_restore_error_handling(&(error_handling))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.0107688149210272, -7.9688073889210269, -8.0411609824210259, -8.1278049284210265, -7.3365338984210267, -8.5469400044210264]
								}, {
									"case":	2,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	3,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	4,
									"scores":	[-6.9020236884210266]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	388,
			"size":	80
		}, {
			"switch":	1,
			"case":	1,
			"size":	80
		}, {
			"switch":	1,
			"case":	2,
			"size":	80
		}, {
			"switch":	1,
			"case":	6,
			"size":	80
		}, {
			"switch":	2,
			"case":	1,
			"size":	80
		}, {
			"switch":	2,
			"case":	2,
			"size":	80
		}, {
			"switch":	3,
			"case":	389,
			"size":	32
		}, {
			"switch":	4,
			"case":	1,
			"size":	32
		}, {
			"switch":	5,
			"case":	389,
			"size":	35
		}, {
			"switch":	6,
			"case":	1,
			"size":	35
		}, {
			"switch":	6,
			"case":	2,
			"size":	35
		}, {
			"switch":	6,
			"case":	3,
			"size":	35
		}, {
			"switch":	7,
			"case":	1,
			"size":	35
		}, {
			"switch":	7,
			"case":	2,
			"size":	35
		}, {
			"switch":	8,
			"case":	389,
			"size":	35
		}, {
			"switch":	9,
			"case":	1,
			"size":	35
		}, {
			"switch":	10,
			"case":	389,
			"size":	13
		}, {
			"switch":	11,
			"case":	1,
			"size":	13
		}, {
			"switch":	11,
			"case":	2,
			"size":	13
		}, {
			"switch":	11,
			"case":	3,
			"size":	13
		}, {
			"switch":	12,
			"case":	1,
			"size":	13
		}, {
			"switch":	12,
			"case":	2,
			"size":	13
		}, {
			"switch":	13,
			"case":	390,
			"size":	48
		}, {
			"switch":	14,
			"case":	1,
			"size":	48
		}, {
			"switch":	14,
			"case":	2,
			"size":	48
		}, {
			"switch":	14,
			"case":	4,
			"size":	48
		}, {
			"switch":	15,
			"case":	403,
			"size":	26
		}, {
			"switch":	16,
			"case":	1,
			"size":	26
		}, {
			"switch":	16,
			"case":	2,
			"size":	26
		}, {
			"switch":	16,
			"case":	3,
			"size":	26
		}, {
			"switch":	17,
			"case":	1,
			"size":	26
		}, {
			"switch":	18,
			"case":	404,
			"size":	61
		}, {
			"switch":	19,
			"case":	1,
			"size":	61
		}, {
			"switch":	20,
			"case":	404,
			"size":	61
		}, {
			"switch":	21,
			"case":	1,
			"size":	61
		}, {
			"switch":	22,
			"case":	404,
			"size":	61
		}, {
			"switch":	23,
			"case":	1,
			"size":	61
		}, {
			"switch":	24,
			"case":	404,
			"size":	61
		}, {
			"switch":	25,
			"case":	1,
			"size":	61
		}, {
			"switch":	26,
			"case":	404,
			"size":	61
		}, {
			"switch":	27,
			"case":	1,
			"size":	61
		}, {
			"switch":	28,
			"case":	404,
			"size":	61
		}, {
			"switch":	29,
			"case":	1,
			"size":	61
		}, {
			"switch":	30,
			"case":	403,
			"size":	61
		}, {
			"switch":	31,
			"case":	1,
			"size":	61
		}, {
			"switch":	32,
			"case":	403,
			"size":	45
		}, {
			"switch":	33,
			"case":	1,
			"size":	45
		}, {
			"switch":	34,
			"case":	1,
			"size":	48
		}, {
			"switch":	34,
			"case":	2,
			"size":	48
		}, {
			"switch":	35,
			"case":	389,
			"size":	32
		}, {
			"switch":	36,
			"case":	1,
			"size":	32
		}, {
			"switch":	37,
			"case":	389,
			"size":	32
		}, {
			"switch":	38,
			"case":	1,
			"size":	32
		}, {
			"switch":	39,
			"case":	389,
			"size":	32
		}, {
			"switch":	40,
			"case":	1,
			"size":	32
		}, {
			"switch":	41,
			"case":	389,
			"size":	32
		}, {
			"switch":	42,
			"case":	1,
			"size":	32
		}, {
			"switch":	43,
			"case":	389,
			"size":	32
		}, {
			"switch":	44,
			"case":	1,
			"size":	32
		}, {
			"switch":	45,
			"case":	399,
			"size":	80
		}, {
			"switch":	46,
			"case":	1,
			"size":	80
		}, {
			"switch":	46,
			"case":	2,
			"size":	80
		}, {
			"switch":	46,
			"case":	6,
			"size":	80
		}, {
			"switch":	47,
			"case":	1,
			"size":	80
		}, {
			"switch":	47,
			"case":	2,
			"size":	80
		}, {
			"switch":	48,
			"case":	400,
			"size":	32
		}, {
			"switch":	49,
			"case":	1,
			"size":	32
		}, {
			"switch":	50,
			"case":	400,
			"size":	35
		}, {
			"switch":	51,
			"case":	1,
			"size":	35
		}, {
			"switch":	51,
			"case":	2,
			"size":	35
		}, {
			"switch":	51,
			"case":	3,
			"size":	35
		}, {
			"switch":	52,
			"case":	1,
			"size":	35
		}, {
			"switch":	52,
			"case":	2,
			"size":	35
		}, {
			"switch":	53,
			"case":	400,
			"size":	35
		}, {
			"switch":	54,
			"case":	1,
			"size":	35
		}, {
			"switch":	55,
			"case":	400,
			"size":	13
		}, {
			"switch":	56,
			"case":	1,
			"size":	13
		}, {
			"switch":	56,
			"case":	2,
			"size":	13
		}, {
			"switch":	56,
			"case":	3,
			"size":	13
		}, {
			"switch":	57,
			"case":	1,
			"size":	13
		}, {
			"switch":	57,
			"case":	2,
			"size":	13
		}, {
			"switch":	58,
			"case":	400,
			"size":	26
		}, {
			"switch":	59,
			"case":	1,
			"size":	26
		}, {
			"switch":	59,
			"case":	2,
			"size":	26
		}, {
			"switch":	59,
			"case":	3,
			"size":	26
		}, {
			"switch":	60,
			"case":	1,
			"size":	26
		}, {
			"switch":	60,
			"case":	2,
			"size":	26
		}, {
			"switch":	61,
			"case":	400,
			"size":	26
		}, {
			"switch":	62,
			"case":	1,
			"size":	26
		}, {
			"switch":	62,
			"case":	2,
			"size":	26
		}, {
			"switch":	62,
			"case":	3,
			"size":	26
		}, {
			"switch":	63,
			"case":	1,
			"size":	26
		}, {
			"switch":	64,
			"case":	401,
			"size":	61
		}, {
			"switch":	65,
			"case":	1,
			"size":	61
		}, {
			"switch":	66,
			"case":	401,
			"size":	61
		}, {
			"switch":	67,
			"case":	1,
			"size":	61
		}, {
			"switch":	68,
			"case":	401,
			"size":	61
		}, {
			"switch":	69,
			"case":	1,
			"size":	61
		}, {
			"switch":	70,
			"case":	401,
			"size":	61
		}, {
			"switch":	71,
			"case":	1,
			"size":	61
		}, {
			"switch":	72,
			"case":	401,
			"size":	61
		}, {
			"switch":	73,
			"case":	1,
			"size":	61
		}, {
			"switch":	74,
			"case":	401,
			"size":	61
		}, {
			"switch":	75,
			"case":	1,
			"size":	61
		}, {
			"switch":	76,
			"case":	400,
			"size":	61
		}, {
			"switch":	77,
			"case":	1,
			"size":	61
		}, {
			"switch":	78,
			"case":	400,
			"size":	45
		}, {
			"switch":	79,
			"case":	1,
			"size":	45
		}, {
			"switch":	80,
			"case":	400,
			"size":	45
		}, {
			"switch":	81,
			"case":	1,
			"size":	45
		}, {
			"switch":	82,
			"case":	400,
			"size":	45
		}, {
			"switch":	83,
			"case":	1,
			"size":	45
		}, {
			"switch":	84,
			"case":	400,
			"size":	32
		}, {
			"switch":	85,
			"case":	1,
			"size":	32
		}, {
			"switch":	86,
			"case":	400,
			"size":	32
		}, {
			"switch":	87,
			"case":	1,
			"size":	32
		}, {
			"switch":	88,
			"case":	400,
			"size":	32
		}, {
			"switch":	89,
			"case":	1,
			"size":	32
		}, {
			"switch":	90,
			"case":	138,
			"size":	13
		}, {
			"switch":	90,
			"case":	139,
			"size":	13
		}, {
			"switch":	90,
			"case":	140,
			"size":	13
		}, {
			"switch":	90,
			"case":	141,
			"size":	13
		}, {
			"switch":	91,
			"case":	1,
			"size":	13
		}, {
			"switch":	92,
			"case":	138,
			"size":	13
		}, {
			"switch":	92,
			"case":	139,
			"size":	13
		}, {
			"switch":	92,
			"case":	140,
			"size":	13
		}, {
			"switch":	92,
			"case":	141,
			"size":	13
		}, {
			"switch":	93,
			"case":	1,
			"size":	13
		}, {
			"switch":	93,
			"case":	2,
			"size":	13
		}, {
			"switch":	93,
			"case":	3,
			"size":	13
		}, {
			"switch":	94,
			"case":	137,
			"size":	9
		}, {
			"switch":	94,
			"case":	138,
			"size":	9
		}, {
			"switch":	94,
			"case":	139,
			"size":	9
		}, {
			"switch":	94,
			"case":	140,
			"size":	9
		}, {
			"switch":	95,
			"case":	1,
			"size":	9
		}, {
			"switch":	95,
			"case":	2,
			"size":	9
		}, {
			"switch":	95,
			"case":	3,
			"size":	9
		}, {
			"switch":	96,
			"case":	137,
			"size":	9
		}, {
			"switch":	96,
			"case":	138,
			"size":	9
		}, {
			"switch":	96,
			"case":	139,
			"size":	9
		}, {
			"switch":	96,
			"case":	140,
			"size":	9
		}, {
			"switch":	97,
			"case":	1,
			"size":	9
		}, {
			"switch":	98,
			"case":	137,
			"size":	9
		}, {
			"switch":	98,
			"case":	138,
			"size":	9
		}, {
			"switch":	98,
			"case":	139,
			"size":	9
		}, {
			"switch":	98,
			"case":	140,
			"size":	9
		}, {
			"switch":	99,
			"case":	1,
			"size":	9
		}, {
			"switch":	100,
			"case":	1,
			"size":	9
		}, {
			"switch":	100,
			"case":	2,
			"size":	9
		}, {
			"switch":	101,
			"case":	1,
			"size":	13
		}, {
			"switch":	101,
			"case":	2,
			"size":	13
		}, {
			"switch":	102,
			"case":	138,
			"size":	13
		}, {
			"switch":	102,
			"case":	139,
			"size":	13
		}, {
			"switch":	102,
			"case":	140,
			"size":	13
		}, {
			"switch":	102,
			"case":	141,
			"size":	13
		}, {
			"switch":	103,
			"case":	1,
			"size":	13
		}, {
			"switch":	104,
			"case":	137,
			"size":	13
		}, {
			"switch":	104,
			"case":	138,
			"size":	13
		}, {
			"switch":	104,
			"case":	139,
			"size":	13
		}, {
			"switch":	104,
			"case":	140,
			"size":	13
		}, {
			"switch":	105,
			"case":	1,
			"size":	13
		}, {
			"switch":	106,
			"case":	192,
			"size":	6
		}, {
			"switch":	107,
			"case":	1,
			"size":	6
		}, {
			"switch":	108,
			"case":	192,
			"size":	6
		}, {
			"switch":	109,
			"case":	1,
			"size":	6
		}, {
			"switch":	109,
			"case":	2,
			"size":	6
		}, {
			"switch":	109,
			"case":	5,
			"size":	6
		}, {
			"switch":	110,
			"case":	192,
			"size":	6
		}, {
			"switch":	111,
			"case":	1,
			"size":	6
		}, {
			"switch":	111,
			"case":	2,
			"size":	6
		}, {
			"switch":	111,
			"case":	10,
			"size":	6
		}, {
			"switch":	112,
			"case":	199,
			"size":	9
		}, {
			"switch":	113,
			"case":	1,
			"size":	9
		}, {
			"switch":	114,
			"case":	199,
			"size":	9
		}, {
			"switch":	115,
			"case":	1,
			"size":	9
		}, {
			"switch":	116,
			"case":	199,
			"size":	9
		}, {
			"switch":	117,
			"case":	1,
			"size":	9
		}, {
			"switch":	118,
			"case":	1,
			"size":	6
		}, {
			"switch":	118,
			"case":	2,
			"size":	6
		}, {
			"switch":	119,
			"case":	1,
			"size":	6
		}, {
			"switch":	119,
			"case":	2,
			"size":	6
		}, {
			"switch":	120,
			"case":	192,
			"size":	6
		}, {
			"switch":	121,
			"case":	1,
			"size":	6
		}],
	"func_locations":	[{
			"file":	"ext/date/php_date.c",
			"functions":	[{
					"function":	"__cmsg_nxthdr",
					"begin":	308,
					"end":	324
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"__zend_calloc",
					"begin":	103,
					"end":	108
				}, {
					"function":	"__zend_malloc",
					"begin":	93,
					"end":	101
				}, {
					"function":	"__zend_realloc",
					"begin":	110,
					"end":	118
				}, {
					"function":	"_php_date_tzinfo_dtor",
					"begin":	603,
					"end":	608
				}, {
					"function":	"_zval_copy_ctor",
					"begin":	40,
					"end":	46
				}, {
					"function":	"_zval_dtor",
					"begin":	30,
					"end":	36
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"btowc",
					"begin":	317,
					"end":	320
				}, {
					"function":	"check_id_allowed",
					"begin":	3825,
					"end":	3839
				}, {
					"function":	"date_format",
					"begin":	1008,
					"end":	1160
				}, {
					"function":	"date_interval_format",
					"begin":	3634,
					"end":	3692
				}, {
					"function":	"date_interval_initialize",
					"begin":	3447,
					"end":	3478
				}, {
					"function":	"date_interval_read_property",
					"begin":	3481,
					"end":	3531
				}, {
					"function":	"date_interval_write_property",
					"begin":	3535,
					"end":	3578
				}, {
					"function":	"date_object_clone_date",
					"begin":	2042,
					"end":	2061
				}, {
					"function":	"date_object_clone_interval",
					"begin":	2213,
					"end":	2223
				}, {
					"function":	"date_object_clone_period",
					"begin":	2288,
					"end":	2298
				}, {
					"function":	"date_object_clone_timezone",
					"begin":	2162,
					"end":	2186
				}, {
					"function":	"date_object_compare_date",
					"begin":	2063,
					"end":	2082
				}, {
					"function":	"date_object_free_storage_date",
					"begin":	2300,
					"end":	2310
				}, {
					"function":	"date_object_free_storage_interval",
					"begin":	2323,
					"end":	2330
				}, {
					"function":	"date_object_free_storage_period",
					"begin":	2332,
					"end":	2351
				}, {
					"function":	"date_object_free_storage_timezone",
					"begin":	2312,
					"end":	2321
				}, {
					"function":	"date_object_get_properties",
					"begin":	2084,
					"end":	2135
				}, {
					"function":	"date_object_get_properties_interval",
					"begin":	2225,
					"end":	2261
				}, {
					"function":	"date_object_new_date",
					"begin":	2037,
					"end":	2040
				}, {
					"function":	"date_object_new_date_ex",
					"begin":	2017,
					"end":	2035
				}, {
					"function":	"date_object_new_interval",
					"begin":	2208,
					"end":	2211
				}, {
					"function":	"date_object_new_interval_ex",
					"begin":	2188,
					"end":	2206
				}, {
					"function":	"date_object_new_period",
					"begin":	2283,
					"end":	2286
				}, {
					"function":	"date_object_new_period_ex",
					"begin":	2263,
					"end":	2281
				}, {
					"function":	"date_object_new_timezone",
					"begin":	2157,
					"end":	2160
				}, {
					"function":	"date_object_new_timezone_ex",
					"begin":	2137,
					"end":	2155
				}, {
					"function":	"date_object_period_get_iterator",
					"begin":	1921,
					"end":	1938
				}, {
					"function":	"date_period_initialize",
					"begin":	3715,
					"end":	3737
				}, {
					"function":	"date_period_it_current_data",
					"begin":	1847,
					"end":	1868
				}, {
					"function":	"date_period_it_current_key",
					"begin":	1873,
					"end":	1878
				}, {
					"function":	"date_period_it_dtor",
					"begin":	1808,
					"end":	1817
				}, {
					"function":	"date_period_it_has_more",
					"begin":	1822,
					"end":	1842
				}, {
					"function":	"date_period_it_invalidate_current",
					"begin":	1795,
					"end":	1803
				}, {
					"function":	"date_period_it_move_forward",
					"begin":	1883,
					"end":	1889
				}, {
					"function":	"date_period_it_rewind",
					"begin":	1894,
					"end":	1904
				}, {
					"function":	"date_register_classes",
					"begin":	1940,
					"end":	2015
				}, {
					"function":	"english_suffix",
					"begin":	972,
					"end":	984
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"gc_remove_from_buffer",
					"begin":	187,
					"end":	194
				}, {
					"function":	"gc_zval_check_possible_root",
					"begin":	180,
					"end":	185
				}, {
					"function":	"get_timezone_info",
					"begin":	936,
					"end":	947
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"guess_timezone",
					"begin":	839,
					"end":	934
				}, {
					"function":	"i_zend_is_true",
					"begin":	101,
					"end":	156
				}, {
					"function":	"i_zval_ptr_dtor",
					"begin":	80,
					"end":	99
				}, {
					"function":	"is_numeric_string",
					"begin":	102,
					"end":	224
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"mbrlen",
					"begin":	328,
					"end":	332
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"php_date",
					"begin":	1162,
					"end":	1179
				}, {
					"function":	"php_date_do_return_parsed_time",
					"begin":	2634,
					"end":	2707
				}, {
					"function":	"php_date_full_day_name",
					"begin":	988,
					"end":	995
				}, {
					"function":	"php_date_get_date_ce",
					"begin":	510,
					"end":	513
				}, {
					"function":	"php_date_get_timezone_ce",
					"begin":	515,
					"end":	518
				}, {
					"function":	"php_date_initialize",
					"begin":	2374,
					"end":	2454
				}, {
					"function":	"php_date_initialize_from_hash",
					"begin":	2514,
					"end":	2559
				}, {
					"function":	"php_date_instantiate",
					"begin":	2354,
					"end":	2361
				}, {
					"function":	"php_date_llabs",
					"begin":	40,
					"end":	40
				}, {
					"function":	"php_date_parse_tzfile",
					"begin":	817,
					"end":	835
				}, {
					"function":	"php_date_set_tzdb",
					"begin":	1351,
					"end":	1359
				}, {
					"function":	"php_date_short_day_name",
					"begin":	997,
					"end":	1004
				}, {
					"function":	"php_do_date_sunrise_sunset",
					"begin":	3966,
					"end":	4047
				}, {
					"function":	"php_format_date",
					"begin":	1182,
					"end":	1204
				}, {
					"function":	"php_idate",
					"begin":	1209,
					"end":	1300
				}, {
					"function":	"php_mktime",
					"begin":	1449,
					"end":	1537
				}, {
					"function":	"php_parse_date",
					"begin":	1363,
					"end":	1383
				}, {
					"function":	"php_set_error_handling",
					"begin":	292,
					"end":	295
				}, {
					"function":	"php_std_error_handling",
					"begin":	296,
					"end":	296
				}, {
					"function":	"php_strftime",
					"begin":	1576,
					"end":	1656
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"safe_free_zval_ptr_rel",
					"begin":	62,
					"end":	69
				}, {
					"function":	"smart_str_print_long",
					"begin":	153,
					"end":	157
				}, {
					"function":	"smart_str_print_unsigned",
					"begin":	159,
					"end":	163
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"strtoimax",
					"begin":	323,
					"end":	328
				}, {
					"function":	"strtoumax",
					"begin":	335,
					"end":	340
				}, {
					"function":	"timezone_initialize",
					"begin":	3176,
					"end":	3194
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"update_errors_warnings",
					"begin":	2365,
					"end":	2372
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"wcstoimax",
					"begin":	347,
					"end":	352
				}, {
					"function":	"wcstoumax",
					"begin":	361,
					"end":	366
				}, {
					"function":	"wctob",
					"begin":	323,
					"end":	326
				}, {
					"function":	"zend_arg_types_stack_2_pop",
					"begin":	355,
					"end":	363
				}, {
					"function":	"zend_arg_types_stack_3_pop",
					"begin":	365,
					"end":	374
				}, {
					"function":	"zend_dval_to_lval",
					"begin":	77,
					"end":	83
				}, {
					"function":	"zend_inline_hash_func",
					"begin":	261,
					"end":	288
				}, {
					"function":	"zend_memnstr",
					"begin":	226,
					"end":	257
				}, {
					"function":	"zend_memrchr",
					"begin":	259,
					"end":	274
				}, {
					"function":	"zend_objects_store_del_ref_by_handle",
					"begin":	71,
					"end":	73
				}, {
					"function":	"zend_ptr_stack_2_pop",
					"begin":	93,
					"end":	98
				}, {
					"function":	"zend_ptr_stack_2_push",
					"begin":	72,
					"end":	83
				}, {
					"function":	"zend_ptr_stack_3_pop",
					"begin":	85,
					"end":	91
				}, {
					"function":	"zend_ptr_stack_3_push",
					"begin":	58,
					"end":	70
				}, {
					"function":	"zend_ptr_stack_pop",
					"begin":	108,
					"end":	112
				}, {
					"function":	"zend_ptr_stack_push",
					"begin":	100,
					"end":	106
				}, {
					"function":	"zend_symtable_del",
					"begin":	355,
					"end":	359
				}, {
					"function":	"zend_symtable_exists",
					"begin":	369,
					"end":	373
				}, {
					"function":	"zend_symtable_find",
					"begin":	362,
					"end":	366
				}, {
					"function":	"zend_symtable_update",
					"begin":	348,
					"end":	352
				}, {
					"function":	"zend_symtable_update_current_key_ex",
					"begin":	375,
					"end":	379
				}, {
					"function":	"zend_vm_stack_alloc",
					"begin":	243,
					"end":	270
				}, {
					"function":	"zend_vm_stack_clear_multiple",
					"begin":	331,
					"end":	342
				}, {
					"function":	"zend_vm_stack_destroy",
					"begin":	197,
					"end":	206
				}, {
					"function":	"zend_vm_stack_extend",
					"begin":	208,
					"end":	213
				}, {
					"function":	"zend_vm_stack_free",
					"begin":	284,
					"end":	300
				}, {
					"function":	"zend_vm_stack_free_int",
					"begin":	272,
					"end":	282
				}, {
					"function":	"zend_vm_stack_get_arg",
					"begin":	344,
					"end":	353
				}, {
					"function":	"zend_vm_stack_init",
					"begin":	192,
					"end":	195
				}, {
					"function":	"zend_vm_stack_new_page",
					"begin":	183,
					"end":	190
				}, {
					"function":	"zend_vm_stack_pop",
					"begin":	231,
					"end":	241
				}, {
					"function":	"zend_vm_stack_push",
					"begin":	220,
					"end":	224
				}, {
					"function":	"zend_vm_stack_push_args",
					"begin":	302,
					"end":	329
				}, {
					"function":	"zend_vm_stack_push_nocheck",
					"begin":	226,
					"end":	229
				}, {
					"function":	"zend_vm_stack_top",
					"begin":	215,
					"end":	218
				}, {
					"function":	"zif_checkdate",
					"begin":	1559,
					"end":	1571
				}, {
					"function":	"zif_date",
					"begin":	1305,
					"end":	1308
				}, {
					"function":	"zif_date_add",
					"begin":	2837,
					"end":	2876
				}, {
					"function":	"zif_date_create",
					"begin":	2459,
					"end":	2473
				}, {
					"function":	"zif_date_create_from_format",
					"begin":	2479,
					"end":	2493
				}, {
					"function":	"zif_date_date_set",
					"begin":	3052,
					"end":	3069
				}, {
					"function":	"zif_date_default_timezone_get",
					"begin":	3954,
					"end":	3960
				}, {
					"function":	"zif_date_default_timezone_set",
					"begin":	3931,
					"end":	3949
				}, {
					"function":	"zif_date_diff",
					"begin":	3149,
					"end":	3173
				}, {
					"function":	"zif_date_format",
					"begin":	2750,
					"end":	2763
				}, {
					"function":	"zif_date_get_last_errors",
					"begin":	2623,
					"end":	2631
				}, {
					"function":	"zif_date_interval_create_from_date_string",
					"begin":	3610,
					"end":	3630
				}, {
					"function":	"zif_date_interval_format",
					"begin":	3698,
					"end":	3712
				}, {
					"function":	"zif_date_isodate_set",
					"begin":	3075,
					"end":	3096
				}, {
					"function":	"zif_date_modify",
					"begin":	2769,
					"end":	2831
				}, {
					"function":	"zif_date_offset_get",
					"begin":	2994,
					"end":	3023
				}, {
					"function":	"zif_date_parse",
					"begin":	2712,
					"end":	2725
				}, {
					"function":	"zif_date_parse_from_format",
					"begin":	2731,
					"end":	2744
				}, {
					"function":	"zif_date_sub",
					"begin":	2882,
					"end":	2923
				}, {
					"function":	"zif_date_sun_info",
					"begin":	4068,
					"end":	4168
				}, {
					"function":	"zif_date_sunrise",
					"begin":	4052,
					"end":	4055
				}, {
					"function":	"zif_date_sunset",
					"begin":	4060,
					"end":	4063
				}, {
					"function":	"zif_date_time_set",
					"begin":	3029,
					"end":	3046
				}, {
					"function":	"zif_date_timestamp_get",
					"begin":	3123,
					"end":	3143
				}, {
					"function":	"zif_date_timestamp_set",
					"begin":	3102,
					"end":	3117
				}, {
					"function":	"zif_date_timezone_get",
					"begin":	2929,
					"end":	2961
				}, {
					"function":	"zif_date_timezone_set",
					"begin":	2967,
					"end":	2988
				}, {
					"function":	"zif_getdate",
					"begin":	1733,
					"end":	1764
				}, {
					"function":	"zif_gmdate",
					"begin":	1313,
					"end":	1316
				}, {
					"function":	"zif_gmmktime",
					"begin":	1550,
					"end":	1553
				}, {
					"function":	"zif_gmstrftime",
					"begin":	1669,
					"end":	1672
				}, {
					"function":	"zif_idate",
					"begin":	1321,
					"end":	1347
				}, {
					"function":	"zif_localtime",
					"begin":	1686,
					"end":	1728
				}, {
					"function":	"zif_mktime",
					"begin":	1542,
					"end":	1545
				}, {
					"function":	"zif_strftime",
					"begin":	1661,
					"end":	1664
				}, {
					"function":	"zif_strtotime",
					"begin":	1389,
					"end":	1444
				}, {
					"function":	"zif_time",
					"begin":	1678,
					"end":	1681
				}, {
					"function":	"zif_timezone_abbreviations_list",
					"begin":	3896,
					"end":	3926
				}, {
					"function":	"zif_timezone_identifiers_list",
					"begin":	3844,
					"end":	3878
				}, {
					"function":	"zif_timezone_location_get",
					"begin":	3425,
					"end":	3444
				}, {
					"function":	"zif_timezone_name_from_abbr",
					"begin":	3285,
					"end":	3303
				}, {
					"function":	"zif_timezone_name_get",
					"begin":	3248,
					"end":	3279
				}, {
					"function":	"zif_timezone_offset_get",
					"begin":	3309,
					"end":	3337
				}, {
					"function":	"zif_timezone_open",
					"begin":	3199,
					"end":	3216
				}, {
					"function":	"zif_timezone_transitions_get",
					"begin":	3343,
					"end":	3419
				}, {
					"function":	"zif_timezone_version_get",
					"begin":	3884,
					"end":	3890
				}, {
					"function":	"zim_DateInterval___construct",
					"begin":	3585,
					"end":	3604
				}, {
					"function":	"zim_DatePeriod___construct",
					"begin":	3742,
					"end":	3822
				}, {
					"function":	"zim_DateTimeZone___construct",
					"begin":	3222,
					"end":	3242
				}, {
					"function":	"zim_DateTime___construct",
					"begin":	2499,
					"end":	2511
				}, {
					"function":	"zim_DateTime___set_state",
					"begin":	2563,
					"end":	2578
				}, {
					"function":	"zim_DateTime___wakeup",
					"begin":	2583,
					"end":	2594
				}, {
					"function":	"zm_activate_date",
					"begin":	611,
					"end":	621
				}, {
					"function":	"zm_deactivate_date",
					"begin":	625,
					"end":	642
				}, {
					"function":	"zm_globals_ctor_date",
					"begin":	594,
					"end":	599
				}, {
					"function":	"zm_info_date",
					"begin":	801,
					"end":	813
				}, {
					"function":	"zm_shutdown_date",
					"begin":	788,
					"end":	797
				}, {
					"function":	"zm_startup_date",
					"begin":	742,
					"end":	784
				}, {
					"function":	"zval_addref_p",
					"begin":	386,
					"end":	388
				}, {
					"function":	"zval_delref_p",
					"begin":	390,
					"end":	392
				}, {
					"function":	"zval_from_error_container",
					"begin":	2598,
					"end":	2618
				}, {
					"function":	"zval_isref_p",
					"begin":	394,
					"end":	396
				}, {
					"function":	"zval_refcount_p",
					"begin":	378,
					"end":	380
				}, {
					"function":	"zval_set_isref_p",
					"begin":	398,
					"end":	400
				}, {
					"function":	"zval_set_isref_to_p",
					"begin":	406,
					"end":	408
				}, {
					"function":	"zval_set_refcount_p",
					"begin":	382,
					"end":	384
				}, {
					"function":	"zval_unset_isref_p",
					"begin":	402,
					"end":	404
				}]
		}]
}
