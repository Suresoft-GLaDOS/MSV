{
	"switch_num":	32,
	"case_num":	[133, 3, 265, 14, 329, 3, 391, 2, 391, 50, 2, 2, 816, 3, 2, 816, 20, 815, 147, 134, 126, 3, 153, 3, 164, 5, 1, 153, 3, 153, 31, 2],
	"switch_cluster":	[[7, 9, 10, 11, 14, 16, 19, 25, 26, 30, 31], [1, 3, 5, 13, 21, 23, 28], [0, 2, 4, 6, 8, 12, 15, 17, 18, 20, 22, 24, 27, 29], []],
	"priority":	[{
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	428,
			"primary_score":	999625,
			"second_score":	3110
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	429,
			"primary_score":	999625,
			"second_score":	3108
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	479,
			"primary_score":	999625,
			"second_score":	3111
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	485,
			"primary_score":	999625,
			"second_score":	2
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	584,
			"primary_score":	999625,
			"second_score":	3107
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	586,
			"primary_score":	999625,
			"second_score":	3106
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	587,
			"primary_score":	999625,
			"second_score":	6
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	588,
			"primary_score":	999625,
			"second_score":	5
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	589,
			"primary_score":	999625,
			"second_score":	469
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	590,
			"primary_score":	999625,
			"second_score":	468
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	591,
			"primary_score":	999625,
			"second_score":	467
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	593,
			"primary_score":	999625,
			"second_score":	4
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	595,
			"primary_score":	999625,
			"second_score":	3
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	682,
			"primary_score":	999625,
			"second_score":	121481
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	687,
			"primary_score":	999625,
			"second_score":	121480
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	689,
			"primary_score":	999625,
			"second_score":	121479
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	802,
			"primary_score":	999625,
			"second_score":	121478
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	806,
			"primary_score":	999625,
			"second_score":	121477
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	809,
			"primary_score":	999625,
			"second_score":	121476
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	810,
			"primary_score":	999625,
			"second_score":	121475
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1876,
			"primary_score":	999625,
			"second_score":	121696
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1877,
			"primary_score":	999625,
			"second_score":	121695
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1878,
			"primary_score":	999625,
			"second_score":	121694
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1879,
			"primary_score":	999625,
			"second_score":	121693
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1880,
			"primary_score":	999625,
			"second_score":	121692
		}, {
			"file":	"Zend/zend.c",
			"line":	227,
			"primary_score":	999625,
			"second_score":	119459
		}, {
			"file":	"Zend/zend.c",
			"line":	228,
			"primary_score":	999625,
			"second_score":	119458
		}, {
			"file":	"Zend/zend.c",
			"line":	229,
			"primary_score":	999625,
			"second_score":	119457
		}, {
			"file":	"Zend/zend.c",
			"line":	305,
			"primary_score":	999625,
			"second_score":	119463
		}, {
			"file":	"Zend/zend.c",
			"line":	311,
			"primary_score":	999625,
			"second_score":	119462
		}, {
			"file":	"Zend/zend.c",
			"line":	312,
			"primary_score":	999625,
			"second_score":	119461
		}, {
			"file":	"Zend/zend.c",
			"line":	314,
			"primary_score":	999625,
			"second_score":	119460
		}, {
			"file":	"Zend/zend.c",
			"line":	315,
			"primary_score":	999625,
			"second_score":	119456
		}, {
			"file":	"Zend/zend.c",
			"line":	318,
			"primary_score":	999625,
			"second_score":	119455
		}, {
			"file":	"Zend/zend.c",
			"line":	319,
			"primary_score":	999625,
			"second_score":	119454
		}, {
			"file":	"Zend/zend.c",
			"line":	322,
			"primary_score":	999625,
			"second_score":	119453
		}, {
			"file":	"Zend/zend.c",
			"line":	324,
			"primary_score":	999625,
			"second_score":	121110
		}, {
			"file":	"Zend/zend.c",
			"line":	325,
			"primary_score":	999625,
			"second_score":	121062
		}, {
			"file":	"Zend/zend.c",
			"line":	328,
			"primary_score":	999625,
			"second_score":	121061
		}, {
			"file":	"Zend/zend.c",
			"line":	797,
			"primary_score":	999625,
			"second_score":	103288
		}, {
			"file":	"Zend/zend.c",
			"line":	798,
			"primary_score":	999625,
			"second_score":	103280
		}, {
			"file":	"Zend/zend.c",
			"line":	800,
			"primary_score":	999625,
			"second_score":	47124
		}, {
			"file":	"Zend/zend.c",
			"line":	801,
			"primary_score":	999625,
			"second_score":	47105
		}, {
			"file":	"Zend/zend.c",
			"line":	803,
			"primary_score":	999625,
			"second_score":	14769
		}, {
			"file":	"Zend/zend.c",
			"line":	804,
			"primary_score":	999625,
			"second_score":	14706
		}, {
			"file":	"Zend/zend.c",
			"line":	806,
			"primary_score":	999625,
			"second_score":	14705
		}, {
			"file":	"Zend/zend.c",
			"line":	807,
			"primary_score":	999625,
			"second_score":	14697
		}, {
			"file":	"Zend/zend.c",
			"line":	809,
			"primary_score":	999625,
			"second_score":	14696
		}, {
			"file":	"Zend/zend.c",
			"line":	810,
			"primary_score":	999625,
			"second_score":	14695
		}, {
			"file":	"Zend/zend.c",
			"line":	812,
			"primary_score":	999625,
			"second_score":	14694
		}, {
			"file":	"Zend/zend.c",
			"line":	813,
			"primary_score":	999625,
			"second_score":	6281
		}, {
			"file":	"Zend/zend.c",
			"line":	814,
			"primary_score":	999625,
			"second_score":	6280
		}, {
			"file":	"Zend/zend.c",
			"line":	822,
			"primary_score":	999625,
			"second_score":	6224
		}, {
			"file":	"Zend/zend.c",
			"line":	824,
			"primary_score":	999625,
			"second_score":	6124
		}, {
			"file":	"Zend/zend.c",
			"line":	845,
			"primary_score":	999984,
			"second_score":	119926
		}, {
			"file":	"Zend/zend.c",
			"line":	847,
			"primary_score":	999984,
			"second_score":	119925
		}, {
			"file":	"Zend/zend.c",
			"line":	851,
			"primary_score":	999984,
			"second_score":	119924
		}, {
			"file":	"Zend/zend.c",
			"line":	852,
			"primary_score":	999984,
			"second_score":	119923
		}, {
			"file":	"Zend/zend.c",
			"line":	853,
			"primary_score":	999984,
			"second_score":	119922
		}, {
			"file":	"Zend/zend.c",
			"line":	854,
			"primary_score":	999984,
			"second_score":	119921
		}, {
			"file":	"Zend/zend.c",
			"line":	898,
			"primary_score":	999625,
			"second_score":	119879
		}, {
			"file":	"Zend/zend.c",
			"line":	899,
			"primary_score":	999625,
			"second_score":	119873
		}, {
			"file":	"Zend/zend.c",
			"line":	900,
			"primary_score":	999625,
			"second_score":	119464
		}, {
			"file":	"Zend/zend.c",
			"line":	907,
			"primary_score":	999625,
			"second_score":	118630
		}, {
			"file":	"Zend/zend.c",
			"line":	908,
			"primary_score":	999625,
			"second_score":	118629
		}, {
			"file":	"Zend/zend.c",
			"line":	910,
			"primary_score":	999625,
			"second_score":	118628
		}, {
			"file":	"Zend/zend.c",
			"line":	911,
			"primary_score":	999625,
			"second_score":	118622
		}, {
			"file":	"Zend/zend.c",
			"line":	912,
			"primary_score":	999625,
			"second_score":	118612
		}, {
			"file":	"Zend/zend.c",
			"line":	915,
			"primary_score":	999625,
			"second_score":	118610
		}, {
			"file":	"Zend/zend.c",
			"line":	917,
			"primary_score":	999625,
			"second_score":	113425
		}, {
			"file":	"Zend/zend.c",
			"line":	918,
			"primary_score":	999625,
			"second_score":	113419
		}, {
			"file":	"Zend/zend.c",
			"line":	919,
			"primary_score":	999625,
			"second_score":	113249
		}, {
			"file":	"Zend/zend.c",
			"line":	921,
			"primary_score":	999625,
			"second_score":	113247
		}, {
			"file":	"Zend/zend.c",
			"line":	924,
			"primary_score":	999625,
			"second_score":	113220
		}, {
			"file":	"Zend/zend.c",
			"line":	925,
			"primary_score":	999625,
			"second_score":	113217
		}, {
			"file":	"Zend/zend.c",
			"line":	943,
			"primary_score":	999625,
			"second_score":	113219
		}, {
			"file":	"Zend/zend.c",
			"line":	944,
			"primary_score":	999625,
			"second_score":	113213
		}, {
			"file":	"Zend/zend.c",
			"line":	945,
			"primary_score":	999625,
			"second_score":	113210
		}, {
			"file":	"Zend/zend.c",
			"line":	971,
			"primary_score":	999889,
			"second_score":	121458
		}, {
			"file":	"Zend/zend.c",
			"line":	972,
			"primary_score":	999889,
			"second_score":	121457
		}, {
			"file":	"Zend/zend.c",
			"line":	973,
			"primary_score":	999889,
			"second_score":	121456
		}, {
			"file":	"Zend/zend.c",
			"line":	974,
			"primary_score":	999889,
			"second_score":	121455
		}, {
			"file":	"Zend/zend.c",
			"line":	975,
			"primary_score":	999889,
			"second_score":	121454
		}, {
			"file":	"Zend/zend.c",
			"line":	976,
			"primary_score":	999889,
			"second_score":	121453
		}, {
			"file":	"Zend/zend.c",
			"line":	977,
			"primary_score":	999889,
			"second_score":	121452
		}, {
			"file":	"Zend/zend.c",
			"line":	978,
			"primary_score":	999889,
			"second_score":	121451
		}, {
			"file":	"Zend/zend.c",
			"line":	979,
			"primary_score":	999889,
			"second_score":	121450
		}, {
			"file":	"Zend/zend.c",
			"line":	980,
			"primary_score":	999889,
			"second_score":	121449
		}, {
			"file":	"Zend/zend.c",
			"line":	981,
			"primary_score":	999889,
			"second_score":	121448
		}, {
			"file":	"Zend/zend.c",
			"line":	984,
			"primary_score":	999889,
			"second_score":	121447
		}, {
			"file":	"Zend/zend.c",
			"line":	1006,
			"primary_score":	999889,
			"second_score":	121445
		}, {
			"file":	"Zend/zend.c",
			"line":	1007,
			"primary_score":	999889,
			"second_score":	121443
		}, {
			"file":	"Zend/zend.c",
			"line":	1008,
			"primary_score":	999889,
			"second_score":	121440
		}, {
			"file":	"Zend/zend.c",
			"line":	1013,
			"primary_score":	999889,
			"second_score":	121436
		}, {
			"file":	"Zend/zend.c",
			"line":	1019,
			"primary_score":	999889,
			"second_score":	121435
		}, {
			"file":	"Zend/zend.c",
			"line":	1023,
			"primary_score":	999889,
			"second_score":	121434
		}, {
			"file":	"Zend/zend.c",
			"line":	1035,
			"primary_score":	999889,
			"second_score":	121433
		}, {
			"file":	"Zend/zend.c",
			"line":	1038,
			"primary_score":	999892,
			"second_score":	121432
		}, {
			"file":	"Zend/zend.c",
			"line":	1205,
			"primary_score":	999625,
			"second_score":	135739
		}, {
			"file":	"Zend/zend.c",
			"line":	1206,
			"primary_score":	999625,
			"second_score":	135738
		}, {
			"file":	"Zend/zend.c",
			"line":	1207,
			"primary_score":	999625,
			"second_score":	135737
		}, {
			"file":	"Zend/zend.c",
			"line":	1209,
			"primary_score":	999625,
			"second_score":	135615
		}, {
			"file":	"Zend/zend.c",
			"line":	1210,
			"primary_score":	999625,
			"second_score":	135536
		}, {
			"file":	"Zend/zend.c",
			"line":	1211,
			"primary_score":	999625,
			"second_score":	135535
		}, {
			"file":	"Zend/zend.c",
			"line":	1212,
			"primary_score":	999625,
			"second_score":	135534
		}, {
			"file":	"Zend/zend.c",
			"line":	1213,
			"primary_score":	999625,
			"second_score":	119399
		}, {
			"file":	"Zend/zend.c",
			"line":	1214,
			"primary_score":	999625,
			"second_score":	119397
		}, {
			"file":	"Zend/zend.c",
			"line":	1239,
			"primary_score":	999625,
			"second_score":	119396
		}, {
			"file":	"Zend/zend.c",
			"line":	1240,
			"primary_score":	999625,
			"second_score":	119042
		}, {
			"file":	"Zend/zend.c",
			"line":	1248,
			"primary_score":	999625,
			"second_score":	119020
		}, {
			"file":	"Zend/zend.c",
			"line":	1249,
			"primary_score":	999625,
			"second_score":	119019
		}, {
			"file":	"Zend/zend.c",
			"line":	1250,
			"primary_score":	999625,
			"second_score":	119018
		}, {
			"file":	"Zend/zend.c",
			"line":	1252,
			"primary_score":	999625,
			"second_score":	119017
		}, {
			"file":	"Zend/zend.c",
			"line":	1282,
			"primary_score":	999625,
			"second_score":	113317
		}, {
			"file":	"Zend/zend.h",
			"line":	379,
			"primary_score":	999625,
			"second_score":	15245
		}, {
			"file":	"Zend/zend.h",
			"line":	383,
			"primary_score":	999625,
			"second_score":	121794
		}, {
			"file":	"Zend/zend.h",
			"line":	387,
			"primary_score":	999625,
			"second_score":	124808
		}, {
			"file":	"Zend/zend.h",
			"line":	391,
			"primary_score":	999625,
			"second_score":	15247
		}, {
			"file":	"Zend/zend.h",
			"line":	395,
			"primary_score":	999625,
			"second_score":	122905
		}, {
			"file":	"Zend/zend.h",
			"line":	399,
			"primary_score":	999625,
			"second_score":	136359
		}, {
			"file":	"Zend/zend.h",
			"line":	403,
			"primary_score":	999625,
			"second_score":	17604
		}, {
			"file":	"Zend/zend_API.c",
			"line":	241,
			"primary_score":	999714,
			"second_score":	121553
		}, {
			"file":	"Zend/zend_API.c",
			"line":	242,
			"primary_score":	999714,
			"second_score":	121552
		}, {
			"file":	"Zend/zend_API.c",
			"line":	307,
			"primary_score":	999625,
			"second_score":	131438
		}, {
			"file":	"Zend/zend_API.c",
			"line":	308,
			"primary_score":	999625,
			"second_score":	131437
		}, {
			"file":	"Zend/zend_API.c",
			"line":	309,
			"primary_score":	999625,
			"second_score":	131436
		}, {
			"file":	"Zend/zend_API.c",
			"line":	312,
			"primary_score":	999625,
			"second_score":	131435
		}, {
			"file":	"Zend/zend_API.c",
			"line":	313,
			"primary_score":	999625,
			"second_score":	131434
		}, {
			"file":	"Zend/zend_API.c",
			"line":	315,
			"primary_score":	999625,
			"second_score":	131433
		}, {
			"file":	"Zend/zend_API.c",
			"line":	320,
			"primary_score":	999625,
			"second_score":	131432
		}, {
			"file":	"Zend/zend_API.c",
			"line":	325,
			"primary_score":	999625,
			"second_score":	131431
		}, {
			"file":	"Zend/zend_API.c",
			"line":	416,
			"primary_score":	999625,
			"second_score":	131430
		}, {
			"file":	"Zend/zend_API.c",
			"line":	417,
			"primary_score":	999625,
			"second_score":	131429
		}, {
			"file":	"Zend/zend_API.c",
			"line":	418,
			"primary_score":	999625,
			"second_score":	131428
		}, {
			"file":	"Zend/zend_API.c",
			"line":	431,
			"primary_score":	999625,
			"second_score":	131427
		}, {
			"file":	"Zend/zend_API.c",
			"line":	432,
			"primary_score":	999625,
			"second_score":	131426
		}, {
			"file":	"Zend/zend_API.c",
			"line":	438,
			"primary_score":	999625,
			"second_score":	131424
		}, {
			"file":	"Zend/zend_API.c",
			"line":	439,
			"primary_score":	999625,
			"second_score":	131423
		}, {
			"file":	"Zend/zend_API.c",
			"line":	440,
			"primary_score":	999625,
			"second_score":	131422
		}, {
			"file":	"Zend/zend_API.c",
			"line":	453,
			"primary_score":	999625,
			"second_score":	131421
		}, {
			"file":	"Zend/zend_API.c",
			"line":	544,
			"primary_score":	999956,
			"second_score":	131483
		}, {
			"file":	"Zend/zend_API.c",
			"line":	545,
			"primary_score":	999956,
			"second_score":	131482
		}, {
			"file":	"Zend/zend_API.c",
			"line":	547,
			"primary_score":	999956,
			"second_score":	131481
		}, {
			"file":	"Zend/zend_API.c",
			"line":	551,
			"primary_score":	999956,
			"second_score":	131480
		}, {
			"file":	"Zend/zend_API.c",
			"line":	553,
			"primary_score":	999959,
			"second_score":	131453
		}, {
			"file":	"Zend/zend_API.c",
			"line":	562,
			"primary_score":	999959,
			"second_score":	131452
		}, {
			"file":	"Zend/zend_API.c",
			"line":	643,
			"primary_score":	999625,
			"second_score":	133550
		}, {
			"file":	"Zend/zend_API.c",
			"line":	644,
			"primary_score":	999625,
			"second_score":	133549
		}, {
			"file":	"Zend/zend_API.c",
			"line":	647,
			"primary_score":	999625,
			"second_score":	133548
		}, {
			"file":	"Zend/zend_API.c",
			"line":	650,
			"primary_score":	999625,
			"second_score":	133547
		}, {
			"file":	"Zend/zend_API.c",
			"line":	656,
			"primary_score":	999625,
			"second_score":	131420
		}, {
			"file":	"Zend/zend_API.c",
			"line":	658,
			"primary_score":	999625,
			"second_score":	131419
		}, {
			"file":	"Zend/zend_API.c",
			"line":	664,
			"primary_score":	999625,
			"second_score":	131441
		}, {
			"file":	"Zend/zend_API.c",
			"line":	665,
			"primary_score":	999625,
			"second_score":	131440
		}, {
			"file":	"Zend/zend_API.c",
			"line":	667,
			"primary_score":	999625,
			"second_score":	131439
		}, {
			"file":	"Zend/zend_API.c",
			"line":	668,
			"primary_score":	999625,
			"second_score":	131418
		}, {
			"file":	"Zend/zend_API.c",
			"line":	688,
			"primary_score":	999625,
			"second_score":	131417
		}, {
			"file":	"Zend/zend_API.c",
			"line":	694,
			"primary_score":	999625,
			"second_score":	131537
		}, {
			"file":	"Zend/zend_API.c",
			"line":	695,
			"primary_score":	999625,
			"second_score":	131536
		}, {
			"file":	"Zend/zend_API.c",
			"line":	696,
			"primary_score":	999625,
			"second_score":	131535
		}, {
			"file":	"Zend/zend_API.c",
			"line":	697,
			"primary_score":	999625,
			"second_score":	131534
		}, {
			"file":	"Zend/zend_API.c",
			"line":	698,
			"primary_score":	999625,
			"second_score":	131533
		}, {
			"file":	"Zend/zend_API.c",
			"line":	699,
			"primary_score":	999625,
			"second_score":	131532
		}, {
			"file":	"Zend/zend_API.c",
			"line":	700,
			"primary_score":	999625,
			"second_score":	131531
		}, {
			"file":	"Zend/zend_API.c",
			"line":	701,
			"primary_score":	999625,
			"second_score":	131530
		}, {
			"file":	"Zend/zend_API.c",
			"line":	702,
			"primary_score":	999625,
			"second_score":	131529
		}, {
			"file":	"Zend/zend_API.c",
			"line":	703,
			"primary_score":	999625,
			"second_score":	131528
		}, {
			"file":	"Zend/zend_API.c",
			"line":	704,
			"primary_score":	999625,
			"second_score":	131527
		}, {
			"file":	"Zend/zend_API.c",
			"line":	706,
			"primary_score":	999625,
			"second_score":	131526
		}, {
			"file":	"Zend/zend_API.c",
			"line":	707,
			"primary_score":	999625,
			"second_score":	131510
		}, {
			"file":	"Zend/zend_API.c",
			"line":	708,
			"primary_score":	999625,
			"second_score":	131509
		}, {
			"file":	"Zend/zend_API.c",
			"line":	718,
			"primary_score":	999625,
			"second_score":	131508
		}, {
			"file":	"Zend/zend_API.c",
			"line":	722,
			"primary_score":	999625,
			"second_score":	131517
		}, {
			"file":	"Zend/zend_API.c",
			"line":	764,
			"primary_score":	999625,
			"second_score":	131507
		}, {
			"file":	"Zend/zend_API.c",
			"line":	765,
			"primary_score":	999625,
			"second_score":	120250
		}, {
			"file":	"Zend/zend_API.c",
			"line":	768,
			"primary_score":	999625,
			"second_score":	131506
		}, {
			"file":	"Zend/zend_API.c",
			"line":	774,
			"primary_score":	999625,
			"second_score":	131505
		}, {
			"file":	"Zend/zend_API.c",
			"line":	790,
			"primary_score":	999625,
			"second_score":	131504
		}, {
			"file":	"Zend/zend_API.c",
			"line":	792,
			"primary_score":	999625,
			"second_score":	131502
		}, {
			"file":	"Zend/zend_API.c",
			"line":	798,
			"primary_score":	999625,
			"second_score":	131501
		}, {
			"file":	"Zend/zend_API.c",
			"line":	799,
			"primary_score":	999625,
			"second_score":	131500
		}, {
			"file":	"Zend/zend_API.c",
			"line":	800,
			"primary_score":	999625,
			"second_score":	131446
		}, {
			"file":	"Zend/zend_API.c",
			"line":	801,
			"primary_score":	999625,
			"second_score":	122602
		}, {
			"file":	"Zend/zend_API.c",
			"line":	804,
			"primary_score":	999625,
			"second_score":	131445
		}, {
			"file":	"Zend/zend_API.c",
			"line":	834,
			"primary_score":	999625,
			"second_score":	131444
		}, {
			"file":	"Zend/zend_API.c",
			"line":	836,
			"primary_score":	999625,
			"second_score":	131442
		}, {
			"file":	"Zend/zend_API.c",
			"line":	844,
			"primary_score":	999625,
			"second_score":	131416
		}, {
			"file":	"Zend/zend_API.c",
			"line":	847,
			"primary_score":	999625,
			"second_score":	131415
		}, {
			"file":	"Zend/zend_API.c",
			"line":	881,
			"primary_score":	999625,
			"second_score":	131545
		}, {
			"file":	"Zend/zend_API.c",
			"line":	882,
			"primary_score":	999625,
			"second_score":	131544
		}, {
			"file":	"Zend/zend_API.c",
			"line":	884,
			"primary_score":	999625,
			"second_score":	131543
		}, {
			"file":	"Zend/zend_API.c",
			"line":	886,
			"primary_score":	999625,
			"second_score":	131539
		}, {
			"file":	"Zend/zend_API.c",
			"line":	887,
			"primary_score":	999625,
			"second_score":	131538
		}, {
			"file":	"Zend/zend_API.c",
			"line":	888,
			"primary_score":	999625,
			"second_score":	131414
		}, {
			"file":	"Zend/zend_API.c",
			"line":	890,
			"primary_score":	999625,
			"second_score":	131413
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1018,
			"primary_score":	999742,
			"second_score":	132290
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1019,
			"primary_score":	999742,
			"second_score":	132289
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1020,
			"primary_score":	999742,
			"second_score":	132288
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1021,
			"primary_score":	999742,
			"second_score":	132287
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1023,
			"primary_score":	999742,
			"second_score":	132286
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1024,
			"primary_score":	999742,
			"second_score":	132285
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1026,
			"primary_score":	999742,
			"second_score":	132198
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1027,
			"primary_score":	999912,
			"second_score":	132197
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1028,
			"primary_score":	999912,
			"second_score":	132196
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1032,
			"primary_score":	999742,
			"second_score":	132186
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1068,
			"primary_score":	999742,
			"second_score":	132185
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1072,
			"primary_score":	999742,
			"second_score":	132184
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1073,
			"primary_score":	999742,
			"second_score":	132183
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1080,
			"primary_score":	999754,
			"second_score":	132066
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1082,
			"primary_score":	999754,
			"second_score":	132065
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1083,
			"primary_score":	999913,
			"second_score":	132064
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1084,
			"primary_score":	999913,
			"second_score":	132042
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1085,
			"primary_score":	999913,
			"second_score":	132041
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1086,
			"primary_score":	999913,
			"second_score":	132040
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1087,
			"primary_score":	999913,
			"second_score":	132039
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1090,
			"primary_score":	999913,
			"second_score":	132037
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1101,
			"primary_score":	999745,
			"second_score":	132293
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1103,
			"primary_score":	999745,
			"second_score":	132292
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1108,
			"primary_score":	999745,
			"second_score":	132291
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1110,
			"primary_score":	999745,
			"second_score":	132182
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1111,
			"primary_score":	999745,
			"second_score":	132181
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1120,
			"primary_score":	999766,
			"second_score":	132180
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1122,
			"primary_score":	999745,
			"second_score":	132017
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1128,
			"primary_score":	999746,
			"second_score":	132294
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1368,
			"primary_score":	999625,
			"second_score":	123326
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1370,
			"primary_score":	999625,
			"second_score":	123325
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1371,
			"primary_score":	999625,
			"second_score":	123215
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1373,
			"primary_score":	999625,
			"second_score":	123100
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1779,
			"primary_score":	999625,
			"second_score":	103279
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1780,
			"primary_score":	999625,
			"second_score":	103278
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1781,
			"primary_score":	999625,
			"second_score":	103277
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2171,
			"primary_score":	999625,
			"second_score":	50016
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2172,
			"primary_score":	999625,
			"second_score":	50015
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2173,
			"primary_score":	999625,
			"second_score":	50014
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2175,
			"primary_score":	999625,
			"second_score":	50013
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2176,
			"primary_score":	999625,
			"second_score":	50012
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2178,
			"primary_score":	999625,
			"second_score":	50011
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2179,
			"primary_score":	999625,
			"second_score":	47185
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2185,
			"primary_score":	999625,
			"second_score":	47184
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2186,
			"primary_score":	999625,
			"second_score":	47136
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2187,
			"primary_score":	999625,
			"second_score":	47135
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2213,
			"primary_score":	999625,
			"second_score":	50023
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2215,
			"primary_score":	999625,
			"second_score":	50022
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2220,
			"primary_score":	999625,
			"second_score":	50021
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2224,
			"primary_score":	999625,
			"second_score":	53263
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2228,
			"primary_score":	999625,
			"second_score":	50020
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2232,
			"primary_score":	999625,
			"second_score":	52580
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2233,
			"primary_score":	999625,
			"second_score":	53648
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2238,
			"primary_score":	999625,
			"second_score":	50019
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2239,
			"primary_score":	999625,
			"second_score":	50018
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2240,
			"primary_score":	999625,
			"second_score":	50017
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2245,
			"primary_score":	999625,
			"second_score":	47134
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2284,
			"primary_score":	999625,
			"second_score":	119425
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2286,
			"primary_score":	999625,
			"second_score":	119424
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2287,
			"primary_score":	999625,
			"second_score":	119418
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2290,
			"primary_score":	999625,
			"second_score":	119417
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2292,
			"primary_score":	999625,
			"second_score":	119416
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2293,
			"primary_score":	999625,
			"second_score":	118834
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2295,
			"primary_score":	999625,
			"second_score":	118833
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2296,
			"primary_score":	999625,
			"second_score":	118827
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2299,
			"primary_score":	999625,
			"second_score":	118826
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2305,
			"primary_score":	999625,
			"second_score":	114786
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2307,
			"primary_score":	999625,
			"second_score":	114785
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2331,
			"primary_score":	999625,
			"second_score":	113201
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2335,
			"primary_score":	999625,
			"second_score":	113200
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2337,
			"primary_score":	999625,
			"second_score":	113199
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3782,
			"primary_score":	999868,
			"second_score":	131561
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3783,
			"primary_score":	999868,
			"second_score":	131560
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3784,
			"primary_score":	999868,
			"second_score":	131559
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3785,
			"primary_score":	999868,
			"second_score":	131558
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3793,
			"primary_score":	999868,
			"second_score":	131563
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3794,
			"primary_score":	999868,
			"second_score":	131562
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3795,
			"primary_score":	999868,
			"second_score":	131557
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3800,
			"primary_score":	999868,
			"second_score":	131556
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3801,
			"primary_score":	999868,
			"second_score":	131555
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3807,
			"primary_score":	999868,
			"second_score":	122008
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3808,
			"primary_score":	999868,
			"second_score":	122007
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3809,
			"primary_score":	999868,
			"second_score":	122006
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3814,
			"primary_score":	999869,
			"second_score":	122005
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3817,
			"primary_score":	999868,
			"second_score":	122004
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	144,
			"primary_score":	999625,
			"second_score":	3194
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	293,
			"primary_score":	999625,
			"second_score":	3197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	669,
			"primary_score":	999625,
			"second_score":	112724
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	671,
			"primary_score":	999625,
			"second_score":	112723
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	672,
			"primary_score":	999625,
			"second_score":	112722
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	695,
			"primary_score":	999625,
			"second_score":	112782
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	697,
			"primary_score":	999625,
			"second_score":	112781
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	698,
			"primary_score":	999625,
			"second_score":	112780
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	721,
			"primary_score":	999625,
			"second_score":	112731
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	722,
			"primary_score":	999625,
			"second_score":	112730
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	724,
			"primary_score":	999625,
			"second_score":	112729
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	726,
			"primary_score":	999625,
			"second_score":	112728
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	727,
			"primary_score":	999625,
			"second_score":	112727
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	728,
			"primary_score":	999625,
			"second_score":	112726
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	730,
			"primary_score":	999625,
			"second_score":	112725
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	731,
			"primary_score":	999625,
			"second_score":	112721
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	732,
			"primary_score":	999625,
			"second_score":	112720
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	733,
			"primary_score":	999625,
			"second_score":	112719
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	734,
			"primary_score":	999625,
			"second_score":	112718
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	735,
			"primary_score":	999625,
			"second_score":	112717
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	736,
			"primary_score":	999625,
			"second_score":	112716
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	737,
			"primary_score":	999625,
			"second_score":	112715
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	739,
			"primary_score":	999625,
			"second_score":	116533
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	741,
			"primary_score":	999625,
			"second_score":	116532
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	742,
			"primary_score":	999625,
			"second_score":	116531
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	744,
			"primary_score":	999625,
			"second_score":	116530
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	745,
			"primary_score":	999625,
			"second_score":	116529
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	746,
			"primary_score":	999625,
			"second_score":	116528
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	747,
			"primary_score":	999625,
			"second_score":	116527
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	748,
			"primary_score":	999625,
			"second_score":	116526
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	749,
			"primary_score":	999625,
			"second_score":	116525
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	750,
			"primary_score":	999625,
			"second_score":	116524
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	764,
			"primary_score":	999625,
			"second_score":	127063
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	766,
			"primary_score":	999625,
			"second_score":	127062
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	768,
			"primary_score":	999625,
			"second_score":	127061
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	769,
			"primary_score":	999625,
			"second_score":	127060
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	770,
			"primary_score":	999625,
			"second_score":	127059
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	772,
			"primary_score":	999625,
			"second_score":	127058
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	774,
			"primary_score":	999625,
			"second_score":	127057
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	775,
			"primary_score":	999625,
			"second_score":	127056
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	776,
			"primary_score":	999625,
			"second_score":	127055
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	782,
			"primary_score":	999625,
			"second_score":	112768
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	783,
			"primary_score":	999625,
			"second_score":	112767
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	785,
			"primary_score":	999625,
			"second_score":	112766
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	787,
			"primary_score":	999625,
			"second_score":	112765
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	788,
			"primary_score":	999625,
			"second_score":	112764
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	791,
			"primary_score":	999625,
			"second_score":	112763
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	796,
			"primary_score":	999625,
			"second_score":	112762
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	797,
			"primary_score":	999625,
			"second_score":	112761
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	798,
			"primary_score":	999625,
			"second_score":	112760
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	799,
			"primary_score":	999625,
			"second_score":	112759
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	801,
			"primary_score":	999625,
			"second_score":	112755
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	802,
			"primary_score":	999625,
			"second_score":	112753
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	803,
			"primary_score":	999625,
			"second_score":	112752
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	804,
			"primary_score":	999625,
			"second_score":	112751
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	829,
			"primary_score":	999625,
			"second_score":	126852
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	834,
			"primary_score":	999625,
			"second_score":	126851
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	835,
			"primary_score":	999625,
			"second_score":	126850
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	837,
			"primary_score":	999625,
			"second_score":	126849
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	838,
			"primary_score":	999625,
			"second_score":	126848
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	839,
			"primary_score":	999625,
			"second_score":	126847
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	841,
			"primary_score":	999625,
			"second_score":	126846
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	842,
			"primary_score":	999625,
			"second_score":	126845
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	886,
			"primary_score":	999625,
			"second_score":	113106
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	887,
			"primary_score":	999625,
			"second_score":	113105
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	889,
			"primary_score":	999625,
			"second_score":	113104
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	890,
			"primary_score":	999625,
			"second_score":	113103
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	892,
			"primary_score":	999625,
			"second_score":	113102
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	893,
			"primary_score":	999625,
			"second_score":	113101
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	900,
			"primary_score":	999625,
			"second_score":	113100
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	901,
			"primary_score":	999625,
			"second_score":	113099
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	902,
			"primary_score":	999625,
			"second_score":	112846
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	903,
			"primary_score":	999625,
			"second_score":	112845
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	904,
			"primary_score":	999625,
			"second_score":	112844
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	905,
			"primary_score":	999625,
			"second_score":	112843
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	907,
			"primary_score":	999625,
			"second_score":	112842
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	908,
			"primary_score":	999625,
			"second_score":	112841
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1589,
			"primary_score":	999625,
			"second_score":	3212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1590,
			"primary_score":	999625,
			"second_score":	3211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1591,
			"primary_score":	999625,
			"second_score":	3210
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1592,
			"primary_score":	999625,
			"second_score":	3209
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1594,
			"primary_score":	999625,
			"second_score":	3208
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1598,
			"primary_score":	999625,
			"second_score":	3207
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1604,
			"primary_score":	999625,
			"second_score":	3206
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1659,
			"primary_score":	999625,
			"second_score":	3205
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1660,
			"primary_score":	999625,
			"second_score":	3204
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1661,
			"primary_score":	999625,
			"second_score":	3203
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1662,
			"primary_score":	999625,
			"second_score":	3202
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1663,
			"primary_score":	999625,
			"second_score":	3201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1664,
			"primary_score":	999625,
			"second_score":	3200
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1665,
			"primary_score":	999625,
			"second_score":	3199
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1666,
			"primary_score":	999625,
			"second_score":	3198
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1668,
			"primary_score":	999625,
			"second_score":	3196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1669,
			"primary_score":	999625,
			"second_score":	3195
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1670,
			"primary_score":	999625,
			"second_score":	3193
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1671,
			"primary_score":	999625,
			"second_score":	3192
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1674,
			"primary_score":	999625,
			"second_score":	113112
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1676,
			"primary_score":	999625,
			"second_score":	113111
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1677,
			"primary_score":	999625,
			"second_score":	113110
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1682,
			"primary_score":	999625,
			"second_score":	113109
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1695,
			"primary_score":	999625,
			"second_score":	113108
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1699,
			"primary_score":	999625,
			"second_score":	113107
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1700,
			"primary_score":	999625,
			"second_score":	112840
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1701,
			"primary_score":	999625,
			"second_score":	112839
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1702,
			"primary_score":	999625,
			"second_score":	112838
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1707,
			"primary_score":	999625,
			"second_score":	112837
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1708,
			"primary_score":	999625,
			"second_score":	112836
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1709,
			"primary_score":	999625,
			"second_score":	112835
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1711,
			"primary_score":	999625,
			"second_score":	112834
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1712,
			"primary_score":	999625,
			"second_score":	112833
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1714,
			"primary_score":	999625,
			"second_score":	112832
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1715,
			"primary_score":	999625,
			"second_score":	112831
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1716,
			"primary_score":	999625,
			"second_score":	112827
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1717,
			"primary_score":	999625,
			"second_score":	112821
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1719,
			"primary_score":	999625,
			"second_score":	112803
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1720,
			"primary_score":	999625,
			"second_score":	112802
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1722,
			"primary_score":	999625,
			"second_score":	112707
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1792,
			"primary_score":	999625,
			"second_score":	112792
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1793,
			"primary_score":	999625,
			"second_score":	112791
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1794,
			"primary_score":	999625,
			"second_score":	112787
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1795,
			"primary_score":	999625,
			"second_score":	112786
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1797,
			"primary_score":	999625,
			"second_score":	112785
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1801,
			"primary_score":	999625,
			"second_score":	112784
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1854,
			"primary_score":	999625,
			"second_score":	112783
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1855,
			"primary_score":	999625,
			"second_score":	112779
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1860,
			"primary_score":	999625,
			"second_score":	112778
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1865,
			"primary_score":	999625,
			"second_score":	112801
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1866,
			"primary_score":	999625,
			"second_score":	112800
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1867,
			"primary_score":	999625,
			"second_score":	112799
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1868,
			"primary_score":	999625,
			"second_score":	112798
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1869,
			"primary_score":	999625,
			"second_score":	112797
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1870,
			"primary_score":	999625,
			"second_score":	112796
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1871,
			"primary_score":	999625,
			"second_score":	112795
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1873,
			"primary_score":	999625,
			"second_score":	112794
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1874,
			"primary_score":	999625,
			"second_score":	120125
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1875,
			"primary_score":	999625,
			"second_score":	120124
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1877,
			"primary_score":	999625,
			"second_score":	120123
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1881,
			"primary_score":	999625,
			"second_score":	120122
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1887,
			"primary_score":	999625,
			"second_score":	120146
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1888,
			"primary_score":	999625,
			"second_score":	120145
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1889,
			"primary_score":	999625,
			"second_score":	120144
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1890,
			"primary_score":	999625,
			"second_score":	120143
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1891,
			"primary_score":	999625,
			"second_score":	120142
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1892,
			"primary_score":	999625,
			"second_score":	120141
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1899,
			"primary_score":	999625,
			"second_score":	122514
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1900,
			"primary_score":	999625,
			"second_score":	122513
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1902,
			"primary_score":	999625,
			"second_score":	126868
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1903,
			"primary_score":	999625,
			"second_score":	126864
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1907,
			"primary_score":	999625,
			"second_score":	126863
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1915,
			"primary_score":	999625,
			"second_score":	112793
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1917,
			"primary_score":	999625,
			"second_score":	112777
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1934,
			"primary_score":	999625,
			"second_score":	112776
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1995,
			"primary_score":	999625,
			"second_score":	112775
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1997,
			"primary_score":	999625,
			"second_score":	112774
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1998,
			"primary_score":	999625,
			"second_score":	112773
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1999,
			"primary_score":	999625,
			"second_score":	112772
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2000,
			"primary_score":	999625,
			"second_score":	112771
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2001,
			"primary_score":	999625,
			"second_score":	112769
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2003,
			"primary_score":	999625,
			"second_score":	112750
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2006,
			"primary_score":	999625,
			"second_score":	112749
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2008,
			"primary_score":	999625,
			"second_score":	112748
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2009,
			"primary_score":	999625,
			"second_score":	133380
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2010,
			"primary_score":	999625,
			"second_score":	133379
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2012,
			"primary_score":	999625,
			"second_score":	112747
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2015,
			"primary_score":	999625,
			"second_score":	112746
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2016,
			"primary_score":	999625,
			"second_score":	112740
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2017,
			"primary_score":	999625,
			"second_score":	112739
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2020,
			"primary_score":	999625,
			"second_score":	112733
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2021,
			"primary_score":	999625,
			"second_score":	112732
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2027,
			"primary_score":	999625,
			"second_score":	112714
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2029,
			"primary_score":	999625,
			"second_score":	112713
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2030,
			"primary_score":	999625,
			"second_score":	112712
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2031,
			"primary_score":	999625,
			"second_score":	112711
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2034,
			"primary_score":	999625,
			"second_score":	112710
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2036,
			"primary_score":	999625,
			"second_score":	112708
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2042,
			"primary_score":	999625,
			"second_score":	113166
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2043,
			"primary_score":	999625,
			"second_score":	113165
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2044,
			"primary_score":	999625,
			"second_score":	113164
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2046,
			"primary_score":	999625,
			"second_score":	113163
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2050,
			"primary_score":	999625,
			"second_score":	113162
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2051,
			"primary_score":	999625,
			"second_score":	113161
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2052,
			"primary_score":	999625,
			"second_score":	113160
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2059,
			"primary_score":	999625,
			"second_score":	113159
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2060,
			"primary_score":	999625,
			"second_score":	113158
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2061,
			"primary_score":	999625,
			"second_score":	113157
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2063,
			"primary_score":	999625,
			"second_score":	113156
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2064,
			"primary_score":	999625,
			"second_score":	113155
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2065,
			"primary_score":	999625,
			"second_score":	113154
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2066,
			"primary_score":	999625,
			"second_score":	113153
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2072,
			"primary_score":	999625,
			"second_score":	113152
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2076,
			"primary_score":	999625,
			"second_score":	113489
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2078,
			"primary_score":	999625,
			"second_score":	113487
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2080,
			"primary_score":	999625,
			"second_score":	113486
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2081,
			"primary_score":	999625,
			"second_score":	113485
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2085,
			"primary_score":	999625,
			"second_score":	113484
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2086,
			"primary_score":	999625,
			"second_score":	113483
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2087,
			"primary_score":	999625,
			"second_score":	113482
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2088,
			"primary_score":	999625,
			"second_score":	113463
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2090,
			"primary_score":	999625,
			"second_score":	113462
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2094,
			"primary_score":	999625,
			"second_score":	113461
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2095,
			"primary_score":	999625,
			"second_score":	113455
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2097,
			"primary_score":	999625,
			"second_score":	113437
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2102,
			"primary_score":	999625,
			"second_score":	124412
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2103,
			"primary_score":	999625,
			"second_score":	124411
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2104,
			"primary_score":	999625,
			"second_score":	124410
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2105,
			"primary_score":	999625,
			"second_score":	124409
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2106,
			"primary_score":	999625,
			"second_score":	124408
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2108,
			"primary_score":	999625,
			"second_score":	124407
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2109,
			"primary_score":	999625,
			"second_score":	124406
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2111,
			"primary_score":	999625,
			"second_score":	125505
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2112,
			"primary_score":	999625,
			"second_score":	125504
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2113,
			"primary_score":	999625,
			"second_score":	125503
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2114,
			"primary_score":	999625,
			"second_score":	125502
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2116,
			"primary_score":	999625,
			"second_score":	125501
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2120,
			"primary_score":	999625,
			"second_score":	125500
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2121,
			"primary_score":	999625,
			"second_score":	136203
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2123,
			"primary_score":	999625,
			"second_score":	136202
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2124,
			"primary_score":	999625,
			"second_score":	136201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2126,
			"primary_score":	999625,
			"second_score":	136200
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2127,
			"primary_score":	999625,
			"second_score":	136198
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2128,
			"primary_score":	999625,
			"second_score":	136197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2129,
			"primary_score":	999625,
			"second_score":	136196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2130,
			"primary_score":	999625,
			"second_score":	136195
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2134,
			"primary_score":	999625,
			"second_score":	136176
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2135,
			"primary_score":	999625,
			"second_score":	136170
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2137,
			"primary_score":	999625,
			"second_score":	136169
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2140,
			"primary_score":	999625,
			"second_score":	136163
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2141,
			"primary_score":	999625,
			"second_score":	136145
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2142,
			"primary_score":	999625,
			"second_score":	136144
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2144,
			"primary_score":	999625,
			"second_score":	136142
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2145,
			"primary_score":	999625,
			"second_score":	136141
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2149,
			"primary_score":	999625,
			"second_score":	130367
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2153,
			"primary_score":	999625,
			"second_score":	126535
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2154,
			"primary_score":	999625,
			"second_score":	126534
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2160,
			"primary_score":	999625,
			"second_score":	126533
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2161,
			"primary_score":	999625,
			"second_score":	126532
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2162,
			"primary_score":	999625,
			"second_score":	126531
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2163,
			"primary_score":	999625,
			"second_score":	126530
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2165,
			"primary_score":	999625,
			"second_score":	126529
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2170,
			"primary_score":	999625,
			"second_score":	126528
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2173,
			"primary_score":	999625,
			"second_score":	126527
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2175,
			"primary_score":	999625,
			"second_score":	126526
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2176,
			"primary_score":	999625,
			"second_score":	126525
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2178,
			"primary_score":	999625,
			"second_score":	126524
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2179,
			"primary_score":	999625,
			"second_score":	126523
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2180,
			"primary_score":	999625,
			"second_score":	126522
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2187,
			"primary_score":	999625,
			"second_score":	126521
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2192,
			"primary_score":	999625,
			"second_score":	130366
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2194,
			"primary_score":	999625,
			"second_score":	130365
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2195,
			"primary_score":	999625,
			"second_score":	121988
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2196,
			"primary_score":	999625,
			"second_score":	121987
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2197,
			"primary_score":	999625,
			"second_score":	121985
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2198,
			"primary_score":	999625,
			"second_score":	121984
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2199,
			"primary_score":	999625,
			"second_score":	121983
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2201,
			"primary_score":	999625,
			"second_score":	121982
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2202,
			"primary_score":	999625,
			"second_score":	121980
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2204,
			"primary_score":	999625,
			"second_score":	121961
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2208,
			"primary_score":	999625,
			"second_score":	121960
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2211,
			"primary_score":	999625,
			"second_score":	121959
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2212,
			"primary_score":	999625,
			"second_score":	121953
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2213,
			"primary_score":	999625,
			"second_score":	121952
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2216,
			"primary_score":	999625,
			"second_score":	121946
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2220,
			"primary_score":	999625,
			"second_score":	121945
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2223,
			"primary_score":	999625,
			"second_score":	121927
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2224,
			"primary_score":	999625,
			"second_score":	121926
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2225,
			"primary_score":	999625,
			"second_score":	121925
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2226,
			"primary_score":	999625,
			"second_score":	121924
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2228,
			"primary_score":	999625,
			"second_score":	121923
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2229,
			"primary_score":	999625,
			"second_score":	121921
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2236,
			"primary_score":	999625,
			"second_score":	146070
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2334,
			"primary_score":	999625,
			"second_score":	146069
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2338,
			"primary_score":	999625,
			"second_score":	145968
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2340,
			"primary_score":	999625,
			"second_score":	145967
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2341,
			"primary_score":	999625,
			"second_score":	145951
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2398,
			"primary_score":	999625,
			"second_score":	120136
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2400,
			"primary_score":	999625,
			"second_score":	120135
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2403,
			"primary_score":	999625,
			"second_score":	120134
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2408,
			"primary_score":	999625,
			"second_score":	113169
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2410,
			"primary_score":	999625,
			"second_score":	113168
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2414,
			"primary_score":	999625,
			"second_score":	113167
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2419,
			"primary_score":	999625,
			"second_score":	124415
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2421,
			"primary_score":	999625,
			"second_score":	124414
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2424,
			"primary_score":	999625,
			"second_score":	124413
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2459,
			"primary_score":	999625,
			"second_score":	132525
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2460,
			"primary_score":	999625,
			"second_score":	132524
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2462,
			"primary_score":	999625,
			"second_score":	132523
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2468,
			"primary_score":	999625,
			"second_score":	132522
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2472,
			"primary_score":	999625,
			"second_score":	132521
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2507,
			"primary_score":	999625,
			"second_score":	133325
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2517,
			"primary_score":	999625,
			"second_score":	121309
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2528,
			"primary_score":	999625,
			"second_score":	133327
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2530,
			"primary_score":	999625,
			"second_score":	133326
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2531,
			"primary_score":	999625,
			"second_score":	133217
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2534,
			"primary_score":	999625,
			"second_score":	133216
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2535,
			"primary_score":	999625,
			"second_score":	133215
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2554,
			"primary_score":	999625,
			"second_score":	131319
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2556,
			"primary_score":	999625,
			"second_score":	131318
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2557,
			"primary_score":	999625,
			"second_score":	131296
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2560,
			"primary_score":	999625,
			"second_score":	131295
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2561,
			"primary_score":	999625,
			"second_score":	131294
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2562,
			"primary_score":	999625,
			"second_score":	131293
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2593,
			"primary_score":	999989,
			"second_score":	119452
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2594,
			"primary_score":	999989,
			"second_score":	119451
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2615,
			"primary_score":	999625,
			"second_score":	3213
		}, {
			"file":	"Zend/zend_alloc.h",
			"line":	95,
			"primary_score":	999625,
			"second_score":	147597
		}, {
			"file":	"Zend/zend_alloc.h",
			"line":	96,
			"primary_score":	999625,
			"second_score":	147596
		}, {
			"file":	"Zend/zend_alloc.h",
			"line":	97,
			"primary_score":	999625,
			"second_score":	147595
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	339,
			"primary_score":	999625,
			"second_score":	123875
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1285,
			"primary_score":	999625,
			"second_score":	120900
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1286,
			"primary_score":	999625,
			"second_score":	120899
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1287,
			"primary_score":	999625,
			"second_score":	120898
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1288,
			"primary_score":	999625,
			"second_score":	120897
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1289,
			"primary_score":	999625,
			"second_score":	120896
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1291,
			"primary_score":	999625,
			"second_score":	120895
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1295,
			"primary_score":	999625,
			"second_score":	120828
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1298,
			"primary_score":	999625,
			"second_score":	120652
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1299,
			"primary_score":	999625,
			"second_score":	120651
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1304,
			"primary_score":	999625,
			"second_score":	120650
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1306,
			"primary_score":	999625,
			"second_score":	120610
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1312,
			"primary_score":	999625,
			"second_score":	120591
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1317,
			"primary_score":	999625,
			"second_score":	120590
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1841,
			"primary_score":	999625,
			"second_score":	123328
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1842,
			"primary_score":	999625,
			"second_score":	123327
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1843,
			"primary_score":	999625,
			"second_score":	122952
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1871,
			"primary_score":	999625,
			"second_score":	132750
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1873,
			"primary_score":	999625,
			"second_score":	132749
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1877,
			"primary_score":	999625,
			"second_score":	132711
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1879,
			"primary_score":	999625,
			"second_score":	132609
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1882,
			"primary_score":	999625,
			"second_score":	132608
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	130,
			"primary_score":	999625,
			"second_score":	18868
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	207,
			"primary_score":	999625,
			"second_score":	135600
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	209,
			"primary_score":	999625,
			"second_score":	135599
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	228,
			"primary_score":	999625,
			"second_score":	113418
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	229,
			"primary_score":	999625,
			"second_score":	113393
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	230,
			"primary_score":	999625,
			"second_score":	113368
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	231,
			"primary_score":	999625,
			"second_score":	113364
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	232,
			"primary_score":	999625,
			"second_score":	113360
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	233,
			"primary_score":	999625,
			"second_score":	113335
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	234,
			"primary_score":	999625,
			"second_score":	113331
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	235,
			"primary_score":	999625,
			"second_score":	113327
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	236,
			"primary_score":	999625,
			"second_score":	113257
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	237,
			"primary_score":	999625,
			"second_score":	113253
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	261,
			"primary_score":	999625,
			"second_score":	135755
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	282,
			"primary_score":	999625,
			"second_score":	124609
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	289,
			"primary_score":	999625,
			"second_score":	137155
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	295,
			"primary_score":	999643,
			"second_score":	138918
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	296,
			"primary_score":	999643,
			"second_score":	138917
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	298,
			"primary_score":	999643,
			"second_score":	138898
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	299,
			"primary_score":	999647,
			"second_score":	138893
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	303,
			"primary_score":	999651,
			"second_score":	138892
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	304,
			"primary_score":	999651,
			"second_score":	138871
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	306,
			"primary_score":	999745,
			"second_score":	138894
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	308,
			"primary_score":	999643,
			"second_score":	155362
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	309,
			"primary_score":	999643,
			"second_score":	155361
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	310,
			"primary_score":	999643,
			"second_score":	155360
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	311,
			"primary_score":	999643,
			"second_score":	160825
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	312,
			"primary_score":	999643,
			"second_score":	160824
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	314,
			"primary_score":	999643,
			"second_score":	155359
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	315,
			"primary_score":	999643,
			"second_score":	155279
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	316,
			"primary_score":	999643,
			"second_score":	155278
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	317,
			"primary_score":	999643,
			"second_score":	155277
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	334,
			"primary_score":	999625,
			"second_score":	136367
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	335,
			"primary_score":	999625,
			"second_score":	136366
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	336,
			"primary_score":	999625,
			"second_score":	136365
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	337,
			"primary_score":	999625,
			"second_score":	144498
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	338,
			"primary_score":	999625,
			"second_score":	144497
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	340,
			"primary_score":	999625,
			"second_score":	136364
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	341,
			"primary_score":	999625,
			"second_score":	137216
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	342,
			"primary_score":	999625,
			"second_score":	137215
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	344,
			"primary_score":	999625,
			"second_score":	137214
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	347,
			"primary_score":	999625,
			"second_score":	136363
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	348,
			"primary_score":	999625,
			"second_score":	136362
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	349,
			"primary_score":	999625,
			"second_score":	136360
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	350,
			"primary_score":	999625,
			"second_score":	136358
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	351,
			"primary_score":	999625,
			"second_score":	136357
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	352,
			"primary_score":	999625,
			"second_score":	136356
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	358,
			"primary_score":	999766,
			"second_score":	137970
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	359,
			"primary_score":	999766,
			"second_score":	137969
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	360,
			"primary_score":	999766,
			"second_score":	137968
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	361,
			"primary_score":	999766,
			"second_score":	137967
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	363,
			"primary_score":	999766,
			"second_score":	137966
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	369,
			"primary_score":	999766,
			"second_score":	137965
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	372,
			"primary_score":	999766,
			"second_score":	137944
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	373,
			"primary_score":	999766,
			"second_score":	137859
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	374,
			"primary_score":	999766,
			"second_score":	137852
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	375,
			"primary_score":	999766,
			"second_score":	137792
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	377,
			"primary_score":	999766,
			"second_score":	137789
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	416,
			"primary_score":	999740,
			"second_score":	141970
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	417,
			"primary_score":	999740,
			"second_score":	141969
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	418,
			"primary_score":	999740,
			"second_score":	141968
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	419,
			"primary_score":	999740,
			"second_score":	141967
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	420,
			"primary_score":	999740,
			"second_score":	141966
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	422,
			"primary_score":	999740,
			"second_score":	141965
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	428,
			"primary_score":	999740,
			"second_score":	141964
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	431,
			"primary_score":	999740,
			"second_score":	141899
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	435,
			"primary_score":	999740,
			"second_score":	141898
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	436,
			"primary_score":	999740,
			"second_score":	141897
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	438,
			"primary_score":	999740,
			"second_score":	141777
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	439,
			"primary_score":	999740,
			"second_score":	141770
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	440,
			"primary_score":	999740,
			"second_score":	141703
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	442,
			"primary_score":	999740,
			"second_score":	141700
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	444,
			"primary_score":	999740,
			"second_score":	141698
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	545,
			"primary_score":	999625,
			"second_score":	137376
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	547,
			"primary_score":	999625,
			"second_score":	137375
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	631,
			"primary_score":	999644,
			"second_score":	138958
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	632,
			"primary_score":	999644,
			"second_score":	138957
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	633,
			"primary_score":	999644,
			"second_score":	138956
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	635,
			"primary_score":	999644,
			"second_score":	138955
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	636,
			"primary_score":	999644,
			"second_score":	138954
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	639,
			"primary_score":	999644,
			"second_score":	138953
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	644,
			"primary_score":	999644,
			"second_score":	138920
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	645,
			"primary_score":	999644,
			"second_score":	138919
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	646,
			"primary_score":	999644,
			"second_score":	138870
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	647,
			"primary_score":	999644,
			"second_score":	138869
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	648,
			"primary_score":	999644,
			"second_score":	138868
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	684,
			"primary_score":	999644,
			"second_score":	138959
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	840,
			"primary_score":	999625,
			"second_score":	134023
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	842,
			"primary_score":	999625,
			"second_score":	134013
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	843,
			"primary_score":	999625,
			"second_score":	134012
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	844,
			"primary_score":	999625,
			"second_score":	134008
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	883,
			"primary_score":	999702,
			"second_score":	138089
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	889,
			"primary_score":	999702,
			"second_score":	138088
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	896,
			"primary_score":	999649,
			"second_score":	139967
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	897,
			"primary_score":	999649,
			"second_score":	139966
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	899,
			"primary_score":	999649,
			"second_score":	139965
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	926,
			"primary_score":	999649,
			"second_score":	139964
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	928,
			"primary_score":	999649,
			"second_score":	139926
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	929,
			"primary_score":	999649,
			"second_score":	139924
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	931,
			"primary_score":	999649,
			"second_score":	139914
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	932,
			"primary_score":	999650,
			"second_score":	139913
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	988,
			"primary_score":	999649,
			"second_score":	139912
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	989,
			"primary_score":	999649,
			"second_score":	139911
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	990,
			"primary_score":	999649,
			"second_score":	139907
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	991,
			"primary_score":	999649,
			"second_score":	139903
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	992,
			"primary_score":	999649,
			"second_score":	139902
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	993,
			"primary_score":	999649,
			"second_score":	139900
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1250,
			"primary_score":	999649,
			"second_score":	139971
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1252,
			"primary_score":	999649,
			"second_score":	139970
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1255,
			"primary_score":	999649,
			"second_score":	139969
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1263,
			"primary_score":	999625,
			"second_score":	137058
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1265,
			"primary_score":	999625,
			"second_score":	137057
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1266,
			"primary_score":	999625,
			"second_score":	137050
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1272,
			"primary_score":	999625,
			"second_score":	136964
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1273,
			"primary_score":	999625,
			"second_score":	136963
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1274,
			"primary_score":	999625,
			"second_score":	136962
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1275,
			"primary_score":	999625,
			"second_score":	136961
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1276,
			"primary_score":	999625,
			"second_score":	136960
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1278,
			"primary_score":	999625,
			"second_score":	136959
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1280,
			"primary_score":	999625,
			"second_score":	136955
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1284,
			"primary_score":	999625,
			"second_score":	136954
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1285,
			"primary_score":	999702,
			"second_score":	138091
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1286,
			"primary_score":	999702,
			"second_score":	138090
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1309,
			"primary_score":	999702,
			"second_score":	138087
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1310,
			"primary_score":	999702,
			"second_score":	138086
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1311,
			"primary_score":	999702,
			"second_score":	138085
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1319,
			"primary_score":	999702,
			"second_score":	138084
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1320,
			"primary_score":	999702,
			"second_score":	138074
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1321,
			"primary_score":	999702,
			"second_score":	138073
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1326,
			"primary_score":	999702,
			"second_score":	138072
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1331,
			"primary_score":	999718,
			"second_score":	138071
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1332,
			"primary_score":	999718,
			"second_score":	138070
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1355,
			"primary_score":	999702,
			"second_score":	138069
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1357,
			"primary_score":	999702,
			"second_score":	138068
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1361,
			"primary_score":	999625,
			"second_score":	136953
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1362,
			"primary_score":	999625,
			"second_score":	136949
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1420,
			"primary_score":	999628,
			"second_score":	136859
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1426,
			"primary_score":	999628,
			"second_score":	136858
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1427,
			"primary_score":	999628,
			"second_score":	136857
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1429,
			"primary_score":	999628,
			"second_score":	136856
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1432,
			"primary_score":	999628,
			"second_score":	136855
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1434,
			"primary_score":	999628,
			"second_score":	136854
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1445,
			"primary_score":	999628,
			"second_score":	136853
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1916,
			"primary_score":	999625,
			"second_score":	139434
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1917,
			"primary_score":	999625,
			"second_score":	139433
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1918,
			"primary_score":	999625,
			"second_score":	139432
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1920,
			"primary_score":	999625,
			"second_score":	139431
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1922,
			"primary_score":	999625,
			"second_score":	139422
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1932,
			"primary_score":	999625,
			"second_score":	139421
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1933,
			"primary_score":	999625,
			"second_score":	139336
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1940,
			"primary_score":	999625,
			"second_score":	139311
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1941,
			"primary_score":	999625,
			"second_score":	139292
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1943,
			"primary_score":	999625,
			"second_score":	139291
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1944,
			"primary_score":	999625,
			"second_score":	139265
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1945,
			"primary_score":	999625,
			"second_score":	139261
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1951,
			"primary_score":	999780,
			"second_score":	138106
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1952,
			"primary_score":	999780,
			"second_score":	138105
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1953,
			"primary_score":	999780,
			"second_score":	138104
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1955,
			"primary_score":	999780,
			"second_score":	138103
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1956,
			"primary_score":	999780,
			"second_score":	138019
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1958,
			"primary_score":	999780,
			"second_score":	137984
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1959,
			"primary_score":	999780,
			"second_score":	137982
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1961,
			"primary_score":	999780,
			"second_score":	137981
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1966,
			"primary_score":	999780,
			"second_score":	137980
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1967,
			"primary_score":	999780,
			"second_score":	137979
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1968,
			"primary_score":	999780,
			"second_score":	137978
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1970,
			"primary_score":	999780,
			"second_score":	137977
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1971,
			"primary_score":	999780,
			"second_score":	137976
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1974,
			"primary_score":	999780,
			"second_score":	137975
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1975,
			"primary_score":	999780,
			"second_score":	137971
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1977,
			"primary_score":	999780,
			"second_score":	137788
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1979,
			"primary_score":	999780,
			"second_score":	137785
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1980,
			"primary_score":	999780,
			"second_score":	137784
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1981,
			"primary_score":	999780,
			"second_score":	137783
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1995,
			"primary_score":	999780,
			"second_score":	137782
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1996,
			"primary_score":	999780,
			"second_score":	137756
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2046,
			"primary_score":	999625,
			"second_score":	139430
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2047,
			"primary_score":	999625,
			"second_score":	139429
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2048,
			"primary_score":	999625,
			"second_score":	139428
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2049,
			"primary_score":	999625,
			"second_score":	139427
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2051,
			"primary_score":	999625,
			"second_score":	139426
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2058,
			"primary_score":	999625,
			"second_score":	139425
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2062,
			"primary_score":	999625,
			"second_score":	139424
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2082,
			"primary_score":	999625,
			"second_score":	139423
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2097,
			"primary_score":	999740,
			"second_score":	141980
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2098,
			"primary_score":	999740,
			"second_score":	141979
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2099,
			"primary_score":	999740,
			"second_score":	141978
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2100,
			"primary_score":	999740,
			"second_score":	141977
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2101,
			"primary_score":	999740,
			"second_score":	141976
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2103,
			"primary_score":	999740,
			"second_score":	141975
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2104,
			"primary_score":	999740,
			"second_score":	141974
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2146,
			"primary_score":	999741,
			"second_score":	141973
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2171,
			"primary_score":	999743,
			"second_score":	142007
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2172,
			"primary_score":	999743,
			"second_score":	142006
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2174,
			"primary_score":	999743,
			"second_score":	142005
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2183,
			"primary_score":	999743,
			"second_score":	142004
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2184,
			"primary_score":	999743,
			"second_score":	142002
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2186,
			"primary_score":	999743,
			"second_score":	141992
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2187,
			"primary_score":	999743,
			"second_score":	141991
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2188,
			"primary_score":	999743,
			"second_score":	141990
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2189,
			"primary_score":	999743,
			"second_score":	141989
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2190,
			"primary_score":	999743,
			"second_score":	141988
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2191,
			"primary_score":	999743,
			"second_score":	141987
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2193,
			"primary_score":	999743,
			"second_score":	141986
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2194,
			"primary_score":	999743,
			"second_score":	141981
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2204,
			"primary_score":	999743,
			"second_score":	141972
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2205,
			"primary_score":	999743,
			"second_score":	141971
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2207,
			"primary_score":	999743,
			"second_score":	141697
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2212,
			"primary_score":	999743,
			"second_score":	141696
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2213,
			"primary_score":	999743,
			"second_score":	141694
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2214,
			"primary_score":	999743,
			"second_score":	141693
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2215,
			"primary_score":	999743,
			"second_score":	141688
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2314,
			"primary_score":	999625,
			"second_score":	135796
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2318,
			"primary_score":	999625,
			"second_score":	135795
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2413,
			"primary_score":	999625,
			"second_score":	137238
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2415,
			"primary_score":	999625,
			"second_score":	137237
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2422,
			"primary_score":	999625,
			"second_score":	137236
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2423,
			"primary_score":	999625,
			"second_score":	137226
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2424,
			"primary_score":	999625,
			"second_score":	137225
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2425,
			"primary_score":	999625,
			"second_score":	137224
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2426,
			"primary_score":	999625,
			"second_score":	137161
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2427,
			"primary_score":	999625,
			"second_score":	137158
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2429,
			"primary_score":	999705,
			"second_score":	137633
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2430,
			"primary_score":	999705,
			"second_score":	137632
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2434,
			"primary_score":	999625,
			"second_score":	137156
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2435,
			"primary_score":	999625,
			"second_score":	137154
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2436,
			"primary_score":	999625,
			"second_score":	137153
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2437,
			"primary_score":	999625,
			"second_score":	137148
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2439,
			"primary_score":	999625,
			"second_score":	137147
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2440,
			"primary_score":	999625,
			"second_score":	137125
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2446,
			"primary_score":	999625,
			"second_score":	137391
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2447,
			"primary_score":	999625,
			"second_score":	137390
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2448,
			"primary_score":	999625,
			"second_score":	137389
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2449,
			"primary_score":	999625,
			"second_score":	137388
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2450,
			"primary_score":	999625,
			"second_score":	137387
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2452,
			"primary_score":	999625,
			"second_score":	137386
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2453,
			"primary_score":	999625,
			"second_score":	137382
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2455,
			"primary_score":	999625,
			"second_score":	137381
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2470,
			"primary_score":	999625,
			"second_score":	137380
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2471,
			"primary_score":	999625,
			"second_score":	137379
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2484,
			"primary_score":	999625,
			"second_score":	137378
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2487,
			"primary_score":	999755,
			"second_score":	140362
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2490,
			"primary_score":	999625,
			"second_score":	137377
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2492,
			"primary_score":	999625,
			"second_score":	137374
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2493,
			"primary_score":	999625,
			"second_score":	137373
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2494,
			"primary_score":	999625,
			"second_score":	140360
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2498,
			"primary_score":	999625,
			"second_score":	137372
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2511,
			"primary_score":	999625,
			"second_score":	137371
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2512,
			"primary_score":	999625,
			"second_score":	137370
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2515,
			"primary_score":	999625,
			"second_score":	137332
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2520,
			"primary_score":	999899,
			"second_score":	141095
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2522,
			"primary_score":	999759,
			"second_score":	141057
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2529,
			"primary_score":	999625,
			"second_score":	137331
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2531,
			"primary_score":	999625,
			"second_score":	137321
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2532,
			"primary_score":	999625,
			"second_score":	137320
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2533,
			"primary_score":	999625,
			"second_score":	137319
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2538,
			"primary_score":	999625,
			"second_score":	140346
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2539,
			"primary_score":	999625,
			"second_score":	136177
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2541,
			"primary_score":	999760,
			"second_score":	140345
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2544,
			"primary_score":	999625,
			"second_score":	137318
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2545,
			"primary_score":	999625,
			"second_score":	137317
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2546,
			"primary_score":	999625,
			"second_score":	137313
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2547,
			"primary_score":	999625,
			"second_score":	137312
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2600,
			"primary_score":	999625,
			"second_score":	136399
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2601,
			"primary_score":	999625,
			"second_score":	136398
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2603,
			"primary_score":	999625,
			"second_score":	136397
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2611,
			"primary_score":	999625,
			"second_score":	136396
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2617,
			"primary_score":	999625,
			"second_score":	136394
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2618,
			"primary_score":	999625,
			"second_score":	136390
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2621,
			"primary_score":	999625,
			"second_score":	136386
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2622,
			"primary_score":	999625,
			"second_score":	136384
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2627,
			"primary_score":	999625,
			"second_score":	136383
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2629,
			"primary_score":	999625,
			"second_score":	136373
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2631,
			"primary_score":	999625,
			"second_score":	136372
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2632,
			"primary_score":	999625,
			"second_score":	136371
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2634,
			"primary_score":	999625,
			"second_score":	136355
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2638,
			"primary_score":	999625,
			"second_score":	119336
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2639,
			"primary_score":	999625,
			"second_score":	119335
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2642,
			"primary_score":	999625,
			"second_score":	136354
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4933,
			"primary_score":	999735,
			"second_score":	138424
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4934,
			"primary_score":	999735,
			"second_score":	138423
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4936,
			"primary_score":	999735,
			"second_score":	138422
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4938,
			"primary_score":	999735,
			"second_score":	138418
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4939,
			"primary_score":	999740,
			"second_score":	138417
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4980,
			"primary_score":	999740,
			"second_score":	138416
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4990,
			"primary_score":	999740,
			"second_score":	138413
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4991,
			"primary_score":	999740,
			"second_score":	138409
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4992,
			"primary_score":	999740,
			"second_score":	138408
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4993,
			"primary_score":	999740,
			"second_score":	138407
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4994,
			"primary_score":	999740,
			"second_score":	138405
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4995,
			"primary_score":	999740,
			"second_score":	138401
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4996,
			"primary_score":	999740,
			"second_score":	138338
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4997,
			"primary_score":	999740,
			"second_score":	138337
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4998,
			"primary_score":	999740,
			"second_score":	138334
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5000,
			"primary_score":	999740,
			"second_score":	138331
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5002,
			"primary_score":	999740,
			"second_score":	138326
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5021,
			"primary_score":	999735,
			"second_score":	137531
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5027,
			"primary_score":	999735,
			"second_score":	137453
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5028,
			"primary_score":	999735,
			"second_score":	137452
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5030,
			"primary_score":	999735,
			"second_score":	137451
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5031,
			"primary_score":	999735,
			"second_score":	137447
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5033,
			"primary_score":	999735,
			"second_score":	137446
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5039,
			"primary_score":	999746,
			"second_score":	141660
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5040,
			"primary_score":	999746,
			"second_score":	141659
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5042,
			"primary_score":	999746,
			"second_score":	141658
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5043,
			"primary_score":	999746,
			"second_score":	141656
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5044,
			"primary_score":	999746,
			"second_score":	141646
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5045,
			"primary_score":	999746,
			"second_score":	141645
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5046,
			"primary_score":	999746,
			"second_score":	141644
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5047,
			"primary_score":	999746,
			"second_score":	141642
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5048,
			"primary_score":	999746,
			"second_score":	141638
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5050,
			"primary_score":	999746,
			"second_score":	141637
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5056,
			"primary_score":	999746,
			"second_score":	140124
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5058,
			"primary_score":	999746,
			"second_score":	140123
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5059,
			"primary_score":	999746,
			"second_score":	140075
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5061,
			"primary_score":	999746,
			"second_score":	140067
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5062,
			"primary_score":	999746,
			"second_score":	140065
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5068,
			"primary_score":	999625,
			"second_score":	137047
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5070,
			"primary_score":	999625,
			"second_score":	137046
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5083,
			"primary_score":	999625,
			"second_score":	137045
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5095,
			"primary_score":	999625,
			"second_score":	137018
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5098,
			"primary_score":	999625,
			"second_score":	137017
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5103,
			"primary_score":	999625,
			"second_score":	137016
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5111,
			"primary_score":	999625,
			"second_score":	137048
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5113,
			"primary_score":	999625,
			"second_score":	137015
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5114,
			"primary_score":	999625,
			"second_score":	137014
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5115,
			"primary_score":	999625,
			"second_score":	136988
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5116,
			"primary_score":	999625,
			"second_score":	136987
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5117,
			"primary_score":	999625,
			"second_score":	136986
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5118,
			"primary_score":	999625,
			"second_score":	136952
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5119,
			"primary_score":	999625,
			"second_score":	136949
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5127,
			"primary_score":	999625,
			"second_score":	137065
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5128,
			"primary_score":	999625,
			"second_score":	137064
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5129,
			"primary_score":	999625,
			"second_score":	137063
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5130,
			"primary_score":	999625,
			"second_score":	137062
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5131,
			"primary_score":	999625,
			"second_score":	137061
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5133,
			"primary_score":	999625,
			"second_score":	137060
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5180,
			"primary_score":	999625,
			"second_score":	137059
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5201,
			"primary_score":	999625,
			"second_score":	137058
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5203,
			"primary_score":	999625,
			"second_score":	137049
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5204,
			"primary_score":	999625,
			"second_score":	136948
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5268,
			"primary_score":	999873,
			"second_score":	160023
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5270,
			"primary_score":	999873,
			"second_score":	160013
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5271,
			"primary_score":	999873,
			"second_score":	160012
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5272,
			"primary_score":	999873,
			"second_score":	160010
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5273,
			"primary_score":	999873,
			"second_score":	160009
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5274,
			"primary_score":	999873,
			"second_score":	160004
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5275,
			"primary_score":	999879,
			"second_score":	160003
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5276,
			"primary_score":	999879,
			"second_score":	159816
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5291,
			"primary_score":	999893,
			"second_score":	159815
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5297,
			"primary_score":	999873,
			"second_score":	159814
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5303,
			"primary_score":	999889,
			"second_score":	159054
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5305,
			"primary_score":	999889,
			"second_score":	159044
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5306,
			"primary_score":	999889,
			"second_score":	159043
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5307,
			"primary_score":	999889,
			"second_score":	159039
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5308,
			"primary_score":	999889,
			"second_score":	158958
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5323,
			"primary_score":	999902,
			"second_score":	158957
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5325,
			"primary_score":	999889,
			"second_score":	158956
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6094,
			"primary_score":	999625,
			"second_score":	129637
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6095,
			"primary_score":	999625,
			"second_score":	129635
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6097,
			"primary_score":	999625,
			"second_score":	129634
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6099,
			"primary_score":	999625,
			"second_score":	129624
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6100,
			"primary_score":	999625,
			"second_score":	129623
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6101,
			"primary_score":	999625,
			"second_score":	129619
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6102,
			"primary_score":	999625,
			"second_score":	129618
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6103,
			"primary_score":	999625,
			"second_score":	129617
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6105,
			"primary_score":	999625,
			"second_score":	129612
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6111,
			"primary_score":	999625,
			"second_score":	126810
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6113,
			"primary_score":	999625,
			"second_score":	126800
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6115,
			"primary_score":	999625,
			"second_score":	126798
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6116,
			"primary_score":	999625,
			"second_score":	126797
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6117,
			"primary_score":	999625,
			"second_score":	126796
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6118,
			"primary_score":	999625,
			"second_score":	126794
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6119,
			"primary_score":	999625,
			"second_score":	126790
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6121,
			"primary_score":	999625,
			"second_score":	126789
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6122,
			"primary_score":	999625,
			"second_score":	126784
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6124,
			"primary_score":	999625,
			"second_score":	126782
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6125,
			"primary_score":	999625,
			"second_score":	126772
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6126,
			"primary_score":	999625,
			"second_score":	126771
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6127,
			"primary_score":	999625,
			"second_score":	126770
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6133,
			"primary_score":	999625,
			"second_score":	126380
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6135,
			"primary_score":	999625,
			"second_score":	126370
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6136,
			"primary_score":	999625,
			"second_score":	126369
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6137,
			"primary_score":	999625,
			"second_score":	126365
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6138,
			"primary_score":	999625,
			"second_score":	126267
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6140,
			"primary_score":	999625,
			"second_score":	126266
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6142,
			"primary_score":	999625,
			"second_score":	126264
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6144,
			"primary_score":	999625,
			"second_score":	126259
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6150,
			"primary_score":	999625,
			"second_score":	136628
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6152,
			"primary_score":	999625,
			"second_score":	136627
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6153,
			"primary_score":	999625,
			"second_score":	136626
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6166,
			"primary_score":	999625,
			"second_score":	137755
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6168,
			"primary_score":	999625,
			"second_score":	137754
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6169,
			"primary_score":	999625,
			"second_score":	137753
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6182,
			"primary_score":	999625,
			"second_score":	137123
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6184,
			"primary_score":	999625,
			"second_score":	137122
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6185,
			"primary_score":	999625,
			"second_score":	137121
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6198,
			"primary_score":	999625,
			"second_score":	136560
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6219,
			"primary_score":	999643,
			"second_score":	138921
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6257,
			"primary_score":	999625,
			"second_score":	136492
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6259,
			"primary_score":	999625,
			"second_score":	136491
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6260,
			"primary_score":	999625,
			"second_score":	136490
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6261,
			"primary_score":	999625,
			"second_score":	136489
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6264,
			"primary_score":	999625,
			"second_score":	136488
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6266,
			"primary_score":	999625,
			"second_score":	136487
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6267,
			"primary_score":	999625,
			"second_score":	136464
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6276,
			"primary_score":	999625,
			"second_score":	136649
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6278,
			"primary_score":	999625,
			"second_score":	136648
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6281,
			"primary_score":	999625,
			"second_score":	136647
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6282,
			"primary_score":	999625,
			"second_score":	136646
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6291,
			"primary_score":	999625,
			"second_score":	136463
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6292,
			"primary_score":	999625,
			"second_score":	136460
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6293,
			"primary_score":	999625,
			"second_score":	136459
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6371,
			"primary_score":	999740,
			"second_score":	131735
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6374,
			"primary_score":	999740,
			"second_score":	131734
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6377,
			"primary_score":	999740,
			"second_score":	131733
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6381,
			"primary_score":	999740,
			"second_score":	131732
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6608,
			"primary_score":	999625,
			"second_score":	136536
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6616,
			"primary_score":	999625,
			"second_score":	136442
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6617,
			"primary_score":	999625,
			"second_score":	136441
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6622,
			"primary_score":	999625,
			"second_score":	136440
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6632,
			"primary_score":	999625,
			"second_score":	136444
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6633,
			"primary_score":	999625,
			"second_score":	136443
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	32,
			"primary_score":	999625,
			"second_score":	6291
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	33,
			"primary_score":	999625,
			"second_score":	113834
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	35,
			"primary_score":	999625,
			"second_score":	6290
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	60,
			"primary_score":	999625,
			"second_score":	113616
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	169,
			"primary_score":	999625,
			"second_score":	114350
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	172,
			"primary_score":	999625,
			"second_score":	114349
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	73,
			"primary_score":	999625,
			"second_score":	119398
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	71,
			"primary_score":	999625,
			"second_score":	121797
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	72,
			"primary_score":	999625,
			"second_score":	121795
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	73,
			"primary_score":	999625,
			"second_score":	121793
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	74,
			"primary_score":	999625,
			"second_score":	121791
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	177,
			"primary_score":	999625,
			"second_score":	134760
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	182,
			"primary_score":	999625,
			"second_score":	121799
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	184,
			"primary_score":	999625,
			"second_score":	121798
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	185,
			"primary_score":	999625,
			"second_score":	121790
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	273,
			"primary_score":	999649,
			"second_score":	121785
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	275,
			"primary_score":	999649,
			"second_score":	121784
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	279,
			"primary_score":	999655,
			"second_score":	121783
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	280,
			"primary_score":	999655,
			"second_score":	121774
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	281,
			"primary_score":	999655,
			"second_score":	121772
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	283,
			"primary_score":	999649,
			"second_score":	121629
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	298,
			"primary_score":	999653,
			"second_score":	121558
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	300,
			"primary_score":	999653,
			"second_score":	121557
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	303,
			"primary_score":	999653,
			"second_score":	121556
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	439,
			"primary_score":	999649,
			"second_score":	121788
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	441,
			"primary_score":	999649,
			"second_score":	121787
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	442,
			"primary_score":	999649,
			"second_score":	121786
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	567,
			"primary_score":	999938,
			"second_score":	131742
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	569,
			"primary_score":	999938,
			"second_score":	131618
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	570,
			"primary_score":	999938,
			"second_score":	131617
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	571,
			"primary_score":	999939,
			"second_score":	131616
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	602,
			"primary_score":	999625,
			"second_score":	131585
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	603,
			"primary_score":	999625,
			"second_score":	131584
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	604,
			"primary_score":	999625,
			"second_score":	131583
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	606,
			"primary_score":	999625,
			"second_score":	131582
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	611,
			"primary_score":	999625,
			"second_score":	131581
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	613,
			"primary_score":	999625,
			"second_score":	131580
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	614,
			"primary_score":	999938,
			"second_score":	131746
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	616,
			"primary_score":	999938,
			"second_score":	131745
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	620,
			"primary_score":	999938,
			"second_score":	131744
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	621,
			"primary_score":	999939,
			"second_score":	131743
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	622,
			"primary_score":	999939,
			"second_score":	131615
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	629,
			"primary_score":	999625,
			"second_score":	131579
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	638,
			"primary_score":	999625,
			"second_score":	131578
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	787,
			"primary_score":	999887,
			"second_score":	134613
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	788,
			"primary_score":	999887,
			"second_score":	134612
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	790,
			"primary_score":	999887,
			"second_score":	134611
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	796,
			"primary_score":	999887,
			"second_score":	134610
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	799,
			"primary_score":	999887,
			"second_score":	134607
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	800,
			"primary_score":	999887,
			"second_score":	134605
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	801,
			"primary_score":	999887,
			"second_score":	134603
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	802,
			"primary_score":	999887,
			"second_score":	134543
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	803,
			"primary_score":	999887,
			"second_score":	134535
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	804,
			"primary_score":	999887,
			"second_score":	134534
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	856,
			"primary_score":	999662,
			"second_score":	121623
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	857,
			"primary_score":	999662,
			"second_score":	121622
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	859,
			"primary_score":	999662,
			"second_score":	121621
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	865,
			"primary_score":	999662,
			"second_score":	121620
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	866,
			"primary_score":	999662,
			"second_score":	121618
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	884,
			"primary_score":	999663,
			"second_score":	121616
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	885,
			"primary_score":	999663,
			"second_score":	121614
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	886,
			"primary_score":	999663,
			"second_score":	121612
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	893,
			"primary_score":	999663,
			"second_score":	121610
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	894,
			"primary_score":	999663,
			"second_score":	121609
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	895,
			"primary_score":	999663,
			"second_score":	121607
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	896,
			"primary_score":	999663,
			"second_score":	121605
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	82,
			"primary_score":	999625,
			"second_score":	121601
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	83,
			"primary_score":	999625,
			"second_score":	121865
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	85,
			"primary_score":	999625,
			"second_score":	121864
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	86,
			"primary_score":	999625,
			"second_score":	121863
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	87,
			"primary_score":	999625,
			"second_score":	121861
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	88,
			"primary_score":	999625,
			"second_score":	121854
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	91,
			"primary_score":	999625,
			"second_score":	122894
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	93,
			"primary_score":	999625,
			"second_score":	122893
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	94,
			"primary_score":	999625,
			"second_score":	122891
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	97,
			"primary_score":	999625,
			"second_score":	122889
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	103,
			"primary_score":	999625,
			"second_score":	120513
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	105,
			"primary_score":	999625,
			"second_score":	120512
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	113,
			"primary_score":	999625,
			"second_score":	120511
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	155,
			"primary_score":	999625,
			"second_score":	120510
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	199,
			"primary_score":	999625,
			"second_score":	114783
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	201,
			"primary_score":	999625,
			"second_score":	114782
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	202,
			"primary_score":	999625,
			"second_score":	114781
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	203,
			"primary_score":	999625,
			"second_score":	114780
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	204,
			"primary_score":	999625,
			"second_score":	114735
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	217,
			"primary_score":	999625,
			"second_score":	131443
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	222,
			"primary_score":	999625,
			"second_score":	147670
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	223,
			"primary_score":	999625,
			"second_score":	147668
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	245,
			"primary_score":	999625,
			"second_score":	135527
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	247,
			"primary_score":	999625,
			"second_score":	135526
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	250,
			"primary_score":	999625,
			"second_score":	135525
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	265,
			"primary_score":	999625,
			"second_score":	135524
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	267,
			"primary_score":	999625,
			"second_score":	135522
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	268,
			"primary_score":	999625,
			"second_score":	135521
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	269,
			"primary_score":	999625,
			"second_score":	135520
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	274,
			"primary_score":	999625,
			"second_score":	121812
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	280,
			"primary_score":	999625,
			"second_score":	121811
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	286,
			"primary_score":	999625,
			"second_score":	119407
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	293,
			"primary_score":	999625,
			"second_score":	119406
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	297,
			"primary_score":	999625,
			"second_score":	119405
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	305,
			"primary_score":	999625,
			"second_score":	131878
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	327,
			"primary_score":	999625,
			"second_score":	131877
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	328,
			"primary_score":	999625,
			"second_score":	131876
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	333,
			"primary_score":	999625,
			"second_score":	121873
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	334,
			"primary_score":	999625,
			"second_score":	121872
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	336,
			"primary_score":	999625,
			"second_score":	121871
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	337,
			"primary_score":	999625,
			"second_score":	121835
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	338,
			"primary_score":	999625,
			"second_score":	121834
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	339,
			"primary_score":	999625,
			"second_score":	121833
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	341,
			"primary_score":	999625,
			"second_score":	121813
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	367,
			"primary_score":	999625,
			"second_score":	131888
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	369,
			"primary_score":	999625,
			"second_score":	131887
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	371,
			"primary_score":	999625,
			"second_score":	131882
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	372,
			"primary_score":	999625,
			"second_score":	131881
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	373,
			"primary_score":	999625,
			"second_score":	131880
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	107,
			"primary_score":	999625,
			"second_score":	114384
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	119,
			"primary_score":	999625,
			"second_score":	114368
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	203,
			"primary_score":	999625,
			"second_score":	119484
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	204,
			"primary_score":	999720,
			"second_score":	119850
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	206,
			"primary_score":	999625,
			"second_score":	119483
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	213,
			"primary_score":	999625,
			"second_score":	119872
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	214,
			"primary_score":	999625,
			"second_score":	119866
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	215,
			"primary_score":	999625,
			"second_score":	119865
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	216,
			"primary_score":	999625,
			"second_score":	119553
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	217,
			"primary_score":	999625,
			"second_score":	119550
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	219,
			"primary_score":	999625,
			"second_score":	119473
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	223,
			"primary_score":	999625,
			"second_score":	119466
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	229,
			"primary_score":	999625,
			"second_score":	118609
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	246,
			"primary_score":	999625,
			"second_score":	118603
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	247,
			"primary_score":	999625,
			"second_score":	118600
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	248,
			"primary_score":	999625,
			"second_score":	114868
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	250,
			"primary_score":	999625,
			"second_score":	114866
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	251,
			"primary_score":	999625,
			"second_score":	114860
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	254,
			"primary_score":	999625,
			"second_score":	114859
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	261,
			"primary_score":	999625,
			"second_score":	114858
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	268,
			"primary_score":	999625,
			"second_score":	114857
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	269,
			"primary_score":	999625,
			"second_score":	114853
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	270,
			"primary_score":	999625,
			"second_score":	114848
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	271,
			"primary_score":	999625,
			"second_score":	114839
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	272,
			"primary_score":	999625,
			"second_score":	114830
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	274,
			"primary_score":	999625,
			"second_score":	114828
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	284,
			"primary_score":	999625,
			"second_score":	114822
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	288,
			"primary_score":	999625,
			"second_score":	114821
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	289,
			"primary_score":	999625,
			"second_score":	114804
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	290,
			"primary_score":	999625,
			"second_score":	114787
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	293,
			"primary_score":	999625,
			"second_score":	114784
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	295,
			"primary_score":	999625,
			"second_score":	114734
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	298,
			"primary_score":	999625,
			"second_score":	114393
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	302,
			"primary_score":	999625,
			"second_score":	114392
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	303,
			"primary_score":	999625,
			"second_score":	114376
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	306,
			"primary_score":	999625,
			"second_score":	114360
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	311,
			"primary_score":	999625,
			"second_score":	114359
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	313,
			"primary_score":	999625,
			"second_score":	114357
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	314,
			"primary_score":	999625,
			"second_score":	114351
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	315,
			"primary_score":	999625,
			"second_score":	113608
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	317,
			"primary_score":	999625,
			"second_score":	113606
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	322,
			"primary_score":	999625,
			"second_score":	113600
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	324,
			"primary_score":	999625,
			"second_score":	113531
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	325,
			"primary_score":	999625,
			"second_score":	113510
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	326,
			"primary_score":	999625,
			"second_score":	113506
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	327,
			"primary_score":	999625,
			"second_score":	113504
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	328,
			"primary_score":	999625,
			"second_score":	113502
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	329,
			"primary_score":	999625,
			"second_score":	113434
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	333,
			"primary_score":	999625,
			"second_score":	113433
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	335,
			"primary_score":	999625,
			"second_score":	113431
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	337,
			"primary_score":	999625,
			"second_score":	113426
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	397,
			"primary_score":	999625,
			"second_score":	124605
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	398,
			"primary_score":	999625,
			"second_score":	124604
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	407,
			"primary_score":	999625,
			"second_score":	124602
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	411,
			"primary_score":	999625,
			"second_score":	124601
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	412,
			"primary_score":	999625,
			"second_score":	124600
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	421,
			"primary_score":	999625,
			"second_score":	124607
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	430,
			"primary_score":	999625,
			"second_score":	114623
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	431,
			"primary_score":	999625,
			"second_score":	114621
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	432,
			"primary_score":	999625,
			"second_score":	114619
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	434,
			"primary_score":	999625,
			"second_score":	114618
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	435,
			"primary_score":	999625,
			"second_score":	114703
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	436,
			"primary_score":	999625,
			"second_score":	114604
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	437,
			"primary_score":	999625,
			"second_score":	114570
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	440,
			"primary_score":	999625,
			"second_score":	115738
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	442,
			"primary_score":	999625,
			"second_score":	115737
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	443,
			"primary_score":	999625,
			"second_score":	115735
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	446,
			"primary_score":	999625,
			"second_score":	115733
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	456,
			"primary_score":	999625,
			"second_score":	15248
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	457,
			"primary_score":	999625,
			"second_score":	15246
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	458,
			"primary_score":	999625,
			"second_score":	15244
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	459,
			"primary_score":	999625,
			"second_score":	15242
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	460,
			"primary_score":	999625,
			"second_score":	17607
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	461,
			"primary_score":	999625,
			"second_score":	17605
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	494,
			"primary_score":	999819,
			"second_score":	132194
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	495,
			"primary_score":	999819,
			"second_score":	132193
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	496,
			"primary_score":	999819,
			"second_score":	132192
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	497,
			"primary_score":	999819,
			"second_score":	132191
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	499,
			"primary_score":	999819,
			"second_score":	132190
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	501,
			"primary_score":	999819,
			"second_score":	132189
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	582,
			"primary_score":	999819,
			"second_score":	132188
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	683,
			"primary_score":	999819,
			"second_score":	132187
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	701,
			"primary_score":	999819,
			"second_score":	132195
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1032,
			"primary_score":	999737,
			"second_score":	131728
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1033,
			"primary_score":	999737,
			"second_score":	131727
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1034,
			"primary_score":	999737,
			"second_score":	131726
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1035,
			"primary_score":	999737,
			"second_score":	131725
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1036,
			"primary_score":	999737,
			"second_score":	131724
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1037,
			"primary_score":	999737,
			"second_score":	131723
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1038,
			"primary_score":	999737,
			"second_score":	131722
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1039,
			"primary_score":	999737,
			"second_score":	131721
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1040,
			"primary_score":	999737,
			"second_score":	131720
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1041,
			"primary_score":	999737,
			"second_score":	131719
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1042,
			"primary_score":	999737,
			"second_score":	131718
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1043,
			"primary_score":	999737,
			"second_score":	131717
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1045,
			"primary_score":	999737,
			"second_score":	131716
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1046,
			"primary_score":	999742,
			"second_score":	132354
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1047,
			"primary_score":	999742,
			"second_score":	132353
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1048,
			"primary_score":	999742,
			"second_score":	132352
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1050,
			"primary_score":	999892,
			"second_score":	131715
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1054,
			"primary_score":	999892,
			"second_score":	131714
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1055,
			"primary_score":	999892,
			"second_score":	131713
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1056,
			"primary_score":	999892,
			"second_score":	131650
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1058,
			"primary_score":	999892,
			"second_score":	131649
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1063,
			"primary_score":	999892,
			"second_score":	131648
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1066,
			"primary_score":	999737,
			"second_score":	131634
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1067,
			"primary_score":	999740,
			"second_score":	131623
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1068,
			"primary_score":	999893,
			"second_score":	131622
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1070,
			"primary_score":	999740,
			"second_score":	131620
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1155,
			"primary_score":	999625,
			"second_score":	121583
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1156,
			"primary_score":	999625,
			"second_score":	121582
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1157,
			"primary_score":	999625,
			"second_score":	121581
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1158,
			"primary_score":	999625,
			"second_score":	121580
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1159,
			"primary_score":	999625,
			"second_score":	121579
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1161,
			"primary_score":	999625,
			"second_score":	121578
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1169,
			"primary_score":	999625,
			"second_score":	121577
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1170,
			"primary_score":	999625,
			"second_score":	121576
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1172,
			"primary_score":	999625,
			"second_score":	121575
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1176,
			"primary_score":	999625,
			"second_score":	121574
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1177,
			"primary_score":	999625,
			"second_score":	121573
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1178,
			"primary_score":	999625,
			"second_score":	121572
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1179,
			"primary_score":	999625,
			"second_score":	119085
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1181,
			"primary_score":	999625,
			"second_score":	119084
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1182,
			"primary_score":	999625,
			"second_score":	119083
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1183,
			"primary_score":	999625,
			"second_score":	119082
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1184,
			"primary_score":	999625,
			"second_score":	119081
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1185,
			"primary_score":	999625,
			"second_score":	119080
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1187,
			"primary_score":	999625,
			"second_score":	119079
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1188,
			"primary_score":	999625,
			"second_score":	119078
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1189,
			"primary_score":	999625,
			"second_score":	119077
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1190,
			"primary_score":	999625,
			"second_score":	119076
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1193,
			"primary_score":	999625,
			"second_score":	119075
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1195,
			"primary_score":	999625,
			"second_score":	119074
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1197,
			"primary_score":	999625,
			"second_score":	118710
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1198,
			"primary_score":	999625,
			"second_score":	118709
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1199,
			"primary_score":	999625,
			"second_score":	118708
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1202,
			"primary_score":	999625,
			"second_score":	118707
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1210,
			"primary_score":	999625,
			"second_score":	118676
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1211,
			"primary_score":	999625,
			"second_score":	118675
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1212,
			"primary_score":	999625,
			"second_score":	118674
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1213,
			"primary_score":	999625,
			"second_score":	118673
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1214,
			"primary_score":	999625,
			"second_score":	118584
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1215,
			"primary_score":	999625,
			"second_score":	118565
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1216,
			"primary_score":	999625,
			"second_score":	118564
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1220,
			"primary_score":	999625,
			"second_score":	118563
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1223,
			"primary_score":	999625,
			"second_score":	118562
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1235,
			"primary_score":	999625,
			"second_score":	121585
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1237,
			"primary_score":	999625,
			"second_score":	121584
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1238,
			"primary_score":	999625,
			"second_score":	118561
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1242,
			"primary_score":	999625,
			"second_score":	118560
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1248,
			"primary_score":	999625,
			"second_score":	121586
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1510,
			"primary_score":	999625,
			"second_score":	103306
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1528,
			"primary_score":	999931,
			"second_score":	131741
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1529,
			"primary_score":	999931,
			"second_score":	131740
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1530,
			"primary_score":	999931,
			"second_score":	131739
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1532,
			"primary_score":	999931,
			"second_score":	131738
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1534,
			"primary_score":	999931,
			"second_score":	131737
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1555,
			"primary_score":	999938,
			"second_score":	131736
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1556,
			"primary_score":	999938,
			"second_score":	131731
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1560,
			"primary_score":	999938,
			"second_score":	131730
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1563,
			"primary_score":	999938,
			"second_score":	131729
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1577,
			"primary_score":	999938,
			"second_score":	131619
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1583,
			"primary_score":	999742,
			"second_score":	132370
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1584,
			"primary_score":	999742,
			"second_score":	132369
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1586,
			"primary_score":	999742,
			"second_score":	132368
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1600,
			"primary_score":	999744,
			"second_score":	132332
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	182,
			"primary_score":	999625,
			"second_score":	14704
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	183,
			"primary_score":	999625,
			"second_score":	14701
		}, {
			"file":	"Zend/zend_float.c",
			"line":	44,
			"primary_score":	999625,
			"second_score":	113430
		}, {
			"file":	"Zend/zend_float.c",
			"line":	45,
			"primary_score":	999625,
			"second_score":	113429
		}, {
			"file":	"Zend/zend_float.c",
			"line":	48,
			"primary_score":	999625,
			"second_score":	113427
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	35,
			"primary_score":	999625,
			"second_score":	3139
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	36,
			"primary_score":	999625,
			"second_score":	3138
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	37,
			"primary_score":	999625,
			"second_score":	3137
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	84,
			"primary_score":	999625,
			"second_score":	3140
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	132,
			"primary_score":	999625,
			"second_score":	115770
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	142,
			"primary_score":	999625,
			"second_score":	115769
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	143,
			"primary_score":	999678,
			"second_score":	118562
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	144,
			"primary_score":	999678,
			"second_score":	118554
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	147,
			"primary_score":	999625,
			"second_score":	115768
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	149,
			"primary_score":	999625,
			"second_score":	115767
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	150,
			"primary_score":	999625,
			"second_score":	118656
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	152,
			"primary_score":	999625,
			"second_score":	118655
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	153,
			"primary_score":	999625,
			"second_score":	118654
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	155,
			"primary_score":	999625,
			"second_score":	118653
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	156,
			"primary_score":	999625,
			"second_score":	118791
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	157,
			"primary_score":	999625,
			"second_score":	118652
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	158,
			"primary_score":	999625,
			"second_score":	118651
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	159,
			"primary_score":	999625,
			"second_score":	118650
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	176,
			"primary_score":	999625,
			"second_score":	118649
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	177,
			"primary_score":	999625,
			"second_score":	118648
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	178,
			"primary_score":	999625,
			"second_score":	118647
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	179,
			"primary_score":	999625,
			"second_score":	118646
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	181,
			"primary_score":	999625,
			"second_score":	118645
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	183,
			"primary_score":	999625,
			"second_score":	118644
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	184,
			"primary_score":	999625,
			"second_score":	118643
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	186,
			"primary_score":	999625,
			"second_score":	118642
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	187,
			"primary_score":	999625,
			"second_score":	118641
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	188,
			"primary_score":	999625,
			"second_score":	118640
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	195,
			"primary_score":	999678,
			"second_score":	118559
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	197,
			"primary_score":	999678,
			"second_score":	118558
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	202,
			"primary_score":	999678,
			"second_score":	118557
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	204,
			"primary_score":	999678,
			"second_score":	118556
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	205,
			"primary_score":	999678,
			"second_score":	118555
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	206,
			"primary_score":	999678,
			"second_score":	121897
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	207,
			"primary_score":	999678,
			"second_score":	121896
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	208,
			"primary_score":	999678,
			"second_score":	121895
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	210,
			"primary_score":	999678,
			"second_score":	121894
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	212,
			"primary_score":	999678,
			"second_score":	121893
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	213,
			"primary_score":	999678,
			"second_score":	121892
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	214,
			"primary_score":	999678,
			"second_score":	121891
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	232,
			"primary_score":	999678,
			"second_score":	121890
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	233,
			"primary_score":	999678,
			"second_score":	121889
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	234,
			"primary_score":	999678,
			"second_score":	121888
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	235,
			"primary_score":	999678,
			"second_score":	121887
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	237,
			"primary_score":	999678,
			"second_score":	121886
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	239,
			"primary_score":	999678,
			"second_score":	121885
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	240,
			"primary_score":	999678,
			"second_score":	121884
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	242,
			"primary_score":	999678,
			"second_score":	121883
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	243,
			"primary_score":	999678,
			"second_score":	121882
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	244,
			"primary_score":	999678,
			"second_score":	121881
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	251,
			"primary_score":	999625,
			"second_score":	114702
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	253,
			"primary_score":	999625,
			"second_score":	114701
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	264,
			"primary_score":	999625,
			"second_score":	114700
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	265,
			"primary_score":	999625,
			"second_score":	114699
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	266,
			"primary_score":	999625,
			"second_score":	114693
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	653,
			"primary_score":	999625,
			"second_score":	113216
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	655,
			"primary_score":	999625,
			"second_score":	113215
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	728,
			"primary_score":	999625,
			"second_score":	113214
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	182,
			"primary_score":	999625,
			"second_score":	115732
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	183,
			"primary_score":	999625,
			"second_score":	115771
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	189,
			"primary_score":	999625,
			"second_score":	114698
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	190,
			"primary_score":	999625,
			"second_score":	114697
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	191,
			"primary_score":	999625,
			"second_score":	114696
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	192,
			"primary_score":	999625,
			"second_score":	114695
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	193,
			"primary_score":	999625,
			"second_score":	114694
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	197,
			"primary_score":	999625,
			"second_score":	133279
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	198,
			"primary_score":	999625,
			"second_score":	133278
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	199,
			"primary_score":	999625,
			"second_score":	133277
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	201,
			"primary_score":	999625,
			"second_score":	133276
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	203,
			"primary_score":	999625,
			"second_score":	133275
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	210,
			"primary_score":	999625,
			"second_score":	143583
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	212,
			"primary_score":	999625,
			"second_score":	133272
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	213,
			"primary_score":	999625,
			"second_score":	133165
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	215,
			"primary_score":	999625,
			"second_score":	133164
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	216,
			"primary_score":	999625,
			"second_score":	133163
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	217,
			"primary_score":	999625,
			"second_score":	135618
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	220,
			"primary_score":	999625,
			"second_score":	135616
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	243,
			"primary_score":	999625,
			"second_score":	143357
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	257,
			"primary_score":	999625,
			"second_score":	143249
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	258,
			"primary_score":	999625,
			"second_score":	144420
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	259,
			"primary_score":	999625,
			"second_score":	143243
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	260,
			"primary_score":	999625,
			"second_score":	143242
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	261,
			"primary_score":	999625,
			"second_score":	143238
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	262,
			"primary_score":	999625,
			"second_score":	143237
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	265,
			"primary_score":	999625,
			"second_score":	143236
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	266,
			"primary_score":	999625,
			"second_score":	143234
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	267,
			"primary_score":	999625,
			"second_score":	143225
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	268,
			"primary_score":	999625,
			"second_score":	143224
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	270,
			"primary_score":	999625,
			"second_score":	143222
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	271,
			"primary_score":	999625,
			"second_score":	143221
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	272,
			"primary_score":	999625,
			"second_score":	143219
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	376,
			"primary_score":	999625,
			"second_score":	126696
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	401,
			"primary_score":	999625,
			"second_score":	126695
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	412,
			"primary_score":	999956,
			"second_score":	132788
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	415,
			"primary_score":	999625,
			"second_score":	126577
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	426,
			"primary_score":	999625,
			"second_score":	126558
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	427,
			"primary_score":	999625,
			"second_score":	148020
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	476,
			"primary_score":	999625,
			"second_score":	47183
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	477,
			"primary_score":	999625,
			"second_score":	47182
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	479,
			"primary_score":	999625,
			"second_score":	47181
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	481,
			"primary_score":	999625,
			"second_score":	47180
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	482,
			"primary_score":	999625,
			"second_score":	47179
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	484,
			"primary_score":	999625,
			"second_score":	47163
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	486,
			"primary_score":	999625,
			"second_score":	47162
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	487,
			"primary_score":	999625,
			"second_score":	47161
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	488,
			"primary_score":	999625,
			"second_score":	47160
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	492,
			"primary_score":	999625,
			"second_score":	47159
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	493,
			"primary_score":	999625,
			"second_score":	47157
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	494,
			"primary_score":	999625,
			"second_score":	47156
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	496,
			"primary_score":	999625,
			"second_score":	47207
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	498,
			"primary_score":	999625,
			"second_score":	47155
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	499,
			"primary_score":	999625,
			"second_score":	51481
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	501,
			"primary_score":	999625,
			"second_score":	47154
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	502,
			"primary_score":	999625,
			"second_score":	50068
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	505,
			"primary_score":	999625,
			"second_score":	47153
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	507,
			"primary_score":	999625,
			"second_score":	47152
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	508,
			"primary_score":	999625,
			"second_score":	47151
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	510,
			"primary_score":	999625,
			"second_score":	61914
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	512,
			"primary_score":	999625,
			"second_score":	47150
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	513,
			"primary_score":	999625,
			"second_score":	47149
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	515,
			"primary_score":	999625,
			"second_score":	47148
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	516,
			"primary_score":	999625,
			"second_score":	47147
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	518,
			"primary_score":	999625,
			"second_score":	47143
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	519,
			"primary_score":	999625,
			"second_score":	47142
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	521,
			"primary_score":	999625,
			"second_score":	47141
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	522,
			"primary_score":	999625,
			"second_score":	47140
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	523,
			"primary_score":	999625,
			"second_score":	47138
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	524,
			"primary_score":	999625,
			"second_score":	47137
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	526,
			"primary_score":	999625,
			"second_score":	47212
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	534,
			"primary_score":	999625,
			"second_score":	3133
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	536,
			"primary_score":	999625,
			"second_score":	3132
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	538,
			"primary_score":	999625,
			"second_score":	3131
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	540,
			"primary_score":	999625,
			"second_score":	3130
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	541,
			"primary_score":	999625,
			"second_score":	3129
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	542,
			"primary_score":	999625,
			"second_score":	3122
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	543,
			"primary_score":	999625,
			"second_score":	3121
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	544,
			"primary_score":	999625,
			"second_score":	3120
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	545,
			"primary_score":	999625,
			"second_score":	3257
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	547,
			"primary_score":	999625,
			"second_score":	3119
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	548,
			"primary_score":	999625,
			"second_score":	3118
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	550,
			"primary_score":	999625,
			"second_score":	3117
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	552,
			"primary_score":	999625,
			"second_score":	3116
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	553,
			"primary_score":	999625,
			"second_score":	3115
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	556,
			"primary_score":	999625,
			"second_score":	3114
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	599,
			"primary_score":	999625,
			"second_score":	3611
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	601,
			"primary_score":	999625,
			"second_score":	3610
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	602,
			"primary_score":	999625,
			"second_score":	3608
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	603,
			"primary_score":	999625,
			"second_score":	3924
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	605,
			"primary_score":	999625,
			"second_score":	3607
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	607,
			"primary_score":	999625,
			"second_score":	3606
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	608,
			"primary_score":	999625,
			"second_score":	3605
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	610,
			"primary_score":	999625,
			"second_score":	3604
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	611,
			"primary_score":	999625,
			"second_score":	52675
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	616,
			"primary_score":	999625,
			"second_score":	3603
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	617,
			"primary_score":	999625,
			"second_score":	52617
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	620,
			"primary_score":	999625,
			"second_score":	3602
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	622,
			"primary_score":	999625,
			"second_score":	3601
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	623,
			"primary_score":	999625,
			"second_score":	3600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	625,
			"primary_score":	999625,
			"second_score":	50031
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	627,
			"primary_score":	999625,
			"second_score":	3599
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	628,
			"primary_score":	999625,
			"second_score":	3598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	630,
			"primary_score":	999625,
			"second_score":	3597
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	631,
			"primary_score":	999625,
			"second_score":	3596
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	633,
			"primary_score":	999625,
			"second_score":	3594
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	634,
			"primary_score":	999625,
			"second_score":	50024
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	636,
			"primary_score":	999625,
			"second_score":	3593
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	637,
			"primary_score":	999625,
			"second_score":	3592
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	639,
			"primary_score":	999625,
			"second_score":	3591
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	640,
			"primary_score":	999625,
			"second_score":	3590
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	642,
			"primary_score":	999625,
			"second_score":	3589
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	665,
			"primary_score":	999625,
			"second_score":	103276
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	667,
			"primary_score":	999625,
			"second_score":	103275
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	669,
			"primary_score":	999625,
			"second_score":	103274
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	670,
			"primary_score":	999625,
			"second_score":	103273
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	671,
			"primary_score":	999625,
			"second_score":	50043
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	672,
			"primary_score":	999625,
			"second_score":	47128
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	675,
			"primary_score":	999625,
			"second_score":	47127
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	676,
			"primary_score":	999625,
			"second_score":	47126
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	679,
			"primary_score":	999625,
			"second_score":	47125
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	693,
			"primary_score":	999625,
			"second_score":	119369
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	695,
			"primary_score":	999625,
			"second_score":	119368
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	697,
			"primary_score":	999625,
			"second_score":	119367
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	698,
			"primary_score":	999625,
			"second_score":	119365
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	699,
			"primary_score":	999625,
			"second_score":	119364
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	711,
			"primary_score":	999625,
			"second_score":	119363
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	717,
			"primary_score":	999625,
			"second_score":	6024
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	719,
			"primary_score":	999625,
			"second_score":	6023
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	721,
			"primary_score":	999625,
			"second_score":	6022
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	722,
			"primary_score":	999625,
			"second_score":	6020
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	723,
			"primary_score":	999625,
			"second_score":	6019
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	724,
			"primary_score":	999625,
			"second_score":	3575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	726,
			"primary_score":	999625,
			"second_score":	3572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	727,
			"primary_score":	999625,
			"second_score":	3612
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	729,
			"primary_score":	999625,
			"second_score":	3571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	731,
			"primary_score":	999625,
			"second_score":	3570
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	735,
			"primary_score":	999625,
			"second_score":	3569
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	775,
			"primary_score":	999625,
			"second_score":	114348
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	777,
			"primary_score":	999625,
			"second_score":	114347
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	779,
			"primary_score":	999625,
			"second_score":	119546
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	780,
			"primary_score":	999625,
			"second_score":	114344
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	781,
			"primary_score":	999625,
			"second_score":	114343
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	782,
			"primary_score":	999625,
			"second_score":	113617
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	784,
			"primary_score":	999625,
			"second_score":	113615
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	785,
			"primary_score":	999625,
			"second_score":	113614
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	786,
			"primary_score":	999625,
			"second_score":	113613
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	787,
			"primary_score":	999625,
			"second_score":	113855
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	789,
			"primary_score":	999625,
			"second_score":	113612
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	790,
			"primary_score":	999625,
			"second_score":	113611
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	793,
			"primary_score":	999625,
			"second_score":	119477
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	799,
			"primary_score":	999922,
			"second_score":	133346
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	800,
			"primary_score":	999922,
			"second_score":	133345
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	801,
			"primary_score":	999922,
			"second_score":	133344
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	803,
			"primary_score":	999922,
			"second_score":	133343
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	804,
			"primary_score":	999922,
			"second_score":	133342
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	806,
			"primary_score":	999922,
			"second_score":	133341
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	807,
			"primary_score":	999922,
			"second_score":	133340
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	808,
			"primary_score":	999922,
			"second_score":	133339
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	809,
			"primary_score":	999943,
			"second_score":	132913
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	810,
			"primary_score":	999943,
			"second_score":	133337
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	812,
			"primary_score":	999943,
			"second_score":	132912
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	815,
			"primary_score":	999958,
			"second_score":	132911
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	817,
			"primary_score":	999943,
			"second_score":	132764
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	818,
			"primary_score":	999943,
			"second_score":	132763
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	820,
			"primary_score":	999943,
			"second_score":	132760
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	822,
			"primary_score":	999922,
			"second_score":	132759
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	898,
			"primary_score":	999625,
			"second_score":	97385
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	899,
			"primary_score":	999625,
			"second_score":	97384
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	900,
			"primary_score":	999625,
			"second_score":	97383
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	902,
			"primary_score":	999625,
			"second_score":	97382
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	904,
			"primary_score":	999625,
			"second_score":	97381
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	905,
			"primary_score":	999625,
			"second_score":	97367
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	907,
			"primary_score":	999625,
			"second_score":	97366
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	908,
			"primary_score":	999625,
			"second_score":	97365
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	909,
			"primary_score":	999625,
			"second_score":	97362
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	911,
			"primary_score":	999625,
			"second_score":	97361
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	912,
			"primary_score":	999625,
			"second_score":	97360
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	914,
			"primary_score":	999625,
			"second_score":	97363
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	916,
			"primary_score":	999625,
			"second_score":	138135
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	948,
			"primary_score":	999625,
			"second_score":	64472
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	949,
			"primary_score":	999625,
			"second_score":	64471
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	950,
			"primary_score":	999625,
			"second_score":	64470
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	952,
			"primary_score":	999625,
			"second_score":	64469
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	954,
			"primary_score":	999625,
			"second_score":	64468
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	955,
			"primary_score":	999625,
			"second_score":	64459
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	957,
			"primary_score":	999625,
			"second_score":	64458
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	958,
			"primary_score":	999625,
			"second_score":	64457
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	959,
			"primary_score":	999625,
			"second_score":	64456
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	961,
			"primary_score":	999625,
			"second_score":	64455
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	997,
			"primary_score":	999625,
			"second_score":	113790
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	998,
			"primary_score":	999625,
			"second_score":	113789
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1000,
			"primary_score":	999625,
			"second_score":	113788
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1002,
			"primary_score":	999625,
			"second_score":	113787
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1004,
			"primary_score":	999625,
			"second_score":	113786
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1005,
			"primary_score":	999625,
			"second_score":	113785
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1006,
			"primary_score":	999625,
			"second_score":	113784
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1007,
			"primary_score":	999625,
			"second_score":	113783
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1008,
			"primary_score":	999625,
			"second_score":	113782
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1038,
			"primary_score":	999625,
			"second_score":	119475
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1040,
			"primary_score":	999625,
			"second_score":	119474
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	263,
			"primary_score":	999625,
			"second_score":	47178
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	266,
			"primary_score":	999625,
			"second_score":	47177
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	267,
			"primary_score":	999625,
			"second_score":	47176
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	268,
			"primary_score":	999625,
			"second_score":	47175
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	269,
			"primary_score":	999625,
			"second_score":	47174
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	270,
			"primary_score":	999625,
			"second_score":	47173
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	271,
			"primary_score":	999625,
			"second_score":	47172
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	272,
			"primary_score":	999625,
			"second_score":	47171
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	273,
			"primary_score":	999625,
			"second_score":	47170
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	274,
			"primary_score":	999625,
			"second_score":	47169
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	276,
			"primary_score":	999625,
			"second_score":	47168
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	278,
			"primary_score":	999625,
			"second_score":	48627
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	279,
			"primary_score":	999625,
			"second_score":	47382
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	280,
			"primary_score":	999625,
			"second_score":	47381
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	281,
			"primary_score":	999625,
			"second_score":	47380
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	282,
			"primary_score":	999625,
			"second_score":	47167
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	283,
			"primary_score":	999625,
			"second_score":	47166
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	287,
			"primary_score":	999625,
			"second_score":	47164
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	39,
			"primary_score":	999625,
			"second_score":	3574
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	40,
			"primary_score":	999625,
			"second_score":	3614
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	42,
			"primary_score":	999625,
			"second_score":	3573
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	105,
			"primary_score":	999625,
			"second_score":	3243
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	106,
			"primary_score":	999625,
			"second_score":	3216
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	107,
			"primary_score":	999625,
			"second_score":	3215
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	121,
			"primary_score":	999625,
			"second_score":	113212
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	127,
			"primary_score":	999625,
			"second_score":	113211
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	226,
			"primary_score":	999625,
			"second_score":	6025
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	384,
			"primary_score":	999625,
			"second_score":	97388
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	385,
			"primary_score":	999625,
			"second_score":	97387
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	387,
			"primary_score":	999625,
			"second_score":	97386
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	388,
			"primary_score":	999625,
			"second_score":	97359
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	392,
			"primary_score":	999625,
			"second_score":	97358
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	395,
			"primary_score":	999625,
			"second_score":	97357
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3151,
			"primary_score":	999625,
			"second_score":	136408
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3153,
			"primary_score":	999625,
			"second_score":	136407
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3155,
			"primary_score":	999625,
			"second_score":	136406
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3157,
			"primary_score":	999625,
			"second_score":	136405
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3294,
			"primary_score":	999625,
			"second_score":	136428
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3297,
			"primary_score":	999625,
			"second_score":	136427
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3362,
			"primary_score":	999625,
			"second_score":	136426
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3364,
			"primary_score":	999625,
			"second_score":	136425
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3376,
			"primary_score":	999625,
			"second_score":	136424
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3377,
			"primary_score":	999625,
			"second_score":	136519
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3382,
			"primary_score":	999625,
			"second_score":	136423
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3384,
			"primary_score":	999625,
			"second_score":	136494
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3385,
			"primary_score":	999625,
			"second_score":	136493
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3388,
			"primary_score":	999625,
			"second_score":	136422
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3390,
			"primary_score":	999625,
			"second_score":	136421
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3391,
			"primary_score":	999625,
			"second_score":	136420
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3395,
			"primary_score":	999625,
			"second_score":	136607
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3396,
			"primary_score":	999625,
			"second_score":	136606
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3401,
			"primary_score":	999625,
			"second_score":	136419
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3402,
			"primary_score":	999625,
			"second_score":	136418
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3403,
			"primary_score":	999625,
			"second_score":	136635
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3404,
			"primary_score":	999625,
			"second_score":	136417
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3405,
			"primary_score":	999625,
			"second_score":	136416
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3407,
			"primary_score":	999625,
			"second_score":	136451
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3409,
			"primary_score":	999625,
			"second_score":	136450
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3410,
			"primary_score":	999625,
			"second_score":	136449
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3413,
			"primary_score":	999625,
			"second_score":	136415
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3414,
			"primary_score":	999625,
			"second_score":	136414
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3418,
			"primary_score":	999625,
			"second_score":	136600
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3422,
			"primary_score":	999625,
			"second_score":	136599
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3425,
			"primary_score":	999625,
			"second_score":	136598
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3426,
			"primary_score":	999625,
			"second_score":	136597
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3428,
			"primary_score":	999625,
			"second_score":	136596
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3429,
			"primary_score":	999625,
			"second_score":	136595
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3431,
			"primary_score":	999625,
			"second_score":	136594
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3439,
			"primary_score":	999625,
			"second_score":	136518
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3441,
			"primary_score":	999625,
			"second_score":	136517
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3459,
			"primary_score":	999625,
			"second_score":	136448
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3462,
			"primary_score":	999625,
			"second_score":	136447
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3463,
			"primary_score":	999625,
			"second_score":	136446
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3467,
			"primary_score":	999625,
			"second_score":	136445
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3468,
			"primary_score":	999625,
			"second_score":	136439
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3472,
			"primary_score":	999625,
			"second_score":	136629
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3473,
			"primary_score":	999625,
			"second_score":	136625
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3477,
			"primary_score":	999625,
			"second_score":	136513
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3478,
			"primary_score":	999625,
			"second_score":	136511
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3482,
			"primary_score":	999625,
			"second_score":	139479
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3483,
			"primary_score":	999625,
			"second_score":	139478
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3492,
			"primary_score":	999625,
			"second_score":	136537
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3493,
			"primary_score":	999625,
			"second_score":	136535
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3592,
			"primary_score":	999625,
			"second_score":	136561
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3593,
			"primary_score":	999625,
			"second_score":	136559
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3732,
			"primary_score":	999629,
			"second_score":	136860
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3733,
			"primary_score":	999629,
			"second_score":	136852
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4142,
			"primary_score":	999625,
			"second_score":	137283
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4143,
			"primary_score":	999625,
			"second_score":	137282
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4147,
			"primary_score":	999625,
			"second_score":	137691
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4148,
			"primary_score":	999625,
			"second_score":	137690
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4152,
			"primary_score":	999625,
			"second_score":	136209
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4153,
			"primary_score":	999625,
			"second_score":	135983
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4157,
			"primary_score":	999625,
			"second_score":	137393
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4158,
			"primary_score":	999625,
			"second_score":	137311
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4167,
			"primary_score":	999625,
			"second_score":	140376
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4168,
			"primary_score":	999625,
			"second_score":	140220
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4172,
			"primary_score":	999625,
			"second_score":	134538
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4173,
			"primary_score":	999625,
			"second_score":	134456
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4412,
			"primary_score":	999625,
			"second_score":	126106
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4413,
			"primary_score":	999625,
			"second_score":	126089
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4417,
			"primary_score":	999625,
			"second_score":	142285
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4418,
			"primary_score":	999625,
			"second_score":	142073
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4457,
			"primary_score":	999650,
			"second_score":	139972
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4458,
			"primary_score":	999650,
			"second_score":	139895
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4477,
			"primary_score":	999746,
			"second_score":	141665
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4478,
			"primary_score":	999746,
			"second_score":	141611
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4482,
			"primary_score":	999746,
			"second_score":	140125
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4483,
			"primary_score":	999746,
			"second_score":	140056
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4732,
			"primary_score":	999625,
			"second_score":	126191
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4733,
			"primary_score":	999625,
			"second_score":	126190
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4737,
			"primary_score":	999625,
			"second_score":	129638
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4738,
			"primary_score":	999625,
			"second_score":	129610
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4742,
			"primary_score":	999625,
			"second_score":	126811
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4743,
			"primary_score":	999625,
			"second_score":	126769
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4747,
			"primary_score":	999625,
			"second_score":	126381
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4748,
			"primary_score":	999625,
			"second_score":	126257
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4827,
			"primary_score":	999625,
			"second_score":	140440
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4828,
			"primary_score":	999625,
			"second_score":	140439
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4832,
			"primary_score":	999873,
			"second_score":	158862
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4833,
			"primary_score":	999873,
			"second_score":	158861
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4892,
			"primary_score":	999625,
			"second_score":	139435
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4893,
			"primary_score":	999625,
			"second_score":	139260
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4897,
			"primary_score":	999625,
			"second_score":	137239
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4898,
			"primary_score":	999625,
			"second_score":	137120
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4977,
			"primary_score":	999743,
			"second_score":	142037
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4978,
			"primary_score":	999743,
			"second_score":	142036
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5007,
			"primary_score":	999746,
			"second_score":	142008
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5008,
			"primary_score":	999746,
			"second_score":	141687
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5077,
			"primary_score":	999758,
			"second_score":	140148
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5078,
			"primary_score":	999758,
			"second_score":	140147
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5092,
			"primary_score":	999625,
			"second_score":	140486
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5093,
			"primary_score":	999625,
			"second_score":	140485
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5197,
			"primary_score":	999625,
			"second_score":	137066
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5198,
			"primary_score":	999625,
			"second_score":	136947
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5212,
			"primary_score":	999625,
			"second_score":	140463
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5213,
			"primary_score":	999625,
			"second_score":	140462
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5257,
			"primary_score":	999625,
			"second_score":	136904
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5258,
			"primary_score":	999625,
			"second_score":	136903
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5262,
			"primary_score":	999625,
			"second_score":	139873
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5263,
			"primary_score":	999625,
			"second_score":	139872
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5267,
			"primary_score":	999625,
			"second_score":	136965
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5268,
			"primary_score":	999625,
			"second_score":	136926
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5284,
			"primary_score":	999735,
			"second_score":	138705
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5285,
			"primary_score":	999735,
			"second_score":	138678
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5289,
			"primary_score":	999735,
			"second_score":	138207
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5290,
			"primary_score":	999735,
			"second_score":	138180
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5294,
			"primary_score":	999735,
			"second_score":	137454
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5295,
			"primary_score":	999735,
			"second_score":	137423
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5299,
			"primary_score":	999625,
			"second_score":	136994
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5300,
			"primary_score":	999625,
			"second_score":	136993
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5309,
			"primary_score":	999735,
			"second_score":	137483
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5310,
			"primary_score":	999735,
			"second_score":	137482
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5334,
			"primary_score":	999780,
			"second_score":	138137
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5335,
			"primary_score":	999780,
			"second_score":	137752
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5339,
			"primary_score":	999780,
			"second_score":	137647
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5340,
			"primary_score":	999780,
			"second_score":	137595
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5344,
			"primary_score":	999780,
			"second_score":	137534
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5345,
			"primary_score":	999780,
			"second_score":	137505
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5399,
			"primary_score":	999647,
			"second_score":	138749
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5400,
			"primary_score":	999647,
			"second_score":	138748
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5409,
			"primary_score":	999625,
			"second_score":	137059
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5410,
			"primary_score":	999625,
			"second_score":	137022
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5414,
			"primary_score":	999647,
			"second_score":	138773
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5415,
			"primary_score":	999647,
			"second_score":	138771
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5439,
			"primary_score":	999647,
			"second_score":	138995
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5440,
			"primary_score":	999647,
			"second_score":	138867
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5444,
			"primary_score":	999647,
			"second_score":	139018
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5445,
			"primary_score":	999647,
			"second_score":	139017
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5464,
			"primary_score":	999735,
			"second_score":	138230
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5465,
			"primary_score":	999735,
			"second_score":	138229
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5489,
			"primary_score":	999735,
			"second_score":	138456
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5490,
			"primary_score":	999735,
			"second_score":	138296
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5494,
			"primary_score":	999735,
			"second_score":	138479
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5495,
			"primary_score":	999735,
			"second_score":	138478
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5539,
			"primary_score":	999879,
			"second_score":	158906
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5540,
			"primary_score":	999879,
			"second_score":	158905
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5549,
			"primary_score":	999902,
			"second_score":	159055
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5550,
			"primary_score":	999902,
			"second_score":	158955
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5559,
			"primary_score":	999893,
			"second_score":	160024
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5560,
			"primary_score":	999893,
			"second_score":	159813
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5717,
			"primary_score":	999625,
			"second_score":	136438
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5719,
			"primary_score":	999625,
			"second_score":	136437
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5720,
			"primary_score":	999625,
			"second_score":	136436
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5721,
			"primary_score":	999625,
			"second_score":	136435
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5723,
			"primary_score":	999625,
			"second_score":	136434
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5730,
			"primary_score":	999625,
			"second_score":	136433
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5732,
			"primary_score":	999625,
			"second_score":	136432
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5733,
			"primary_score":	999625,
			"second_score":	136431
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5734,
			"primary_score":	999625,
			"second_score":	136550
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5736,
			"primary_score":	999625,
			"second_score":	136430
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5738,
			"primary_score":	999625,
			"second_score":	136429
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5882,
			"primary_score":	999625,
			"second_score":	136413
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5907,
			"primary_score":	999625,
			"second_score":	136412
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5908,
			"primary_score":	999625,
			"second_score":	136411
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5909,
			"primary_score":	999625,
			"second_score":	136410
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5911,
			"primary_score":	999625,
			"second_score":	136409
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5913,
			"primary_score":	999625,
			"second_score":	136404
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5916,
			"primary_score":	999625,
			"second_score":	136403
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5920,
			"primary_score":	999625,
			"second_score":	136402
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5923,
			"primary_score":	999625,
			"second_score":	136401
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	127,
			"primary_score":	999663,
			"second_score":	138818
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	128,
			"primary_score":	999663,
			"second_score":	138792
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	135,
			"primary_score":	999663,
			"second_score":	138572
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	136,
			"primary_score":	999663,
			"second_score":	138571
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	137,
			"primary_score":	999663,
			"second_score":	138567
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	138,
			"primary_score":	999663,
			"second_score":	138566
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	146,
			"primary_score":	999625,
			"second_score":	121205
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	161,
			"primary_score":	999625,
			"second_score":	118621
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	165,
			"primary_score":	999625,
			"second_score":	118620
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	166,
			"primary_score":	999625,
			"second_score":	118616
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	197,
			"primary_score":	999625,
			"second_score":	135791
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	198,
			"primary_score":	999625,
			"second_score":	135790
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	199,
			"primary_score":	999625,
			"second_score":	135789
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	200,
			"primary_score":	999625,
			"second_score":	135788
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	201,
			"primary_score":	999625,
			"second_score":	135787
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	202,
			"primary_score":	999625,
			"second_score":	135786
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	204,
			"primary_score":	999625,
			"second_score":	135785
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	205,
			"primary_score":	999625,
			"second_score":	135760
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	207,
			"primary_score":	999625,
			"second_score":	135759
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	208,
			"primary_score":	999625,
			"second_score":	135758
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	209,
			"primary_score":	999625,
			"second_score":	135757
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	210,
			"primary_score":	999625,
			"second_score":	135756
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	212,
			"primary_score":	999625,
			"second_score":	135754
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	216,
			"primary_score":	999625,
			"second_score":	135753
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	217,
			"primary_score":	999625,
			"second_score":	135752
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	218,
			"primary_score":	999625,
			"second_score":	135751
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	219,
			"primary_score":	999625,
			"second_score":	135750
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	220,
			"primary_score":	999625,
			"second_score":	135749
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	221,
			"primary_score":	999625,
			"second_score":	135748
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	222,
			"primary_score":	999625,
			"second_score":	135747
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	224,
			"primary_score":	999625,
			"second_score":	135746
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	233,
			"primary_score":	999625,
			"second_score":	135614
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	235,
			"primary_score":	999625,
			"second_score":	135538
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	236,
			"primary_score":	999625,
			"second_score":	135537
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	548,
			"primary_score":	999625,
			"second_score":	136400
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	549,
			"primary_score":	999625,
			"second_score":	136353
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	550,
			"primary_score":	999625,
			"second_score":	136352
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	553,
			"primary_score":	999625,
			"second_score":	136351
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	556,
			"primary_score":	999625,
			"second_score":	136350
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	557,
			"primary_score":	999625,
			"second_score":	136349
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	558,
			"primary_score":	999625,
			"second_score":	136348
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	559,
			"primary_score":	999625,
			"second_score":	136347
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	560,
			"primary_score":	999625,
			"second_score":	135797
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	566,
			"primary_score":	999625,
			"second_score":	135792
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	567,
			"primary_score":	999625,
			"second_score":	135745
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	614,
			"primary_score":	999625,
			"second_score":	121313
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	615,
			"primary_score":	999625,
			"second_score":	121312
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	618,
			"primary_score":	999625,
			"second_score":	121311
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	623,
			"primary_score":	999625,
			"second_score":	121310
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	626,
			"primary_score":	999625,
			"second_score":	121215
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	628,
			"primary_score":	999625,
			"second_score":	121214
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	629,
			"primary_score":	999625,
			"second_score":	121213
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	631,
			"primary_score":	999625,
			"second_score":	121212
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	632,
			"primary_score":	999625,
			"second_score":	121211
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	634,
			"primary_score":	999625,
			"second_score":	121210
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	651,
			"primary_score":	999625,
			"second_score":	121209
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	653,
			"primary_score":	999625,
			"second_score":	121204
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	654,
			"primary_score":	999625,
			"second_score":	120768
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	655,
			"primary_score":	999625,
			"second_score":	120767
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	656,
			"primary_score":	999625,
			"second_score":	120766
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	684,
			"primary_score":	999625,
			"second_score":	121571
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	685,
			"primary_score":	999625,
			"second_score":	121570
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	686,
			"primary_score":	999625,
			"second_score":	121466
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	687,
			"primary_score":	999625,
			"second_score":	121465
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	688,
			"primary_score":	999625,
			"second_score":	121464
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	689,
			"primary_score":	999625,
			"second_score":	121463
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	690,
			"primary_score":	999625,
			"second_score":	121462
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	692,
			"primary_score":	999625,
			"second_score":	121461
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	697,
			"primary_score":	999625,
			"second_score":	121460
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	699,
			"primary_score":	999625,
			"second_score":	121459
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	700,
			"primary_score":	999625,
			"second_score":	121458
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	701,
			"primary_score":	999625,
			"second_score":	121342
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	702,
			"primary_score":	999625,
			"second_score":	121340
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	704,
			"primary_score":	999625,
			"second_score":	121339
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	705,
			"primary_score":	999625,
			"second_score":	121314
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	709,
			"primary_score":	999625,
			"second_score":	120765
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	711,
			"primary_score":	999625,
			"second_score":	120764
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	712,
			"primary_score":	999625,
			"second_score":	120763
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	713,
			"primary_score":	999625,
			"second_score":	120519
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	714,
			"primary_score":	999625,
			"second_score":	120518
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	715,
			"primary_score":	999625,
			"second_score":	120517
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	716,
			"primary_score":	999625,
			"second_score":	120510
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	717,
			"primary_score":	999625,
			"second_score":	120509
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	719,
			"primary_score":	999625,
			"second_score":	119367
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	724,
			"primary_score":	999625,
			"second_score":	119366
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	729,
			"primary_score":	999625,
			"second_score":	119365
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	730,
			"primary_score":	999625,
			"second_score":	119317
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	731,
			"primary_score":	999625,
			"second_score":	119316
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	732,
			"primary_score":	999625,
			"second_score":	119145
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	733,
			"primary_score":	999625,
			"second_score":	119140
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	736,
			"primary_score":	999625,
			"second_score":	119139
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	737,
			"primary_score":	999625,
			"second_score":	119113
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	738,
			"primary_score":	999625,
			"second_score":	119087
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	739,
			"primary_score":	999625,
			"second_score":	119086
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	848,
			"primary_score":	999625,
			"second_score":	136479
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	849,
			"primary_score":	999625,
			"second_score":	136478
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	851,
			"primary_score":	999625,
			"second_score":	136477
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	854,
			"primary_score":	999625,
			"second_score":	136361
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	855,
			"primary_score":	999625,
			"second_score":	136360
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	856,
			"primary_score":	999625,
			"second_score":	136359
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	857,
			"primary_score":	999625,
			"second_score":	136358
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	858,
			"primary_score":	999625,
			"second_score":	129192
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	859,
			"primary_score":	999625,
			"second_score":	129191
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	864,
			"primary_score":	999625,
			"second_score":	129190
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	867,
			"primary_score":	999625,
			"second_score":	129189
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	868,
			"primary_score":	999625,
			"second_score":	129188
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	939,
			"primary_score":	999625,
			"second_score":	136357
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	942,
			"primary_score":	999625,
			"second_score":	136356
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	943,
			"primary_score":	999625,
			"second_score":	132063
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	945,
			"primary_score":	999625,
			"second_score":	136355
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	947,
			"primary_score":	999625,
			"second_score":	136354
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	948,
			"primary_score":	999625,
			"second_score":	136353
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	960,
			"primary_score":	999625,
			"second_score":	136486
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	963,
			"primary_score":	999625,
			"second_score":	136485
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	968,
			"primary_score":	999625,
			"second_score":	136484
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	969,
			"primary_score":	999625,
			"second_score":	136483
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	970,
			"primary_score":	999625,
			"second_score":	136482
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	971,
			"primary_score":	999625,
			"second_score":	136676
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	972,
			"primary_score":	999625,
			"second_score":	136675
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	973,
			"primary_score":	999625,
			"second_score":	136674
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	975,
			"primary_score":	999735,
			"second_score":	138648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	989,
			"primary_score":	999625,
			"second_score":	136481
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	996,
			"primary_score":	999625,
			"second_score":	136480
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	997,
			"primary_score":	999625,
			"second_score":	136479
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1010,
			"primary_score":	999625,
			"second_score":	136478
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1045,
			"primary_score":	999625,
			"second_score":	136477
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1046,
			"primary_score":	999625,
			"second_score":	136476
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1047,
			"primary_score":	999625,
			"second_score":	136473
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1048,
			"primary_score":	999625,
			"second_score":	136472
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1064,
			"primary_score":	999625,
			"second_score":	136468
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1066,
			"primary_score":	999625,
			"second_score":	136467
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1067,
			"primary_score":	999625,
			"second_score":	136466
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1068,
			"primary_score":	999625,
			"second_score":	136465
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1128,
			"primary_score":	999625,
			"second_score":	136470
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1129,
			"primary_score":	999625,
			"second_score":	136469
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1449,
			"primary_score":	999670,
			"second_score":	161434
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1450,
			"primary_score":	999670,
			"second_score":	161433
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1452,
			"primary_score":	999625,
			"second_score":	142859
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1453,
			"primary_score":	999625,
			"second_score":	142858
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1466,
			"primary_score":	999666,
			"second_score":	161422
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2191,
			"primary_score":	999625,
			"second_score":	136673
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2225,
			"primary_score":	999625,
			"second_score":	136672
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2226,
			"primary_score":	999625,
			"second_score":	136671
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2227,
			"primary_score":	999625,
			"second_score":	136668
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2228,
			"primary_score":	999625,
			"second_score":	136667
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2229,
			"primary_score":	999625,
			"second_score":	136666
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2347,
			"primary_score":	999625,
			"second_score":	142826
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2348,
			"primary_score":	999625,
			"second_score":	142825
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2349,
			"primary_score":	999625,
			"second_score":	142824
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2366,
			"primary_score":	999625,
			"second_score":	139622
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2368,
			"primary_score":	999625,
			"second_score":	139621
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2369,
			"primary_score":	999625,
			"second_score":	139620
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2370,
			"primary_score":	999625,
			"second_score":	139589
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2371,
			"primary_score":	999625,
			"second_score":	139588
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2398,
			"primary_score":	999625,
			"second_score":	131520
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2399,
			"primary_score":	999625,
			"second_score":	131519
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2410,
			"primary_score":	999625,
			"second_score":	131518
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2415,
			"primary_score":	999625,
			"second_score":	131517
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2419,
			"primary_score":	999625,
			"second_score":	131516
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2448,
			"primary_score":	999625,
			"second_score":	142271
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2449,
			"primary_score":	999625,
			"second_score":	142270
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2450,
			"primary_score":	999625,
			"second_score":	142269
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2500,
			"primary_score":	999803,
			"second_score":	157781
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2501,
			"primary_score":	999803,
			"second_score":	157780
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2512,
			"primary_score":	999804,
			"second_score":	157779
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2517,
			"primary_score":	999805,
			"second_score":	157778
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2518,
			"primary_score":	999846,
			"second_score":	157776
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2525,
			"primary_score":	999625,
			"second_score":	129770
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2526,
			"primary_score":	999625,
			"second_score":	129769
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2536,
			"primary_score":	999625,
			"second_score":	129768
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2540,
			"primary_score":	999625,
			"second_score":	129767
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2585,
			"primary_score":	999625,
			"second_score":	135887
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2586,
			"primary_score":	999625,
			"second_score":	135886
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2591,
			"primary_score":	999625,
			"second_score":	135885
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2592,
			"primary_score":	999625,
			"second_score":	135884
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2601,
			"primary_score":	999625,
			"second_score":	128460
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2602,
			"primary_score":	999625,
			"second_score":	128459
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2603,
			"primary_score":	999625,
			"second_score":	137276
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2604,
			"primary_score":	999625,
			"second_score":	137275
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2607,
			"primary_score":	999625,
			"second_score":	128458
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2608,
			"primary_score":	999625,
			"second_score":	128457
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2617,
			"primary_score":	999700,
			"second_score":	138828
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2618,
			"primary_score":	999700,
			"second_score":	138827
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2621,
			"primary_score":	999733,
			"second_score":	138826
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2622,
			"primary_score":	999735,
			"second_score":	138824
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2626,
			"primary_score":	999625,
			"second_score":	137079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2628,
			"primary_score":	999625,
			"second_score":	137078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2629,
			"primary_score":	999625,
			"second_score":	137077
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2634,
			"primary_score":	999625,
			"second_score":	136741
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2635,
			"primary_score":	999625,
			"second_score":	136740
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2636,
			"primary_score":	999625,
			"second_score":	136739
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2639,
			"primary_score":	999625,
			"second_score":	136704
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2641,
			"primary_score":	999625,
			"second_score":	136703
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2642,
			"primary_score":	999625,
			"second_score":	136702
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2643,
			"primary_score":	999625,
			"second_score":	136701
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2644,
			"primary_score":	999625,
			"second_score":	136700
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2645,
			"primary_score":	999625,
			"second_score":	136699
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2646,
			"primary_score":	999625,
			"second_score":	136684
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2651,
			"primary_score":	999625,
			"second_score":	127033
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2652,
			"primary_score":	999625,
			"second_score":	127032
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2653,
			"primary_score":	999625,
			"second_score":	127031
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2666,
			"primary_score":	999727,
			"second_score":	142371
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2667,
			"primary_score":	999727,
			"second_score":	142370
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2677,
			"primary_score":	999730,
			"second_score":	142369
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2681,
			"primary_score":	999746,
			"second_score":	142367
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2688,
			"primary_score":	999770,
			"second_score":	139673
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2689,
			"primary_score":	999770,
			"second_score":	139672
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2690,
			"primary_score":	999771,
			"second_score":	139670
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2694,
			"primary_score":	999625,
			"second_score":	138257
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2695,
			"primary_score":	999625,
			"second_score":	138256
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2696,
			"primary_score":	999625,
			"second_score":	138255
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2697,
			"primary_score":	999625,
			"second_score":	138254
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2698,
			"primary_score":	999625,
			"second_score":	138253
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2703,
			"primary_score":	999625,
			"second_score":	138252
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2719,
			"primary_score":	999625,
			"second_score":	131593
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2720,
			"primary_score":	999625,
			"second_score":	131592
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2725,
			"primary_score":	999625,
			"second_score":	131591
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2726,
			"primary_score":	999625,
			"second_score":	131590
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2727,
			"primary_score":	999625,
			"second_score":	131589
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2730,
			"primary_score":	999625,
			"second_score":	134511
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2731,
			"primary_score":	999625,
			"second_score":	134510
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2732,
			"primary_score":	999625,
			"second_score":	134509
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2768,
			"primary_score":	999649,
			"second_score":	142544
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2769,
			"primary_score":	999650,
			"second_score":	142542
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2891,
			"primary_score":	999643,
			"second_score":	139221
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2892,
			"primary_score":	999643,
			"second_score":	139220
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2898,
			"primary_score":	999644,
			"second_score":	139219
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2899,
			"primary_score":	999644,
			"second_score":	139218
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2905,
			"primary_score":	999625,
			"second_score":	137081
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2906,
			"primary_score":	999625,
			"second_score":	137080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2909,
			"primary_score":	999625,
			"second_score":	136665
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2910,
			"primary_score":	999625,
			"second_score":	136664
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2911,
			"primary_score":	999625,
			"second_score":	130043
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3000,
			"primary_score":	999625,
			"second_score":	138875
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3001,
			"primary_score":	999625,
			"second_score":	138874
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3004,
			"primary_score":	999999,
			"second_score":	143068
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3005,
			"primary_score":	999999,
			"second_score":	143067
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3007,
			"primary_score":	999933,
			"second_score":	143066
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3009,
			"primary_score":	999933,
			"second_score":	143065
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3010,
			"primary_score":	999933,
			"second_score":	143064
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3011,
			"primary_score":	999933,
			"second_score":	143028
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3019,
			"primary_score":	999933,
			"second_score":	143027
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3035,
			"primary_score":	999933,
			"second_score":	143026
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3038,
			"primary_score":	999933,
			"second_score":	143025
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3040,
			"primary_score":	999933,
			"second_score":	143024
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3045,
			"primary_score":	999625,
			"second_score":	140940
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3046,
			"primary_score":	999625,
			"second_score":	140939
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3048,
			"primary_score":	999625,
			"second_score":	140938
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3050,
			"primary_score":	999625,
			"second_score":	140937
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3051,
			"primary_score":	999625,
			"second_score":	140936
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3052,
			"primary_score":	999625,
			"second_score":	140935
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3053,
			"primary_score":	999625,
			"second_score":	140934
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3055,
			"primary_score":	999625,
			"second_score":	140933
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3056,
			"primary_score":	999625,
			"second_score":	140809
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3057,
			"primary_score":	999625,
			"second_score":	140808
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3058,
			"primary_score":	999625,
			"second_score":	140807
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3059,
			"primary_score":	999625,
			"second_score":	140806
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3061,
			"primary_score":	999625,
			"second_score":	140805
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3062,
			"primary_score":	999625,
			"second_score":	140810
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3063,
			"primary_score":	999991,
			"second_score":	140813
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3075,
			"primary_score":	999625,
			"second_score":	140804
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3076,
			"primary_score":	999625,
			"second_score":	140695
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3077,
			"primary_score":	999625,
			"second_score":	140694
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3080,
			"primary_score":	999625,
			"second_score":	140693
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3081,
			"primary_score":	999625,
			"second_score":	140692
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3082,
			"primary_score":	999625,
			"second_score":	140691
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3083,
			"primary_score":	999625,
			"second_score":	140525
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3084,
			"primary_score":	999991,
			"second_score":	140531
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3086,
			"primary_score":	999991,
			"second_score":	140530
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3094,
			"primary_score":	999993,
			"second_score":	140529
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3095,
			"primary_score":	999993,
			"second_score":	140528
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3098,
			"primary_score":	999625,
			"second_score":	140524
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3101,
			"primary_score":	999625,
			"second_score":	140523
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3104,
			"primary_score":	999625,
			"second_score":	140522
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3106,
			"primary_score":	999625,
			"second_score":	140521
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3108,
			"primary_score":	999625,
			"second_score":	140520
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3115,
			"primary_score":	999625,
			"second_score":	140519
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3120,
			"primary_score":	999625,
			"second_score":	136488
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3121,
			"primary_score":	999625,
			"second_score":	136487
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3123,
			"primary_score":	999625,
			"second_score":	136486
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3125,
			"primary_score":	999625,
			"second_score":	136485
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3126,
			"primary_score":	999625,
			"second_score":	136484
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3128,
			"primary_score":	999625,
			"second_score":	136483
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3129,
			"primary_score":	999625,
			"second_score":	136481
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3132,
			"primary_score":	999625,
			"second_score":	136480
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3133,
			"primary_score":	999625,
			"second_score":	136352
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3146,
			"primary_score":	999625,
			"second_score":	129236
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3149,
			"primary_score":	999625,
			"second_score":	129235
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3179,
			"primary_score":	999625,
			"second_score":	119437
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3180,
			"primary_score":	999625,
			"second_score":	119436
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3181,
			"primary_score":	999625,
			"second_score":	119435
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3183,
			"primary_score":	999625,
			"second_score":	119434
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3184,
			"primary_score":	999625,
			"second_score":	119433
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3185,
			"primary_score":	999625,
			"second_score":	119432
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3194,
			"primary_score":	999625,
			"second_score":	139630
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3195,
			"primary_score":	999625,
			"second_score":	139629
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3196,
			"primary_score":	999625,
			"second_score":	139626
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3197,
			"primary_score":	999625,
			"second_score":	139625
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3199,
			"primary_score":	999625,
			"second_score":	139624
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3200,
			"primary_score":	999625,
			"second_score":	139631
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3202,
			"primary_score":	999625,
			"second_score":	139623
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3255,
			"primary_score":	999625,
			"second_score":	131577
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3256,
			"primary_score":	999625,
			"second_score":	131576
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3257,
			"primary_score":	999625,
			"second_score":	131575
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3258,
			"primary_score":	999625,
			"second_score":	131574
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3261,
			"primary_score":	999625,
			"second_score":	131573
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3333,
			"primary_score":	999625,
			"second_score":	136662
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3334,
			"primary_score":	999628,
			"second_score":	136660
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3335,
			"primary_score":	999625,
			"second_score":	133813
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3336,
			"primary_score":	999625,
			"second_score":	133812
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3338,
			"primary_score":	999625,
			"second_score":	136657
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3340,
			"primary_score":	999625,
			"second_score":	136656
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3341,
			"primary_score":	999625,
			"second_score":	136655
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3342,
			"primary_score":	999625,
			"second_score":	136654
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3343,
			"primary_score":	999625,
			"second_score":	136653
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3344,
			"primary_score":	999625,
			"second_score":	136652
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3345,
			"primary_score":	999625,
			"second_score":	136651
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3350,
			"primary_score":	999625,
			"second_score":	136659
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3351,
			"primary_score":	999625,
			"second_score":	136658
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3359,
			"primary_score":	999643,
			"second_score":	139095
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3360,
			"primary_score":	999643,
			"second_score":	139094
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3361,
			"primary_score":	999643,
			"second_score":	139091
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3362,
			"primary_score":	999643,
			"second_score":	139090
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3363,
			"primary_score":	999643,
			"second_score":	139089
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3364,
			"primary_score":	999643,
			"second_score":	139088
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3365,
			"primary_score":	999643,
			"second_score":	139087
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3367,
			"primary_score":	999851,
			"second_score":	139168
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3368,
			"primary_score":	999963,
			"second_score":	139166
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3371,
			"primary_score":	999680,
			"second_score":	139098
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3374,
			"primary_score":	999680,
			"second_score":	139097
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3378,
			"primary_score":	999643,
			"second_score":	139086
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3380,
			"primary_score":	999643,
			"second_score":	139085
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3382,
			"primary_score":	999643,
			"second_score":	139084
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3383,
			"primary_score":	999643,
			"second_score":	139083
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3384,
			"primary_score":	999643,
			"second_score":	139052
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3385,
			"primary_score":	999643,
			"second_score":	139051
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4739,
			"primary_score":	999625,
			"second_score":	131588
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4772,
			"primary_score":	999625,
			"second_score":	131587
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4773,
			"primary_score":	999625,
			"second_score":	131586
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4778,
			"primary_score":	999625,
			"second_score":	131585
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4782,
			"primary_score":	999625,
			"second_score":	131584
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4783,
			"primary_score":	999625,
			"second_score":	131583
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4784,
			"primary_score":	999625,
			"second_score":	131582
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4870,
			"primary_score":	999625,
			"second_score":	131581
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4871,
			"primary_score":	999625,
			"second_score":	131580
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4872,
			"primary_score":	999625,
			"second_score":	131579
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4873,
			"primary_score":	999625,
			"second_score":	131578
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5273,
			"primary_score":	999771,
			"second_score":	139669
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5274,
			"primary_score":	999771,
			"second_score":	139668
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5275,
			"primary_score":	999771,
			"second_score":	139667
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5276,
			"primary_score":	999779,
			"second_score":	139666
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5278,
			"primary_score":	999779,
			"second_score":	139665
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5279,
			"primary_score":	999779,
			"second_score":	139664
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5280,
			"primary_score":	999779,
			"second_score":	139663
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5297,
			"primary_score":	999746,
			"second_score":	142366
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5298,
			"primary_score":	999746,
			"second_score":	142365
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5299,
			"primary_score":	999746,
			"second_score":	142364
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5410,
			"primary_score":	999746,
			"second_score":	142362
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5411,
			"primary_score":	999746,
			"second_score":	142361
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5414,
			"primary_score":	999746,
			"second_score":	142360
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5415,
			"primary_score":	999746,
			"second_score":	142359
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5417,
			"primary_score":	999746,
			"second_score":	142358
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5418,
			"primary_score":	999746,
			"second_score":	142357
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5476,
			"primary_score":	999667,
			"second_score":	136714
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5477,
			"primary_score":	999667,
			"second_score":	136713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5478,
			"primary_score":	999667,
			"second_score":	136710
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5479,
			"primary_score":	999667,
			"second_score":	136709
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5481,
			"primary_score":	999625,
			"second_score":	136708
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5482,
			"primary_score":	999673,
			"second_score":	136717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5483,
			"primary_score":	999673,
			"second_score":	136716
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5486,
			"primary_score":	999625,
			"second_score":	136707
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5487,
			"primary_score":	999625,
			"second_score":	136706
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5488,
			"primary_score":	999625,
			"second_score":	136705
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5512,
			"primary_score":	999735,
			"second_score":	138823
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5513,
			"primary_score":	999735,
			"second_score":	138822
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5514,
			"primary_score":	999735,
			"second_score":	138821
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5516,
			"primary_score":	999735,
			"second_score":	138820
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5517,
			"primary_score":	999735,
			"second_score":	138819
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5518,
			"primary_score":	999735,
			"second_score":	138791
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6045,
			"primary_score":	999625,
			"second_score":	129765
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6046,
			"primary_score":	999625,
			"second_score":	129764
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6051,
			"primary_score":	999625,
			"second_score":	129763
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6055,
			"primary_score":	999625,
			"second_score":	129762
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6100,
			"primary_score":	999625,
			"second_score":	129760
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6101,
			"primary_score":	999625,
			"second_score":	129759
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6102,
			"primary_score":	999625,
			"second_score":	129758
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6248,
			"primary_score":	999846,
			"second_score":	157775
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6249,
			"primary_score":	999846,
			"second_score":	157774
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6250,
			"primary_score":	999846,
			"second_score":	157773
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6267,
			"primary_score":	999846,
			"second_score":	157771
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6268,
			"primary_score":	999846,
			"second_score":	157770
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6269,
			"primary_score":	999846,
			"second_score":	157769
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6270,
			"primary_score":	999846,
			"second_score":	157768
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6272,
			"primary_score":	999846,
			"second_score":	157767
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6273,
			"primary_score":	999846,
			"second_score":	157766
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6274,
			"primary_score":	999846,
			"second_score":	157765
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6275,
			"primary_score":	999846,
			"second_score":	157764
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6277,
			"primary_score":	999846,
			"second_score":	157763
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6278,
			"primary_score":	999846,
			"second_score":	157762
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6279,
			"primary_score":	999931,
			"second_score":	157761
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6281,
			"primary_score":	999870,
			"second_score":	160369
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6282,
			"primary_score":	999870,
			"second_score":	160368
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6284,
			"primary_score":	999870,
			"second_score":	160367
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6285,
			"primary_score":	999870,
			"second_score":	160366
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6842,
			"primary_score":	999625,
			"second_score":	142267
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6843,
			"primary_score":	999625,
			"second_score":	142266
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6853,
			"primary_score":	999625,
			"second_score":	142265
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6854,
			"primary_score":	999625,
			"second_score":	142264
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6855,
			"primary_score":	999961,
			"second_score":	142263
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6876,
			"primary_score":	999625,
			"second_score":	134662
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6877,
			"primary_score":	999625,
			"second_score":	134661
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6878,
			"primary_score":	999625,
			"second_score":	134660
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6989,
			"primary_score":	999625,
			"second_score":	134658
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6990,
			"primary_score":	999625,
			"second_score":	134657
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6991,
			"primary_score":	999625,
			"second_score":	134656
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6992,
			"primary_score":	999625,
			"second_score":	134655
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7379,
			"primary_score":	999625,
			"second_score":	131514
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7380,
			"primary_score":	999625,
			"second_score":	131513
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7381,
			"primary_score":	999625,
			"second_score":	131512
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7382,
			"primary_score":	999625,
			"second_score":	131511
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7384,
			"primary_score":	999625,
			"second_score":	131510
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7385,
			"primary_score":	999625,
			"second_score":	131509
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7386,
			"primary_score":	999625,
			"second_score":	131508
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7387,
			"primary_score":	999625,
			"second_score":	131507
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7389,
			"primary_score":	999625,
			"second_score":	131506
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7390,
			"primary_score":	999625,
			"second_score":	131505
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7391,
			"primary_score":	999625,
			"second_score":	131504
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7392,
			"primary_score":	999625,
			"second_score":	131503
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7394,
			"primary_score":	999625,
			"second_score":	131502
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7395,
			"primary_score":	999625,
			"second_score":	131501
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7396,
			"primary_score":	999625,
			"second_score":	131500
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7397,
			"primary_score":	999625,
			"second_score":	131499
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7399,
			"primary_score":	999625,
			"second_score":	131498
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7400,
			"primary_score":	999625,
			"second_score":	131497
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7401,
			"primary_score":	999625,
			"second_score":	131496
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7402,
			"primary_score":	999625,
			"second_score":	131495
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7404,
			"primary_score":	999625,
			"second_score":	131494
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7405,
			"primary_score":	999625,
			"second_score":	131493
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7406,
			"primary_score":	999625,
			"second_score":	131492
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7407,
			"primary_score":	999625,
			"second_score":	131491
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7409,
			"primary_score":	999625,
			"second_score":	131490
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7410,
			"primary_score":	999625,
			"second_score":	131489
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7411,
			"primary_score":	999625,
			"second_score":	131488
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7658,
			"primary_score":	999625,
			"second_score":	142823
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7659,
			"primary_score":	999625,
			"second_score":	142822
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7660,
			"primary_score":	999625,
			"second_score":	142821
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8066,
			"primary_score":	999625,
			"second_score":	142819
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8067,
			"primary_score":	999625,
			"second_score":	142818
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8068,
			"primary_score":	999625,
			"second_score":	142817
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8069,
			"primary_score":	999625,
			"second_score":	142816
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8071,
			"primary_score":	999625,
			"second_score":	142815
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8072,
			"primary_score":	999625,
			"second_score":	142814
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8075,
			"primary_score":	999625,
			"second_score":	142813
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8076,
			"primary_score":	999625,
			"second_score":	142812
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8078,
			"primary_score":	999625,
			"second_score":	142811
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8079,
			"primary_score":	999625,
			"second_score":	142810
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8086,
			"primary_score":	999735,
			"second_score":	138647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8120,
			"primary_score":	999735,
			"second_score":	138646
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8121,
			"primary_score":	999735,
			"second_score":	138645
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8122,
			"primary_score":	999735,
			"second_score":	138642
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8123,
			"primary_score":	999735,
			"second_score":	138641
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8134,
			"primary_score":	999735,
			"second_score":	138640
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8140,
			"primary_score":	999735,
			"second_score":	138639
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8141,
			"primary_score":	999735,
			"second_score":	138638
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8179,
			"primary_score":	999735,
			"second_score":	138636
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8180,
			"primary_score":	999735,
			"second_score":	138635
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8181,
			"primary_score":	999735,
			"second_score":	138634
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8184,
			"primary_score":	999735,
			"second_score":	138575
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8186,
			"primary_score":	999735,
			"second_score":	138574
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8187,
			"primary_score":	999735,
			"second_score":	138573
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8188,
			"primary_score":	999735,
			"second_score":	138544
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8189,
			"primary_score":	999735,
			"second_score":	138513
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8190,
			"primary_score":	999735,
			"second_score":	138512
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8199,
			"primary_score":	999738,
			"second_score":	138583
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8200,
			"primary_score":	999738,
			"second_score":	138582
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8201,
			"primary_score":	999738,
			"second_score":	138579
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8202,
			"primary_score":	999738,
			"second_score":	138578
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8204,
			"primary_score":	999735,
			"second_score":	138577
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8205,
			"primary_score":	999738,
			"second_score":	138584
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8207,
			"primary_score":	999735,
			"second_score":	138576
		}, {
			"file":	"Zend/zend_list.c",
			"line":	52,
			"primary_score":	999625,
			"second_score":	113828
		}, {
			"file":	"Zend/zend_list.c",
			"line":	54,
			"primary_score":	999625,
			"second_score":	113827
		}, {
			"file":	"Zend/zend_list.c",
			"line":	56,
			"primary_score":	999625,
			"second_score":	113817
		}, {
			"file":	"Zend/zend_list.c",
			"line":	57,
			"primary_score":	999625,
			"second_score":	113816
		}, {
			"file":	"Zend/zend_list.c",
			"line":	170,
			"primary_score":	999625,
			"second_score":	113794
		}, {
			"file":	"Zend/zend_list.c",
			"line":	171,
			"primary_score":	999625,
			"second_score":	113793
		}, {
			"file":	"Zend/zend_list.c",
			"line":	172,
			"primary_score":	999625,
			"second_score":	113792
		}, {
			"file":	"Zend/zend_list.c",
			"line":	174,
			"primary_score":	999625,
			"second_score":	113791
		}, {
			"file":	"Zend/zend_list.c",
			"line":	175,
			"primary_score":	999625,
			"second_score":	113781
		}, {
			"file":	"Zend/zend_list.c",
			"line":	183,
			"primary_score":	999625,
			"second_score":	113780
		}, {
			"file":	"Zend/zend_list.c",
			"line":	185,
			"primary_score":	999625,
			"second_score":	113671
		}, {
			"file":	"Zend/zend_list.c",
			"line":	239,
			"primary_score":	999625,
			"second_score":	103287
		}, {
			"file":	"Zend/zend_list.c",
			"line":	347,
			"primary_score":	999625,
			"second_score":	6223
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	28,
			"primary_score":	999625,
			"second_score":	147470
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	29,
			"primary_score":	999625,
			"second_score":	147469
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	30,
			"primary_score":	999625,
			"second_score":	147468
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	31,
			"primary_score":	999625,
			"second_score":	147467
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	32,
			"primary_score":	999625,
			"second_score":	147466
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	33,
			"primary_score":	999625,
			"second_score":	147465
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	39,
			"primary_score":	999625,
			"second_score":	143952
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	41,
			"primary_score":	999625,
			"second_score":	143848
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	42,
			"primary_score":	999625,
			"second_score":	143847
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	43,
			"primary_score":	999625,
			"second_score":	143846
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	46,
			"primary_score":	999625,
			"second_score":	143845
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	48,
			"primary_score":	999625,
			"second_score":	143844
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	49,
			"primary_score":	999625,
			"second_score":	143843
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	51,
			"primary_score":	999625,
			"second_score":	143842
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	93,
			"primary_score":	999625,
			"second_score":	135613
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	94,
			"primary_score":	999625,
			"second_score":	135612
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	96,
			"primary_score":	999625,
			"second_score":	135611
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	97,
			"primary_score":	999625,
			"second_score":	135610
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	98,
			"primary_score":	999625,
			"second_score":	135609
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	99,
			"primary_score":	999625,
			"second_score":	135606
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	100,
			"primary_score":	999625,
			"second_score":	135539
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	109,
			"primary_score":	999625,
			"second_score":	3144
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	111,
			"primary_score":	999625,
			"second_score":	3143
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	112,
			"primary_score":	999669,
			"second_score":	138064
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	113,
			"primary_score":	999669,
			"second_score":	138063
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	116,
			"primary_score":	999669,
			"second_score":	138062
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	117,
			"primary_score":	999669,
			"second_score":	138043
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	120,
			"primary_score":	999625,
			"second_score":	3142
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	126,
			"primary_score":	999625,
			"second_score":	119901
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	127,
			"primary_score":	999625,
			"second_score":	119897
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	190,
			"primary_score":	999625,
			"second_score":	14703
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	192,
			"primary_score":	999625,
			"second_score":	14702
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	233,
			"primary_score":	999625,
			"second_score":	136341
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	235,
			"primary_score":	999625,
			"second_score":	136340
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	961,
			"primary_score":	999780,
			"second_score":	121488
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	962,
			"primary_score":	999780,
			"second_score":	121487
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	963,
			"primary_score":	999780,
			"second_score":	121486
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	964,
			"primary_score":	999780,
			"second_score":	121485
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	965,
			"primary_score":	999780,
			"second_score":	121484
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	966,
			"primary_score":	999780,
			"second_score":	121483
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	968,
			"primary_score":	999780,
			"second_score":	121482
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	969,
			"primary_score":	999780,
			"second_score":	121481
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	970,
			"primary_score":	999780,
			"second_score":	121480
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	978,
			"primary_score":	999780,
			"second_score":	121479
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	979,
			"primary_score":	999998,
			"second_score":	121470
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	982,
			"primary_score":	999998,
			"second_score":	121469
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	985,
			"primary_score":	999998,
			"second_score":	121468
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1251,
			"primary_score":	999748,
			"second_score":	132012
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1252,
			"primary_score":	999748,
			"second_score":	132011
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1254,
			"primary_score":	999748,
			"second_score":	132010
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1255,
			"primary_score":	999825,
			"second_score":	132009
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1282,
			"primary_score":	999748,
			"second_score":	132008
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1431,
			"primary_score":	999714,
			"second_score":	121461
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1432,
			"primary_score":	999714,
			"second_score":	121460
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1434,
			"primary_score":	999714,
			"second_score":	121459
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	31,
			"primary_score":	999695,
			"second_score":	132071
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	32,
			"primary_score":	999695,
			"second_score":	132070
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	33,
			"primary_score":	999695,
			"second_score":	132069
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	34,
			"primary_score":	999695,
			"second_score":	132068
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	39,
			"primary_score":	999674,
			"second_score":	114714
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	43,
			"primary_score":	999674,
			"second_score":	114713
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	49,
			"primary_score":	999707,
			"second_score":	114712
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	50,
			"primary_score":	999940,
			"second_score":	119728
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	52,
			"primary_score":	999940,
			"second_score":	119727
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	53,
			"primary_score":	999940,
			"second_score":	119726
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	54,
			"primary_score":	999942,
			"second_score":	119725
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	57,
			"primary_score":	999940,
			"second_score":	119715
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	41,
			"primary_score":	999625,
			"second_score":	113501
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	42,
			"primary_score":	999625,
			"second_score":	113435
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	47,
			"primary_score":	999625,
			"second_score":	119472
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	49,
			"primary_score":	999625,
			"second_score":	119471
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	50,
			"primary_score":	999674,
			"second_score":	119467
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	51,
			"primary_score":	999962,
			"second_score":	119469
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	53,
			"primary_score":	999962,
			"second_score":	119468
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	68,
			"primary_score":	999986,
			"second_score":	119934
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	70,
			"primary_score":	999986,
			"second_score":	119933
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	73,
			"primary_score":	999986,
			"second_score":	119932
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	74,
			"primary_score":	999987,
			"second_score":	119929
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	75,
			"primary_score":	999987,
			"second_score":	119928
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	82,
			"primary_score":	999625,
			"second_score":	114733
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	84,
			"primary_score":	999625,
			"second_score":	114732
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	85,
			"primary_score":	999674,
			"second_score":	114394
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	86,
			"primary_score":	999985,
			"second_score":	114730
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	88,
			"primary_score":	999985,
			"second_score":	114729
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	90,
			"primary_score":	999985,
			"second_score":	114719
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	91,
			"primary_score":	999985,
			"second_score":	114718
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	92,
			"primary_score":	999985,
			"second_score":	114717
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	104,
			"primary_score":	999674,
			"second_score":	132035
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	105,
			"primary_score":	999674,
			"second_score":	132034
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	107,
			"primary_score":	999674,
			"second_score":	132033
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	111,
			"primary_score":	999674,
			"second_score":	132032
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	115,
			"primary_score":	999674,
			"second_score":	132031
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	117,
			"primary_score":	999674,
			"second_score":	132030
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	118,
			"primary_score":	999674,
			"second_score":	132029
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	119,
			"primary_score":	999674,
			"second_score":	132028
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	121,
			"primary_score":	999674,
			"second_score":	132027
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	122,
			"primary_score":	999674,
			"second_score":	132026
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	123,
			"primary_score":	999674,
			"second_score":	132025
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	124,
			"primary_score":	999674,
			"second_score":	132024
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	125,
			"primary_score":	999674,
			"second_score":	132023
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	126,
			"primary_score":	999674,
			"second_score":	132022
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	127,
			"primary_score":	999674,
			"second_score":	132021
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	132,
			"primary_score":	999674,
			"second_score":	132020
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	167,
			"primary_score":	999677,
			"second_score":	119813
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	169,
			"primary_score":	999677,
			"second_score":	119812
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	171,
			"primary_score":	999677,
			"second_score":	119811
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	172,
			"primary_score":	999677,
			"second_score":	119809
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	173,
			"primary_score":	999677,
			"second_score":	119669
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	175,
			"primary_score":	999677,
			"second_score":	119667
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	183,
			"primary_score":	999676,
			"second_score":	119808
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	184,
			"primary_score":	999676,
			"second_score":	119807
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	186,
			"primary_score":	999676,
			"second_score":	119806
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	190,
			"primary_score":	999676,
			"second_score":	119805
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	196,
			"primary_score":	999676,
			"second_score":	119804
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	197,
			"primary_score":	999677,
			"second_score":	119803
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	198,
			"primary_score":	999678,
			"second_score":	119802
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	214,
			"primary_score":	999678,
			"second_score":	119801
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	216,
			"primary_score":	999678,
			"second_score":	119800
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	217,
			"primary_score":	999684,
			"second_score":	119797
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	218,
			"primary_score":	999678,
			"second_score":	119789
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	219,
			"primary_score":	999679,
			"second_score":	119788
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	220,
			"primary_score":	999679,
			"second_score":	119782
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	223,
			"primary_score":	999679,
			"second_score":	119677
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	225,
			"primary_score":	999678,
			"second_score":	119673
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	230,
			"primary_score":	999676,
			"second_score":	119671
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	239,
			"primary_score":	999676,
			"second_score":	119670
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	270,
			"primary_score":	999711,
			"second_score":	121541
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	272,
			"primary_score":	999711,
			"second_score":	121540
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	110,
			"primary_score":	999625,
			"second_score":	14792
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	122,
			"primary_score":	999625,
			"second_score":	14794
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	124,
			"primary_score":	999625,
			"second_score":	14793
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	136,
			"primary_score":	999625,
			"second_score":	114813
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	140,
			"primary_score":	999625,
			"second_score":	114812
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	197,
			"primary_score":	999625,
			"second_score":	114796
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	201,
			"primary_score":	999625,
			"second_score":	114795
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	266,
			"primary_score":	999625,
			"second_score":	15227
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	268,
			"primary_score":	999625,
			"second_score":	15226
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	271,
			"primary_score":	999625,
			"second_score":	15225
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	312,
			"primary_score":	999625,
			"second_score":	19007
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	314,
			"primary_score":	999625,
			"second_score":	19006
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	315,
			"primary_score":	999625,
			"second_score":	18943
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	316,
			"primary_score":	999625,
			"second_score":	18942
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	319,
			"primary_score":	999625,
			"second_score":	18934
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	321,
			"primary_score":	999625,
			"second_score":	15224
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	329,
			"primary_score":	999625,
			"second_score":	15223
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	330,
			"primary_score":	999625,
			"second_score":	15215
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	333,
			"primary_score":	999625,
			"second_score":	15214
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	334,
			"primary_score":	999625,
			"second_score":	14785
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	335,
			"primary_score":	999625,
			"second_score":	14777
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	336,
			"primary_score":	999625,
			"second_score":	16281
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	338,
			"primary_score":	999625,
			"second_score":	14776
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	339,
			"primary_score":	999625,
			"second_score":	14775
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	350,
			"primary_score":	999625,
			"second_score":	119395
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	351,
			"primary_score":	999625,
			"second_score":	119394
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	352,
			"primary_score":	999625,
			"second_score":	119393
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	354,
			"primary_score":	999625,
			"second_score":	119392
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	359,
			"primary_score":	999625,
			"second_score":	119391
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	360,
			"primary_score":	999625,
			"second_score":	119390
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	363,
			"primary_score":	999625,
			"second_score":	119371
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	367,
			"primary_score":	999625,
			"second_score":	119370
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	369,
			"primary_score":	999625,
			"second_score":	119351
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	378,
			"primary_score":	999625,
			"second_score":	119350
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	379,
			"primary_score":	999625,
			"second_score":	119349
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	380,
			"primary_score":	999625,
			"second_score":	119348
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	381,
			"primary_score":	999625,
			"second_score":	119171
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	382,
			"primary_score":	999625,
			"second_score":	119168
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	384,
			"primary_score":	999625,
			"second_score":	119167
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	386,
			"primary_score":	999625,
			"second_score":	119102
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	388,
			"primary_score":	999625,
			"second_score":	119051
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	391,
			"primary_score":	999625,
			"second_score":	119050
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	394,
			"primary_score":	999625,
			"second_score":	119049
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	397,
			"primary_score":	999625,
			"second_score":	119048
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	400,
			"primary_score":	999625,
			"second_score":	119047
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	401,
			"primary_score":	999625,
			"second_score":	119046
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	403,
			"primary_score":	999625,
			"second_score":	119043
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	416,
			"primary_score":	999625,
			"second_score":	136377
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	417,
			"primary_score":	999625,
			"second_score":	136376
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	418,
			"primary_score":	999625,
			"second_score":	136375
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	423,
			"primary_score":	999625,
			"second_score":	136382
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	424,
			"primary_score":	999625,
			"second_score":	136381
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	426,
			"primary_score":	999625,
			"second_score":	136380
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	437,
			"primary_score":	999625,
			"second_score":	136379
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	439,
			"primary_score":	999625,
			"second_score":	136378
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	441,
			"primary_score":	999625,
			"second_score":	136374
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	446,
			"primary_score":	999625,
			"second_score":	136385
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	488,
			"primary_score":	999625,
			"second_score":	136346
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	490,
			"primary_score":	999625,
			"second_score":	136345
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	493,
			"primary_score":	999625,
			"second_score":	136344
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	496,
			"primary_score":	999625,
			"second_score":	136343
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	497,
			"primary_score":	999625,
			"second_score":	136342
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	500,
			"primary_score":	999625,
			"second_score":	136339
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	501,
			"primary_score":	999643,
			"second_score":	136338
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	502,
			"primary_score":	999643,
			"second_score":	136282
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	504,
			"primary_score":	999625,
			"second_score":	136281
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	505,
			"primary_score":	999625,
			"second_score":	136280
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	506,
			"primary_score":	999625,
			"second_score":	136221
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	508,
			"primary_score":	999625,
			"second_score":	136220
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	509,
			"primary_score":	999625,
			"second_score":	136219
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	510,
			"primary_score":	999625,
			"second_score":	136140
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	513,
			"primary_score":	999625,
			"second_score":	136139
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	514,
			"primary_score":	999625,
			"second_score":	136138
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	515,
			"primary_score":	999625,
			"second_score":	136137
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	516,
			"primary_score":	999625,
			"second_score":	135808
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	517,
			"primary_score":	999625,
			"second_score":	135807
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	519,
			"primary_score":	999625,
			"second_score":	135806
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	520,
			"primary_score":	999637,
			"second_score":	135840
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	522,
			"primary_score":	999625,
			"second_score":	135805
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	530,
			"primary_score":	999625,
			"second_score":	125175
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	537,
			"primary_score":	999625,
			"second_score":	125236
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	539,
			"primary_score":	999625,
			"second_score":	135804
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	540,
			"primary_score":	999625,
			"second_score":	135800
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	543,
			"primary_score":	999625,
			"second_score":	135799
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	544,
			"primary_score":	999625,
			"second_score":	135798
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	543,
			"primary_score":	999625,
			"second_score":	119806
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	544,
			"primary_score":	999625,
			"second_score":	119805
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	546,
			"primary_score":	999625,
			"second_score":	119804
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	558,
			"primary_score":	999625,
			"second_score":	119803
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	559,
			"primary_score":	999625,
			"second_score":	119775
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	561,
			"primary_score":	999625,
			"second_score":	119774
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	608,
			"primary_score":	999625,
			"second_score":	119773
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	78,
			"primary_score":	999625,
			"second_score":	113503
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	79,
			"primary_score":	999625,
			"second_score":	113529
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	86,
			"primary_score":	999625,
			"second_score":	114837
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	88,
			"primary_score":	999625,
			"second_score":	114836
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	96,
			"primary_score":	999625,
			"second_score":	114838
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	97,
			"primary_score":	999625,
			"second_score":	114835
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	98,
			"primary_score":	999625,
			"second_score":	114834
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	100,
			"primary_score":	999625,
			"second_score":	114833
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	104,
			"primary_score":	999625,
			"second_score":	114832
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	105,
			"primary_score":	999625,
			"second_score":	114831
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	62,
			"primary_score":	999625,
			"second_score":	133838
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	64,
			"primary_score":	999625,
			"second_score":	122855
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	65,
			"primary_score":	999625,
			"second_score":	122854
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	66,
			"primary_score":	999625,
			"second_score":	122853
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	67,
			"primary_score":	999625,
			"second_score":	122852
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	87,
			"primary_score":	999625,
			"second_score":	131886
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	88,
			"primary_score":	999625,
			"second_score":	131885
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	89,
			"primary_score":	999625,
			"second_score":	131884
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	90,
			"primary_score":	999625,
			"second_score":	131883
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	27,
			"primary_score":	999625,
			"second_score":	114852
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	28,
			"primary_score":	999625,
			"second_score":	114851
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	29,
			"primary_score":	999625,
			"second_score":	114850
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	30,
			"primary_score":	999625,
			"second_score":	114849
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	50,
			"primary_score":	999625,
			"second_score":	136958
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	51,
			"primary_score":	999625,
			"second_score":	136957
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	52,
			"primary_score":	999625,
			"second_score":	136956
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	62,
			"primary_score":	999625,
			"second_score":	136948
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	63,
			"primary_score":	999625,
			"second_score":	136947
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	65,
			"primary_score":	999625,
			"second_score":	136928
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	83,
			"primary_score":	999625,
			"second_score":	135794
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	84,
			"primary_score":	999625,
			"second_score":	135793
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	93,
			"primary_score":	999625,
			"second_score":	113252
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	95,
			"primary_score":	999625,
			"second_score":	113251
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	103,
			"primary_score":	999625,
			"second_score":	113250
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	121,
			"primary_score":	999625,
			"second_score":	136389
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	123,
			"primary_score":	999625,
			"second_score":	136388
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	130,
			"primary_score":	999625,
			"second_score":	136387
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	46,
			"primary_score":	999625,
			"second_score":	135586
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	47,
			"primary_score":	999625,
			"second_score":	135585
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	67,
			"primary_score":	999625,
			"second_score":	135595
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	68,
			"primary_score":	999625,
			"second_score":	135594
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	74,
			"primary_score":	999625,
			"second_score":	135593
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	75,
			"primary_score":	999625,
			"second_score":	135592
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	76,
			"primary_score":	999625,
			"second_score":	135591
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	77,
			"primary_score":	999625,
			"second_score":	135590
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	78,
			"primary_score":	999625,
			"second_score":	135589
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	83,
			"primary_score":	999625,
			"second_score":	135596
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	84,
			"primary_score":	999625,
			"second_score":	135588
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	85,
			"primary_score":	999625,
			"second_score":	135587
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	289,
			"primary_score":	999625,
			"second_score":	135598
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	299,
			"primary_score":	999625,
			"second_score":	135597
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	301,
			"primary_score":	999625,
			"second_score":	135584
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	302,
			"primary_score":	999625,
			"second_score":	135583
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	309,
			"primary_score":	999625,
			"second_score":	135582
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	310,
			"primary_score":	999625,
			"second_score":	135581
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	311,
			"primary_score":	999625,
			"second_score":	135562
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	313,
			"primary_score":	999625,
			"second_score":	135561
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	322,
			"primary_score":	999625,
			"second_score":	135608
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	325,
			"primary_score":	999625,
			"second_score":	135607
		}, {
			"file":	"Zend/zend_string.c",
			"line":	77,
			"primary_score":	999625,
			"second_score":	6123
		}, {
			"file":	"Zend/zend_string.c",
			"line":	78,
			"primary_score":	999625,
			"second_score":	6122
		}, {
			"file":	"Zend/zend_string.c",
			"line":	85,
			"primary_score":	999625,
			"second_score":	137213
		}, {
			"file":	"Zend/zend_string.c",
			"line":	86,
			"primary_score":	999625,
			"second_score":	137212
		}, {
			"file":	"Zend/zend_string.c",
			"line":	87,
			"primary_score":	999625,
			"second_score":	137211
		}, {
			"file":	"Zend/zend_string.c",
			"line":	89,
			"primary_score":	999625,
			"second_score":	137210
		}, {
			"file":	"Zend/zend_string.c",
			"line":	90,
			"primary_score":	999767,
			"second_score":	137953
		}, {
			"file":	"Zend/zend_string.c",
			"line":	93,
			"primary_score":	999625,
			"second_score":	137209
		}, {
			"file":	"Zend/zend_string.c",
			"line":	94,
			"primary_score":	999625,
			"second_score":	137195
		}, {
			"file":	"Zend/zend_string.c",
			"line":	95,
			"primary_score":	999625,
			"second_score":	137194
		}, {
			"file":	"Zend/zend_string.c",
			"line":	96,
			"primary_score":	999625,
			"second_score":	137193
		}, {
			"file":	"Zend/zend_string.c",
			"line":	97,
			"primary_score":	999625,
			"second_score":	137192
		}, {
			"file":	"Zend/zend_string.c",
			"line":	105,
			"primary_score":	999625,
			"second_score":	141735
		}, {
			"file":	"Zend/zend_string.c",
			"line":	108,
			"primary_score":	999625,
			"second_score":	140276
		}, {
			"file":	"Zend/zend_string.c",
			"line":	114,
			"primary_score":	999625,
			"second_score":	140275
		}, {
			"file":	"Zend/zend_string.c",
			"line":	115,
			"primary_score":	999625,
			"second_score":	140274
		}, {
			"file":	"Zend/zend_string.c",
			"line":	121,
			"primary_score":	999625,
			"second_score":	140273
		}, {
			"file":	"Zend/zend_string.c",
			"line":	122,
			"primary_score":	999625,
			"second_score":	140272
		}, {
			"file":	"Zend/zend_string.c",
			"line":	123,
			"primary_score":	999625,
			"second_score":	140271
		}, {
			"file":	"Zend/zend_string.c",
			"line":	124,
			"primary_score":	999625,
			"second_score":	140270
		}, {
			"file":	"Zend/zend_string.c",
			"line":	126,
			"primary_score":	999625,
			"second_score":	140251
		}, {
			"file":	"Zend/zend_string.c",
			"line":	127,
			"primary_score":	999625,
			"second_score":	140250
		}, {
			"file":	"Zend/zend_string.c",
			"line":	128,
			"primary_score":	999625,
			"second_score":	140249
		}, {
			"file":	"Zend/zend_string.c",
			"line":	129,
			"primary_score":	999625,
			"second_score":	140248
		}, {
			"file":	"Zend/zend_string.c",
			"line":	131,
			"primary_score":	999625,
			"second_score":	140247
		}, {
			"file":	"Zend/zend_string.c",
			"line":	132,
			"primary_score":	999625,
			"second_score":	140246
		}, {
			"file":	"Zend/zend_string.c",
			"line":	133,
			"primary_score":	999625,
			"second_score":	140245
		}, {
			"file":	"Zend/zend_string.c",
			"line":	134,
			"primary_score":	999625,
			"second_score":	146782
		}, {
			"file":	"Zend/zend_string.c",
			"line":	137,
			"primary_score":	999625,
			"second_score":	140244
		}, {
			"file":	"Zend/zend_string.c",
			"line":	139,
			"primary_score":	999625,
			"second_score":	140242
		}, {
			"file":	"Zend/zend_string.c",
			"line":	140,
			"primary_score":	999625,
			"second_score":	140241
		}, {
			"file":	"Zend/zend_string.c",
			"line":	141,
			"primary_score":	999625,
			"second_score":	140240
		}, {
			"file":	"Zend/zend_string.c",
			"line":	142,
			"primary_score":	999625,
			"second_score":	140239
		}, {
			"file":	"Zend/zend_string.c",
			"line":	143,
			"primary_score":	999625,
			"second_score":	140238
		}, {
			"file":	"Zend/zend_string.c",
			"line":	145,
			"primary_score":	999625,
			"second_score":	140237
		}, {
			"file":	"Zend/zend_string.c",
			"line":	149,
			"primary_score":	999625,
			"second_score":	140236
		}, {
			"file":	"Zend/zend_string.c",
			"line":	151,
			"primary_score":	999625,
			"second_score":	140235
		}, {
			"file":	"Zend/zend_string.c",
			"line":	153,
			"primary_score":	999625,
			"second_score":	140233
		}, {
			"file":	"Zend/zend_string.c",
			"line":	155,
			"primary_score":	999625,
			"second_score":	140232
		}, {
			"file":	"Zend/zend_string.c",
			"line":	174,
			"primary_score":	999625,
			"second_score":	140231
		}, {
			"file":	"Zend/zend_string.c",
			"line":	188,
			"primary_score":	999625,
			"second_score":	112703
		}, {
			"file":	"Zend/zend_string.c",
			"line":	189,
			"primary_score":	999625,
			"second_score":	112702
		}, {
			"file":	"Zend/zend_string.c",
			"line":	192,
			"primary_score":	999625,
			"second_score":	112701
		}, {
			"file":	"Zend/zend_string.c",
			"line":	199,
			"primary_score":	999625,
			"second_score":	112700
		}, {
			"file":	"Zend/zend_string.c",
			"line":	200,
			"primary_score":	999625,
			"second_score":	103318
		}, {
			"file":	"Zend/zend_string.c",
			"line":	201,
			"primary_score":	999625,
			"second_score":	103317
		}, {
			"file":	"Zend/zend_string.c",
			"line":	202,
			"primary_score":	999625,
			"second_score":	109871
		}, {
			"file":	"Zend/zend_string.c",
			"line":	203,
			"primary_score":	999625,
			"second_score":	109870
		}, {
			"file":	"Zend/zend_string.c",
			"line":	204,
			"primary_score":	999625,
			"second_score":	109869
		}, {
			"file":	"Zend/zend_string.c",
			"line":	208,
			"primary_score":	999625,
			"second_score":	109868
		}, {
			"file":	"Zend/zend_string.c",
			"line":	209,
			"primary_score":	999625,
			"second_score":	107291
		}, {
			"file":	"Zend/zend_string.c",
			"line":	211,
			"primary_score":	999625,
			"second_score":	109867
		}, {
			"file":	"Zend/zend_string.c",
			"line":	213,
			"primary_score":	999625,
			"second_score":	109866
		}, {
			"file":	"Zend/zend_string.c",
			"line":	215,
			"primary_score":	999625,
			"second_score":	103316
		}, {
			"file":	"Zend/zend_string.c",
			"line":	216,
			"primary_score":	999625,
			"second_score":	103315
		}, {
			"file":	"Zend/zend_string.c",
			"line":	218,
			"primary_score":	999625,
			"second_score":	103314
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	458,
			"primary_score":	999625,
			"second_score":	6279
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	466,
			"primary_score":	999625,
			"second_score":	6225
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1378,
			"primary_score":	999625,
			"second_score":	6278
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1379,
			"primary_score":	999625,
			"second_score":	6277
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1381,
			"primary_score":	999625,
			"second_score":	6276
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1382,
			"primary_score":	999625,
			"second_score":	6275
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1383,
			"primary_score":	999625,
			"second_score":	6229
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1384,
			"primary_score":	999625,
			"second_score":	6228
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1388,
			"primary_score":	999625,
			"second_score":	6227
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1390,
			"primary_score":	999625,
			"second_score":	6226
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	32,
			"primary_score":	999625,
			"second_score":	113831
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	37,
			"primary_score":	999625,
			"second_score":	115489
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	38,
			"primary_score":	999625,
			"second_score":	115108
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	41,
			"primary_score":	999625,
			"second_score":	114687
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	43,
			"primary_score":	999625,
			"second_score":	114686
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	44,
			"primary_score":	999625,
			"second_score":	114685
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	45,
			"primary_score":	999625,
			"second_score":	114590
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	48,
			"primary_score":	999625,
			"second_score":	114571
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	51,
			"primary_score":	999677,
			"second_score":	119815
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	53,
			"primary_score":	999677,
			"second_score":	119814
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	55,
			"primary_score":	999677,
			"second_score":	119665
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	58,
			"primary_score":	999625,
			"second_score":	113830
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	61,
			"primary_score":	999625,
			"second_score":	113829
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	63,
			"primary_score":	999625,
			"second_score":	113627
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	77,
			"primary_score":	999625,
			"second_score":	15243
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	81,
			"primary_score":	999625,
			"second_score":	18984
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	82,
			"primary_score":	999625,
			"second_score":	18981
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	107,
			"primary_score":	999625,
			"second_score":	132963
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	121,
			"primary_score":	999625,
			"second_score":	132962
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	124,
			"primary_score":	999625,
			"second_score":	132961
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	127,
			"primary_score":	999948,
			"second_score":	133430
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	128,
			"primary_score":	999948,
			"second_score":	133429
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	129,
			"primary_score":	999948,
			"second_score":	133428
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	130,
			"primary_score":	999948,
			"second_score":	133427
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	132,
			"primary_score":	999948,
			"second_score":	133426
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	135,
			"primary_score":	999950,
			"second_score":	133425
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	136,
			"primary_score":	999950,
			"second_score":	133367
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	137,
			"primary_score":	999950,
			"second_score":	133347
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	138,
			"primary_score":	999950,
			"second_score":	132758
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	140,
			"primary_score":	999950,
			"second_score":	132757
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	153,
			"primary_score":	999625,
			"second_score":	119464
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	32,
			"primary_score":	999625,
			"second_score":	113833
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	33,
			"primary_score":	999625,
			"second_score":	115238
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	35,
			"primary_score":	999625,
			"second_score":	113832
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	42,
			"primary_score":	999625,
			"second_score":	132965
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	43,
			"primary_score":	999625,
			"second_score":	118728
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	45,
			"primary_score":	999625,
			"second_score":	132964
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	345,
			"primary_score":	999625,
			"second_score":	135533
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	346,
			"primary_score":	999625,
			"second_score":	135532
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	347,
			"primary_score":	999625,
			"second_score":	135531
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	350,
			"primary_score":	999625,
			"second_score":	135530
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	354,
			"primary_score":	999625,
			"second_score":	135529
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	356,
			"primary_score":	999625,
			"second_score":	135528
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	363,
			"primary_score":	999625,
			"second_score":	135519
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	364,
			"primary_score":	999625,
			"second_score":	135518
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	365,
			"primary_score":	999625,
			"second_score":	135517
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	366,
			"primary_score":	999625,
			"second_score":	135516
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	367,
			"primary_score":	999625,
			"second_score":	135515
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	368,
			"primary_score":	999625,
			"second_score":	135514
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	369,
			"primary_score":	999625,
			"second_score":	135513
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	370,
			"primary_score":	999625,
			"second_score":	135512
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	371,
			"primary_score":	999625,
			"second_score":	135511
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	372,
			"primary_score":	999625,
			"second_score":	135510
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	373,
			"primary_score":	999625,
			"second_score":	135509
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	374,
			"primary_score":	999625,
			"second_score":	135508
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	375,
			"primary_score":	999625,
			"second_score":	135507
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	377,
			"primary_score":	999625,
			"second_score":	135506
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	379,
			"primary_score":	999625,
			"second_score":	135505
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	380,
			"primary_score":	999625,
			"second_score":	135504
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	383,
			"primary_score":	999625,
			"second_score":	135471
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	395,
			"primary_score":	999625,
			"second_score":	135470
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	396,
			"primary_score":	999625,
			"second_score":	135469
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	397,
			"primary_score":	999625,
			"second_score":	135468
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	399,
			"primary_score":	999625,
			"second_score":	135467
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	400,
			"primary_score":	999625,
			"second_score":	135466
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	402,
			"primary_score":	999625,
			"second_score":	135465
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	403,
			"primary_score":	999625,
			"second_score":	121576
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	410,
			"primary_score":	999625,
			"second_score":	121575
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	411,
			"primary_score":	999625,
			"second_score":	119401
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	414,
			"primary_score":	999625,
			"second_score":	119400
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	431,
			"primary_score":	999625,
			"second_score":	119478
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	436,
			"primary_score":	999625,
			"second_score":	119477
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	437,
			"primary_score":	999625,
			"second_score":	119476
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	458,
			"primary_score":	999625,
			"second_score":	119414
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	459,
			"primary_score":	999625,
			"second_score":	119413
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	461,
			"primary_score":	999625,
			"second_score":	119412
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	462,
			"primary_score":	999625,
			"second_score":	119411
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	463,
			"primary_score":	999625,
			"second_score":	119410
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	474,
			"primary_score":	999625,
			"second_score":	119409
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	476,
			"primary_score":	999625,
			"second_score":	119408
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	478,
			"primary_score":	999625,
			"second_score":	119404
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	481,
			"primary_score":	999625,
			"second_score":	119403
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	566,
			"primary_score":	999625,
			"second_score":	119402
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	571,
			"primary_score":	999625,
			"second_score":	131903
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	572,
			"primary_score":	999625,
			"second_score":	131902
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	573,
			"primary_score":	999625,
			"second_score":	131901
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	575,
			"primary_score":	999625,
			"second_score":	131900
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	576,
			"primary_score":	999625,
			"second_score":	131899
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	589,
			"primary_score":	999625,
			"second_score":	131898
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	603,
			"primary_score":	999625,
			"second_score":	131897
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	604,
			"primary_score":	999724,
			"second_score":	131896
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	605,
			"primary_score":	999724,
			"second_score":	131895
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	606,
			"primary_score":	999724,
			"second_score":	131894
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	607,
			"primary_score":	999724,
			"second_score":	131893
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	608,
			"primary_score":	999724,
			"second_score":	131892
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	609,
			"primary_score":	999724,
			"second_score":	131891
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	610,
			"primary_score":	999724,
			"second_score":	131890
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	613,
			"primary_score":	999625,
			"second_score":	131889
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	614,
			"primary_score":	999625,
			"second_score":	131879
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	615,
			"primary_score":	999625,
			"second_score":	131875
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	617,
			"primary_score":	999625,
			"second_score":	131874
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	618,
			"primary_score":	999625,
			"second_score":	131873
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	620,
			"primary_score":	999625,
			"second_score":	131872
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	621,
			"primary_score":	999625,
			"second_score":	131763
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	622,
			"primary_score":	999625,
			"second_score":	131760
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	623,
			"primary_score":	999625,
			"second_score":	131759
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	625,
			"primary_score":	999625,
			"second_score":	131758
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	626,
			"primary_score":	999625,
			"second_score":	131757
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	627,
			"primary_score":	999625,
			"second_score":	131756
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	628,
			"primary_score":	999625,
			"second_score":	131755
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	630,
			"primary_score":	999625,
			"second_score":	131754
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	631,
			"primary_score":	999625,
			"second_score":	131586
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	632,
			"primary_score":	999625,
			"second_score":	131577
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	636,
			"primary_score":	999625,
			"second_score":	131576
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	638,
			"primary_score":	999625,
			"second_score":	131575
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	643,
			"primary_score":	999625,
			"second_score":	121953
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	644,
			"primary_score":	999662,
			"second_score":	121952
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	709,
			"primary_score":	999625,
			"second_score":	121923
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	710,
			"primary_score":	999625,
			"second_score":	121922
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	712,
			"primary_score":	999625,
			"second_score":	121921
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	713,
			"primary_score":	999729,
			"second_score":	121920
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	714,
			"primary_score":	999733,
			"second_score":	121919
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	722,
			"primary_score":	999733,
			"second_score":	121918
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	724,
			"primary_score":	999729,
			"second_score":	121879
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	725,
			"primary_score":	999729,
			"second_score":	121878
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	726,
			"primary_score":	999729,
			"second_score":	121877
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	729,
			"primary_score":	999625,
			"second_score":	121876
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	730,
			"primary_score":	999625,
			"second_score":	121875
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	732,
			"primary_score":	999625,
			"second_score":	121874
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	734,
			"primary_score":	999625,
			"second_score":	121810
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	742,
			"primary_score":	999625,
			"second_score":	121809
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	747,
			"primary_score":	999725,
			"second_score":	131905
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	748,
			"primary_score":	999725,
			"second_score":	131904
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	794,
			"primary_score":	999748,
			"second_score":	132324
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	795,
			"primary_score":	999748,
			"second_score":	132323
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	796,
			"primary_score":	999748,
			"second_score":	132322
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	798,
			"primary_score":	999748,
			"second_score":	132321
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	799,
			"primary_score":	999748,
			"second_score":	132320
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	808,
			"primary_score":	999748,
			"second_score":	132319
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	809,
			"primary_score":	999748,
			"second_score":	132295
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	810,
			"primary_score":	999748,
			"second_score":	132016
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	812,
			"primary_score":	999748,
			"second_score":	132013
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	814,
			"primary_score":	999748,
			"second_score":	132007
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	822,
			"primary_score":	999825,
			"second_score":	132006
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	823,
			"primary_score":	999825,
			"second_score":	132005
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	824,
			"primary_score":	999825,
			"second_score":	132003
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	827,
			"primary_score":	999825,
			"second_score":	131999
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	830,
			"primary_score":	999825,
			"second_score":	131993
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	831,
			"primary_score":	999825,
			"second_score":	131992
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	832,
			"primary_score":	999825,
			"second_score":	131991
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	834,
			"primary_score":	999825,
			"second_score":	131990
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	835,
			"primary_score":	999825,
			"second_score":	131989
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1151,
			"primary_score":	999746,
			"second_score":	132378
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1153,
			"primary_score":	999746,
			"second_score":	132377
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1154,
			"primary_score":	999746,
			"second_score":	132376
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1155,
			"primary_score":	999746,
			"second_score":	132375
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1161,
			"primary_score":	999746,
			"second_score":	132374
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1163,
			"primary_score":	999746,
			"second_score":	132373
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1164,
			"primary_score":	999746,
			"second_score":	132372
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1167,
			"primary_score":	999746,
			"second_score":	132371
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1168,
			"primary_score":	999748,
			"second_score":	132331
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1178,
			"primary_score":	999748,
			"second_score":	132329
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1179,
			"primary_score":	999748,
			"second_score":	132328
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1731,
			"primary_score":	999625,
			"second_score":	121127
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1733,
			"primary_score":	999625,
			"second_score":	121126
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1734,
			"primary_score":	999625,
			"second_score":	121125
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1736,
			"primary_score":	999625,
			"second_score":	121124
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1737,
			"primary_score":	999625,
			"second_score":	121123
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1739,
			"primary_score":	999625,
			"second_score":	121122
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1746,
			"primary_score":	999625,
			"second_score":	121121
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1749,
			"primary_score":	999625,
			"second_score":	121060
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1750,
			"primary_score":	999625,
			"second_score":	121059
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1919,
			"primary_score":	999625,
			"second_score":	122859
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1921,
			"primary_score":	999625,
			"second_score":	122858
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1923,
			"primary_score":	999625,
			"second_score":	122857
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1925,
			"primary_score":	999625,
			"second_score":	122851
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1927,
			"primary_score":	999625,
			"second_score":	122850
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1931,
			"primary_score":	999625,
			"second_score":	122837
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1933,
			"primary_score":	999625,
			"second_score":	122835
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1935,
			"primary_score":	999625,
			"second_score":	122834
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1940,
			"primary_score":	999625,
			"second_score":	119421
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1941,
			"primary_score":	999625,
			"second_score":	119420
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1944,
			"primary_score":	999625,
			"second_score":	119419
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1945,
			"primary_score":	999625,
			"second_score":	119418
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1947,
			"primary_score":	999625,
			"second_score":	119417
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1948,
			"primary_score":	999625,
			"second_score":	119416
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1951,
			"primary_score":	999625,
			"second_score":	118765
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1952,
			"primary_score":	999625,
			"second_score":	118764
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1954,
			"primary_score":	999625,
			"second_score":	118763
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1956,
			"primary_score":	999625,
			"second_score":	118762
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1957,
			"primary_score":	999625,
			"second_score":	118738
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1958,
			"primary_score":	999625,
			"second_score":	118730
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1959,
			"primary_score":	999625,
			"second_score":	118727
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1978,
			"primary_score":	999625,
			"second_score":	119415
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2077,
			"primary_score":	999625,
			"second_score":	133006
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2079,
			"primary_score":	999625,
			"second_score":	133005
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2080,
			"primary_score":	999625,
			"second_score":	133004
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2084,
			"primary_score":	999625,
			"second_score":	133003
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2085,
			"primary_score":	999625,
			"second_score":	133002
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2086,
			"primary_score":	999625,
			"second_score":	133001
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2089,
			"primary_score":	999625,
			"second_score":	133000
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2091,
			"primary_score":	999625,
			"second_score":	132999
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2092,
			"primary_score":	999625,
			"second_score":	132975
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2093,
			"primary_score":	999625,
			"second_score":	132967
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2094,
			"primary_score":	999625,
			"second_score":	132966
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2096,
			"primary_score":	999625,
			"second_score":	132960
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2099,
			"primary_score":	999625,
			"second_score":	132956
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2100,
			"primary_score":	999625,
			"second_score":	132955
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5139,
			"primary_score":	999906,
			"second_score":	134964
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5141,
			"primary_score":	999906,
			"second_score":	134963
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5143,
			"primary_score":	999906,
			"second_score":	134962
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5144,
			"primary_score":	999906,
			"second_score":	134961
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5154,
			"primary_score":	999906,
			"second_score":	134960
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5155,
			"primary_score":	999906,
			"second_score":	134959
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5161,
			"primary_score":	999906,
			"second_score":	134958
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5162,
			"primary_score":	999906,
			"second_score":	134957
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5164,
			"primary_score":	999906,
			"second_score":	134956
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5165,
			"primary_score":	999906,
			"second_score":	134932
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5166,
			"primary_score":	999906,
			"second_score":	134924
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5167,
			"primary_score":	999906,
			"second_score":	134923
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5173,
			"primary_score":	999906,
			"second_score":	134917
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5212,
			"primary_score":	999906,
			"second_score":	134916
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5214,
			"primary_score":	999906,
			"second_score":	134772
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5219,
			"primary_score":	999906,
			"second_score":	134771
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5220,
			"primary_score":	999906,
			"second_score":	134770
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5225,
			"primary_score":	999910,
			"second_score":	135462
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5227,
			"primary_score":	999910,
			"second_score":	135461
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5228,
			"primary_score":	999910,
			"second_score":	135418
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5232,
			"primary_score":	999910,
			"second_score":	135417
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5999,
			"primary_score":	999625,
			"second_score":	119473
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6000,
			"primary_score":	999625,
			"second_score":	119472
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6001,
			"primary_score":	999625,
			"second_score":	119471
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6002,
			"primary_score":	999625,
			"second_score":	119470
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6004,
			"primary_score":	999625,
			"second_score":	119469
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6005,
			"primary_score":	999625,
			"second_score":	119468
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6007,
			"primary_score":	999625,
			"second_score":	119466
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6014,
			"primary_score":	999625,
			"second_score":	119465
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6017,
			"primary_score":	999625,
			"second_score":	119452
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6018,
			"primary_score":	999625,
			"second_score":	119426
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6019,
			"primary_score":	999625,
			"second_score":	119425
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10178,
			"primary_score":	999625,
			"second_score":	121264
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10179,
			"primary_score":	999625,
			"second_score":	121263
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10180,
			"primary_score":	999625,
			"second_score":	121262
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10181,
			"primary_score":	999625,
			"second_score":	121261
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10183,
			"primary_score":	999625,
			"second_score":	121260
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10184,
			"primary_score":	999625,
			"second_score":	121259
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10186,
			"primary_score":	999625,
			"second_score":	121248
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10193,
			"primary_score":	999625,
			"second_score":	121247
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10196,
			"primary_score":	999625,
			"second_score":	121186
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10197,
			"primary_score":	999625,
			"second_score":	121132
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10198,
			"primary_score":	999625,
			"second_score":	121131
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10211,
			"primary_score":	999625,
			"second_score":	120531
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10212,
			"primary_score":	999625,
			"second_score":	120530
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10213,
			"primary_score":	999625,
			"second_score":	120529
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10214,
			"primary_score":	999625,
			"second_score":	120528
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10216,
			"primary_score":	999625,
			"second_score":	120527
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10217,
			"primary_score":	999625,
			"second_score":	120526
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10219,
			"primary_score":	999625,
			"second_score":	120515
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10222,
			"primary_score":	999625,
			"second_score":	120514
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10223,
			"primary_score":	999625,
			"second_score":	120509
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10224,
			"primary_score":	999625,
			"second_score":	120478
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10228,
			"primary_score":	999625,
			"second_score":	120477
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10236,
			"primary_score":	999625,
			"second_score":	120476
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10519,
			"primary_score":	999625,
			"second_score":	122921
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10520,
			"primary_score":	999625,
			"second_score":	122920
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10521,
			"primary_score":	999625,
			"second_score":	122919
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10522,
			"primary_score":	999625,
			"second_score":	122918
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10524,
			"primary_score":	999625,
			"second_score":	122907
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10528,
			"primary_score":	999625,
			"second_score":	122906
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10537,
			"primary_score":	999625,
			"second_score":	122904
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10538,
			"primary_score":	999625,
			"second_score":	122902
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10539,
			"primary_score":	999625,
			"second_score":	122898
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10541,
			"primary_score":	999625,
			"second_score":	122864
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10542,
			"primary_score":	999625,
			"second_score":	122863
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10547,
			"primary_score":	999625,
			"second_score":	122928
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10548,
			"primary_score":	999625,
			"second_score":	122927
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10549,
			"primary_score":	999625,
			"second_score":	122926
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10551,
			"primary_score":	999625,
			"second_score":	122925
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10552,
			"primary_score":	999625,
			"second_score":	122924
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10553,
			"primary_score":	999625,
			"second_score":	122923
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10554,
			"primary_score":	999625,
			"second_score":	122922
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11261,
			"primary_score":	999625,
			"second_score":	119590
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11262,
			"primary_score":	999625,
			"second_score":	119589
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11263,
			"primary_score":	999625,
			"second_score":	119588
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11265,
			"primary_score":	999625,
			"second_score":	119587
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11266,
			"primary_score":	999625,
			"second_score":	119586
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11268,
			"primary_score":	999625,
			"second_score":	119575
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11269,
			"primary_score":	999625,
			"second_score":	119572
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11270,
			"primary_score":	999625,
			"second_score":	119571
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11272,
			"primary_score":	999625,
			"second_score":	119537
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11273,
			"primary_score":	999625,
			"second_score":	119483
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11274,
			"primary_score":	999625,
			"second_score":	119482
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26202,
			"primary_score":	999768,
			"second_score":	131981
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26203,
			"primary_score":	999768,
			"second_score":	131980
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26205,
			"primary_score":	999768,
			"second_score":	131979
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26207,
			"primary_score":	999768,
			"second_score":	131975
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26211,
			"primary_score":	999768,
			"second_score":	131974
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26220,
			"primary_score":	999768,
			"second_score":	131972
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26221,
			"primary_score":	999768,
			"second_score":	131970
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26222,
			"primary_score":	999768,
			"second_score":	131966
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26224,
			"primary_score":	999768,
			"second_score":	131965
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26225,
			"primary_score":	999768,
			"second_score":	131964
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26316,
			"primary_score":	999768,
			"second_score":	131985
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26318,
			"primary_score":	999768,
			"second_score":	131984
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26322,
			"primary_score":	999768,
			"second_score":	131983
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26323,
			"primary_score":	999768,
			"second_score":	131982
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28290,
			"primary_score":	999786,
			"second_score":	121574
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28291,
			"primary_score":	999786,
			"second_score":	121573
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28292,
			"primary_score":	999786,
			"second_score":	121572
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28293,
			"primary_score":	999786,
			"second_score":	121571
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28296,
			"primary_score":	999786,
			"second_score":	121570
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28297,
			"primary_score":	999786,
			"second_score":	121569
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28299,
			"primary_score":	999786,
			"second_score":	121563
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28301,
			"primary_score":	999786,
			"second_score":	121562
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28306,
			"primary_score":	999786,
			"second_score":	121561
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28307,
			"primary_score":	999786,
			"second_score":	121560
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28309,
			"primary_score":	999786,
			"second_score":	121559
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28311,
			"primary_score":	999786,
			"second_score":	121555
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28313,
			"primary_score":	999786,
			"second_score":	121554
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28315,
			"primary_score":	999786,
			"second_score":	121548
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28317,
			"primary_score":	999786,
			"second_score":	121547
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28319,
			"primary_score":	999786,
			"second_score":	121546
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28324,
			"primary_score":	999786,
			"second_score":	121545
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28325,
			"primary_score":	999786,
			"second_score":	121466
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28326,
			"primary_score":	1000000,
			"second_score":	121465
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30159,
			"primary_score":	999887,
			"second_score":	134766
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30160,
			"primary_score":	999887,
			"second_score":	134765
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30161,
			"primary_score":	999887,
			"second_score":	134764
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30162,
			"primary_score":	999887,
			"second_score":	134763
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30164,
			"primary_score":	999887,
			"second_score":	134762
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30165,
			"primary_score":	999887,
			"second_score":	134761
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30166,
			"primary_score":	999887,
			"second_score":	134759
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30168,
			"primary_score":	999887,
			"second_score":	134617
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30182,
			"primary_score":	999887,
			"second_score":	134616
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30191,
			"primary_score":	999887,
			"second_score":	134615
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30192,
			"primary_score":	999887,
			"second_score":	134614
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30198,
			"primary_score":	999887,
			"second_score":	134533
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30206,
			"primary_score":	999887,
			"second_score":	134532
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30207,
			"primary_score":	999887,
			"second_score":	134531
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32090,
			"primary_score":	999662,
			"second_score":	121805
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32091,
			"primary_score":	999662,
			"second_score":	121804
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32092,
			"primary_score":	999662,
			"second_score":	121803
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32093,
			"primary_score":	999662,
			"second_score":	121802
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32095,
			"primary_score":	999662,
			"second_score":	121801
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32096,
			"primary_score":	999662,
			"second_score":	121800
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32097,
			"primary_score":	999662,
			"second_score":	121789
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32099,
			"primary_score":	999662,
			"second_score":	121628
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32113,
			"primary_score":	999662,
			"second_score":	121627
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32122,
			"primary_score":	999662,
			"second_score":	121626
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32124,
			"primary_score":	999662,
			"second_score":	121625
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32127,
			"primary_score":	999662,
			"second_score":	121624
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32129,
			"primary_score":	999662,
			"second_score":	121604
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32136,
			"primary_score":	999680,
			"second_score":	121602
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32138,
			"primary_score":	999662,
			"second_score":	121579
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32139,
			"primary_score":	999662,
			"second_score":	121578
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39394,
			"primary_score":	999625,
			"second_score":	135802
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39413,
			"primary_score":	999625,
			"second_score":	135801
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39418,
			"primary_score":	999625,
			"second_score":	135803
		}, {
			"file":	"ext/date/php_date.c",
			"line":	626,
			"primary_score":	999625,
			"second_score":	118832
		}, {
			"file":	"ext/date/php_date.c",
			"line":	629,
			"primary_score":	999625,
			"second_score":	118831
		}, {
			"file":	"ext/date/php_date.c",
			"line":	630,
			"primary_score":	999625,
			"second_score":	118830
		}, {
			"file":	"ext/date/php_date.c",
			"line":	635,
			"primary_score":	999625,
			"second_score":	118829
		}, {
			"file":	"ext/date/php_date.c",
			"line":	640,
			"primary_score":	999625,
			"second_score":	118828
		}, {
			"file":	"ext/date/php_date.c",
			"line":	789,
			"primary_score":	999625,
			"second_score":	53262
		}, {
			"file":	"ext/date/php_date.c",
			"line":	791,
			"primary_score":	999625,
			"second_score":	52583
		}, {
			"file":	"ext/date/php_date.c",
			"line":	795,
			"primary_score":	999625,
			"second_score":	52582
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	910,
			"primary_score":	999625,
			"second_score":	58341
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	911,
			"primary_score":	999625,
			"second_score":	58326
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	912,
			"primary_score":	999625,
			"second_score":	58311
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	913,
			"primary_score":	999625,
			"second_score":	58296
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	914,
			"primary_score":	999625,
			"second_score":	58077
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	915,
			"primary_score":	999625,
			"second_score":	57972
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	916,
			"primary_score":	999625,
			"second_score":	57915
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	917,
			"primary_score":	999625,
			"second_score":	57900
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	918,
			"primary_score":	999625,
			"second_score":	57885
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	919,
			"primary_score":	999625,
			"second_score":	57768
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	920,
			"primary_score":	999625,
			"second_score":	57633
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	921,
			"primary_score":	999625,
			"second_score":	57516
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	922,
			"primary_score":	999625,
			"second_score":	57393
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	923,
			"primary_score":	999625,
			"second_score":	57372
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	924,
			"primary_score":	999625,
			"second_score":	57327
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	925,
			"primary_score":	999625,
			"second_score":	57288
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	926,
			"primary_score":	999625,
			"second_score":	57147
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	927,
			"primary_score":	999625,
			"second_score":	57030
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	928,
			"primary_score":	999625,
			"second_score":	56889
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	930,
			"primary_score":	999625,
			"second_score":	56772
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	932,
			"primary_score":	999625,
			"second_score":	56757
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	939,
			"primary_score":	999625,
			"second_score":	56604
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	230,
			"primary_score":	999625,
			"second_score":	53647
		}, {
			"file":	"ext/filter/filter.c",
			"line":	287,
			"primary_score":	999625,
			"second_score":	59748
		}, {
			"file":	"ext/filter/filter.c",
			"line":	289,
			"primary_score":	999625,
			"second_score":	59107
		}, {
			"file":	"ext/filter/filter.c",
			"line":	303,
			"primary_score":	999625,
			"second_score":	119325
		}, {
			"file":	"ext/filter/filter.c",
			"line":	304,
			"primary_score":	999625,
			"second_score":	119324
		}, {
			"file":	"ext/filter/filter.c",
			"line":	305,
			"primary_score":	999625,
			"second_score":	119323
		}, {
			"file":	"ext/filter/filter.c",
			"line":	306,
			"primary_score":	999625,
			"second_score":	119322
		}, {
			"file":	"ext/filter/filter.c",
			"line":	307,
			"primary_score":	999625,
			"second_score":	118854
		}, {
			"file":	"ext/filter/filter.c",
			"line":	308,
			"primary_score":	999625,
			"second_score":	118853
		}, {
			"file":	"ext/filter/filter.c",
			"line":	309,
			"primary_score":	999625,
			"second_score":	118852
		}, {
			"file":	"ext/hash/hash.c",
			"line":	889,
			"primary_score":	999625,
			"second_score":	60627
		}, {
			"file":	"ext/hash/hash.c",
			"line":	891,
			"primary_score":	999625,
			"second_score":	60348
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	289,
			"primary_score":	999625,
			"second_score":	61954
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	290,
			"primary_score":	999625,
			"second_score":	61903
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	291,
			"primary_score":	999625,
			"second_score":	61220
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2852,
			"primary_score":	999625,
			"second_score":	61953
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2856,
			"primary_score":	999625,
			"second_score":	61904
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	581,
			"primary_score":	999625,
			"second_score":	54091
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	583,
			"primary_score":	999625,
			"second_score":	54090
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	585,
			"primary_score":	999625,
			"second_score":	54089
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	586,
			"primary_score":	999625,
			"second_score":	54088
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	587,
			"primary_score":	999625,
			"second_score":	54069
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	683,
			"primary_score":	999625,
			"second_score":	54093
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	690,
			"primary_score":	999625,
			"second_score":	54092
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	692,
			"primary_score":	999625,
			"second_score":	54068
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	699,
			"primary_score":	999625,
			"second_score":	118848
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	700,
			"primary_score":	999625,
			"second_score":	118847
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	701,
			"primary_score":	999625,
			"second_score":	118846
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	703,
			"primary_score":	999625,
			"second_score":	118845
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	704,
			"primary_score":	999625,
			"second_score":	118844
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	707,
			"primary_score":	999625,
			"second_score":	118843
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	711,
			"primary_score":	999625,
			"second_score":	118842
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	712,
			"primary_score":	999625,
			"second_score":	118838
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	717,
			"primary_score":	999625,
			"second_score":	118837
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	719,
			"primary_score":	999625,
			"second_score":	118836
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	1416,
			"primary_score":	999990,
			"second_score":	122138
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	1418,
			"primary_score":	999990,
			"second_score":	122137
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2959,
			"primary_score":	999990,
			"second_score":	122381
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2960,
			"primary_score":	999990,
			"second_score":	122380
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2961,
			"primary_score":	999990,
			"second_score":	122379
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2962,
			"primary_score":	999990,
			"second_score":	122378
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2963,
			"primary_score":	999990,
			"second_score":	122377
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2964,
			"primary_score":	999990,
			"second_score":	122376
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2965,
			"primary_score":	999990,
			"second_score":	122375
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2966,
			"primary_score":	999990,
			"second_score":	122374
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2967,
			"primary_score":	999990,
			"second_score":	122373
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2968,
			"primary_score":	999990,
			"second_score":	122372
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2969,
			"primary_score":	999990,
			"second_score":	122371
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2970,
			"primary_score":	999990,
			"second_score":	122370
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2971,
			"primary_score":	999990,
			"second_score":	122369
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2972,
			"primary_score":	999990,
			"second_score":	122368
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2973,
			"primary_score":	999990,
			"second_score":	122367
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2974,
			"primary_score":	999990,
			"second_score":	122366
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2975,
			"primary_score":	999990,
			"second_score":	122365
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2976,
			"primary_score":	999990,
			"second_score":	122364
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2977,
			"primary_score":	999990,
			"second_score":	122363
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2978,
			"primary_score":	999990,
			"second_score":	122362
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2979,
			"primary_score":	999990,
			"second_score":	122361
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2980,
			"primary_score":	999990,
			"second_score":	122360
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2981,
			"primary_score":	999990,
			"second_score":	122359
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2982,
			"primary_score":	999990,
			"second_score":	122358
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2985,
			"primary_score":	999990,
			"second_score":	122357
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2986,
			"primary_score":	999990,
			"second_score":	122356
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2987,
			"primary_score":	999990,
			"second_score":	122355
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2988,
			"primary_score":	999990,
			"second_score":	122354
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	2989,
			"primary_score":	999990,
			"second_score":	122353
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3001,
			"primary_score":	999990,
			"second_score":	122352
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3002,
			"primary_score":	999990,
			"second_score":	122351
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3014,
			"primary_score":	999990,
			"second_score":	122350
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3021,
			"primary_score":	999990,
			"second_score":	122349
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3025,
			"primary_score":	999990,
			"second_score":	122348
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3027,
			"primary_score":	999990,
			"second_score":	122236
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3028,
			"primary_score":	999990,
			"second_score":	122235
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3029,
			"primary_score":	999990,
			"second_score":	122234
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3030,
			"primary_score":	999990,
			"second_score":	122233
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3031,
			"primary_score":	999990,
			"second_score":	122232
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3032,
			"primary_score":	999990,
			"second_score":	122231
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3033,
			"primary_score":	999990,
			"second_score":	122230
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3034,
			"primary_score":	999990,
			"second_score":	122229
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3035,
			"primary_score":	999990,
			"second_score":	122228
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3036,
			"primary_score":	999990,
			"second_score":	122227
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3037,
			"primary_score":	999990,
			"second_score":	122226
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3038,
			"primary_score":	999990,
			"second_score":	122225
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3039,
			"primary_score":	999990,
			"second_score":	122224
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3040,
			"primary_score":	999990,
			"second_score":	122223
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3041,
			"primary_score":	999990,
			"second_score":	122222
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3042,
			"primary_score":	999990,
			"second_score":	122221
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3043,
			"primary_score":	999990,
			"second_score":	122220
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3047,
			"primary_score":	999990,
			"second_score":	122219
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3052,
			"primary_score":	999990,
			"second_score":	122218
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3062,
			"primary_score":	999990,
			"second_score":	122217
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3067,
			"primary_score":	999990,
			"second_score":	122486
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3079,
			"primary_score":	999990,
			"second_score":	122485
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3083,
			"primary_score":	999990,
			"second_score":	122484
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3089,
			"primary_score":	999990,
			"second_score":	122483
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3090,
			"primary_score":	999990,
			"second_score":	122482
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3096,
			"primary_score":	999990,
			"second_score":	122481
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3098,
			"primary_score":	999990,
			"second_score":	122480
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3100,
			"primary_score":	999996,
			"second_score":	122479
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3101,
			"primary_score":	999996,
			"second_score":	122478
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3102,
			"primary_score":	999996,
			"second_score":	122477
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3105,
			"primary_score":	999990,
			"second_score":	122615
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3110,
			"primary_score":	999990,
			"second_score":	122476
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3116,
			"primary_score":	999990,
			"second_score":	122216
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3124,
			"primary_score":	999990,
			"second_score":	122215
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3152,
			"primary_score":	999990,
			"second_score":	122214
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3156,
			"primary_score":	999990,
			"second_score":	122213
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3166,
			"primary_score":	999990,
			"second_score":	122212
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3189,
			"primary_score":	999990,
			"second_score":	122211
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3195,
			"primary_score":	999990,
			"second_score":	122210
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3202,
			"primary_score":	999990,
			"second_score":	122209
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3203,
			"primary_score":	999990,
			"second_score":	122208
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3204,
			"primary_score":	999990,
			"second_score":	122207
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3205,
			"primary_score":	999990,
			"second_score":	122206
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3207,
			"primary_score":	999990,
			"second_score":	122465
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3212,
			"primary_score":	999990,
			"second_score":	122464
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3213,
			"primary_score":	999990,
			"second_score":	122463
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3215,
			"primary_score":	999990,
			"second_score":	122205
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3240,
			"primary_score":	999999,
			"second_score":	122320
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3241,
			"primary_score":	999999,
			"second_score":	122319
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3242,
			"primary_score":	999999,
			"second_score":	122318
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3243,
			"primary_score":	999999,
			"second_score":	122317
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3244,
			"primary_score":	999999,
			"second_score":	122316
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	3245,
			"primary_score":	999999,
			"second_score":	122315
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6115,
			"primary_score":	999991,
			"second_score":	122248
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6118,
			"primary_score":	999991,
			"second_score":	122247
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6128,
			"primary_score":	999991,
			"second_score":	122246
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6130,
			"primary_score":	999991,
			"second_score":	122245
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6131,
			"primary_score":	999991,
			"second_score":	122244
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6135,
			"primary_score":	999991,
			"second_score":	122243
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6143,
			"primary_score":	999991,
			"second_score":	122242
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6164,
			"primary_score":	999996,
			"second_score":	122241
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6165,
			"primary_score":	999996,
			"second_score":	122240
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6166,
			"primary_score":	999996,
			"second_score":	122239
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6167,
			"primary_score":	999996,
			"second_score":	122238
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6170,
			"primary_score":	999991,
			"second_score":	122237
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6228,
			"primary_score":	999990,
			"second_score":	122408
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6229,
			"primary_score":	999990,
			"second_score":	122407
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6230,
			"primary_score":	999990,
			"second_score":	122406
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6231,
			"primary_score":	999990,
			"second_score":	122405
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6232,
			"primary_score":	999990,
			"second_score":	122404
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6233,
			"primary_score":	999990,
			"second_score":	122403
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6234,
			"primary_score":	999990,
			"second_score":	122402
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6235,
			"primary_score":	999990,
			"second_score":	122401
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6236,
			"primary_score":	999990,
			"second_score":	122400
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6237,
			"primary_score":	999990,
			"second_score":	122399
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6238,
			"primary_score":	999990,
			"second_score":	122398
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6239,
			"primary_score":	999990,
			"second_score":	122397
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6240,
			"primary_score":	999990,
			"second_score":	122396
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6241,
			"primary_score":	999990,
			"second_score":	122395
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6243,
			"primary_score":	999990,
			"second_score":	122394
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6244,
			"primary_score":	999990,
			"second_score":	122393
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6246,
			"primary_score":	999990,
			"second_score":	122392
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6255,
			"primary_score":	999990,
			"second_score":	122391
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6266,
			"primary_score":	999990,
			"second_score":	122390
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6277,
			"primary_score":	999990,
			"second_score":	122389
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6278,
			"primary_score":	999990,
			"second_score":	122388
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6282,
			"primary_score":	999990,
			"second_score":	122387
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6283,
			"primary_score":	999990,
			"second_score":	122386
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6288,
			"primary_score":	999990,
			"second_score":	122385
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6292,
			"primary_score":	999990,
			"second_score":	122384
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6301,
			"primary_score":	999990,
			"second_score":	122383
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6312,
			"primary_score":	999990,
			"second_score":	122382
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6325,
			"primary_score":	999990,
			"second_score":	122204
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6331,
			"primary_score":	999990,
			"second_score":	122203
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6335,
			"primary_score":	999990,
			"second_score":	122202
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6340,
			"primary_score":	999990,
			"second_score":	122201
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6342,
			"primary_score":	999990,
			"second_score":	122200
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6343,
			"primary_score":	999990,
			"second_score":	122199
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6384,
			"primary_score":	999990,
			"second_score":	122198
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6413,
			"primary_score":	999990,
			"second_score":	122197
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6415,
			"primary_score":	999990,
			"second_score":	122196
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6417,
			"primary_score":	999990,
			"second_score":	122195
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6418,
			"primary_score":	999990,
			"second_score":	122194
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6420,
			"primary_score":	999990,
			"second_score":	122193
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6421,
			"primary_score":	999990,
			"second_score":	122192
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6422,
			"primary_score":	999990,
			"second_score":	122191
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6423,
			"primary_score":	999990,
			"second_score":	122190
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6430,
			"primary_score":	999990,
			"second_score":	122189
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6431,
			"primary_score":	999990,
			"second_score":	122188
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6432,
			"primary_score":	999990,
			"second_score":	122187
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6438,
			"primary_score":	999990,
			"second_score":	122186
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6457,
			"primary_score":	999990,
			"second_score":	122185
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6466,
			"primary_score":	999990,
			"second_score":	122184
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6470,
			"primary_score":	999990,
			"second_score":	122183
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6471,
			"primary_score":	999990,
			"second_score":	122182
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6472,
			"primary_score":	999990,
			"second_score":	122181
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6473,
			"primary_score":	999990,
			"second_score":	122180
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6474,
			"primary_score":	999990,
			"second_score":	122179
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6476,
			"primary_score":	999990,
			"second_score":	122445
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6481,
			"primary_score":	999990,
			"second_score":	122444
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6483,
			"primary_score":	999990,
			"second_score":	122178
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6558,
			"primary_score":	999990,
			"second_score":	122163
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6559,
			"primary_score":	999990,
			"second_score":	122162
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6561,
			"primary_score":	999990,
			"second_score":	122159
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6565,
			"primary_score":	999990,
			"second_score":	122158
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6572,
			"primary_score":	999990,
			"second_score":	122157
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6581,
			"primary_score":	999990,
			"second_score":	122156
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6589,
			"primary_score":	999990,
			"second_score":	122155
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6598,
			"primary_score":	999990,
			"second_score":	122154
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6600,
			"primary_score":	999992,
			"second_score":	122153
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6634,
			"primary_score":	999997,
			"second_score":	122140
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6635,
			"primary_score":	999997,
			"second_score":	122139
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6637,
			"primary_score":	999997,
			"second_score":	122136
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6644,
			"primary_score":	999997,
			"second_score":	122135
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6669,
			"primary_score":	999997,
			"second_score":	122134
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6676,
			"primary_score":	999997,
			"second_score":	122133
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6685,
			"primary_score":	999997,
			"second_score":	122132
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6693,
			"primary_score":	999997,
			"second_score":	122131
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6700,
			"primary_score":	999997,
			"second_score":	122130
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6735,
			"primary_score":	999997,
			"second_score":	122150
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6736,
			"primary_score":	999997,
			"second_score":	122149
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6737,
			"primary_score":	999997,
			"second_score":	122148
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6738,
			"primary_score":	999997,
			"second_score":	122147
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6740,
			"primary_score":	999997,
			"second_score":	122144
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6742,
			"primary_score":	999997,
			"second_score":	122143
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6809,
			"primary_score":	999990,
			"second_score":	122761
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6817,
			"primary_score":	999990,
			"second_score":	122760
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6818,
			"primary_score":	999990,
			"second_score":	122759
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6819,
			"primary_score":	999990,
			"second_score":	122758
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6820,
			"primary_score":	999990,
			"second_score":	122757
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6821,
			"primary_score":	999990,
			"second_score":	122756
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6822,
			"primary_score":	999990,
			"second_score":	122755
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6823,
			"primary_score":	999990,
			"second_score":	122754
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6824,
			"primary_score":	999990,
			"second_score":	122753
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6825,
			"primary_score":	999990,
			"second_score":	122752
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6826,
			"primary_score":	999990,
			"second_score":	122751
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6827,
			"primary_score":	999990,
			"second_score":	122750
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6828,
			"primary_score":	999990,
			"second_score":	122749
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6836,
			"primary_score":	999990,
			"second_score":	122748
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6840,
			"primary_score":	999990,
			"second_score":	122747
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6846,
			"primary_score":	999990,
			"second_score":	122746
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6852,
			"primary_score":	999990,
			"second_score":	122745
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6853,
			"primary_score":	999990,
			"second_score":	122744
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6857,
			"primary_score":	999990,
			"second_score":	122743
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6863,
			"primary_score":	999990,
			"second_score":	122742
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6867,
			"primary_score":	999990,
			"second_score":	122741
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6868,
			"primary_score":	999990,
			"second_score":	122740
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6869,
			"primary_score":	999990,
			"second_score":	122739
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6870,
			"primary_score":	999990,
			"second_score":	122738
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6871,
			"primary_score":	999990,
			"second_score":	122737
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6875,
			"primary_score":	999990,
			"second_score":	122736
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6884,
			"primary_score":	999990,
			"second_score":	122735
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6920,
			"primary_score":	999990,
			"second_score":	122734
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6925,
			"primary_score":	999990,
			"second_score":	122733
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6951,
			"primary_score":	999990,
			"second_score":	122732
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6964,
			"primary_score":	999990,
			"second_score":	122731
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6966,
			"primary_score":	999990,
			"second_score":	122730
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6976,
			"primary_score":	999990,
			"second_score":	122729
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6980,
			"primary_score":	999990,
			"second_score":	122728
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6986,
			"primary_score":	999990,
			"second_score":	122727
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6987,
			"primary_score":	999990,
			"second_score":	122726
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6995,
			"primary_score":	999990,
			"second_score":	122725
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	6996,
			"primary_score":	999990,
			"second_score":	122724
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7004,
			"primary_score":	999990,
			"second_score":	122723
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7005,
			"primary_score":	999990,
			"second_score":	122722
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7009,
			"primary_score":	999990,
			"second_score":	122721
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7010,
			"primary_score":	999990,
			"second_score":	122720
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7019,
			"primary_score":	999990,
			"second_score":	122719
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7020,
			"primary_score":	999990,
			"second_score":	122718
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7021,
			"primary_score":	999990,
			"second_score":	122717
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7022,
			"primary_score":	999990,
			"second_score":	122716
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7023,
			"primary_score":	999990,
			"second_score":	122715
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7024,
			"primary_score":	999990,
			"second_score":	122714
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7025,
			"primary_score":	999990,
			"second_score":	122713
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7026,
			"primary_score":	999990,
			"second_score":	122712
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7027,
			"primary_score":	999990,
			"second_score":	122711
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7028,
			"primary_score":	999990,
			"second_score":	122710
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7029,
			"primary_score":	999990,
			"second_score":	122709
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7030,
			"primary_score":	999990,
			"second_score":	122708
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7031,
			"primary_score":	999990,
			"second_score":	122707
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7039,
			"primary_score":	999990,
			"second_score":	122706
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7040,
			"primary_score":	999990,
			"second_score":	122705
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7041,
			"primary_score":	999990,
			"second_score":	122704
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7042,
			"primary_score":	999990,
			"second_score":	122703
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7045,
			"primary_score":	999990,
			"second_score":	122442
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7048,
			"primary_score":	999990,
			"second_score":	122441
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7050,
			"primary_score":	999990,
			"second_score":	122440
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7061,
			"primary_score":	999990,
			"second_score":	122439
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7062,
			"primary_score":	999990,
			"second_score":	122438
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7064,
			"primary_score":	999990,
			"second_score":	122437
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7076,
			"primary_score":	999990,
			"second_score":	122436
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7077,
			"primary_score":	999990,
			"second_score":	122435
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7078,
			"primary_score":	999990,
			"second_score":	122434
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7079,
			"primary_score":	999990,
			"second_score":	122433
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7080,
			"primary_score":	999990,
			"second_score":	122432
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7081,
			"primary_score":	999990,
			"second_score":	122431
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7082,
			"primary_score":	999990,
			"second_score":	122430
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7083,
			"primary_score":	999990,
			"second_score":	122429
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7084,
			"primary_score":	999990,
			"second_score":	122428
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7085,
			"primary_score":	999990,
			"second_score":	122427
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7086,
			"primary_score":	999990,
			"second_score":	122426
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7087,
			"primary_score":	999990,
			"second_score":	122425
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7088,
			"primary_score":	999990,
			"second_score":	122424
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7097,
			"primary_score":	999990,
			"second_score":	122423
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7098,
			"primary_score":	999990,
			"second_score":	122422
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7099,
			"primary_score":	999990,
			"second_score":	122421
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7100,
			"primary_score":	999990,
			"second_score":	122420
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7101,
			"primary_score":	999990,
			"second_score":	122419
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7102,
			"primary_score":	999990,
			"second_score":	122418
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7103,
			"primary_score":	999990,
			"second_score":	122417
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7104,
			"primary_score":	999990,
			"second_score":	122416
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7105,
			"primary_score":	999990,
			"second_score":	122415
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7106,
			"primary_score":	999990,
			"second_score":	122414
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7107,
			"primary_score":	999990,
			"second_score":	122413
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7113,
			"primary_score":	999990,
			"second_score":	122412
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7114,
			"primary_score":	999990,
			"second_score":	122411
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7115,
			"primary_score":	999990,
			"second_score":	122410
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7116,
			"primary_score":	999990,
			"second_score":	122409
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7118,
			"primary_score":	999990,
			"second_score":	122177
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7119,
			"primary_score":	999990,
			"second_score":	122176
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7120,
			"primary_score":	999990,
			"second_score":	122175
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7122,
			"primary_score":	999990,
			"second_score":	122174
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7126,
			"primary_score":	999990,
			"second_score":	122173
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7131,
			"primary_score":	999990,
			"second_score":	122172
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7134,
			"primary_score":	999990,
			"second_score":	122171
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7139,
			"primary_score":	999990,
			"second_score":	122170
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7154,
			"primary_score":	999990,
			"second_score":	122169
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7164,
			"primary_score":	999990,
			"second_score":	122168
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7199,
			"primary_score":	999990,
			"second_score":	122167
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7220,
			"primary_score":	999990,
			"second_score":	122166
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7222,
			"primary_score":	999990,
			"second_score":	122165
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7223,
			"primary_score":	999990,
			"second_score":	122164
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7227,
			"primary_score":	999992,
			"second_score":	122152
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7228,
			"primary_score":	999997,
			"second_score":	122151
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7229,
			"primary_score":	999992,
			"second_score":	122142
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7236,
			"primary_score":	999997,
			"second_score":	122141
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7245,
			"primary_score":	999990,
			"second_score":	122128
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7248,
			"primary_score":	999997,
			"second_score":	122127
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7249,
			"primary_score":	999997,
			"second_score":	122126
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7251,
			"primary_score":	999997,
			"second_score":	122125
		}, {
			"file":	"ext/pcre/pcrelib/pcre_compile.c",
			"line":	7296,
			"primary_score":	999990,
			"second_score":	122124
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	70,
			"primary_score":	999990,
			"second_score":	131282
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	71,
			"primary_score":	999990,
			"second_score":	131281
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	74,
			"primary_score":	999990,
			"second_score":	131280
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	79,
			"primary_score":	999990,
			"second_score":	131279
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	80,
			"primary_score":	999990,
			"second_score":	131278
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	84,
			"primary_score":	999990,
			"second_score":	131277
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	88,
			"primary_score":	999990,
			"second_score":	129740
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	99,
			"primary_score":	999990,
			"second_score":	128203
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	100,
			"primary_score":	999990,
			"second_score":	128202
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	102,
			"primary_score":	999990,
			"second_score":	127444
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	103,
			"primary_score":	999990,
			"second_score":	126948
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	104,
			"primary_score":	999990,
			"second_score":	126466
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	105,
			"primary_score":	999990,
			"second_score":	126464
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	106,
			"primary_score":	999990,
			"second_score":	126874
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	107,
			"primary_score":	999990,
			"second_score":	127806
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	108,
			"primary_score":	999990,
			"second_score":	126761
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	109,
			"primary_score":	999990,
			"second_score":	126404
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	110,
			"primary_score":	999990,
			"second_score":	126402
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	111,
			"primary_score":	999990,
			"second_score":	126400
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	112,
			"primary_score":	999990,
			"second_score":	126387
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	114,
			"primary_score":	999990,
			"second_score":	124978
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	120,
			"primary_score":	999990,
			"second_score":	124977
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	122,
			"primary_score":	999990,
			"second_score":	122771
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	123,
			"primary_score":	999990,
			"second_score":	124713
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	124,
			"primary_score":	999990,
			"second_score":	123836
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	125,
			"primary_score":	999990,
			"second_score":	124477
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	126,
			"primary_score":	999990,
			"second_score":	124034
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	127,
			"primary_score":	999990,
			"second_score":	123832
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	134,
			"primary_score":	999990,
			"second_score":	123813
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	135,
			"primary_score":	999990,
			"second_score":	122764
		}, {
			"file":	"ext/pcre/pcrelib/pcre_maketables.c",
			"line":	138,
			"primary_score":	999990,
			"second_score":	122763
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	91,
			"primary_score":	999990,
			"second_score":	54618
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	92,
			"primary_score":	999990,
			"second_score":	54617
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	93,
			"primary_score":	999990,
			"second_score":	54616
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	94,
			"primary_score":	999990,
			"second_score":	54615
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	96,
			"primary_score":	999990,
			"second_score":	54614
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	97,
			"primary_score":	999990,
			"second_score":	54612
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	113,
			"primary_score":	999625,
			"second_score":	54628
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	163,
			"primary_score":	999625,
			"second_score":	55256
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	165,
			"primary_score":	999625,
			"second_score":	54632
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	231,
			"primary_score":	999990,
			"second_score":	131381
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	232,
			"primary_score":	999990,
			"second_score":	131380
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	233,
			"primary_score":	999990,
			"second_score":	131379
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	234,
			"primary_score":	999990,
			"second_score":	131378
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	235,
			"primary_score":	999990,
			"second_score":	131377
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	236,
			"primary_score":	999990,
			"second_score":	131376
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	237,
			"primary_score":	999990,
			"second_score":	131375
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	238,
			"primary_score":	999990,
			"second_score":	131374
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	239,
			"primary_score":	999990,
			"second_score":	131373
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	240,
			"primary_score":	999990,
			"second_score":	131372
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	241,
			"primary_score":	999990,
			"second_score":	131371
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	242,
			"primary_score":	999990,
			"second_score":	131370
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	243,
			"primary_score":	999990,
			"second_score":	131369
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	244,
			"primary_score":	999990,
			"second_score":	131368
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	246,
			"primary_score":	999990,
			"second_score":	131367
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	248,
			"primary_score":	999990,
			"second_score":	131366
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	249,
			"primary_score":	999990,
			"second_score":	131365
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	253,
			"primary_score":	999990,
			"second_score":	131364
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	271,
			"primary_score":	999990,
			"second_score":	131344
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	275,
			"primary_score":	999990,
			"second_score":	131343
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	276,
			"primary_score":	999990,
			"second_score":	131342
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	283,
			"primary_score":	999990,
			"second_score":	131341
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	284,
			"primary_score":	999990,
			"second_score":	131340
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	289,
			"primary_score":	999990,
			"second_score":	131339
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	290,
			"primary_score":	999990,
			"second_score":	131338
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	292,
			"primary_score":	999990,
			"second_score":	131337
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	294,
			"primary_score":	999990,
			"second_score":	131336
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	298,
			"primary_score":	999990,
			"second_score":	131335
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	299,
			"primary_score":	999990,
			"second_score":	131334
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	300,
			"primary_score":	999990,
			"second_score":	131324
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	301,
			"primary_score":	999990,
			"second_score":	131323
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	302,
			"primary_score":	999990,
			"second_score":	131322
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	303,
			"primary_score":	999990,
			"second_score":	131325
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	305,
			"primary_score":	999990,
			"second_score":	131321
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	332,
			"primary_score":	999990,
			"second_score":	131320
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	335,
			"primary_score":	999990,
			"second_score":	131292
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	339,
			"primary_score":	999990,
			"second_score":	131291
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	377,
			"primary_score":	999990,
			"second_score":	131290
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	378,
			"primary_score":	999990,
			"second_score":	131283
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	382,
			"primary_score":	999990,
			"second_score":	122762
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	388,
			"primary_score":	999990,
			"second_score":	122123
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	399,
			"primary_score":	999990,
			"second_score":	122122
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	408,
			"primary_score":	999990,
			"second_score":	122121
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	411,
			"primary_score":	999990,
			"second_score":	122120
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	418,
			"primary_score":	999990,
			"second_score":	122101
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	424,
			"primary_score":	999990,
			"second_score":	122098
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	425,
			"primary_score":	999990,
			"second_score":	122097
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	426,
			"primary_score":	999990,
			"second_score":	122096
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	427,
			"primary_score":	999990,
			"second_score":	122095
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	429,
			"primary_score":	999990,
			"second_score":	122094
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	430,
			"primary_score":	999990,
			"second_score":	122093
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	432,
			"primary_score":	999990,
			"second_score":	122092
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	435,
			"primary_score":	999990,
			"second_score":	122013
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	199,
			"primary_score":	999625,
			"second_score":	64473
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	203,
			"primary_score":	999625,
			"second_score":	64454
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	389,
			"primary_score":	999625,
			"second_score":	64374
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	390,
			"primary_score":	999625,
			"second_score":	64365
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	391,
			"primary_score":	999625,
			"second_score":	63025
		}, {
			"file":	"ext/pdo/pdo_sqlstate.c",
			"line":	309,
			"primary_score":	999625,
			"second_score":	64364
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	87,
			"primary_score":	999625,
			"second_score":	64474
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	88,
			"primary_score":	999625,
			"second_score":	64416
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1102,
			"primary_score":	999625,
			"second_score":	98676
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1104,
			"primary_score":	999625,
			"second_score":	98675
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1105,
			"primary_score":	999625,
			"second_score":	98650
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1106,
			"primary_score":	999625,
			"second_score":	98613
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1107,
			"primary_score":	999625,
			"second_score":	98586
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1108,
			"primary_score":	999625,
			"second_score":	98560
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1109,
			"primary_score":	999625,
			"second_score":	98533
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1110,
			"primary_score":	999625,
			"second_score":	98502
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1111,
			"primary_score":	999625,
			"second_score":	98473
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1112,
			"primary_score":	999625,
			"second_score":	98444
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1113,
			"primary_score":	999625,
			"second_score":	98416
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1114,
			"primary_score":	999625,
			"second_score":	98387
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1115,
			"primary_score":	999625,
			"second_score":	98358
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1116,
			"primary_score":	999625,
			"second_score":	98329
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1117,
			"primary_score":	999625,
			"second_score":	98300
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1118,
			"primary_score":	999625,
			"second_score":	98271
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1119,
			"primary_score":	999625,
			"second_score":	98243
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1120,
			"primary_score":	999625,
			"second_score":	98212
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1121,
			"primary_score":	999625,
			"second_score":	98181
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1122,
			"primary_score":	999625,
			"second_score":	98148
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1123,
			"primary_score":	999625,
			"second_score":	98123
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1124,
			"primary_score":	999625,
			"second_score":	98099
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1125,
			"primary_score":	999625,
			"second_score":	98069
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3394,
			"primary_score":	999625,
			"second_score":	135744
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3396,
			"primary_score":	999625,
			"second_score":	135742
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3400,
			"primary_score":	999625,
			"second_score":	135741
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3404,
			"primary_score":	999625,
			"second_score":	135740
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3527,
			"primary_score":	999625,
			"second_score":	98061
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3557,
			"primary_score":	999625,
			"second_score":	98714
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3559,
			"primary_score":	999625,
			"second_score":	98677
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3561,
			"primary_score":	999625,
			"second_score":	98068
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3562,
			"primary_score":	999625,
			"second_score":	98067
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3570,
			"primary_score":	999625,
			"second_score":	98066
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3575,
			"primary_score":	999625,
			"second_score":	98065
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3617,
			"primary_score":	999625,
			"second_score":	119413
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3619,
			"primary_score":	999625,
			"second_score":	119412
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3621,
			"primary_score":	999625,
			"second_score":	119411
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3657,
			"primary_score":	999625,
			"second_score":	119410
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3658,
			"primary_score":	999625,
			"second_score":	119409
		}, {
			"file":	"ext/session/session.c",
			"line":	93,
			"primary_score":	999625,
			"second_score":	119346
		}, {
			"file":	"ext/session/session.c",
			"line":	98,
			"primary_score":	999625,
			"second_score":	119345
		}, {
			"file":	"ext/session/session.c",
			"line":	103,
			"primary_score":	999625,
			"second_score":	119344
		}, {
			"file":	"ext/session/session.c",
			"line":	1441,
			"primary_score":	999625,
			"second_score":	119348
		}, {
			"file":	"ext/session/session.c",
			"line":	1958,
			"primary_score":	999625,
			"second_score":	119350
		}, {
			"file":	"ext/session/session.c",
			"line":	1960,
			"primary_score":	999625,
			"second_score":	119349
		}, {
			"file":	"ext/session/session.c",
			"line":	1961,
			"primary_score":	999625,
			"second_score":	119347
		}, {
			"file":	"ext/session/session.c",
			"line":	1964,
			"primary_score":	999625,
			"second_score":	119343
		}, {
			"file":	"ext/session/session.c",
			"line":	1965,
			"primary_score":	999625,
			"second_score":	119337
		}, {
			"file":	"ext/session/session.c",
			"line":	1971,
			"primary_score":	999625,
			"second_score":	119336
		}, {
			"file":	"ext/session/session.c",
			"line":	2013,
			"primary_score":	999625,
			"second_score":	66933
		}, {
			"file":	"ext/session/session.c",
			"line":	2019,
			"primary_score":	999625,
			"second_score":	65501
		}, {
			"file":	"ext/session/session.c",
			"line":	2020,
			"primary_score":	999625,
			"second_score":	65500
		}, {
			"file":	"ext/session/session.c",
			"line":	2022,
			"primary_score":	999625,
			"second_score":	65499
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2561,
			"primary_score":	999625,
			"second_score":	97773
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2562,
			"primary_score":	999625,
			"second_score":	97772
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	919,
			"primary_score":	999625,
			"second_score":	119332
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	924,
			"primary_score":	999625,
			"second_score":	119331
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	929,
			"primary_score":	999625,
			"second_score":	119330
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	932,
			"primary_score":	999625,
			"second_score":	119329
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	79,
			"primary_score":	999915,
			"second_score":	132682
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	84,
			"primary_score":	999915,
			"second_score":	132681
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	87,
			"primary_score":	999915,
			"second_score":	132680
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	93,
			"primary_score":	999915,
			"second_score":	132679
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	101,
			"primary_score":	999915,
			"second_score":	132671
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	102,
			"primary_score":	999915,
			"second_score":	132670
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	103,
			"primary_score":	999923,
			"second_score":	132669
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	143,
			"primary_score":	999915,
			"second_score":	114716
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	145,
			"primary_score":	999915,
			"second_score":	114715
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	147,
			"primary_score":	999915,
			"second_score":	114711
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	148,
			"primary_score":	999915,
			"second_score":	114445
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	150,
			"primary_score":	999915,
			"second_score":	114414
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	155,
			"primary_score":	999915,
			"second_score":	114413
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	164,
			"primary_score":	999915,
			"second_score":	134336
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	165,
			"primary_score":	999915,
			"second_score":	134335
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	166,
			"primary_score":	999915,
			"second_score":	134334
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	167,
			"primary_score":	999915,
			"second_score":	134333
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	168,
			"primary_score":	999915,
			"second_score":	134332
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	170,
			"primary_score":	999915,
			"second_score":	134331
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	171,
			"primary_score":	999915,
			"second_score":	134309
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	172,
			"primary_score":	999915,
			"second_score":	134308
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	173,
			"primary_score":	999915,
			"second_score":	134307
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	175,
			"primary_score":	999915,
			"second_score":	134221
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	176,
			"primary_score":	999915,
			"second_score":	134216
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	178,
			"primary_score":	999915,
			"second_score":	134213
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	179,
			"primary_score":	999915,
			"second_score":	134212
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	180,
			"primary_score":	999915,
			"second_score":	134211
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	181,
			"primary_score":	999915,
			"second_score":	134210
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	203,
			"primary_score":	999915,
			"second_score":	134209
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	204,
			"primary_score":	999915,
			"second_score":	134122
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	205,
			"primary_score":	999915,
			"second_score":	134020
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	208,
			"primary_score":	999915,
			"second_score":	134019
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	209,
			"primary_score":	999915,
			"second_score":	134002
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	210,
			"primary_score":	999915,
			"second_score":	134001
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	211,
			"primary_score":	999939,
			"second_score":	134000
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	212,
			"primary_score":	999939,
			"second_score":	133999
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	213,
			"primary_score":	999939,
			"second_score":	133998
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	221,
			"primary_score":	999915,
			"second_score":	133997
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	224,
			"primary_score":	999915,
			"second_score":	133996
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	248,
			"primary_score":	999915,
			"second_score":	133995
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	249,
			"primary_score":	999939,
			"second_score":	133994
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	250,
			"primary_score":	999939,
			"second_score":	133993
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	251,
			"primary_score":	999939,
			"second_score":	133968
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	252,
			"primary_score":	999939,
			"second_score":	133946
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	253,
			"primary_score":	999939,
			"second_score":	133926
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	254,
			"primary_score":	999939,
			"second_score":	133902
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	256,
			"primary_score":	999939,
			"second_score":	133881
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	265,
			"primary_score":	999915,
			"second_score":	133880
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	266,
			"primary_score":	999915,
			"second_score":	133859
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	273,
			"primary_score":	999915,
			"second_score":	134338
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	274,
			"primary_score":	999915,
			"second_score":	134337
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	825,
			"primary_score":	999915,
			"second_score":	132667
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	826,
			"primary_score":	999915,
			"second_score":	132666
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	827,
			"primary_score":	999915,
			"second_score":	132665
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	829,
			"primary_score":	999915,
			"second_score":	132664
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	845,
			"primary_score":	999915,
			"second_score":	132663
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	985,
			"primary_score":	999915,
			"second_score":	132676
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	986,
			"primary_score":	999915,
			"second_score":	132672
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	987,
			"primary_score":	999915,
			"second_score":	132668
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	993,
			"primary_score":	999915,
			"second_score":	132683
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	995,
			"primary_score":	999915,
			"second_score":	132678
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1000,
			"primary_score":	999915,
			"second_score":	132677
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1021,
			"primary_score":	999924,
			"second_score":	133535
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1022,
			"primary_score":	999967,
			"second_score":	133529
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1025,
			"primary_score":	999924,
			"second_score":	132755
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1034,
			"primary_score":	999924,
			"second_score":	132754
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1038,
			"primary_score":	999924,
			"second_score":	132753
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1039,
			"primary_score":	999924,
			"second_score":	132691
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1041,
			"primary_score":	999924,
			"second_score":	132690
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1045,
			"primary_score":	999924,
			"second_score":	132689
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1047,
			"primary_score":	999924,
			"second_score":	132688
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1048,
			"primary_score":	999924,
			"second_score":	132687
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1049,
			"primary_score":	999924,
			"second_score":	132685
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1057,
			"primary_score":	999924,
			"second_score":	132684
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1073,
			"primary_score":	999945,
			"second_score":	121989
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1074,
			"primary_score":	999945,
			"second_score":	121988
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1076,
			"primary_score":	999945,
			"second_score":	121985
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1080,
			"primary_score":	999945,
			"second_score":	121984
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1082,
			"primary_score":	999945,
			"second_score":	121962
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1083,
			"primary_score":	999945,
			"second_score":	121960
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1084,
			"primary_score":	999945,
			"second_score":	121959
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1085,
			"primary_score":	999945,
			"second_score":	121958
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1086,
			"primary_score":	999945,
			"second_score":	121957
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1087,
			"primary_score":	999945,
			"second_score":	121956
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1089,
			"primary_score":	999945,
			"second_score":	121955
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1098,
			"primary_score":	999915,
			"second_score":	133627
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1099,
			"primary_score":	999915,
			"second_score":	133626
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1100,
			"primary_score":	999915,
			"second_score":	133625
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1101,
			"primary_score":	999915,
			"second_score":	133624
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1102,
			"primary_score":	999915,
			"second_score":	133623
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1103,
			"primary_score":	999915,
			"second_score":	133622
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1105,
			"primary_score":	999915,
			"second_score":	133621
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1109,
			"primary_score":	999923,
			"second_score":	133620
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1111,
			"primary_score":	999923,
			"second_score":	133610
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1113,
			"primary_score":	999923,
			"second_score":	133607
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1118,
			"primary_score":	999924,
			"second_score":	133538
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1122,
			"primary_score":	999924,
			"second_score":	133537
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1124,
			"primary_score":	999924,
			"second_score":	133536
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1126,
			"primary_score":	999924,
			"second_score":	132662
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1258,
			"primary_score":	999978,
			"second_score":	121544
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1259,
			"primary_score":	999978,
			"second_score":	121543
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1261,
			"primary_score":	999978,
			"second_score":	121542
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1263,
			"primary_score":	999978,
			"second_score":	121539
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1264,
			"primary_score":	999978,
			"second_score":	121515
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1265,
			"primary_score":	999998,
			"second_score":	121514
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1266,
			"primary_score":	999999,
			"second_score":	121491
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1267,
			"primary_score":	999999,
			"second_score":	121490
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1268,
			"primary_score":	999999,
			"second_score":	121489
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1272,
			"primary_score":	999978,
			"second_score":	121467
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1345,
			"primary_score":	999961,
			"second_score":	131573
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1346,
			"primary_score":	999961,
			"second_score":	131572
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1347,
			"primary_score":	999961,
			"second_score":	131571
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1348,
			"primary_score":	999961,
			"second_score":	131570
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1349,
			"primary_score":	999961,
			"second_score":	131569
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1351,
			"primary_score":	999961,
			"second_score":	131568
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1353,
			"primary_score":	999961,
			"second_score":	131565
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1358,
			"primary_score":	999961,
			"second_score":	131564
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1360,
			"primary_score":	999961,
			"second_score":	131554
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1361,
			"primary_score":	999961,
			"second_score":	131553
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1450,
			"primary_score":	999990,
			"second_score":	131552
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1451,
			"primary_score":	999990,
			"second_score":	131551
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1452,
			"primary_score":	999990,
			"second_score":	131550
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1454,
			"primary_score":	999990,
			"second_score":	131549
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1455,
			"primary_score":	999990,
			"second_score":	131548
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1456,
			"primary_score":	999990,
			"second_score":	131547
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1457,
			"primary_score":	999990,
			"second_score":	131546
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1461,
			"primary_score":	999990,
			"second_score":	131412
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1466,
			"primary_score":	999990,
			"second_score":	131411
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1467,
			"primary_score":	999990,
			"second_score":	131410
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1468,
			"primary_score":	999990,
			"second_score":	131382
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1469,
			"primary_score":	999990,
			"second_score":	122012
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1474,
			"primary_score":	999990,
			"second_score":	122011
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1475,
			"primary_score":	999990,
			"second_score":	122010
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1486,
			"primary_score":	999964,
			"second_score":	122009
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1488,
			"primary_score":	999964,
			"second_score":	122003
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1489,
			"primary_score":	999964,
			"second_score":	122002
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1491,
			"primary_score":	999964,
			"second_score":	122000
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1492,
			"primary_score":	999964,
			"second_score":	121999
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1493,
			"primary_score":	999964,
			"second_score":	121993
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1494,
			"primary_score":	999964,
			"second_score":	121990
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1496,
			"primary_score":	999964,
			"second_score":	121954
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	1841,
			"primary_score":	999991,
			"second_score":	131574
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2088,
			"primary_score":	999961,
			"second_score":	119781
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2091,
			"primary_score":	999961,
			"second_score":	119780
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2092,
			"primary_score":	999964,
			"second_score":	119779
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2095,
			"primary_score":	999961,
			"second_score":	119757
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2102,
			"primary_score":	999961,
			"second_score":	119756
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2110,
			"primary_score":	999961,
			"second_score":	119755
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2111,
			"primary_score":	999990,
			"second_score":	119754
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2112,
			"primary_score":	999990,
			"second_score":	119753
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2114,
			"primary_score":	999990,
			"second_score":	119752
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2115,
			"primary_score":	999990,
			"second_score":	119751
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2120,
			"primary_score":	999961,
			"second_score":	119732
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2122,
			"primary_score":	999961,
			"second_score":	119696
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2129,
			"primary_score":	999961,
			"second_score":	132179
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2130,
			"primary_score":	999961,
			"second_score":	132178
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2132,
			"primary_score":	999961,
			"second_score":	132177
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2133,
			"primary_score":	999961,
			"second_score":	132074
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2134,
			"primary_score":	999961,
			"second_score":	132073
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2136,
			"primary_score":	999961,
			"second_score":	132072
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2137,
			"primary_score":	999961,
			"second_score":	132067
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2139,
			"primary_score":	999961,
			"second_score":	132036
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2140,
			"primary_score":	999961,
			"second_score":	132019
		}, {
			"file":	"ext/spl/spl_iterators.c",
			"line":	2141,
			"primary_score":	999961,
			"second_score":	132018
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2140,
			"primary_score":	999625,
			"second_score":	55900
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2142,
			"primary_score":	999625,
			"second_score":	55291
		}, {
			"file":	"ext/standard/array.c",
			"line":	138,
			"primary_score":	999625,
			"second_score":	97353
		}, {
			"file":	"ext/standard/assert.c",
			"line":	114,
			"primary_score":	999625,
			"second_score":	97351
		}, {
			"file":	"ext/standard/assert.c",
			"line":	118,
			"primary_score":	999625,
			"second_score":	97350
		}, {
			"file":	"ext/standard/assert.c",
			"line":	124,
			"primary_score":	999625,
			"second_score":	119384
		}, {
			"file":	"ext/standard/assert.c",
			"line":	129,
			"primary_score":	999625,
			"second_score":	119383
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3454,
			"primary_score":	999625,
			"second_score":	97547
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3455,
			"primary_score":	999625,
			"second_score":	97546
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3456,
			"primary_score":	999625,
			"second_score":	97507
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3625,
			"primary_score":	999625,
			"second_score":	97551
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3633,
			"primary_score":	999625,
			"second_score":	97548
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3639,
			"primary_score":	999625,
			"second_score":	97506
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3641,
			"primary_score":	999625,
			"second_score":	97465
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3642,
			"primary_score":	999625,
			"second_score":	97427
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3645,
			"primary_score":	999625,
			"second_score":	97390
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3646,
			"primary_score":	999625,
			"second_score":	97354
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3647,
			"primary_score":	999625,
			"second_score":	97352
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3648,
			"primary_score":	999625,
			"second_score":	97349
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3649,
			"primary_score":	999625,
			"second_score":	96272
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3650,
			"primary_score":	999625,
			"second_score":	96269
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3655,
			"primary_score":	999625,
			"second_score":	95947
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3658,
			"primary_score":	999625,
			"second_score":	95944
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3706,
			"primary_score":	999625,
			"second_score":	119405
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3709,
			"primary_score":	999625,
			"second_score":	119404
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3710,
			"primary_score":	999625,
			"second_score":	119403
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3712,
			"primary_score":	999625,
			"second_score":	119402
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3715,
			"primary_score":	999625,
			"second_score":	119394
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3721,
			"primary_score":	999625,
			"second_score":	119393
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3726,
			"primary_score":	999625,
			"second_score":	119392
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3727,
			"primary_score":	999625,
			"second_score":	119390
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3732,
			"primary_score":	999625,
			"second_score":	119389
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3738,
			"primary_score":	999625,
			"second_score":	119385
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3739,
			"primary_score":	999625,
			"second_score":	119382
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3740,
			"primary_score":	999625,
			"second_score":	119371
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3745,
			"primary_score":	999625,
			"second_score":	119360
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3751,
			"primary_score":	999625,
			"second_score":	119359
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3753,
			"primary_score":	999625,
			"second_score":	119356
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3754,
			"primary_score":	999625,
			"second_score":	119355
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3755,
			"primary_score":	999625,
			"second_score":	119354
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4506,
			"primary_score":	999625,
			"second_score":	122119
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4507,
			"primary_score":	999625,
			"second_score":	122118
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4508,
			"primary_score":	999625,
			"second_score":	122117
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4510,
			"primary_score":	999625,
			"second_score":	122116
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4514,
			"primary_score":	999625,
			"second_score":	122049
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4516,
			"primary_score":	999625,
			"second_score":	122018
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4525,
			"primary_score":	999625,
			"second_score":	122017
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4986,
			"primary_score":	999625,
			"second_score":	119889
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4998,
			"primary_score":	999625,
			"second_score":	118823
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5004,
			"primary_score":	999625,
			"second_score":	118822
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	234,
			"primary_score":	999625,
			"second_score":	97389
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	235,
			"primary_score":	999625,
			"second_score":	97356
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	238,
			"primary_score":	999625,
			"second_score":	97355
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	130,
			"primary_score":	999625,
			"second_score":	95946
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	133,
			"primary_score":	999625,
			"second_score":	95945
		}, {
			"file":	"ext/standard/file.c",
			"line":	318,
			"primary_score":	999625,
			"second_score":	96271
		}, {
			"file":	"ext/standard/file.c",
			"line":	320,
			"primary_score":	999625,
			"second_score":	96270
		}, {
			"file":	"ext/standard/file.c",
			"line":	2342,
			"primary_score":	999625,
			"second_score":	121813
		}, {
			"file":	"ext/standard/file.c",
			"line":	2343,
			"primary_score":	999625,
			"second_score":	121812
		}, {
			"file":	"ext/standard/file.c",
			"line":	2344,
			"primary_score":	999625,
			"second_score":	121811
		}, {
			"file":	"ext/standard/file.c",
			"line":	2346,
			"primary_score":	999625,
			"second_score":	121810
		}, {
			"file":	"ext/standard/file.c",
			"line":	2350,
			"primary_score":	999625,
			"second_score":	121700
		}, {
			"file":	"ext/standard/file.c",
			"line":	2351,
			"primary_score":	999625,
			"second_score":	121456
		}, {
			"file":	"ext/standard/file.c",
			"line":	2360,
			"primary_score":	999625,
			"second_score":	121452
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	110,
			"primary_score":	999625,
			"second_score":	119388
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	114,
			"primary_score":	999625,
			"second_score":	119387
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	118,
			"primary_score":	999625,
			"second_score":	119386
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2148,
			"primary_score":	999625,
			"second_score":	96268
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2150,
			"primary_score":	999625,
			"second_score":	96267
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2151,
			"primary_score":	999625,
			"second_score":	95988
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2153,
			"primary_score":	999625,
			"second_score":	95948
		}, {
			"file":	"ext/standard/head.c",
			"line":	68,
			"primary_score":	999625,
			"second_score":	124711
		}, {
			"file":	"ext/standard/head.c",
			"line":	71,
			"primary_score":	999625,
			"second_score":	124611
		}, {
			"file":	"ext/standard/info.c",
			"line":	527,
			"primary_score":	999625,
			"second_score":	123335
		}, {
			"file":	"ext/standard/info.c",
			"line":	528,
			"primary_score":	999625,
			"second_score":	123334
		}, {
			"file":	"ext/standard/info.c",
			"line":	577,
			"primary_score":	999625,
			"second_score":	123333
		}, {
			"file":	"ext/standard/info.c",
			"line":	578,
			"primary_score":	999625,
			"second_score":	123332
		}, {
			"file":	"ext/standard/info.c",
			"line":	605,
			"primary_score":	999625,
			"second_score":	123331
		}, {
			"file":	"ext/standard/info.c",
			"line":	607,
			"primary_score":	999625,
			"second_score":	123330
		}, {
			"file":	"ext/standard/info.c",
			"line":	609,
			"primary_score":	999625,
			"second_score":	123329
		}, {
			"file":	"ext/standard/info.c",
			"line":	611,
			"primary_score":	999625,
			"second_score":	123328
		}, {
			"file":	"ext/standard/info.c",
			"line":	613,
			"primary_score":	999625,
			"second_score":	123327
		}, {
			"file":	"ext/standard/info.c",
			"line":	616,
			"primary_score":	999625,
			"second_score":	123326
		}, {
			"file":	"ext/standard/info.c",
			"line":	619,
			"primary_score":	999625,
			"second_score":	122619
		}, {
			"file":	"ext/standard/info.c",
			"line":	627,
			"primary_score":	999625,
			"second_score":	122618
		}, {
			"file":	"ext/standard/info.c",
			"line":	1153,
			"primary_score":	999625,
			"second_score":	124266
		}, {
			"file":	"ext/standard/info.c",
			"line":	1154,
			"primary_score":	999625,
			"second_score":	124265
		}, {
			"file":	"ext/standard/info.c",
			"line":	1156,
			"primary_score":	999625,
			"second_score":	124264
		}, {
			"file":	"ext/standard/info.c",
			"line":	1160,
			"primary_score":	999625,
			"second_score":	124226
		}, {
			"file":	"ext/standard/info.c",
			"line":	1161,
			"primary_score":	999625,
			"second_score":	124225
		}, {
			"file":	"ext/standard/info.c",
			"line":	1280,
			"primary_score":	999625,
			"second_score":	123378
		}, {
			"file":	"ext/standard/info.c",
			"line":	1281,
			"primary_score":	999625,
			"second_score":	123377
		}, {
			"file":	"ext/standard/info.c",
			"line":	1283,
			"primary_score":	999625,
			"second_score":	123376
		}, {
			"file":	"ext/standard/info.c",
			"line":	1286,
			"primary_score":	999625,
			"second_score":	123338
		}, {
			"file":	"ext/standard/info.c",
			"line":	1295,
			"primary_score":	999625,
			"second_score":	120272
		}, {
			"file":	"ext/standard/info.c",
			"line":	1299,
			"primary_score":	999625,
			"second_score":	120239
		}, {
			"file":	"ext/standard/info.c",
			"line":	1302,
			"primary_score":	999625,
			"second_score":	120238
		}, {
			"file":	"ext/standard/string.c",
			"line":	1058,
			"primary_score":	999625,
			"second_score":	122566
		}, {
			"file":	"ext/standard/string.c",
			"line":	1059,
			"primary_score":	999625,
			"second_score":	122565
		}, {
			"file":	"ext/standard/string.c",
			"line":	1060,
			"primary_score":	999625,
			"second_score":	122564
		}, {
			"file":	"ext/standard/string.c",
			"line":	1061,
			"primary_score":	999625,
			"second_score":	122563
		}, {
			"file":	"ext/standard/string.c",
			"line":	1062,
			"primary_score":	999625,
			"second_score":	122562
		}, {
			"file":	"ext/standard/string.c",
			"line":	1063,
			"primary_score":	999625,
			"second_score":	122561
		}, {
			"file":	"ext/standard/string.c",
			"line":	1065,
			"primary_score":	999625,
			"second_score":	122560
		}, {
			"file":	"ext/standard/string.c",
			"line":	1067,
			"primary_score":	999625,
			"second_score":	122557
		}, {
			"file":	"ext/standard/string.c",
			"line":	1071,
			"primary_score":	999625,
			"second_score":	122556
		}, {
			"file":	"ext/standard/string.c",
			"line":	1073,
			"primary_score":	999625,
			"second_score":	122552
		}, {
			"file":	"ext/standard/string.c",
			"line":	1074,
			"primary_score":	999625,
			"second_score":	121543
		}, {
			"file":	"ext/standard/string.c",
			"line":	1076,
			"primary_score":	999625,
			"second_score":	122540
		}, {
			"file":	"ext/standard/string.c",
			"line":	1077,
			"primary_score":	999625,
			"second_score":	121534
		}, {
			"file":	"ext/standard/string.c",
			"line":	1124,
			"primary_score":	999625,
			"second_score":	121533
		}, {
			"file":	"ext/standard/string.c",
			"line":	1125,
			"primary_score":	999625,
			"second_score":	121564
		}, {
			"file":	"ext/standard/string.c",
			"line":	1127,
			"primary_score":	999625,
			"second_score":	121532
		}, {
			"file":	"ext/standard/string.c",
			"line":	1129,
			"primary_score":	999625,
			"second_score":	121521
		}, {
			"file":	"ext/standard/string.c",
			"line":	1131,
			"primary_score":	999625,
			"second_score":	121518
		}, {
			"file":	"ext/standard/string.c",
			"line":	1132,
			"primary_score":	999625,
			"second_score":	121517
		}, {
			"file":	"ext/standard/string.c",
			"line":	1144,
			"primary_score":	999625,
			"second_score":	122667
		}, {
			"file":	"ext/standard/string.c",
			"line":	1146,
			"primary_score":	999625,
			"second_score":	122666
		}, {
			"file":	"ext/standard/string.c",
			"line":	1150,
			"primary_score":	999625,
			"second_score":	122574
		}, {
			"file":	"ext/standard/string.c",
			"line":	1163,
			"primary_score":	999625,
			"second_score":	122573
		}, {
			"file":	"ext/standard/string.c",
			"line":	1167,
			"primary_score":	999625,
			"second_score":	122572
		}, {
			"file":	"ext/standard/string.c",
			"line":	1168,
			"primary_score":	999625,
			"second_score":	122571
		}, {
			"file":	"ext/standard/string.c",
			"line":	1169,
			"primary_score":	999625,
			"second_score":	122570
		}, {
			"file":	"ext/standard/string.c",
			"line":	1170,
			"primary_score":	999625,
			"second_score":	122568
		}, {
			"file":	"ext/standard/string.c",
			"line":	1177,
			"primary_score":	999625,
			"second_score":	122567
		}, {
			"file":	"ext/standard/string.c",
			"line":	1179,
			"primary_score":	999625,
			"second_score":	121508
		}, {
			"file":	"ext/standard/string.c",
			"line":	3536,
			"primary_score":	999625,
			"second_score":	119818
		}, {
			"file":	"ext/standard/string.c",
			"line":	3539,
			"primary_score":	999625,
			"second_score":	119817
		}, {
			"file":	"ext/standard/string.c",
			"line":	3540,
			"primary_score":	999625,
			"second_score":	119816
		}, {
			"file":	"ext/standard/string.c",
			"line":	3543,
			"primary_score":	999625,
			"second_score":	119815
		}, {
			"file":	"ext/standard/string.c",
			"line":	3544,
			"primary_score":	999625,
			"second_score":	119770
		}, {
			"file":	"ext/standard/string.c",
			"line":	3545,
			"primary_score":	999625,
			"second_score":	119769
		}, {
			"file":	"ext/standard/string.c",
			"line":	3546,
			"primary_score":	999625,
			"second_score":	119768
		}, {
			"file":	"ext/standard/string.c",
			"line":	3547,
			"primary_score":	999625,
			"second_score":	119734
		}, {
			"file":	"ext/standard/string.c",
			"line":	3647,
			"primary_score":	999625,
			"second_score":	119963
		}, {
			"file":	"ext/standard/string.c",
			"line":	3648,
			"primary_score":	999625,
			"second_score":	119962
		}, {
			"file":	"ext/standard/string.c",
			"line":	3649,
			"primary_score":	999625,
			"second_score":	119961
		}, {
			"file":	"ext/standard/string.c",
			"line":	3650,
			"primary_score":	999625,
			"second_score":	119960
		}, {
			"file":	"ext/standard/string.c",
			"line":	3651,
			"primary_score":	999625,
			"second_score":	119959
		}, {
			"file":	"ext/standard/string.c",
			"line":	3652,
			"primary_score":	999625,
			"second_score":	119958
		}, {
			"file":	"ext/standard/string.c",
			"line":	3653,
			"primary_score":	999625,
			"second_score":	119957
		}, {
			"file":	"ext/standard/string.c",
			"line":	3655,
			"primary_score":	999625,
			"second_score":	119956
		}, {
			"file":	"ext/standard/string.c",
			"line":	3659,
			"primary_score":	999625,
			"second_score":	119834
		}, {
			"file":	"ext/standard/string.c",
			"line":	3660,
			"primary_score":	999625,
			"second_score":	119831
		}, {
			"file":	"ext/standard/string.c",
			"line":	3661,
			"primary_score":	999625,
			"second_score":	119828
		}, {
			"file":	"ext/standard/string.c",
			"line":	3664,
			"primary_score":	999625,
			"second_score":	119825
		}, {
			"file":	"ext/standard/string.c",
			"line":	3665,
			"primary_score":	999625,
			"second_score":	119824
		}, {
			"file":	"ext/standard/string.c",
			"line":	3666,
			"primary_score":	999625,
			"second_score":	119822
		}, {
			"file":	"ext/standard/string.c",
			"line":	3672,
			"primary_score":	999625,
			"second_score":	119820
		}, {
			"file":	"ext/standard/string.c",
			"line":	3703,
			"primary_score":	999625,
			"second_score":	119819
		}, {
			"file":	"ext/standard/string.c",
			"line":	3705,
			"primary_score":	999625,
			"second_score":	119733
		}, {
			"file":	"ext/standard/string.c",
			"line":	3716,
			"primary_score":	999625,
			"second_score":	119964
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	121,
			"primary_score":	999625,
			"second_score":	97550
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	125,
			"primary_score":	999625,
			"second_score":	97549
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1083,
			"primary_score":	999625,
			"second_score":	97348
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1085,
			"primary_score":	999625,
			"second_score":	96273
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1097,
			"primary_score":	999625,
			"second_score":	119381
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1102,
			"primary_score":	999625,
			"second_score":	119380
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1103,
			"primary_score":	999625,
			"second_score":	119376
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1105,
			"primary_score":	999625,
			"second_score":	119372
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	129,
			"primary_score":	999625,
			"second_score":	119358
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	135,
			"primary_score":	999625,
			"second_score":	119357
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1378,
			"primary_score":	999625,
			"second_score":	100559
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1379,
			"primary_score":	999625,
			"second_score":	100466
		}, {
			"file":	"ext/xmlwriter/php_xmlwriter.c",
			"line":	1972,
			"primary_score":	999625,
			"second_score":	103249
		}, {
			"file":	"main/SAPI.c",
			"line":	69,
			"primary_score":	999625,
			"second_score":	3134
		}, {
			"file":	"main/SAPI.c",
			"line":	101,
			"primary_score":	999625,
			"second_score":	3135
		}, {
			"file":	"main/SAPI.c",
			"line":	104,
			"primary_score":	999625,
			"second_score":	3113
		}, {
			"file":	"main/SAPI.c",
			"line":	106,
			"primary_score":	999625,
			"second_score":	3112
		}, {
			"file":	"main/SAPI.c",
			"line":	116,
			"primary_score":	999625,
			"second_score":	124640
		}, {
			"file":	"main/SAPI.c",
			"line":	231,
			"primary_score":	999625,
			"second_score":	124703
		}, {
			"file":	"main/SAPI.c",
			"line":	232,
			"primary_score":	999625,
			"second_score":	124702
		}, {
			"file":	"main/SAPI.c",
			"line":	234,
			"primary_score":	999625,
			"second_score":	124701
		}, {
			"file":	"main/SAPI.c",
			"line":	235,
			"primary_score":	999625,
			"second_score":	124700
		}, {
			"file":	"main/SAPI.c",
			"line":	236,
			"primary_score":	999625,
			"second_score":	124699
		}, {
			"file":	"main/SAPI.c",
			"line":	241,
			"primary_score":	999625,
			"second_score":	124698
		}, {
			"file":	"main/SAPI.c",
			"line":	242,
			"primary_score":	999625,
			"second_score":	124697
		}, {
			"file":	"main/SAPI.c",
			"line":	243,
			"primary_score":	999625,
			"second_score":	124696
		}, {
			"file":	"main/SAPI.c",
			"line":	249,
			"primary_score":	999625,
			"second_score":	124695
		}, {
			"file":	"main/SAPI.c",
			"line":	261,
			"primary_score":	999625,
			"second_score":	124694
		}, {
			"file":	"main/SAPI.c",
			"line":	262,
			"primary_score":	999625,
			"second_score":	124693
		}, {
			"file":	"main/SAPI.c",
			"line":	263,
			"primary_score":	999625,
			"second_score":	124671
		}, {
			"file":	"main/SAPI.c",
			"line":	265,
			"primary_score":	999625,
			"second_score":	124670
		}, {
			"file":	"main/SAPI.c",
			"line":	427,
			"primary_score":	999625,
			"second_score":	113149
		}, {
			"file":	"main/SAPI.c",
			"line":	435,
			"primary_score":	999625,
			"second_score":	113189
		}, {
			"file":	"main/SAPI.c",
			"line":	436,
			"primary_score":	999625,
			"second_score":	113185
		}, {
			"file":	"main/SAPI.c",
			"line":	438,
			"primary_score":	999625,
			"second_score":	113184
		}, {
			"file":	"main/SAPI.c",
			"line":	449,
			"primary_score":	999625,
			"second_score":	113183
		}, {
			"file":	"main/SAPI.c",
			"line":	452,
			"primary_score":	999625,
			"second_score":	113182
		}, {
			"file":	"main/SAPI.c",
			"line":	455,
			"primary_score":	999625,
			"second_score":	113181
		}, {
			"file":	"main/SAPI.c",
			"line":	458,
			"primary_score":	999625,
			"second_score":	113180
		}, {
			"file":	"main/SAPI.c",
			"line":	461,
			"primary_score":	999625,
			"second_score":	113179
		}, {
			"file":	"main/SAPI.c",
			"line":	464,
			"primary_score":	999625,
			"second_score":	113178
		}, {
			"file":	"main/SAPI.c",
			"line":	467,
			"primary_score":	999625,
			"second_score":	113177
		}, {
			"file":	"main/SAPI.c",
			"line":	468,
			"primary_score":	999625,
			"second_score":	113176
		}, {
			"file":	"main/SAPI.c",
			"line":	470,
			"primary_score":	999625,
			"second_score":	113172
		}, {
			"file":	"main/SAPI.c",
			"line":	473,
			"primary_score":	999625,
			"second_score":	113171
		}, {
			"file":	"main/SAPI.c",
			"line":	474,
			"primary_score":	999625,
			"second_score":	113170
		}, {
			"file":	"main/SAPI.c",
			"line":	475,
			"primary_score":	999625,
			"second_score":	113151
		}, {
			"file":	"main/SAPI.c",
			"line":	477,
			"primary_score":	999625,
			"second_score":	113150
		}, {
			"file":	"main/SAPI.c",
			"line":	478,
			"primary_score":	999625,
			"second_score":	113148
		}, {
			"file":	"main/SAPI.c",
			"line":	479,
			"primary_score":	999625,
			"second_score":	113147
		}, {
			"file":	"main/SAPI.c",
			"line":	480,
			"primary_score":	999625,
			"second_score":	113146
		}, {
			"file":	"main/SAPI.c",
			"line":	481,
			"primary_score":	999625,
			"second_score":	113145
		}, {
			"file":	"main/SAPI.c",
			"line":	550,
			"primary_score":	999625,
			"second_score":	124643
		}, {
			"file":	"main/SAPI.c",
			"line":	565,
			"primary_score":	999625,
			"second_score":	124641
		}, {
			"file":	"main/SAPI.c",
			"line":	754,
			"primary_score":	999625,
			"second_score":	119433
		}, {
			"file":	"main/SAPI.c",
			"line":	755,
			"primary_score":	999625,
			"second_score":	119432
		}, {
			"file":	"main/SAPI.c",
			"line":	757,
			"primary_score":	999625,
			"second_score":	119431
		}, {
			"file":	"main/SAPI.c",
			"line":	758,
			"primary_score":	999625,
			"second_score":	119430
		}, {
			"file":	"main/SAPI.c",
			"line":	764,
			"primary_score":	999625,
			"second_score":	124707
		}, {
			"file":	"main/SAPI.c",
			"line":	765,
			"primary_score":	999625,
			"second_score":	124706
		}, {
			"file":	"main/SAPI.c",
			"line":	766,
			"primary_score":	999625,
			"second_score":	124705
		}, {
			"file":	"main/SAPI.c",
			"line":	768,
			"primary_score":	999625,
			"second_score":	124704
		}, {
			"file":	"main/SAPI.c",
			"line":	769,
			"primary_score":	999625,
			"second_score":	124669
		}, {
			"file":	"main/SAPI.c",
			"line":	770,
			"primary_score":	999625,
			"second_score":	124668
		}, {
			"file":	"main/SAPI.c",
			"line":	771,
			"primary_score":	999625,
			"second_score":	124646
		}, {
			"file":	"main/SAPI.c",
			"line":	772,
			"primary_score":	999625,
			"second_score":	124645
		}, {
			"file":	"main/SAPI.c",
			"line":	773,
			"primary_score":	999625,
			"second_score":	124644
		}, {
			"file":	"main/SAPI.c",
			"line":	774,
			"primary_score":	999625,
			"second_score":	124621
		}, {
			"file":	"main/SAPI.c",
			"line":	777,
			"primary_score":	999625,
			"second_score":	124620
		}, {
			"file":	"main/SAPI.c",
			"line":	779,
			"primary_score":	999625,
			"second_score":	124619
		}, {
			"file":	"main/SAPI.c",
			"line":	780,
			"primary_score":	999625,
			"second_score":	124618
		}, {
			"file":	"main/SAPI.c",
			"line":	785,
			"primary_score":	999625,
			"second_score":	124616
		}, {
			"file":	"main/SAPI.c",
			"line":	788,
			"primary_score":	999625,
			"second_score":	124615
		}, {
			"file":	"main/SAPI.c",
			"line":	819,
			"primary_score":	999625,
			"second_score":	124614
		}, {
			"file":	"main/SAPI.c",
			"line":	821,
			"primary_score":	999625,
			"second_score":	124612
		}, {
			"file":	"main/SAPI.c",
			"line":	890,
			"primary_score":	999625,
			"second_score":	103293
		}, {
			"file":	"main/SAPI.c",
			"line":	891,
			"primary_score":	999625,
			"second_score":	103292
		}, {
			"file":	"main/SAPI.c",
			"line":	892,
			"primary_score":	999625,
			"second_score":	103290
		}, {
			"file":	"main/main.c",
			"line":	589,
			"primary_score":	999730,
			"second_score":	120804
		}, {
			"file":	"main/main.c",
			"line":	590,
			"primary_score":	999730,
			"second_score":	120803
		}, {
			"file":	"main/main.c",
			"line":	591,
			"primary_score":	999730,
			"second_score":	120802
		}, {
			"file":	"main/main.c",
			"line":	592,
			"primary_score":	999730,
			"second_score":	120801
		}, {
			"file":	"main/main.c",
			"line":	593,
			"primary_score":	999730,
			"second_score":	120800
		}, {
			"file":	"main/main.c",
			"line":	595,
			"primary_score":	999730,
			"second_score":	120799
		}, {
			"file":	"main/main.c",
			"line":	596,
			"primary_score":	999730,
			"second_score":	120798
		}, {
			"file":	"main/main.c",
			"line":	597,
			"primary_score":	999730,
			"second_score":	120200
		}, {
			"file":	"main/main.c",
			"line":	598,
			"primary_score":	999730,
			"second_score":	119983
		}, {
			"file":	"main/main.c",
			"line":	599,
			"primary_score":	999730,
			"second_score":	119964
		}, {
			"file":	"main/main.c",
			"line":	601,
			"primary_score":	999730,
			"second_score":	119963
		}, {
			"file":	"main/main.c",
			"line":	855,
			"primary_score":	999889,
			"second_score":	121431
		}, {
			"file":	"main/main.c",
			"line":	856,
			"primary_score":	999889,
			"second_score":	121430
		}, {
			"file":	"main/main.c",
			"line":	857,
			"primary_score":	999889,
			"second_score":	121429
		}, {
			"file":	"main/main.c",
			"line":	859,
			"primary_score":	999889,
			"second_score":	121428
		}, {
			"file":	"main/main.c",
			"line":	862,
			"primary_score":	999889,
			"second_score":	120923
		}, {
			"file":	"main/main.c",
			"line":	874,
			"primary_score":	999889,
			"second_score":	120922
		}, {
			"file":	"main/main.c",
			"line":	878,
			"primary_score":	999889,
			"second_score":	120921
		}, {
			"file":	"main/main.c",
			"line":	879,
			"primary_score":	999889,
			"second_score":	120920
		}, {
			"file":	"main/main.c",
			"line":	882,
			"primary_score":	999889,
			"second_score":	120919
		}, {
			"file":	"main/main.c",
			"line":	885,
			"primary_score":	999889,
			"second_score":	120918
		}, {
			"file":	"main/main.c",
			"line":	888,
			"primary_score":	999889,
			"second_score":	120917
		}, {
			"file":	"main/main.c",
			"line":	889,
			"primary_score":	999889,
			"second_score":	120916
		}, {
			"file":	"main/main.c",
			"line":	890,
			"primary_score":	999889,
			"second_score":	120915
		}, {
			"file":	"main/main.c",
			"line":	891,
			"primary_score":	999889,
			"second_score":	120914
		}, {
			"file":	"main/main.c",
			"line":	895,
			"primary_score":	999889,
			"second_score":	120913
		}, {
			"file":	"main/main.c",
			"line":	926,
			"primary_score":	999893,
			"second_score":	120912
		}, {
			"file":	"main/main.c",
			"line":	928,
			"primary_score":	999894,
			"second_score":	120911
		}, {
			"file":	"main/main.c",
			"line":	930,
			"primary_score":	999894,
			"second_score":	120910
		}, {
			"file":	"main/main.c",
			"line":	936,
			"primary_score":	999989,
			"second_score":	120909
		}, {
			"file":	"main/main.c",
			"line":	965,
			"primary_score":	999894,
			"second_score":	120908
		}, {
			"file":	"main/main.c",
			"line":	977,
			"primary_score":	999894,
			"second_score":	120907
		}, {
			"file":	"main/main.c",
			"line":	978,
			"primary_score":	999894,
			"second_score":	120906
		}, {
			"file":	"main/main.c",
			"line":	981,
			"primary_score":	999894,
			"second_score":	120905
		}, {
			"file":	"main/main.c",
			"line":	982,
			"primary_score":	999894,
			"second_score":	120860
		}, {
			"file":	"main/main.c",
			"line":	984,
			"primary_score":	999894,
			"second_score":	120818
		}, {
			"file":	"main/main.c",
			"line":	995,
			"primary_score":	999894,
			"second_score":	120817
		}, {
			"file":	"main/main.c",
			"line":	1005,
			"primary_score":	999894,
			"second_score":	120805
		}, {
			"file":	"main/main.c",
			"line":	1031,
			"primary_score":	999893,
			"second_score":	119962
		}, {
			"file":	"main/main.c",
			"line":	1044,
			"primary_score":	999986,
			"second_score":	119961
		}, {
			"file":	"main/main.c",
			"line":	1045,
			"primary_score":	999986,
			"second_score":	119960
		}, {
			"file":	"main/main.c",
			"line":	1056,
			"primary_score":	999986,
			"second_score":	119959
		}, {
			"file":	"main/main.c",
			"line":	1058,
			"primary_score":	999986,
			"second_score":	119958
		}, {
			"file":	"main/main.c",
			"line":	1059,
			"primary_score":	999986,
			"second_score":	119954
		}, {
			"file":	"main/main.c",
			"line":	1060,
			"primary_score":	999986,
			"second_score":	119935
		}, {
			"file":	"main/main.c",
			"line":	1061,
			"primary_score":	999986,
			"second_score":	119927
		}, {
			"file":	"main/main.c",
			"line":	1597,
			"primary_score":	999625,
			"second_score":	119908
		}, {
			"file":	"main/main.c",
			"line":	1598,
			"primary_score":	999625,
			"second_score":	119907
		}, {
			"file":	"main/main.c",
			"line":	1600,
			"primary_score":	999625,
			"second_score":	119906
		}, {
			"file":	"main/main.c",
			"line":	1605,
			"primary_score":	999625,
			"second_score":	119905
		}, {
			"file":	"main/main.c",
			"line":	1606,
			"primary_score":	999625,
			"second_score":	119904
		}, {
			"file":	"main/main.c",
			"line":	1608,
			"primary_score":	999625,
			"second_score":	119903
		}, {
			"file":	"main/main.c",
			"line":	1611,
			"primary_score":	999625,
			"second_score":	119896
		}, {
			"file":	"main/main.c",
			"line":	1612,
			"primary_score":	999625,
			"second_score":	119890
		}, {
			"file":	"main/main.c",
			"line":	1613,
			"primary_score":	999625,
			"second_score":	119888
		}, {
			"file":	"main/main.c",
			"line":	1616,
			"primary_score":	999625,
			"second_score":	119886
		}, {
			"file":	"main/main.c",
			"line":	1617,
			"primary_score":	999625,
			"second_score":	119880
		}, {
			"file":	"main/main.c",
			"line":	1618,
			"primary_score":	999625,
			"second_score":	119462
		}, {
			"file":	"main/main.c",
			"line":	1621,
			"primary_score":	999625,
			"second_score":	119460
		}, {
			"file":	"main/main.c",
			"line":	1622,
			"primary_score":	999625,
			"second_score":	119454
		}, {
			"file":	"main/main.c",
			"line":	1624,
			"primary_score":	999625,
			"second_score":	119453
		}, {
			"file":	"main/main.c",
			"line":	1630,
			"primary_score":	999625,
			"second_score":	119450
		}, {
			"file":	"main/main.c",
			"line":	1633,
			"primary_score":	999625,
			"second_score":	119449
		}, {
			"file":	"main/main.c",
			"line":	1635,
			"primary_score":	999625,
			"second_score":	119447
		}, {
			"file":	"main/main.c",
			"line":	1636,
			"primary_score":	999625,
			"second_score":	119442
		}, {
			"file":	"main/main.c",
			"line":	1639,
			"primary_score":	999625,
			"second_score":	119440
		}, {
			"file":	"main/main.c",
			"line":	1640,
			"primary_score":	999625,
			"second_score":	119434
		}, {
			"file":	"main/main.c",
			"line":	1641,
			"primary_score":	999625,
			"second_score":	119429
		}, {
			"file":	"main/main.c",
			"line":	1644,
			"primary_score":	999625,
			"second_score":	119427
		}, {
			"file":	"main/main.c",
			"line":	1645,
			"primary_score":	999625,
			"second_score":	119426
		}, {
			"file":	"main/main.c",
			"line":	1646,
			"primary_score":	999625,
			"second_score":	118824
		}, {
			"file":	"main/main.c",
			"line":	1650,
			"primary_score":	999625,
			"second_score":	118821
		}, {
			"file":	"main/main.c",
			"line":	1651,
			"primary_score":	999625,
			"second_score":	118815
		}, {
			"file":	"main/main.c",
			"line":	1653,
			"primary_score":	999625,
			"second_score":	118814
		}, {
			"file":	"main/main.c",
			"line":	1654,
			"primary_score":	999625,
			"second_score":	118674
		}, {
			"file":	"main/main.c",
			"line":	1655,
			"primary_score":	999625,
			"second_score":	118673
		}, {
			"file":	"main/main.c",
			"line":	1658,
			"primary_score":	999625,
			"second_score":	118639
		}, {
			"file":	"main/main.c",
			"line":	1661,
			"primary_score":	999625,
			"second_score":	118637
		}, {
			"file":	"main/main.c",
			"line":	1662,
			"primary_score":	999889,
			"second_score":	118636
		}, {
			"file":	"main/main.c",
			"line":	1663,
			"primary_score":	999889,
			"second_score":	118635
		}, {
			"file":	"main/main.c",
			"line":	1665,
			"primary_score":	999625,
			"second_score":	118634
		}, {
			"file":	"main/main.c",
			"line":	1666,
			"primary_score":	999889,
			"second_score":	118633
		}, {
			"file":	"main/main.c",
			"line":	1667,
			"primary_score":	999889,
			"second_score":	118632
		}, {
			"file":	"main/main.c",
			"line":	1671,
			"primary_score":	999625,
			"second_score":	118631
		}, {
			"file":	"main/main.c",
			"line":	1674,
			"primary_score":	999625,
			"second_score":	113208
		}, {
			"file":	"main/main.c",
			"line":	1675,
			"primary_score":	999625,
			"second_score":	113202
		}, {
			"file":	"main/main.c",
			"line":	1676,
			"primary_score":	999625,
			"second_score":	113198
		}, {
			"file":	"main/main.c",
			"line":	1679,
			"primary_score":	999625,
			"second_score":	113196
		}, {
			"file":	"main/main.c",
			"line":	1680,
			"primary_score":	999625,
			"second_score":	113190
		}, {
			"file":	"main/main.c",
			"line":	1681,
			"primary_score":	999625,
			"second_score":	113144
		}, {
			"file":	"main/main.c",
			"line":	1684,
			"primary_score":	999625,
			"second_score":	113142
		}, {
			"file":	"main/main.c",
			"line":	1685,
			"primary_score":	999625,
			"second_score":	113136
		}, {
			"file":	"main/main.c",
			"line":	1686,
			"primary_score":	999625,
			"second_score":	113133
		}, {
			"file":	"main/main.c",
			"line":	1689,
			"primary_score":	999625,
			"second_score":	113131
		}, {
			"file":	"main/main.c",
			"line":	1690,
			"primary_score":	999625,
			"second_score":	113125
		}, {
			"file":	"main/main.c",
			"line":	1691,
			"primary_score":	999625,
			"second_score":	112706
		}, {
			"file":	"main/main.c",
			"line":	1692,
			"primary_score":	999625,
			"second_score":	112704
		}, {
			"file":	"main/main.c",
			"line":	1695,
			"primary_score":	999625,
			"second_score":	103313
		}, {
			"file":	"main/main.c",
			"line":	1696,
			"primary_score":	999625,
			"second_score":	103307
		}, {
			"file":	"main/main.c",
			"line":	1697,
			"primary_score":	999625,
			"second_score":	103305
		}, {
			"file":	"main/main.c",
			"line":	1729,
			"primary_score":	999625,
			"second_score":	121109
		}, {
			"file":	"main/main.c",
			"line":	1730,
			"primary_score":	999625,
			"second_score":	121108
		}, {
			"file":	"main/main.c",
			"line":	1750,
			"primary_score":	999625,
			"second_score":	3150
		}, {
			"file":	"main/main.c",
			"line":	1753,
			"primary_score":	999625,
			"second_score":	3149
		}, {
			"file":	"main/main.c",
			"line":	1756,
			"primary_score":	999625,
			"second_score":	3148
		}, {
			"file":	"main/main.c",
			"line":	1759,
			"primary_score":	999625,
			"second_score":	3147
		}, {
			"file":	"main/main.c",
			"line":	1763,
			"primary_score":	999625,
			"second_score":	3146
		}, {
			"file":	"main/main.c",
			"line":	2191,
			"primary_score":	999625,
			"second_score":	103297
		}, {
			"file":	"main/main.c",
			"line":	2193,
			"primary_score":	999625,
			"second_score":	103296
		}, {
			"file":	"main/main.c",
			"line":	2195,
			"primary_score":	999625,
			"second_score":	103295
		}, {
			"file":	"main/main.c",
			"line":	2208,
			"primary_score":	999625,
			"second_score":	103294
		}, {
			"file":	"main/main.c",
			"line":	2210,
			"primary_score":	999625,
			"second_score":	103289
		}, {
			"file":	"main/main.c",
			"line":	2213,
			"primary_score":	999625,
			"second_score":	6121
		}, {
			"file":	"main/main.c",
			"line":	2215,
			"primary_score":	999625,
			"second_score":	6055
		}, {
			"file":	"main/main.c",
			"line":	2216,
			"primary_score":	999625,
			"second_score":	6026
		}, {
			"file":	"main/main.c",
			"line":	2219,
			"primary_score":	999625,
			"second_score":	3567
		}, {
			"file":	"main/main.c",
			"line":	2222,
			"primary_score":	999625,
			"second_score":	3244
		}, {
			"file":	"main/main.c",
			"line":	2223,
			"primary_score":	999625,
			"second_score":	3214
		}, {
			"file":	"main/main.c",
			"line":	2228,
			"primary_score":	999625,
			"second_score":	3191
		}, {
			"file":	"main/main.c",
			"line":	2229,
			"primary_score":	999625,
			"second_score":	3154
		}, {
			"file":	"main/main.c",
			"line":	2231,
			"primary_score":	999625,
			"second_score":	3152
		}, {
			"file":	"main/main.c",
			"line":	2234,
			"primary_score":	999625,
			"second_score":	3151
		}, {
			"file":	"main/main.c",
			"line":	2235,
			"primary_score":	999625,
			"second_score":	3141
		}, {
			"file":	"main/main.c",
			"line":	2339,
			"primary_score":	999625,
			"second_score":	119920
		}, {
			"file":	"main/main.c",
			"line":	2347,
			"primary_score":	999625,
			"second_score":	119918
		}, {
			"file":	"main/main.c",
			"line":	2350,
			"primary_score":	999625,
			"second_score":	119917
		}, {
			"file":	"main/main.c",
			"line":	2352,
			"primary_score":	999625,
			"second_score":	119915
		}, {
			"file":	"main/output.c",
			"line":	103,
			"primary_score":	999625,
			"second_score":	3190
		}, {
			"file":	"main/output.c",
			"line":	104,
			"primary_score":	999625,
			"second_score":	3176
		}, {
			"file":	"main/output.c",
			"line":	105,
			"primary_score":	999625,
			"second_score":	3162
		}, {
			"file":	"main/output.c",
			"line":	129,
			"primary_score":	999625,
			"second_score":	119446
		}, {
			"file":	"main/output.c",
			"line":	131,
			"primary_score":	999625,
			"second_score":	119445
		}, {
			"file":	"main/output.c",
			"line":	132,
			"primary_score":	999625,
			"second_score":	119444
		}, {
			"file":	"main/output.c",
			"line":	135,
			"primary_score":	999625,
			"second_score":	119443
		}, {
			"file":	"main/output.c",
			"line":	198,
			"primary_score":	999625,
			"second_score":	121107
		}, {
			"file":	"main/output.c",
			"line":	201,
			"primary_score":	999625,
			"second_score":	121106
		}, {
			"file":	"main/output.c",
			"line":	202,
			"primary_score":	999625,
			"second_score":	121063
		}, {
			"file":	"main/output.c",
			"line":	281,
			"primary_score":	999625,
			"second_score":	119448
		}, {
			"file":	"main/output.c",
			"line":	697,
			"primary_score":	999625,
			"second_score":	121101
		}, {
			"file":	"main/output.c",
			"line":	703,
			"primary_score":	999625,
			"second_score":	121100
		}, {
			"file":	"main/output.c",
			"line":	711,
			"primary_score":	999625,
			"second_score":	121098
		}, {
			"file":	"main/output.c",
			"line":	715,
			"primary_score":	999625,
			"second_score":	121097
		}, {
			"file":	"main/output.c",
			"line":	716,
			"primary_score":	999625,
			"second_score":	121096
		}, {
			"file":	"main/output.c",
			"line":	717,
			"primary_score":	999625,
			"second_score":	121095
		}, {
			"file":	"main/output.c",
			"line":	719,
			"primary_score":	999625,
			"second_score":	121094
		}, {
			"file":	"main/output.c",
			"line":	785,
			"primary_score":	999625,
			"second_score":	121065
		}, {
			"file":	"main/output.c",
			"line":	789,
			"primary_score":	999625,
			"second_score":	121064
		}, {
			"file":	"main/output.c",
			"line":	975,
			"primary_score":	999625,
			"second_score":	121105
		}, {
			"file":	"main/output.c",
			"line":	976,
			"primary_score":	999625,
			"second_score":	121104
		}, {
			"file":	"main/output.c",
			"line":	977,
			"primary_score":	999625,
			"second_score":	121103
		}, {
			"file":	"main/output.c",
			"line":	979,
			"primary_score":	999625,
			"second_score":	121102
		}, {
			"file":	"main/output.c",
			"line":	983,
			"primary_score":	999625,
			"second_score":	121099
		}, {
			"file":	"main/output.c",
			"line":	990,
			"primary_score":	999625,
			"second_score":	121093
		}, {
			"file":	"main/output.c",
			"line":	1002,
			"primary_score":	999625,
			"second_score":	121092
		}, {
			"file":	"main/output.c",
			"line":	1003,
			"primary_score":	999625,
			"second_score":	121091
		}, {
			"file":	"main/output.c",
			"line":	1006,
			"primary_score":	999625,
			"second_score":	121090
		}, {
			"file":	"main/output.c",
			"line":	1010,
			"primary_score":	999625,
			"second_score":	121089
		}, {
			"file":	"main/output.c",
			"line":	1011,
			"primary_score":	999625,
			"second_score":	124610
		}, {
			"file":	"main/output.c",
			"line":	1014,
			"primary_score":	999625,
			"second_score":	124608
		}, {
			"file":	"main/output.c",
			"line":	1015,
			"primary_score":	999625,
			"second_score":	124606
		}, {
			"file":	"main/output.c",
			"line":	1016,
			"primary_score":	999625,
			"second_score":	124603
		}, {
			"file":	"main/output.c",
			"line":	1022,
			"primary_score":	999625,
			"second_score":	121088
		}, {
			"file":	"main/output.c",
			"line":	1023,
			"primary_score":	999625,
			"second_score":	121073
		}, {
			"file":	"main/output.c",
			"line":	1024,
			"primary_score":	999625,
			"second_score":	121072
		}, {
			"file":	"main/output.c",
			"line":	1026,
			"primary_score":	999625,
			"second_score":	121067
		}, {
			"file":	"main/output.c",
			"line":	1028,
			"primary_score":	999625,
			"second_score":	121066
		}, {
			"file":	"main/php_ini.c",
			"line":	194,
			"primary_score":	999625,
			"second_score":	3256
		}, {
			"file":	"main/php_ini.c",
			"line":	197,
			"primary_score":	999625,
			"second_score":	3255
		}, {
			"file":	"main/php_ini.c",
			"line":	198,
			"primary_score":	999625,
			"second_score":	3254
		}, {
			"file":	"main/php_ini.c",
			"line":	729,
			"primary_score":	999625,
			"second_score":	3566
		}, {
			"file":	"main/php_ini.c",
			"line":	730,
			"primary_score":	999625,
			"second_score":	3247
		}, {
			"file":	"main/php_ini.c",
			"line":	734,
			"primary_score":	999625,
			"second_score":	3246
		}, {
			"file":	"main/php_ini.c",
			"line":	738,
			"primary_score":	999625,
			"second_score":	3245
		}, {
			"file":	"main/php_logos.c",
			"line":	67,
			"primary_score":	999625,
			"second_score":	6054
		}, {
			"file":	"main/php_logos.c",
			"line":	68,
			"primary_score":	999625,
			"second_score":	6027
		}, {
			"file":	"main/php_open_temporary_file.c",
			"line":	179,
			"primary_score":	999625,
			"second_score":	3153
		}, {
			"file":	"main/php_ticks.c",
			"line":	32,
			"primary_score":	999625,
			"second_score":	119902
		}, {
			"file":	"main/php_ticks.c",
			"line":	37,
			"primary_score":	999625,
			"second_score":	3145
		}, {
			"file":	"main/snprintf.c",
			"line":	317,
			"primary_score":	999707,
			"second_score":	120284
		}, {
			"file":	"main/snprintf.c",
			"line":	318,
			"primary_score":	999707,
			"second_score":	120283
		}, {
			"file":	"main/snprintf.c",
			"line":	320,
			"primary_score":	999707,
			"second_score":	120282
		}, {
			"file":	"main/snprintf.c",
			"line":	324,
			"primary_score":	999707,
			"second_score":	120281
		}, {
			"file":	"main/snprintf.c",
			"line":	335,
			"primary_score":	999707,
			"second_score":	120280
		}, {
			"file":	"main/snprintf.c",
			"line":	339,
			"primary_score":	999707,
			"second_score":	120279
		}, {
			"file":	"main/snprintf.c",
			"line":	346,
			"primary_score":	999707,
			"second_score":	120278
		}, {
			"file":	"main/snprintf.c",
			"line":	347,
			"primary_score":	999707,
			"second_score":	120277
		}, {
			"file":	"main/snprintf.c",
			"line":	349,
			"primary_score":	999707,
			"second_score":	120276
		}, {
			"file":	"main/snprintf.c",
			"line":	350,
			"primary_score":	999707,
			"second_score":	120275
		}, {
			"file":	"main/snprintf.c",
			"line":	354,
			"primary_score":	999707,
			"second_score":	120274
		}, {
			"file":	"main/snprintf.c",
			"line":	355,
			"primary_score":	999707,
			"second_score":	120273
		}, {
			"file":	"main/spprintf.c",
			"line":	441,
			"primary_score":	999707,
			"second_score":	120287
		}, {
			"file":	"main/spprintf.c",
			"line":	444,
			"primary_score":	999785,
			"second_score":	120286
		}, {
			"file":	"main/spprintf.c",
			"line":	474,
			"primary_score":	999707,
			"second_score":	120285
		}, {
			"file":	"main/spprintf.c",
			"line":	476,
			"primary_score":	999707,
			"second_score":	120272
		}, {
			"file":	"main/spprintf.c",
			"line":	478,
			"primary_score":	999707,
			"second_score":	120270
		}, {
			"file":	"main/spprintf.c",
			"line":	479,
			"primary_score":	999707,
			"second_score":	120269
		}, {
			"file":	"main/spprintf.c",
			"line":	481,
			"primary_score":	999707,
			"second_score":	120268
		}, {
			"file":	"main/spprintf.c",
			"line":	483,
			"primary_score":	999707,
			"second_score":	120267
		}, {
			"file":	"main/spprintf.c",
			"line":	486,
			"primary_score":	999707,
			"second_score":	120266
		}, {
			"file":	"main/spprintf.c",
			"line":	775,
			"primary_score":	999903,
			"second_score":	120483
		}, {
			"file":	"main/streams/filter.c",
			"line":	37,
			"primary_score":	999625,
			"second_score":	6095
		}, {
			"file":	"main/streams/filter.c",
			"line":	54,
			"primary_score":	999625,
			"second_score":	61952
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	287,
			"primary_score":	999625,
			"second_score":	147981
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	371,
			"primary_score":	999625,
			"second_score":	113752
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	372,
			"primary_score":	999625,
			"second_score":	113751
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	374,
			"primary_score":	999625,
			"second_score":	113750
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	377,
			"primary_score":	999625,
			"second_score":	113749
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	392,
			"primary_score":	999625,
			"second_score":	113748
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	393,
			"primary_score":	999625,
			"second_score":	113747
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	394,
			"primary_score":	999625,
			"second_score":	113746
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	404,
			"primary_score":	999625,
			"second_score":	113745
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	405,
			"primary_score":	999625,
			"second_score":	113744
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	413,
			"primary_score":	999625,
			"second_score":	113743
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	425,
			"primary_score":	999625,
			"second_score":	113742
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	427,
			"primary_score":	999625,
			"second_score":	113723
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	432,
			"primary_score":	999625,
			"second_score":	113762
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	434,
			"primary_score":	999625,
			"second_score":	113761
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	441,
			"primary_score":	999625,
			"second_score":	113760
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	442,
			"primary_score":	999625,
			"second_score":	113759
		}, {
			"file":	"main/streams/streams.c",
			"line":	104,
			"primary_score":	999625,
			"second_score":	119370
		}, {
			"file":	"main/streams/streams.c",
			"line":	105,
			"primary_score":	999625,
			"second_score":	119361
		}, {
			"file":	"main/streams/streams.c",
			"line":	333,
			"primary_score":	999625,
			"second_score":	113777
		}, {
			"file":	"main/streams/streams.c",
			"line":	334,
			"primary_score":	999625,
			"second_score":	113776
		}, {
			"file":	"main/streams/streams.c",
			"line":	335,
			"primary_score":	999625,
			"second_score":	113775
		}, {
			"file":	"main/streams/streams.c",
			"line":	336,
			"primary_score":	999625,
			"second_score":	113774
		}, {
			"file":	"main/streams/streams.c",
			"line":	337,
			"primary_score":	999625,
			"second_score":	113773
		}, {
			"file":	"main/streams/streams.c",
			"line":	339,
			"primary_score":	999625,
			"second_score":	113772
		}, {
			"file":	"main/streams/streams.c",
			"line":	352,
			"primary_score":	999625,
			"second_score":	113771
		}, {
			"file":	"main/streams/streams.c",
			"line":	361,
			"primary_score":	999625,
			"second_score":	113770
		}, {
			"file":	"main/streams/streams.c",
			"line":	365,
			"primary_score":	999625,
			"second_score":	113769
		}, {
			"file":	"main/streams/streams.c",
			"line":	383,
			"primary_score":	999625,
			"second_score":	113768
		}, {
			"file":	"main/streams/streams.c",
			"line":	402,
			"primary_score":	999625,
			"second_score":	113767
		}, {
			"file":	"main/streams/streams.c",
			"line":	405,
			"primary_score":	999625,
			"second_score":	113757
		}, {
			"file":	"main/streams/streams.c",
			"line":	410,
			"primary_score":	999625,
			"second_score":	113756
		}, {
			"file":	"main/streams/streams.c",
			"line":	414,
			"primary_score":	999625,
			"second_score":	113755
		}, {
			"file":	"main/streams/streams.c",
			"line":	415,
			"primary_score":	999625,
			"second_score":	113754
		}, {
			"file":	"main/streams/streams.c",
			"line":	427,
			"primary_score":	999625,
			"second_score":	113753
		}, {
			"file":	"main/streams/streams.c",
			"line":	428,
			"primary_score":	999625,
			"second_score":	113722
		}, {
			"file":	"main/streams/streams.c",
			"line":	431,
			"primary_score":	999625,
			"second_score":	113721
		}, {
			"file":	"main/streams/streams.c",
			"line":	438,
			"primary_score":	999625,
			"second_score":	113720
		}, {
			"file":	"main/streams/streams.c",
			"line":	439,
			"primary_score":	999625,
			"second_score":	113719
		}, {
			"file":	"main/streams/streams.c",
			"line":	442,
			"primary_score":	999625,
			"second_score":	113718
		}, {
			"file":	"main/streams/streams.c",
			"line":	446,
			"primary_score":	999625,
			"second_score":	113717
		}, {
			"file":	"main/streams/streams.c",
			"line":	451,
			"primary_score":	999625,
			"second_score":	113716
		}, {
			"file":	"main/streams/streams.c",
			"line":	456,
			"primary_score":	999625,
			"second_score":	113715
		}, {
			"file":	"main/streams/streams.c",
			"line":	461,
			"primary_score":	999625,
			"second_score":	113714
		}, {
			"file":	"main/streams/streams.c",
			"line":	493,
			"primary_score":	999625,
			"second_score":	113713
		}, {
			"file":	"main/streams/streams.c",
			"line":	494,
			"primary_score":	999625,
			"second_score":	113712
		}, {
			"file":	"main/streams/streams.c",
			"line":	495,
			"primary_score":	999625,
			"second_score":	113693
		}, {
			"file":	"main/streams/streams.c",
			"line":	498,
			"primary_score":	999625,
			"second_score":	113692
		}, {
			"file":	"main/streams/streams.c",
			"line":	502,
			"primary_score":	999625,
			"second_score":	113673
		}, {
			"file":	"main/streams/streams.c",
			"line":	506,
			"primary_score":	999625,
			"second_score":	113672
		}, {
			"file":	"main/streams/streams.c",
			"line":	1114,
			"primary_score":	999625,
			"second_score":	113766
		}, {
			"file":	"main/streams/streams.c",
			"line":	1116,
			"primary_score":	999625,
			"second_score":	113765
		}, {
			"file":	"main/streams/streams.c",
			"line":	1120,
			"primary_score":	999625,
			"second_score":	113764
		}, {
			"file":	"main/streams/streams.c",
			"line":	1121,
			"primary_score":	999625,
			"second_score":	113763
		}, {
			"file":	"main/streams/streams.c",
			"line":	1124,
			"primary_score":	999625,
			"second_score":	113758
		}, {
			"file":	"main/streams/streams.c",
			"line":	1498,
			"primary_score":	999625,
			"second_score":	113779
		}, {
			"file":	"main/streams/streams.c",
			"line":	1500,
			"primary_score":	999625,
			"second_score":	113778
		}, {
			"file":	"main/streams/streams.c",
			"line":	1511,
			"primary_score":	999625,
			"second_score":	113135
		}, {
			"file":	"main/streams/streams.c",
			"line":	1517,
			"primary_score":	999625,
			"second_score":	113134
		}, {
			"file":	"main/streams/streams.c",
			"line":	1553,
			"primary_score":	999625,
			"second_score":	6120
		}, {
			"file":	"main/streams/streams.c",
			"line":	1554,
			"primary_score":	999625,
			"second_score":	6096
		}, {
			"file":	"main/streams/streams.c",
			"line":	1555,
			"primary_score":	999625,
			"second_score":	6086
		}, {
			"file":	"main/streams/streams.c",
			"line":	1556,
			"primary_score":	999625,
			"second_score":	6056
		}, {
			"file":	"main/streams/streams.c",
			"line":	1592,
			"primary_score":	999625,
			"second_score":	97426
		}, {
			"file":	"main/streams/transports.c",
			"line":	29,
			"primary_score":	999625,
			"second_score":	6085
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	262,
			"primary_score":	999625,
			"second_score":	121082
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	280,
			"primary_score":	999625,
			"second_score":	121081
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	281,
			"primary_score":	999625,
			"second_score":	121080
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	284,
			"primary_score":	999625,
			"second_score":	121079
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	288,
			"primary_score":	999625,
			"second_score":	121078
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	300,
			"primary_score":	999625,
			"second_score":	121087
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	301,
			"primary_score":	999625,
			"second_score":	121086
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	302,
			"primary_score":	999625,
			"second_score":	121085
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	311,
			"primary_score":	999625,
			"second_score":	121084
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	313,
			"primary_score":	999625,
			"second_score":	121083
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	314,
			"primary_score":	999625,
			"second_score":	121077
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	320,
			"primary_score":	999625,
			"second_score":	121076
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	321,
			"primary_score":	999625,
			"second_score":	121075
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	324,
			"primary_score":	999625,
			"second_score":	121074
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	333,
			"primary_score":	999625,
			"second_score":	103291
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	386,
			"primary_score":	999625,
			"second_score":	113175
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	387,
			"primary_score":	999625,
			"second_score":	113174
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	391,
			"primary_score":	999625,
			"second_score":	113173
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	403,
			"primary_score":	999625,
			"second_score":	124642
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	411,
			"primary_score":	999625,
			"second_score":	124617
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	962,
			"primary_score":	999625,
			"second_score":	147982
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	966,
			"primary_score":	999625,
			"second_score":	147981
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	967,
			"primary_score":	999625,
			"second_score":	147980
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	968,
			"primary_score":	999625,
			"second_score":	147979
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1102,
			"primary_score":	999625,
			"second_score":	147968
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1103,
			"primary_score":	999625,
			"second_score":	147967
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1255,
			"primary_score":	999625,
			"second_score":	119914
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1256,
			"primary_score":	999625,
			"second_score":	119913
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1293,
			"primary_score":	999625,
			"second_score":	121587
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1296,
			"primary_score":	999625,
			"second_score":	118559
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1435,
			"primary_score":	999625,
			"second_score":	119912
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1437,
			"primary_score":	999625,
			"second_score":	119910
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1439,
			"primary_score":	999625,
			"second_score":	119909
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1441,
			"primary_score":	999625,
			"second_score":	103303
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1442,
			"primary_score":	999625,
			"second_score":	103278
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1444,
			"primary_score":	999625,
			"second_score":	103302
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1448,
			"primary_score":	999625,
			"second_score":	103301
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1449,
			"primary_score":	999625,
			"second_score":	103300
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1452,
			"primary_score":	999625,
			"second_score":	103299
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1453,
			"primary_score":	999625,
			"second_score":	103298
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1455,
			"primary_score":	999625,
			"second_score":	3136
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1460,
			"primary_score":	999625,
			"second_score":	1
		}],
	"mutation_info":	[{
			"file":	"ext/spl/spl_iterators.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"ext/spl/spl_iterators.c",
			"lines":	[{
					"line":	1267,
					"switches":	[{
							"switch":	6,
							"types":	[[], [], [], [], [391], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257], [], [], [], [303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390], [258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], [], [], [], [], [], []],
							"begin_line":	1268,
							"begin_column":	3,
							"end_line":	1268,
							"end_column":	3,
							"patch_codes":	["memset(&(**object_ptr).is_ref__gc, 0, sizeof (*(&(**object_ptr).is_ref__gc)))", "memset(&(**object_ptr).refcount__gc, 0, sizeof (*(&(**object_ptr).refcount__gc)))", "memset(&(**object_ptr).type, 0, sizeof (*(&(**object_ptr).type)))", "memset(&(**object_ptr).value, 0, sizeof (*(&(**object_ptr).value)))", "memset(&(**object_ptr).value.dval, 0, sizeof (*(&(**object_ptr).value.dval)))", "memset(&(**object_ptr).value.ht, 0, sizeof (*(&(**object_ptr).value.ht)))", "memset(&(**object_ptr).value.lval, 0, sizeof (*(&(**object_ptr).value.lval)))", "memset(&(**object_ptr).value.obj, 0, sizeof (*(&(**object_ptr).value.obj)))", "memset(&(**object_ptr).value.obj.handle, 0, sizeof (*(&(**object_ptr).value.obj.handle)))", "memset(&(**object_ptr).value.obj.handlers, 0, sizeof (*(&(**object_ptr).value.obj.handlers)))", "memset(&(**object_ptr).value.obj.handlers->add_ref, 0, sizeof (*(&(**object_ptr).value.obj.handlers->add_ref)))", "memset(&(**object_ptr).value.obj.handlers->call_method, 0, sizeof (*(&(**object_ptr).value.obj.handlers->call_method)))", "memset(&(**object_ptr).value.obj.handlers->cast_object, 0, sizeof (*(&(**object_ptr).value.obj.handlers->cast_object)))", "memset(&(**object_ptr).value.obj.handlers->clone_obj, 0, sizeof (*(&(**object_ptr).value.obj.handlers->clone_obj)))", "memset(&(**object_ptr).value.obj.handlers->compare_objects, 0, sizeof (*(&(**object_ptr).value.obj.handlers->compare_objects)))", "memset(&(**object_ptr).value.obj.handlers->count_elements, 0, sizeof (*(&(**object_ptr).value.obj.handlers->count_elements)))", "memset(&(**object_ptr).value.obj.handlers->del_ref, 0, sizeof (*(&(**object_ptr).value.obj.handlers->del_ref)))", "memset(&(**object_ptr).value.obj.handlers->get, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get)))", "memset(&(**object_ptr).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_class_entry)))", "memset(&(**object_ptr).value.obj.handlers->get_class_name, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_class_name)))", "memset(&(**object_ptr).value.obj.handlers->get_closure, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_closure)))", "memset(&(**object_ptr).value.obj.handlers->get_constructor, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_constructor)))", "memset(&(**object_ptr).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_debug_info)))", "memset(&(**object_ptr).value.obj.handlers->get_method, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_method)))", "memset(&(**object_ptr).value.obj.handlers->get_properties, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_properties)))", "memset(&(**object_ptr).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**object_ptr).value.obj.handlers->has_dimension, 0, sizeof (*(&(**object_ptr).value.obj.handlers->has_dimension)))", "memset(&(**object_ptr).value.obj.handlers->has_property, 0, sizeof (*(&(**object_ptr).value.obj.handlers->has_property)))", "memset(&(**object_ptr).value.obj.handlers->read_dimension, 0, sizeof (*(&(**object_ptr).value.obj.handlers->read_dimension)))", "memset(&(**object_ptr).value.obj.handlers->read_property, 0, sizeof (*(&(**object_ptr).value.obj.handlers->read_property)))", "memset(&(**object_ptr).value.obj.handlers->set, 0, sizeof (*(&(**object_ptr).value.obj.handlers->set)))", "memset(&(**object_ptr).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**object_ptr).value.obj.handlers->unset_dimension)))", "memset(&(**object_ptr).value.obj.handlers->unset_property, 0, sizeof (*(&(**object_ptr).value.obj.handlers->unset_property)))", "memset(&(**object_ptr).value.obj.handlers->write_dimension, 0, sizeof (*(&(**object_ptr).value.obj.handlers->write_dimension)))", "memset(&(**object_ptr).value.obj.handlers->write_property, 0, sizeof (*(&(**object_ptr).value.obj.handlers->write_property)))", "memset(&(**object_ptr).value.str, 0, sizeof (*(&(**object_ptr).value.str)))", "memset(&(*intern->inner.zobject).is_ref__gc, 0, sizeof (*(&(*intern->inner.zobject).is_ref__gc)))", "memset(&(*intern->inner.zobject).refcount__gc, 0, sizeof (*(&(*intern->inner.zobject).refcount__gc)))", "memset(&(*intern->inner.zobject).type, 0, sizeof (*(&(*intern->inner.zobject).type)))", "memset(&(*intern->inner.zobject).value, 0, sizeof (*(&(*intern->inner.zobject).value)))", "memset(&(*intern->inner.zobject).value.dval, 0, sizeof (*(&(*intern->inner.zobject).value.dval)))", "memset(&(*intern->inner.zobject).value.ht, 0, sizeof (*(&(*intern->inner.zobject).value.ht)))", "memset(&(*intern->inner.zobject).value.lval, 0, sizeof (*(&(*intern->inner.zobject).value.lval)))", "memset(&(*intern->inner.zobject).value.obj, 0, sizeof (*(&(*intern->inner.zobject).value.obj)))", "memset(&(*intern->inner.zobject).value.obj.handle, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handle)))", "memset(&(*intern->inner.zobject).value.obj.handlers, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers)))", "memset(&(*intern->inner.zobject).value.obj.handlers->add_ref, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->add_ref)))", "memset(&(*intern->inner.zobject).value.obj.handlers->call_method, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->call_method)))", "memset(&(*intern->inner.zobject).value.obj.handlers->cast_object, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->cast_object)))", "memset(&(*intern->inner.zobject).value.obj.handlers->clone_obj, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->clone_obj)))", "memset(&(*intern->inner.zobject).value.obj.handlers->compare_objects, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->compare_objects)))", "memset(&(*intern->inner.zobject).value.obj.handlers->count_elements, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->count_elements)))", "memset(&(*intern->inner.zobject).value.obj.handlers->del_ref, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->del_ref)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_class_entry, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_class_entry)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_class_name, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_class_name)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_closure, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_closure)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_constructor, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_constructor)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_debug_info, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_debug_info)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_method, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_method)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_properties, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_properties)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(*intern->inner.zobject).value.obj.handlers->has_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->has_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->has_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->has_property)))", "memset(&(*intern->inner.zobject).value.obj.handlers->read_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->read_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->read_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->read_property)))", "memset(&(*intern->inner.zobject).value.obj.handlers->set, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->set)))", "memset(&(*intern->inner.zobject).value.obj.handlers->unset_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->unset_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->unset_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->unset_property)))", "memset(&(*intern->inner.zobject).value.obj.handlers->write_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->write_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->write_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->write_property)))", "memset(&(*intern->inner.zobject).value.str, 0, sizeof (*(&(*intern->inner.zobject).value.str)))", "memset(&intern->current, 0, sizeof (*(&intern->current)))", "memset(&intern->dit_type, 0, sizeof (*(&intern->dit_type)))", "memset(&intern->inner, 0, sizeof (*(&intern->inner)))", "memset(&intern->inner.ce, 0, sizeof (*(&intern->inner.ce)))", "memset(&intern->inner.ce->__call, 0, sizeof (*(&intern->inner.ce->__call)))", "memset(&intern->inner.ce->__callstatic, 0, sizeof (*(&intern->inner.ce->__callstatic)))", "memset(&intern->inner.ce->__get, 0, sizeof (*(&intern->inner.ce->__get)))", "memset(&intern->inner.ce->__isset, 0, sizeof (*(&intern->inner.ce->__isset)))", "memset(&intern->inner.ce->__set, 0, sizeof (*(&intern->inner.ce->__set)))", "memset(&intern->inner.ce->__tostring, 0, sizeof (*(&intern->inner.ce->__tostring)))", "memset(&intern->inner.ce->__unset, 0, sizeof (*(&intern->inner.ce->__unset)))", "memset(&intern->inner.ce->ce_flags, 0, sizeof (*(&intern->inner.ce->ce_flags)))", "memset(&intern->inner.ce->clone, 0, sizeof (*(&intern->inner.ce->clone)))", "memset(&intern->inner.ce->constants_table, 0, sizeof (*(&intern->inner.ce->constants_table)))", "memset(&intern->inner.ce->constructor, 0, sizeof (*(&intern->inner.ce->constructor)))", "memset(&intern->inner.ce->create_object, 0, sizeof (*(&intern->inner.ce->create_object)))", "memset(&intern->inner.ce->default_properties_count, 0, sizeof (*(&intern->inner.ce->default_properties_count)))", "memset(&intern->inner.ce->default_properties_table, 0, sizeof (*(&intern->inner.ce->default_properties_table)))", "memset(&intern->inner.ce->default_static_members_count, 0, sizeof (*(&intern->inner.ce->default_static_members_count)))", "memset(&intern->inner.ce->default_static_members_table, 0, sizeof (*(&intern->inner.ce->default_static_members_table)))", "memset(&intern->inner.ce->destructor, 0, sizeof (*(&intern->inner.ce->destructor)))", "memset(&intern->inner.ce->function_table, 0, sizeof (*(&intern->inner.ce->function_table)))", "memset(&intern->inner.ce->get_iterator, 0, sizeof (*(&intern->inner.ce->get_iterator)))", "memset(&intern->inner.ce->get_static_method, 0, sizeof (*(&intern->inner.ce->get_static_method)))", "memset(&intern->inner.ce->info, 0, sizeof (*(&intern->inner.ce->info)))", "memset(&intern->inner.ce->interface_gets_implemented, 0, sizeof (*(&intern->inner.ce->interface_gets_implemented)))", "memset(&intern->inner.ce->interfaces, 0, sizeof (*(&intern->inner.ce->interfaces)))", "memset(&intern->inner.ce->iterator_funcs, 0, sizeof (*(&intern->inner.ce->iterator_funcs)))", "memset(&intern->inner.ce->name, 0, sizeof (*(&intern->inner.ce->name)))", "memset(&intern->inner.ce->name_length, 0, sizeof (*(&intern->inner.ce->name_length)))", "memset(&intern->inner.ce->num_interfaces, 0, sizeof (*(&intern->inner.ce->num_interfaces)))", "memset(&intern->inner.ce->num_traits, 0, sizeof (*(&intern->inner.ce->num_traits)))", "memset(&intern->inner.ce->parent, 0, sizeof (*(&intern->inner.ce->parent)))", "memset(&intern->inner.ce->properties_info, 0, sizeof (*(&intern->inner.ce->properties_info)))", "memset(&intern->inner.ce->refcount, 0, sizeof (*(&intern->inner.ce->refcount)))", "memset(&intern->inner.ce->serialize, 0, sizeof (*(&intern->inner.ce->serialize)))", "memset(&intern->inner.ce->serialize_func, 0, sizeof (*(&intern->inner.ce->serialize_func)))", "memset(&intern->inner.ce->static_members_table, 0, sizeof (*(&intern->inner.ce->static_members_table)))", "memset(&intern->inner.ce->trait_aliases, 0, sizeof (*(&intern->inner.ce->trait_aliases)))", "memset(&intern->inner.ce->trait_precedences, 0, sizeof (*(&intern->inner.ce->trait_precedences)))", "memset(&intern->inner.ce->traits, 0, sizeof (*(&intern->inner.ce->traits)))", "memset(&intern->inner.ce->type, 0, sizeof (*(&intern->inner.ce->type)))", "memset(&intern->inner.ce->unserialize, 0, sizeof (*(&intern->inner.ce->unserialize)))", "memset(&intern->inner.ce->unserialize_func, 0, sizeof (*(&intern->inner.ce->unserialize_func)))", "memset(&intern->inner.iterator, 0, sizeof (*(&intern->inner.iterator)))", "memset(&intern->inner.object, 0, sizeof (*(&intern->inner.object)))", "memset(&intern->inner.zobject, 0, sizeof (*(&intern->inner.zobject)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&std_object_handlers.add_ref, 0, sizeof (*(&std_object_handlers.add_ref)))", "memset(&std_object_handlers.call_method, 0, sizeof (*(&std_object_handlers.call_method)))", "memset(&std_object_handlers.cast_object, 0, sizeof (*(&std_object_handlers.cast_object)))", "memset(&std_object_handlers.clone_obj, 0, sizeof (*(&std_object_handlers.clone_obj)))", "memset(&std_object_handlers.compare_objects, 0, sizeof (*(&std_object_handlers.compare_objects)))", "memset(&std_object_handlers.count_elements, 0, sizeof (*(&std_object_handlers.count_elements)))", "memset(&std_object_handlers.del_ref, 0, sizeof (*(&std_object_handlers.del_ref)))", "memset(&std_object_handlers.get, 0, sizeof (*(&std_object_handlers.get)))", "memset(&std_object_handlers.get_class_entry, 0, sizeof (*(&std_object_handlers.get_class_entry)))", "memset(&std_object_handlers.get_class_name, 0, sizeof (*(&std_object_handlers.get_class_name)))", "memset(&std_object_handlers.get_closure, 0, sizeof (*(&std_object_handlers.get_closure)))", "memset(&std_object_handlers.get_constructor, 0, sizeof (*(&std_object_handlers.get_constructor)))", "memset(&std_object_handlers.get_debug_info, 0, sizeof (*(&std_object_handlers.get_debug_info)))", "memset(&std_object_handlers.get_method, 0, sizeof (*(&std_object_handlers.get_method)))", "memset(&std_object_handlers.get_properties, 0, sizeof (*(&std_object_handlers.get_properties)))", "memset(&std_object_handlers.get_property_ptr_ptr, 0, sizeof (*(&std_object_handlers.get_property_ptr_ptr)))", "memset(&std_object_handlers.has_dimension, 0, sizeof (*(&std_object_handlers.has_dimension)))", "memset(&std_object_handlers.has_property, 0, sizeof (*(&std_object_handlers.has_property)))", "memset(&std_object_handlers.read_dimension, 0, sizeof (*(&std_object_handlers.read_dimension)))", "memset(&std_object_handlers.read_property, 0, sizeof (*(&std_object_handlers.read_property)))", "memset(&std_object_handlers.set, 0, sizeof (*(&std_object_handlers.set)))", "memset(&std_object_handlers.unset_dimension, 0, sizeof (*(&std_object_handlers.unset_dimension)))", "memset(&std_object_handlers.unset_property, 0, sizeof (*(&std_object_handlers.unset_property)))", "memset(&std_object_handlers.write_dimension, 0, sizeof (*(&std_object_handlers.write_dimension)))", "memset(&std_object_handlers.write_property, 0, sizeof (*(&std_object_handlers.write_property)))", "memset((**object_ptr).value.ht, 0, sizeof (*((**object_ptr).value.ht)))", "memset((**object_ptr).value.obj.handlers, 0, sizeof (*((**object_ptr).value.obj.handlers)))", "memset((**object_ptr).value.obj.handlers->add_ref, 0, sizeof (*((**object_ptr).value.obj.handlers->add_ref)))", "memset((**object_ptr).value.obj.handlers->call_method, 0, sizeof (*((**object_ptr).value.obj.handlers->call_method)))", "memset((**object_ptr).value.obj.handlers->cast_object, 0, sizeof (*((**object_ptr).value.obj.handlers->cast_object)))", "memset((**object_ptr).value.obj.handlers->clone_obj, 0, sizeof (*((**object_ptr).value.obj.handlers->clone_obj)))", "memset((**object_ptr).value.obj.handlers->compare_objects, 0, sizeof (*((**object_ptr).value.obj.handlers->compare_objects)))", "memset((**object_ptr).value.obj.handlers->count_elements, 0, sizeof (*((**object_ptr).value.obj.handlers->count_elements)))", "memset((**object_ptr).value.obj.handlers->del_ref, 0, sizeof (*((**object_ptr).value.obj.handlers->del_ref)))", "memset((**object_ptr).value.obj.handlers->get, 0, sizeof (*((**object_ptr).value.obj.handlers->get)))", "memset((**object_ptr).value.obj.handlers->get_class_entry, 0, sizeof (*((**object_ptr).value.obj.handlers->get_class_entry)))", "memset((**object_ptr).value.obj.handlers->get_class_name, 0, sizeof (*((**object_ptr).value.obj.handlers->get_class_name)))", "memset((**object_ptr).value.obj.handlers->get_closure, 0, sizeof (*((**object_ptr).value.obj.handlers->get_closure)))", "memset((**object_ptr).value.obj.handlers->get_constructor, 0, sizeof (*((**object_ptr).value.obj.handlers->get_constructor)))", "memset((**object_ptr).value.obj.handlers->get_debug_info, 0, sizeof (*((**object_ptr).value.obj.handlers->get_debug_info)))", "memset((**object_ptr).value.obj.handlers->get_method, 0, sizeof (*((**object_ptr).value.obj.handlers->get_method)))", "memset((**object_ptr).value.obj.handlers->get_properties, 0, sizeof (*((**object_ptr).value.obj.handlers->get_properties)))", "memset((**object_ptr).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**object_ptr).value.obj.handlers->get_property_ptr_ptr)))", "memset((**object_ptr).value.obj.handlers->has_dimension, 0, sizeof (*((**object_ptr).value.obj.handlers->has_dimension)))", "memset((**object_ptr).value.obj.handlers->has_property, 0, sizeof (*((**object_ptr).value.obj.handlers->has_property)))", "memset((**object_ptr).value.obj.handlers->read_dimension, 0, sizeof (*((**object_ptr).value.obj.handlers->read_dimension)))", "memset((**object_ptr).value.obj.handlers->read_property, 0, sizeof (*((**object_ptr).value.obj.handlers->read_property)))", "memset((**object_ptr).value.obj.handlers->set, 0, sizeof (*((**object_ptr).value.obj.handlers->set)))", "memset((**object_ptr).value.obj.handlers->unset_dimension, 0, sizeof (*((**object_ptr).value.obj.handlers->unset_dimension)))", "memset((**object_ptr).value.obj.handlers->unset_property, 0, sizeof (*((**object_ptr).value.obj.handlers->unset_property)))", "memset((**object_ptr).value.obj.handlers->write_dimension, 0, sizeof (*((**object_ptr).value.obj.handlers->write_dimension)))", "memset((**object_ptr).value.obj.handlers->write_property, 0, sizeof (*((**object_ptr).value.obj.handlers->write_property)))", "memset((*intern->inner.zobject).value.ht, 0, sizeof (*((*intern->inner.zobject).value.ht)))", "memset((*intern->inner.zobject).value.obj.handlers, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers)))", "memset((*intern->inner.zobject).value.obj.handlers->add_ref, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->add_ref)))", "memset((*intern->inner.zobject).value.obj.handlers->call_method, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->call_method)))", "memset((*intern->inner.zobject).value.obj.handlers->cast_object, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->cast_object)))", "memset((*intern->inner.zobject).value.obj.handlers->clone_obj, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->clone_obj)))", "memset((*intern->inner.zobject).value.obj.handlers->compare_objects, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->compare_objects)))", "memset((*intern->inner.zobject).value.obj.handlers->count_elements, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->count_elements)))", "memset((*intern->inner.zobject).value.obj.handlers->del_ref, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->del_ref)))", "memset((*intern->inner.zobject).value.obj.handlers->get, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get)))", "memset((*intern->inner.zobject).value.obj.handlers->get_class_entry, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_class_entry)))", "memset((*intern->inner.zobject).value.obj.handlers->get_class_name, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_class_name)))", "memset((*intern->inner.zobject).value.obj.handlers->get_closure, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_closure)))", "memset((*intern->inner.zobject).value.obj.handlers->get_constructor, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_constructor)))", "memset((*intern->inner.zobject).value.obj.handlers->get_debug_info, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_debug_info)))", "memset((*intern->inner.zobject).value.obj.handlers->get_method, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_method)))", "memset((*intern->inner.zobject).value.obj.handlers->get_properties, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_properties)))", "memset((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr)))", "memset((*intern->inner.zobject).value.obj.handlers->has_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->has_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->has_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->has_property)))", "memset((*intern->inner.zobject).value.obj.handlers->read_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->read_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->read_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->read_property)))", "memset((*intern->inner.zobject).value.obj.handlers->set, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->set)))", "memset((*intern->inner.zobject).value.obj.handlers->unset_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->unset_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->unset_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->unset_property)))", "memset((*intern->inner.zobject).value.obj.handlers->write_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->write_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->write_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->write_property)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->inner.ce, 0, sizeof (*(intern->inner.ce)))", "memset(intern->inner.ce->__call, 0, sizeof (*(intern->inner.ce->__call)))", "memset(intern->inner.ce->__callstatic, 0, sizeof (*(intern->inner.ce->__callstatic)))", "memset(intern->inner.ce->__get, 0, sizeof (*(intern->inner.ce->__get)))", "memset(intern->inner.ce->__isset, 0, sizeof (*(intern->inner.ce->__isset)))", "memset(intern->inner.ce->__set, 0, sizeof (*(intern->inner.ce->__set)))", "memset(intern->inner.ce->__tostring, 0, sizeof (*(intern->inner.ce->__tostring)))", "memset(intern->inner.ce->__unset, 0, sizeof (*(intern->inner.ce->__unset)))", "memset(intern->inner.ce->clone, 0, sizeof (*(intern->inner.ce->clone)))", "memset(intern->inner.ce->constructor, 0, sizeof (*(intern->inner.ce->constructor)))", "memset(intern->inner.ce->create_object, 0, sizeof (*(intern->inner.ce->create_object)))", "memset(intern->inner.ce->default_properties_table, 0, sizeof (*(intern->inner.ce->default_properties_table)))", "memset(intern->inner.ce->default_static_members_table, 0, sizeof (*(intern->inner.ce->default_static_members_table)))", "memset(intern->inner.ce->destructor, 0, sizeof (*(intern->inner.ce->destructor)))", "memset(intern->inner.ce->get_iterator, 0, sizeof (*(intern->inner.ce->get_iterator)))", "memset(intern->inner.ce->get_static_method, 0, sizeof (*(intern->inner.ce->get_static_method)))", "memset(intern->inner.ce->interface_gets_implemented, 0, sizeof (*(intern->inner.ce->interface_gets_implemented)))", "memset(intern->inner.ce->interfaces, 0, sizeof (*(intern->inner.ce->interfaces)))", "memset(intern->inner.ce->name, 0, sizeof (*(intern->inner.ce->name)))", "memset(intern->inner.ce->parent, 0, sizeof (*(intern->inner.ce->parent)))", "memset(intern->inner.ce->serialize, 0, sizeof (*(intern->inner.ce->serialize)))", "memset(intern->inner.ce->serialize_func, 0, sizeof (*(intern->inner.ce->serialize_func)))", "memset(intern->inner.ce->static_members_table, 0, sizeof (*(intern->inner.ce->static_members_table)))", "memset(intern->inner.ce->trait_aliases, 0, sizeof (*(intern->inner.ce->trait_aliases)))", "memset(intern->inner.ce->trait_precedences, 0, sizeof (*(intern->inner.ce->trait_precedences)))", "memset(intern->inner.ce->traits, 0, sizeof (*(intern->inner.ce->traits)))", "memset(intern->inner.ce->unserialize, 0, sizeof (*(intern->inner.ce->unserialize)))", "memset(intern->inner.ce->unserialize_func, 0, sizeof (*(intern->inner.ce->unserialize_func)))", "memset(intern->inner.iterator, 0, sizeof (*(intern->inner.iterator)))", "memset(intern->inner.object, 0, sizeof (*(intern->inner.object)))", "memset(intern->inner.zobject, 0, sizeof (*(intern->inner.zobject)))", "memset(std_object_handlers.add_ref, 0, sizeof (*(std_object_handlers.add_ref)))", "memset(std_object_handlers.call_method, 0, sizeof (*(std_object_handlers.call_method)))", "memset(std_object_handlers.cast_object, 0, sizeof (*(std_object_handlers.cast_object)))", "memset(std_object_handlers.clone_obj, 0, sizeof (*(std_object_handlers.clone_obj)))", "memset(std_object_handlers.compare_objects, 0, sizeof (*(std_object_handlers.compare_objects)))", "memset(std_object_handlers.count_elements, 0, sizeof (*(std_object_handlers.count_elements)))", "memset(std_object_handlers.del_ref, 0, sizeof (*(std_object_handlers.del_ref)))", "memset(std_object_handlers.get, 0, sizeof (*(std_object_handlers.get)))", "memset(std_object_handlers.get_class_entry, 0, sizeof (*(std_object_handlers.get_class_entry)))", "memset(std_object_handlers.get_class_name, 0, sizeof (*(std_object_handlers.get_class_name)))", "memset(std_object_handlers.get_closure, 0, sizeof (*(std_object_handlers.get_closure)))", "memset(std_object_handlers.get_constructor, 0, sizeof (*(std_object_handlers.get_constructor)))", "memset(std_object_handlers.get_debug_info, 0, sizeof (*(std_object_handlers.get_debug_info)))", "memset(std_object_handlers.get_method, 0, sizeof (*(std_object_handlers.get_method)))", "memset(std_object_handlers.get_properties, 0, sizeof (*(std_object_handlers.get_properties)))", "memset(std_object_handlers.get_property_ptr_ptr, 0, sizeof (*(std_object_handlers.get_property_ptr_ptr)))", "memset(std_object_handlers.has_dimension, 0, sizeof (*(std_object_handlers.has_dimension)))", "memset(std_object_handlers.has_property, 0, sizeof (*(std_object_handlers.has_property)))", "memset(std_object_handlers.read_dimension, 0, sizeof (*(std_object_handlers.read_dimension)))", "memset(std_object_handlers.read_property, 0, sizeof (*(std_object_handlers.read_property)))", "memset(std_object_handlers.set, 0, sizeof (*(std_object_handlers.set)))", "memset(std_object_handlers.unset_dimension, 0, sizeof (*(std_object_handlers.unset_dimension)))", "memset(std_object_handlers.unset_property, 0, sizeof (*(std_object_handlers.unset_property)))", "memset(std_object_handlers.write_dimension, 0, sizeof (*(std_object_handlers.write_dimension)))", "memset(std_object_handlers.write_property, 0, sizeof (*(std_object_handlers.write_property)))", "(intern)->current.pos++", "(intern)->u.regex.pce->refcount++", "(intern)->u.regex.pce->refcount--", "(method)++", "_array_init(((intern)->u.caching.zcache), 0)", "_efree(((intern)))", "_efree(((intern)->current.str_key))", "_efree(((intern)->u.regex.regex))", "_efree(((method)))", "_zval_copy_ctor(((intern)->u.caching.zstr))", "_zval_ptr_dtor((&(intern)->current.data))", "_zval_ptr_dtor((&(intern)->inner.zobject))", "_zval_ptr_dtor((&(intern)->u.append.zarrayit))", "_zval_ptr_dtor((&(intern)->u.caching.zcache))", "_zval_ptr_dtor((&(intern)->u.caching.zchildren))", "_zval_ptr_dtor((&(intern)->u.caching.zstr))", "_zval_ptr_dtor((&*(object_ptr)))", "function_handler = (**(object_ptr)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((object_ptr), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (method), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (key))", "function_handler = (function_handler)", "function_handler = std_object_handlers.get_method((object_ptr), method, method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, (method), method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, method, method_len, (key))", "intern = (intern)", "memset((intern), 0, sizeof(spl_dual_it_object))", "php_error_docref0(((void *)0), (1 << 0L), \"The %s instance wasn't initialized properly\", zend_get_class_entry(&(**(object_ptr)))->name)", "spl_append_it_fetch((intern))", "spl_append_it_next((intern))", "spl_append_it_next_iterator((intern))", "spl_caching_it_next((intern))", "spl_caching_it_rewind((intern))", "spl_dual_it_fetch((intern), 0)", "spl_dual_it_fetch((intern), 1)", "spl_dual_it_free((intern))", "spl_dual_it_next((intern), 0)", "spl_dual_it_next((intern), 1)", "spl_dual_it_require((intern))", "spl_dual_it_rewind((intern))", "zend_call_method(&(intern)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (method))", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->current.data)", "zval_addref_p(*((object_ptr)))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, method, method_len, key)", "intern = (spl_dual_it_object *)zend_object_store_get_object(*object_ptr)", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "if (__is_neg(\"\", \"L1268\", 71, &(object_ptr), sizeof (object_ptr), &(intern), sizeof (intern), &(intern->inner.zobject), sizeof (intern->inner.zobject), &(method), sizeof (method), &(method_len), sizeof (method_len), &(key), sizeof (key), &(function_handler), sizeof (function_handler), &((*intern->inner.zobject).value.obj.handlers), sizeof ((*intern->inner.zobject).value.obj.handlers), &((*intern->inner.zobject).value.obj.handlers->get_method), sizeof ((*intern->inner.zobject).value.obj.handlers->get_method), &((**object_ptr).value.obj.handlers), sizeof ((**object_ptr).value.obj.handlers), &((**object_ptr).value.obj.handlers->get_method), sizeof ((**object_ptr).value.obj.handlers->get_method), &(intern->inner.ce), sizeof (intern->inner.ce), &((*intern->inner.zobject).refcount__gc), sizeof ((*intern->inner.zobject).refcount__gc), &((*intern->inner.zobject).type), sizeof ((*intern->inner.zobject).type), &((*intern->inner.zobject).is_ref__gc), sizeof ((*intern->inner.zobject).is_ref__gc), &((*intern->inner.zobject).value.obj.handle), sizeof ((*intern->inner.zobject).value.obj.handle), &((*intern->inner.zobject).value.obj.handlers->add_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->add_ref), &((*intern->inner.zobject).value.obj.handlers->del_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->del_ref), &((*intern->inner.zobject).value.obj.handlers->clone_obj), sizeof ((*intern->inner.zobject).value.obj.handlers->clone_obj), &((*intern->inner.zobject).value.obj.handlers->read_property), sizeof ((*intern->inner.zobject).value.obj.handlers->read_property), &((*intern->inner.zobject).value.obj.handlers->write_property), sizeof ((*intern->inner.zobject).value.obj.handlers->write_property), &((*intern->inner.zobject).value.obj.handlers->read_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->read_dimension), &((*intern->inner.zobject).value.obj.handlers->write_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->write_dimension), &((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), sizeof ((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), &((*intern->inner.zobject).value.obj.handlers->get), sizeof ((*intern->inner.zobject).value.obj.handlers->get), &((*intern->inner.zobject).value.obj.handlers->set), sizeof ((*intern->inner.zobject).value.obj.handlers->set), &((*intern->inner.zobject).value.obj.handlers->has_property), sizeof ((*intern->inner.zobject).value.obj.handlers->has_property), &((*intern->inner.zobject).value.obj.handlers->unset_property), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_property), &((*intern->inner.zobject).value.obj.handlers->has_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->has_dimension), &((*intern->inner.zobject).value.obj.handlers->unset_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_dimension), &((*intern->inner.zobject).value.obj.handlers->get_properties), sizeof ((*intern->inner.zobject).value.obj.handlers->get_properties), &((*intern->inner.zobject).value.obj.handlers->call_method), sizeof ((*intern->inner.zobject).value.obj.handlers->call_method), &((*intern->inner.zobject).value.obj.handlers->get_constructor), sizeof ((*intern->inner.zobject).value.obj.handlers->get_constructor), &((*intern->inner.zobject).value.obj.handlers->get_class_entry), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_entry), &((*intern->inner.zobject).value.obj.handlers->get_class_name), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_name), &((*intern->inner.zobject).value.obj.handlers->compare_objects), sizeof ((*intern->inner.zobject).value.obj.handlers->compare_objects), &((*intern->inner.zobject).value.obj.handlers->cast_object), sizeof ((*intern->inner.zobject).value.obj.handlers->cast_object), &((*intern->inner.zobject).value.obj.handlers->count_elements), sizeof ((*intern->inner.zobject).value.obj.handlers->count_elements), &((*intern->inner.zobject).value.obj.handlers->get_debug_info), sizeof ((*intern->inner.zobject).value.obj.handlers->get_debug_info), &((*intern->inner.zobject).value.obj.handlers->get_closure), sizeof ((*intern->inner.zobject).value.obj.handlers->get_closure), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &((**object_ptr).refcount__gc), sizeof ((**object_ptr).refcount__gc), &((**object_ptr).type), sizeof ((**object_ptr).type), &((**object_ptr).is_ref__gc), sizeof ((**object_ptr).is_ref__gc), &((**object_ptr).value.obj.handle), sizeof ((**object_ptr).value.obj.handle), &((**object_ptr).value.obj.handlers->add_ref), sizeof ((**object_ptr).value.obj.handlers->add_ref), &((**object_ptr).value.obj.handlers->del_ref), sizeof ((**object_ptr).value.obj.handlers->del_ref), &((**object_ptr).value.obj.handlers->clone_obj), sizeof ((**object_ptr).value.obj.handlers->clone_obj), &((**object_ptr).value.obj.handlers->read_property), sizeof ((**object_ptr).value.obj.handlers->read_property), &((**object_ptr).value.obj.handlers->write_property), sizeof ((**object_ptr).value.obj.handlers->write_property), &((**object_ptr).value.obj.handlers->read_dimension), sizeof ((**object_ptr).value.obj.handlers->read_dimension), &((**object_ptr).value.obj.handlers->write_dimension), sizeof ((**object_ptr).value.obj.handlers->write_dimension), &((**object_ptr).value.obj.handlers->get_property_ptr_ptr), sizeof ((**object_ptr).value.obj.handlers->get_property_ptr_ptr), &((**object_ptr).value.obj.handlers->get), sizeof ((**object_ptr).value.obj.handlers->get), &((**object_ptr).value.obj.handlers->set), sizeof ((**object_ptr).value.obj.handlers->set), &((**object_ptr).value.obj.handlers->has_property), sizeof ((**object_ptr).value.obj.handlers->has_property), &((**object_ptr).value.obj.handlers->unset_property), sizeof ((**object_ptr).value.obj.handlers->unset_property), &((**object_ptr).value.obj.handlers->has_dimension), sizeof ((**object_ptr).value.obj.handlers->has_dimension), &((**object_ptr).value.obj.handlers->unset_dimension), sizeof ((**object_ptr).value.obj.handlers->unset_dimension), &((**object_ptr).value.obj.handlers->get_properties), sizeof ((**object_ptr).value.obj.handlers->get_properties), &((**object_ptr).value.obj.handlers->call_method), sizeof ((**object_ptr).value.obj.handlers->call_method), &((**object_ptr).value.obj.handlers->get_constructor), sizeof ((**object_ptr).value.obj.handlers->get_constructor), &((**object_ptr).value.obj.handlers->get_class_entry), sizeof ((**object_ptr).value.obj.handlers->get_class_entry), &((**object_ptr).value.obj.handlers->get_class_name), sizeof ((**object_ptr).value.obj.handlers->get_class_name), &((**object_ptr).value.obj.handlers->compare_objects), sizeof ((**object_ptr).value.obj.handlers->compare_objects), &((**object_ptr).value.obj.handlers->cast_object), sizeof ((**object_ptr).value.obj.handlers->cast_object), &((**object_ptr).value.obj.handlers->count_elements), sizeof ((**object_ptr).value.obj.handlers->count_elements), &((**object_ptr).value.obj.handlers->get_debug_info), sizeof ((**object_ptr).value.obj.handlers->get_debug_info), &((**object_ptr).value.obj.handlers->get_closure), sizeof ((**object_ptr).value.obj.handlers->get_closure)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.952428420063185]
								}, {
									"case":	2,
									"scores":	[-3.952428420063185]
								}, {
									"case":	3,
									"scores":	[-3.952428420063185]
								}, {
									"case":	4,
									"scores":	[-3.952428420063185]
								}, {
									"case":	5,
									"scores":	[-3.952428420063185]
								}, {
									"case":	6,
									"scores":	[-3.952428420063185]
								}, {
									"case":	7,
									"scores":	[-3.952428420063185]
								}, {
									"case":	8,
									"scores":	[-3.952428420063185]
								}, {
									"case":	9,
									"scores":	[-3.952428420063185]
								}, {
									"case":	10,
									"scores":	[-3.952428420063185]
								}, {
									"case":	11,
									"scores":	[-3.952428420063185]
								}, {
									"case":	12,
									"scores":	[-3.952428420063185]
								}, {
									"case":	13,
									"scores":	[-3.952428420063185]
								}, {
									"case":	14,
									"scores":	[-3.952428420063185]
								}, {
									"case":	15,
									"scores":	[-3.952428420063185]
								}, {
									"case":	16,
									"scores":	[-3.952428420063185]
								}, {
									"case":	17,
									"scores":	[-3.952428420063185]
								}, {
									"case":	18,
									"scores":	[-3.952428420063185]
								}, {
									"case":	19,
									"scores":	[-3.952428420063185]
								}, {
									"case":	20,
									"scores":	[-3.952428420063185]
								}, {
									"case":	21,
									"scores":	[-3.952428420063185]
								}, {
									"case":	22,
									"scores":	[-3.952428420063185]
								}, {
									"case":	23,
									"scores":	[-3.952428420063185]
								}, {
									"case":	24,
									"scores":	[-3.952428420063185]
								}, {
									"case":	25,
									"scores":	[-3.952428420063185]
								}, {
									"case":	26,
									"scores":	[-3.952428420063185]
								}, {
									"case":	27,
									"scores":	[-3.952428420063185]
								}, {
									"case":	28,
									"scores":	[-3.952428420063185]
								}, {
									"case":	29,
									"scores":	[-3.952428420063185]
								}, {
									"case":	30,
									"scores":	[-3.952428420063185]
								}, {
									"case":	31,
									"scores":	[-3.952428420063185]
								}, {
									"case":	32,
									"scores":	[-3.952428420063185]
								}, {
									"case":	33,
									"scores":	[-3.952428420063185]
								}, {
									"case":	34,
									"scores":	[-3.952428420063185]
								}, {
									"case":	35,
									"scores":	[-3.952428420063185]
								}, {
									"case":	36,
									"scores":	[-3.952428420063185]
								}, {
									"case":	37,
									"scores":	[-3.952428420063185]
								}, {
									"case":	38,
									"scores":	[-3.952428420063185]
								}, {
									"case":	39,
									"scores":	[-3.952428420063185]
								}, {
									"case":	40,
									"scores":	[-3.952428420063185]
								}, {
									"case":	41,
									"scores":	[-3.952428420063185]
								}, {
									"case":	42,
									"scores":	[-3.952428420063185]
								}, {
									"case":	43,
									"scores":	[-3.952428420063185]
								}, {
									"case":	44,
									"scores":	[-3.952428420063185]
								}, {
									"case":	45,
									"scores":	[-3.952428420063185]
								}, {
									"case":	46,
									"scores":	[-3.952428420063185]
								}, {
									"case":	47,
									"scores":	[-3.952428420063185]
								}, {
									"case":	48,
									"scores":	[-3.952428420063185]
								}, {
									"case":	49,
									"scores":	[-3.952428420063185]
								}, {
									"case":	50,
									"scores":	[-3.952428420063185]
								}, {
									"case":	51,
									"scores":	[-3.952428420063185]
								}, {
									"case":	52,
									"scores":	[-3.952428420063185]
								}, {
									"case":	53,
									"scores":	[-3.952428420063185]
								}, {
									"case":	54,
									"scores":	[-3.952428420063185]
								}, {
									"case":	55,
									"scores":	[-3.952428420063185]
								}, {
									"case":	56,
									"scores":	[-3.952428420063185]
								}, {
									"case":	57,
									"scores":	[-3.952428420063185]
								}, {
									"case":	58,
									"scores":	[-3.952428420063185]
								}, {
									"case":	59,
									"scores":	[-3.952428420063185]
								}, {
									"case":	60,
									"scores":	[-3.952428420063185]
								}, {
									"case":	61,
									"scores":	[-3.952428420063185]
								}, {
									"case":	62,
									"scores":	[-3.952428420063185]
								}, {
									"case":	63,
									"scores":	[-3.952428420063185]
								}, {
									"case":	64,
									"scores":	[-3.952428420063185]
								}, {
									"case":	65,
									"scores":	[-3.952428420063185]
								}, {
									"case":	66,
									"scores":	[-3.952428420063185]
								}, {
									"case":	67,
									"scores":	[-3.952428420063185]
								}, {
									"case":	68,
									"scores":	[-3.952428420063185]
								}, {
									"case":	69,
									"scores":	[-3.952428420063185]
								}, {
									"case":	70,
									"scores":	[-3.952428420063185]
								}, {
									"case":	71,
									"scores":	[-3.952428420063185]
								}, {
									"case":	72,
									"scores":	[-3.952428420063185]
								}, {
									"case":	73,
									"scores":	[-3.952428420063185]
								}, {
									"case":	74,
									"scores":	[-3.952428420063185]
								}, {
									"case":	75,
									"scores":	[-3.952428420063185]
								}, {
									"case":	76,
									"scores":	[-3.952428420063185]
								}, {
									"case":	77,
									"scores":	[-3.952428420063185]
								}, {
									"case":	78,
									"scores":	[-3.952428420063185]
								}, {
									"case":	79,
									"scores":	[-3.952428420063185]
								}, {
									"case":	80,
									"scores":	[-3.952428420063185]
								}, {
									"case":	81,
									"scores":	[-3.952428420063185]
								}, {
									"case":	82,
									"scores":	[-3.952428420063185]
								}, {
									"case":	83,
									"scores":	[-3.952428420063185]
								}, {
									"case":	84,
									"scores":	[-3.952428420063185]
								}, {
									"case":	85,
									"scores":	[-3.952428420063185]
								}, {
									"case":	86,
									"scores":	[-3.952428420063185]
								}, {
									"case":	87,
									"scores":	[-3.952428420063185]
								}, {
									"case":	88,
									"scores":	[-3.952428420063185]
								}, {
									"case":	89,
									"scores":	[-3.952428420063185]
								}, {
									"case":	90,
									"scores":	[-3.952428420063185]
								}, {
									"case":	91,
									"scores":	[-3.952428420063185]
								}, {
									"case":	92,
									"scores":	[-3.952428420063185]
								}, {
									"case":	93,
									"scores":	[-3.952428420063185]
								}, {
									"case":	94,
									"scores":	[-3.952428420063185]
								}, {
									"case":	95,
									"scores":	[-3.952428420063185]
								}, {
									"case":	96,
									"scores":	[-3.952428420063185]
								}, {
									"case":	97,
									"scores":	[-3.952428420063185]
								}, {
									"case":	98,
									"scores":	[-3.952428420063185]
								}, {
									"case":	99,
									"scores":	[-3.952428420063185]
								}, {
									"case":	100,
									"scores":	[-3.952428420063185]
								}, {
									"case":	101,
									"scores":	[-3.952428420063185]
								}, {
									"case":	102,
									"scores":	[-3.952428420063185]
								}, {
									"case":	103,
									"scores":	[-3.952428420063185]
								}, {
									"case":	104,
									"scores":	[-3.952428420063185]
								}, {
									"case":	105,
									"scores":	[-3.952428420063185]
								}, {
									"case":	106,
									"scores":	[-3.952428420063185]
								}, {
									"case":	107,
									"scores":	[-3.952428420063185]
								}, {
									"case":	108,
									"scores":	[-3.952428420063185]
								}, {
									"case":	109,
									"scores":	[-3.952428420063185]
								}, {
									"case":	110,
									"scores":	[-3.952428420063185]
								}, {
									"case":	111,
									"scores":	[-3.952428420063185]
								}, {
									"case":	112,
									"scores":	[-3.952428420063185]
								}, {
									"case":	113,
									"scores":	[-3.952428420063185]
								}, {
									"case":	114,
									"scores":	[-3.952428420063185]
								}, {
									"case":	115,
									"scores":	[-3.952428420063185]
								}, {
									"case":	116,
									"scores":	[-3.952428420063185]
								}, {
									"case":	117,
									"scores":	[-3.952428420063185]
								}, {
									"case":	118,
									"scores":	[-3.952428420063185]
								}, {
									"case":	119,
									"scores":	[-3.952428420063185]
								}, {
									"case":	120,
									"scores":	[-3.952428420063185]
								}, {
									"case":	121,
									"scores":	[-3.952428420063185]
								}, {
									"case":	122,
									"scores":	[-3.952428420063185]
								}, {
									"case":	123,
									"scores":	[-3.952428420063185]
								}, {
									"case":	124,
									"scores":	[-3.952428420063185]
								}, {
									"case":	125,
									"scores":	[-3.952428420063185]
								}, {
									"case":	126,
									"scores":	[-3.952428420063185]
								}, {
									"case":	127,
									"scores":	[-3.952428420063185]
								}, {
									"case":	128,
									"scores":	[-3.952428420063185]
								}, {
									"case":	129,
									"scores":	[-3.952428420063185]
								}, {
									"case":	130,
									"scores":	[-3.952428420063185]
								}, {
									"case":	131,
									"scores":	[-3.952428420063185]
								}, {
									"case":	132,
									"scores":	[-3.952428420063185]
								}, {
									"case":	133,
									"scores":	[-3.952428420063185]
								}, {
									"case":	134,
									"scores":	[-3.952428420063185]
								}, {
									"case":	135,
									"scores":	[-3.952428420063185]
								}, {
									"case":	136,
									"scores":	[-3.952428420063185]
								}, {
									"case":	137,
									"scores":	[-3.952428420063185]
								}, {
									"case":	138,
									"scores":	[-3.952428420063185]
								}, {
									"case":	139,
									"scores":	[-3.952428420063185]
								}, {
									"case":	140,
									"scores":	[-3.952428420063185]
								}, {
									"case":	141,
									"scores":	[-3.952428420063185]
								}, {
									"case":	142,
									"scores":	[-3.952428420063185]
								}, {
									"case":	143,
									"scores":	[-3.952428420063185]
								}, {
									"case":	144,
									"scores":	[-3.952428420063185]
								}, {
									"case":	145,
									"scores":	[-3.952428420063185]
								}, {
									"case":	146,
									"scores":	[-3.952428420063185]
								}, {
									"case":	147,
									"scores":	[-3.952428420063185]
								}, {
									"case":	148,
									"scores":	[-3.952428420063185]
								}, {
									"case":	149,
									"scores":	[-3.952428420063185]
								}, {
									"case":	150,
									"scores":	[-3.952428420063185]
								}, {
									"case":	151,
									"scores":	[-3.952428420063185]
								}, {
									"case":	152,
									"scores":	[-3.952428420063185]
								}, {
									"case":	153,
									"scores":	[-3.952428420063185]
								}, {
									"case":	154,
									"scores":	[-3.952428420063185]
								}, {
									"case":	155,
									"scores":	[-3.952428420063185]
								}, {
									"case":	156,
									"scores":	[-3.952428420063185]
								}, {
									"case":	157,
									"scores":	[-3.952428420063185]
								}, {
									"case":	158,
									"scores":	[-3.952428420063185]
								}, {
									"case":	159,
									"scores":	[-3.952428420063185]
								}, {
									"case":	160,
									"scores":	[-3.952428420063185]
								}, {
									"case":	161,
									"scores":	[-3.952428420063185]
								}, {
									"case":	162,
									"scores":	[-3.952428420063185]
								}, {
									"case":	163,
									"scores":	[-3.952428420063185]
								}, {
									"case":	164,
									"scores":	[-3.952428420063185]
								}, {
									"case":	165,
									"scores":	[-3.952428420063185]
								}, {
									"case":	166,
									"scores":	[-3.952428420063185]
								}, {
									"case":	167,
									"scores":	[-3.952428420063185]
								}, {
									"case":	168,
									"scores":	[-3.952428420063185]
								}, {
									"case":	169,
									"scores":	[-3.952428420063185]
								}, {
									"case":	170,
									"scores":	[-3.952428420063185]
								}, {
									"case":	171,
									"scores":	[-3.952428420063185]
								}, {
									"case":	172,
									"scores":	[-3.952428420063185]
								}, {
									"case":	173,
									"scores":	[-3.952428420063185]
								}, {
									"case":	174,
									"scores":	[-3.952428420063185]
								}, {
									"case":	175,
									"scores":	[-3.952428420063185]
								}, {
									"case":	176,
									"scores":	[-3.952428420063185]
								}, {
									"case":	177,
									"scores":	[-3.952428420063185]
								}, {
									"case":	178,
									"scores":	[-3.952428420063185]
								}, {
									"case":	179,
									"scores":	[-3.952428420063185]
								}, {
									"case":	180,
									"scores":	[-3.952428420063185]
								}, {
									"case":	181,
									"scores":	[-3.952428420063185]
								}, {
									"case":	182,
									"scores":	[-3.952428420063185]
								}, {
									"case":	183,
									"scores":	[-3.952428420063185]
								}, {
									"case":	184,
									"scores":	[-3.952428420063185]
								}, {
									"case":	185,
									"scores":	[-3.952428420063185]
								}, {
									"case":	186,
									"scores":	[-3.952428420063185]
								}, {
									"case":	187,
									"scores":	[-3.952428420063185]
								}, {
									"case":	188,
									"scores":	[-3.952428420063185]
								}, {
									"case":	189,
									"scores":	[-3.952428420063185]
								}, {
									"case":	190,
									"scores":	[-3.952428420063185]
								}, {
									"case":	191,
									"scores":	[-3.952428420063185]
								}, {
									"case":	192,
									"scores":	[-3.952428420063185]
								}, {
									"case":	193,
									"scores":	[-3.952428420063185]
								}, {
									"case":	194,
									"scores":	[-3.952428420063185]
								}, {
									"case":	195,
									"scores":	[-3.952428420063185]
								}, {
									"case":	196,
									"scores":	[-3.952428420063185]
								}, {
									"case":	197,
									"scores":	[-3.952428420063185]
								}, {
									"case":	198,
									"scores":	[-3.952428420063185]
								}, {
									"case":	199,
									"scores":	[-3.952428420063185]
								}, {
									"case":	200,
									"scores":	[-3.952428420063185]
								}, {
									"case":	201,
									"scores":	[-3.952428420063185]
								}, {
									"case":	202,
									"scores":	[-3.952428420063185]
								}, {
									"case":	203,
									"scores":	[-3.952428420063185]
								}, {
									"case":	204,
									"scores":	[-3.952428420063185]
								}, {
									"case":	205,
									"scores":	[-3.952428420063185]
								}, {
									"case":	206,
									"scores":	[-3.952428420063185]
								}, {
									"case":	207,
									"scores":	[-3.952428420063185]
								}, {
									"case":	208,
									"scores":	[-3.952428420063185]
								}, {
									"case":	209,
									"scores":	[-3.952428420063185]
								}, {
									"case":	210,
									"scores":	[-3.952428420063185]
								}, {
									"case":	211,
									"scores":	[-3.952428420063185]
								}, {
									"case":	212,
									"scores":	[-3.952428420063185]
								}, {
									"case":	213,
									"scores":	[-3.952428420063185]
								}, {
									"case":	214,
									"scores":	[-3.952428420063185]
								}, {
									"case":	215,
									"scores":	[-3.952428420063185]
								}, {
									"case":	216,
									"scores":	[-3.952428420063185]
								}, {
									"case":	217,
									"scores":	[-3.952428420063185]
								}, {
									"case":	218,
									"scores":	[-3.952428420063185]
								}, {
									"case":	219,
									"scores":	[-3.952428420063185]
								}, {
									"case":	220,
									"scores":	[-3.952428420063185]
								}, {
									"case":	221,
									"scores":	[-3.952428420063185]
								}, {
									"case":	222,
									"scores":	[-3.952428420063185]
								}, {
									"case":	223,
									"scores":	[-3.952428420063185]
								}, {
									"case":	224,
									"scores":	[-3.952428420063185]
								}, {
									"case":	225,
									"scores":	[-3.952428420063185]
								}, {
									"case":	226,
									"scores":	[-3.952428420063185]
								}, {
									"case":	227,
									"scores":	[-3.952428420063185]
								}, {
									"case":	228,
									"scores":	[-3.952428420063185]
								}, {
									"case":	229,
									"scores":	[-3.952428420063185]
								}, {
									"case":	230,
									"scores":	[-3.952428420063185]
								}, {
									"case":	231,
									"scores":	[-3.952428420063185]
								}, {
									"case":	232,
									"scores":	[-3.952428420063185]
								}, {
									"case":	233,
									"scores":	[-3.952428420063185]
								}, {
									"case":	234,
									"scores":	[-3.952428420063185]
								}, {
									"case":	235,
									"scores":	[-3.952428420063185]
								}, {
									"case":	236,
									"scores":	[-3.952428420063185]
								}, {
									"case":	237,
									"scores":	[-3.952428420063185]
								}, {
									"case":	238,
									"scores":	[-3.952428420063185]
								}, {
									"case":	239,
									"scores":	[-3.952428420063185]
								}, {
									"case":	240,
									"scores":	[-3.952428420063185]
								}, {
									"case":	241,
									"scores":	[-3.952428420063185]
								}, {
									"case":	242,
									"scores":	[-3.952428420063185]
								}, {
									"case":	243,
									"scores":	[-3.952428420063185]
								}, {
									"case":	244,
									"scores":	[-3.952428420063185]
								}, {
									"case":	245,
									"scores":	[-3.952428420063185]
								}, {
									"case":	246,
									"scores":	[-3.952428420063185]
								}, {
									"case":	247,
									"scores":	[-3.952428420063185]
								}, {
									"case":	248,
									"scores":	[-3.952428420063185]
								}, {
									"case":	249,
									"scores":	[-3.952428420063185]
								}, {
									"case":	250,
									"scores":	[-3.952428420063185]
								}, {
									"case":	251,
									"scores":	[-3.952428420063185]
								}, {
									"case":	252,
									"scores":	[-3.952428420063185]
								}, {
									"case":	253,
									"scores":	[-3.952428420063185]
								}, {
									"case":	254,
									"scores":	[-3.952428420063185]
								}, {
									"case":	255,
									"scores":	[-3.952428420063185]
								}, {
									"case":	256,
									"scores":	[-3.952428420063185]
								}, {
									"case":	257,
									"scores":	[-3.952428420063185]
								}, {
									"case":	258,
									"scores":	[-3.952428420063185]
								}, {
									"case":	259,
									"scores":	[-3.952428420063185]
								}, {
									"case":	260,
									"scores":	[-3.952428420063185]
								}, {
									"case":	261,
									"scores":	[-3.952428420063185]
								}, {
									"case":	262,
									"scores":	[-3.952428420063185]
								}, {
									"case":	263,
									"scores":	[-3.952428420063185]
								}, {
									"case":	264,
									"scores":	[-3.952428420063185]
								}, {
									"case":	265,
									"scores":	[-3.952428420063185]
								}, {
									"case":	266,
									"scores":	[-3.952428420063185]
								}, {
									"case":	267,
									"scores":	[-3.952428420063185]
								}, {
									"case":	268,
									"scores":	[-3.952428420063185]
								}, {
									"case":	269,
									"scores":	[-3.952428420063185]
								}, {
									"case":	270,
									"scores":	[-3.952428420063185]
								}, {
									"case":	271,
									"scores":	[-3.952428420063185]
								}, {
									"case":	272,
									"scores":	[-3.952428420063185]
								}, {
									"case":	273,
									"scores":	[-3.952428420063185]
								}, {
									"case":	274,
									"scores":	[-3.952428420063185]
								}, {
									"case":	275,
									"scores":	[-3.952428420063185]
								}, {
									"case":	276,
									"scores":	[-3.952428420063185]
								}, {
									"case":	277,
									"scores":	[-3.952428420063185]
								}, {
									"case":	278,
									"scores":	[-3.952428420063185]
								}, {
									"case":	279,
									"scores":	[-3.952428420063185]
								}, {
									"case":	280,
									"scores":	[-3.952428420063185]
								}, {
									"case":	281,
									"scores":	[-3.952428420063185]
								}, {
									"case":	282,
									"scores":	[-3.952428420063185]
								}, {
									"case":	283,
									"scores":	[-3.952428420063185]
								}, {
									"case":	284,
									"scores":	[-3.952428420063185]
								}, {
									"case":	285,
									"scores":	[-3.952428420063185]
								}, {
									"case":	286,
									"scores":	[-3.952428420063185]
								}, {
									"case":	287,
									"scores":	[-3.952428420063185]
								}, {
									"case":	288,
									"scores":	[-3.952428420063185]
								}, {
									"case":	289,
									"scores":	[-3.952428420063185]
								}, {
									"case":	290,
									"scores":	[-3.952428420063185]
								}, {
									"case":	291,
									"scores":	[-3.952428420063185]
								}, {
									"case":	292,
									"scores":	[-3.952428420063185]
								}, {
									"case":	293,
									"scores":	[-3.952428420063185]
								}, {
									"case":	294,
									"scores":	[-3.952428420063185]
								}, {
									"case":	295,
									"scores":	[-3.952428420063185]
								}, {
									"case":	296,
									"scores":	[-3.952428420063185]
								}, {
									"case":	297,
									"scores":	[-3.952428420063185]
								}, {
									"case":	298,
									"scores":	[-3.952428420063185]
								}, {
									"case":	299,
									"scores":	[-3.952428420063185]
								}, {
									"case":	300,
									"scores":	[-3.952428420063185]
								}, {
									"case":	301,
									"scores":	[-3.952428420063185]
								}, {
									"case":	302,
									"scores":	[-3.952428420063185]
								}, {
									"case":	303,
									"scores":	[-3.952428420063185]
								}, {
									"case":	304,
									"scores":	[-3.952428420063185]
								}, {
									"case":	305,
									"scores":	[-3.952428420063185]
								}, {
									"case":	306,
									"scores":	[-3.952428420063185]
								}, {
									"case":	307,
									"scores":	[-3.952428420063185]
								}, {
									"case":	308,
									"scores":	[-3.952428420063185]
								}, {
									"case":	309,
									"scores":	[-3.952428420063185]
								}, {
									"case":	310,
									"scores":	[-3.952428420063185]
								}, {
									"case":	311,
									"scores":	[-3.952428420063185]
								}, {
									"case":	312,
									"scores":	[-3.952428420063185]
								}, {
									"case":	313,
									"scores":	[-3.952428420063185]
								}, {
									"case":	314,
									"scores":	[-3.952428420063185]
								}, {
									"case":	315,
									"scores":	[-3.952428420063185]
								}, {
									"case":	316,
									"scores":	[-3.952428420063185]
								}, {
									"case":	317,
									"scores":	[-3.952428420063185]
								}, {
									"case":	318,
									"scores":	[-3.952428420063185]
								}, {
									"case":	319,
									"scores":	[-3.952428420063185]
								}, {
									"case":	320,
									"scores":	[-3.952428420063185]
								}, {
									"case":	321,
									"scores":	[-3.952428420063185]
								}, {
									"case":	322,
									"scores":	[-3.952428420063185]
								}, {
									"case":	323,
									"scores":	[-3.952428420063185]
								}, {
									"case":	324,
									"scores":	[-3.952428420063185]
								}, {
									"case":	325,
									"scores":	[-3.952428420063185]
								}, {
									"case":	326,
									"scores":	[-3.952428420063185]
								}, {
									"case":	327,
									"scores":	[-3.952428420063185]
								}, {
									"case":	328,
									"scores":	[-3.952428420063185]
								}, {
									"case":	329,
									"scores":	[-3.952428420063185]
								}, {
									"case":	330,
									"scores":	[-3.952428420063185]
								}, {
									"case":	331,
									"scores":	[-3.952428420063185]
								}, {
									"case":	332,
									"scores":	[-3.952428420063185]
								}, {
									"case":	333,
									"scores":	[-3.952428420063185]
								}, {
									"case":	334,
									"scores":	[-3.952428420063185]
								}, {
									"case":	335,
									"scores":	[-3.952428420063185]
								}, {
									"case":	336,
									"scores":	[-3.952428420063185]
								}, {
									"case":	337,
									"scores":	[-3.952428420063185]
								}, {
									"case":	338,
									"scores":	[-3.952428420063185]
								}, {
									"case":	339,
									"scores":	[-3.952428420063185]
								}, {
									"case":	340,
									"scores":	[-3.952428420063185]
								}, {
									"case":	341,
									"scores":	[-3.952428420063185]
								}, {
									"case":	342,
									"scores":	[-3.952428420063185]
								}, {
									"case":	343,
									"scores":	[-3.952428420063185]
								}, {
									"case":	344,
									"scores":	[-3.952428420063185]
								}, {
									"case":	345,
									"scores":	[-3.952428420063185]
								}, {
									"case":	346,
									"scores":	[-3.952428420063185]
								}, {
									"case":	347,
									"scores":	[-3.952428420063185]
								}, {
									"case":	348,
									"scores":	[-3.952428420063185]
								}, {
									"case":	349,
									"scores":	[-3.952428420063185]
								}, {
									"case":	350,
									"scores":	[-3.952428420063185]
								}, {
									"case":	351,
									"scores":	[-3.952428420063185]
								}, {
									"case":	352,
									"scores":	[-3.952428420063185]
								}, {
									"case":	353,
									"scores":	[-3.952428420063185]
								}, {
									"case":	354,
									"scores":	[-3.952428420063185]
								}, {
									"case":	355,
									"scores":	[-3.952428420063185]
								}, {
									"case":	356,
									"scores":	[-3.952428420063185]
								}, {
									"case":	357,
									"scores":	[-3.952428420063185]
								}, {
									"case":	358,
									"scores":	[-3.952428420063185]
								}, {
									"case":	359,
									"scores":	[-3.952428420063185]
								}, {
									"case":	360,
									"scores":	[-3.952428420063185]
								}, {
									"case":	361,
									"scores":	[-3.952428420063185]
								}, {
									"case":	362,
									"scores":	[-3.952428420063185]
								}, {
									"case":	363,
									"scores":	[-3.952428420063185]
								}, {
									"case":	364,
									"scores":	[-3.952428420063185]
								}, {
									"case":	365,
									"scores":	[-3.952428420063185]
								}, {
									"case":	366,
									"scores":	[-3.952428420063185]
								}, {
									"case":	367,
									"scores":	[-3.952428420063185]
								}, {
									"case":	368,
									"scores":	[-3.952428420063185]
								}, {
									"case":	369,
									"scores":	[-3.952428420063185]
								}, {
									"case":	370,
									"scores":	[-3.952428420063185]
								}, {
									"case":	371,
									"scores":	[-3.952428420063185]
								}, {
									"case":	372,
									"scores":	[-3.952428420063185]
								}, {
									"case":	373,
									"scores":	[-3.952428420063185]
								}, {
									"case":	374,
									"scores":	[-3.952428420063185]
								}, {
									"case":	375,
									"scores":	[-3.952428420063185]
								}, {
									"case":	376,
									"scores":	[-3.952428420063185]
								}, {
									"case":	377,
									"scores":	[-3.952428420063185]
								}, {
									"case":	378,
									"scores":	[-3.952428420063185]
								}, {
									"case":	379,
									"scores":	[-3.952428420063185]
								}, {
									"case":	380,
									"scores":	[-3.952428420063185]
								}, {
									"case":	381,
									"scores":	[-3.952428420063185]
								}, {
									"case":	382,
									"scores":	[-3.952428420063185]
								}, {
									"case":	383,
									"scores":	[-3.952428420063185]
								}, {
									"case":	384,
									"scores":	[-3.952428420063185]
								}, {
									"case":	385,
									"scores":	[-3.952428420063185]
								}, {
									"case":	386,
									"scores":	[-3.952428420063185]
								}, {
									"case":	387,
									"scores":	[-3.952428420063185]
								}, {
									"case":	388,
									"scores":	[-3.952428420063185]
								}, {
									"case":	389,
									"scores":	[-3.952428420063185]
								}, {
									"case":	390,
									"scores":	[-3.952428420063185]
								}, {
									"case":	391,
									"scores":	[-5.2451993038631848, -5.100890186063185, -5.7022179207631849, -6.9616673038631856, -6.715628390063185, -7.5628655607631856, -6.4502278364731849, -5.7521173860631851, -5.0402932690631843, -5.7872671828631841, -6.0809728530631855, -6.9616673038631856, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.9616673038631856, -6.9616673038631856, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185, -6.715628390063185]
								}]
						}, {
							"switch":	7,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1268,
							"begin_column":	5,
							"end_line":	1268,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L1268\", 71, &(intern->inner.zobject), sizeof (intern->inner.zobject), &(object_ptr), sizeof (object_ptr), &(intern), sizeof (intern), &((*intern->inner.zobject).value.obj.handlers), sizeof ((*intern->inner.zobject).value.obj.handlers), &((*intern->inner.zobject).value.obj.handlers->get_method), sizeof ((*intern->inner.zobject).value.obj.handlers->get_method), &((**object_ptr).value.obj.handlers), sizeof ((**object_ptr).value.obj.handlers), &((**object_ptr).value.obj.handlers->get_method), sizeof ((**object_ptr).value.obj.handlers->get_method), &(method), sizeof (method), &(method_len), sizeof (method_len), &(key), sizeof (key), &(function_handler), sizeof (function_handler), &(intern->inner.ce), sizeof (intern->inner.ce), &((*intern->inner.zobject).refcount__gc), sizeof ((*intern->inner.zobject).refcount__gc), &((*intern->inner.zobject).type), sizeof ((*intern->inner.zobject).type), &((*intern->inner.zobject).is_ref__gc), sizeof ((*intern->inner.zobject).is_ref__gc), &((*intern->inner.zobject).value.obj.handle), sizeof ((*intern->inner.zobject).value.obj.handle), &((*intern->inner.zobject).value.obj.handlers->add_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->add_ref), &((*intern->inner.zobject).value.obj.handlers->del_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->del_ref), &((*intern->inner.zobject).value.obj.handlers->clone_obj), sizeof ((*intern->inner.zobject).value.obj.handlers->clone_obj), &((*intern->inner.zobject).value.obj.handlers->read_property), sizeof ((*intern->inner.zobject).value.obj.handlers->read_property), &((*intern->inner.zobject).value.obj.handlers->write_property), sizeof ((*intern->inner.zobject).value.obj.handlers->write_property), &((*intern->inner.zobject).value.obj.handlers->read_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->read_dimension), &((*intern->inner.zobject).value.obj.handlers->write_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->write_dimension), &((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), sizeof ((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), &((*intern->inner.zobject).value.obj.handlers->get), sizeof ((*intern->inner.zobject).value.obj.handlers->get), &((*intern->inner.zobject).value.obj.handlers->set), sizeof ((*intern->inner.zobject).value.obj.handlers->set), &((*intern->inner.zobject).value.obj.handlers->has_property), sizeof ((*intern->inner.zobject).value.obj.handlers->has_property), &((*intern->inner.zobject).value.obj.handlers->unset_property), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_property), &((*intern->inner.zobject).value.obj.handlers->has_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->has_dimension), &((*intern->inner.zobject).value.obj.handlers->unset_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_dimension), &((*intern->inner.zobject).value.obj.handlers->get_properties), sizeof ((*intern->inner.zobject).value.obj.handlers->get_properties), &((*intern->inner.zobject).value.obj.handlers->call_method), sizeof ((*intern->inner.zobject).value.obj.handlers->call_method), &((*intern->inner.zobject).value.obj.handlers->get_constructor), sizeof ((*intern->inner.zobject).value.obj.handlers->get_constructor), &((*intern->inner.zobject).value.obj.handlers->get_class_entry), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_entry), &((*intern->inner.zobject).value.obj.handlers->get_class_name), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_name), &((*intern->inner.zobject).value.obj.handlers->compare_objects), sizeof ((*intern->inner.zobject).value.obj.handlers->compare_objects), &((*intern->inner.zobject).value.obj.handlers->cast_object), sizeof ((*intern->inner.zobject).value.obj.handlers->cast_object), &((*intern->inner.zobject).value.obj.handlers->count_elements), sizeof ((*intern->inner.zobject).value.obj.handlers->count_elements), &((*intern->inner.zobject).value.obj.handlers->get_debug_info), sizeof ((*intern->inner.zobject).value.obj.handlers->get_debug_info), &((*intern->inner.zobject).value.obj.handlers->get_closure), sizeof ((*intern->inner.zobject).value.obj.handlers->get_closure), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &((**object_ptr).refcount__gc), sizeof ((**object_ptr).refcount__gc), &((**object_ptr).type), sizeof ((**object_ptr).type), &((**object_ptr).is_ref__gc), sizeof ((**object_ptr).is_ref__gc), &((**object_ptr).value.obj.handle), sizeof ((**object_ptr).value.obj.handle), &((**object_ptr).value.obj.handlers->add_ref), sizeof ((**object_ptr).value.obj.handlers->add_ref), &((**object_ptr).value.obj.handlers->del_ref), sizeof ((**object_ptr).value.obj.handlers->del_ref), &((**object_ptr).value.obj.handlers->clone_obj), sizeof ((**object_ptr).value.obj.handlers->clone_obj), &((**object_ptr).value.obj.handlers->read_property), sizeof ((**object_ptr).value.obj.handlers->read_property), &((**object_ptr).value.obj.handlers->write_property), sizeof ((**object_ptr).value.obj.handlers->write_property), &((**object_ptr).value.obj.handlers->read_dimension), sizeof ((**object_ptr).value.obj.handlers->read_dimension), &((**object_ptr).value.obj.handlers->write_dimension), sizeof ((**object_ptr).value.obj.handlers->write_dimension), &((**object_ptr).value.obj.handlers->get_property_ptr_ptr), sizeof ((**object_ptr).value.obj.handlers->get_property_ptr_ptr), &((**object_ptr).value.obj.handlers->get), sizeof ((**object_ptr).value.obj.handlers->get), &((**object_ptr).value.obj.handlers->set), sizeof ((**object_ptr).value.obj.handlers->set), &((**object_ptr).value.obj.handlers->has_property), sizeof ((**object_ptr).value.obj.handlers->has_property), &((**object_ptr).value.obj.handlers->unset_property), sizeof ((**object_ptr).value.obj.handlers->unset_property), &((**object_ptr).value.obj.handlers->has_dimension), sizeof ((**object_ptr).value.obj.handlers->has_dimension), &((**object_ptr).value.obj.handlers->unset_dimension), sizeof ((**object_ptr).value.obj.handlers->unset_dimension), &((**object_ptr).value.obj.handlers->get_properties), sizeof ((**object_ptr).value.obj.handlers->get_properties), &((**object_ptr).value.obj.handlers->call_method), sizeof ((**object_ptr).value.obj.handlers->call_method), &((**object_ptr).value.obj.handlers->get_constructor), sizeof ((**object_ptr).value.obj.handlers->get_constructor), &((**object_ptr).value.obj.handlers->get_class_entry), sizeof ((**object_ptr).value.obj.handlers->get_class_entry), &((**object_ptr).value.obj.handlers->get_class_name), sizeof ((**object_ptr).value.obj.handlers->get_class_name), &((**object_ptr).value.obj.handlers->compare_objects), sizeof ((**object_ptr).value.obj.handlers->compare_objects), &((**object_ptr).value.obj.handlers->cast_object), sizeof ((**object_ptr).value.obj.handlers->cast_object), &((**object_ptr).value.obj.handlers->count_elements), sizeof ((**object_ptr).value.obj.handlers->count_elements), &((**object_ptr).value.obj.handlers->get_debug_info), sizeof ((**object_ptr).value.obj.handlers->get_debug_info), &((**object_ptr).value.obj.handlers->get_closure), sizeof ((**object_ptr).value.obj.handlers->get_closure)))\n    *object_ptr = intern->inner.zobject;\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.9111336100631853, -3.079754059063184, -4.4936548000631849, -5.4060426000631843, -4.6481545000631845, -4.9851712079631847, -2.7267932554731846, -3.592977259063185, -2.8017062290631856, -3.8816053590631854, -4.3264056310631851, -5.4060426000631843, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -5.4060426000631843, -5.4060426000631843, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845, -4.6481545000631845]
								}, {
									"case":	2,
									"scores":	[-3.952428420063185]
								}]
						}]
				}, {
					"line":	1268,
					"switches":	[{
							"switch":	8,
							"types":	[[], [], [], [], [391], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257], [], [], [], [303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390], [258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], [], [], [], [], [], []],
							"begin_line":	1269,
							"begin_column":	3,
							"end_line":	1269,
							"end_column":	3,
							"patch_codes":	["memset(&(**object_ptr), 0, sizeof (*(&(**object_ptr))))", "memset(&(**object_ptr).is_ref__gc, 0, sizeof (*(&(**object_ptr).is_ref__gc)))", "memset(&(**object_ptr).refcount__gc, 0, sizeof (*(&(**object_ptr).refcount__gc)))", "memset(&(**object_ptr).type, 0, sizeof (*(&(**object_ptr).type)))", "memset(&(**object_ptr).value, 0, sizeof (*(&(**object_ptr).value)))", "memset(&(**object_ptr).value.dval, 0, sizeof (*(&(**object_ptr).value.dval)))", "memset(&(**object_ptr).value.ht, 0, sizeof (*(&(**object_ptr).value.ht)))", "memset(&(**object_ptr).value.lval, 0, sizeof (*(&(**object_ptr).value.lval)))", "memset(&(**object_ptr).value.obj, 0, sizeof (*(&(**object_ptr).value.obj)))", "memset(&(**object_ptr).value.obj.handle, 0, sizeof (*(&(**object_ptr).value.obj.handle)))", "memset(&(**object_ptr).value.obj.handlers, 0, sizeof (*(&(**object_ptr).value.obj.handlers)))", "memset(&(**object_ptr).value.obj.handlers->add_ref, 0, sizeof (*(&(**object_ptr).value.obj.handlers->add_ref)))", "memset(&(**object_ptr).value.obj.handlers->call_method, 0, sizeof (*(&(**object_ptr).value.obj.handlers->call_method)))", "memset(&(**object_ptr).value.obj.handlers->cast_object, 0, sizeof (*(&(**object_ptr).value.obj.handlers->cast_object)))", "memset(&(**object_ptr).value.obj.handlers->clone_obj, 0, sizeof (*(&(**object_ptr).value.obj.handlers->clone_obj)))", "memset(&(**object_ptr).value.obj.handlers->compare_objects, 0, sizeof (*(&(**object_ptr).value.obj.handlers->compare_objects)))", "memset(&(**object_ptr).value.obj.handlers->count_elements, 0, sizeof (*(&(**object_ptr).value.obj.handlers->count_elements)))", "memset(&(**object_ptr).value.obj.handlers->del_ref, 0, sizeof (*(&(**object_ptr).value.obj.handlers->del_ref)))", "memset(&(**object_ptr).value.obj.handlers->get, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get)))", "memset(&(**object_ptr).value.obj.handlers->get_class_entry, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_class_entry)))", "memset(&(**object_ptr).value.obj.handlers->get_class_name, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_class_name)))", "memset(&(**object_ptr).value.obj.handlers->get_closure, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_closure)))", "memset(&(**object_ptr).value.obj.handlers->get_constructor, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_constructor)))", "memset(&(**object_ptr).value.obj.handlers->get_debug_info, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_debug_info)))", "memset(&(**object_ptr).value.obj.handlers->get_method, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_method)))", "memset(&(**object_ptr).value.obj.handlers->get_properties, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_properties)))", "memset(&(**object_ptr).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(**object_ptr).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(**object_ptr).value.obj.handlers->has_dimension, 0, sizeof (*(&(**object_ptr).value.obj.handlers->has_dimension)))", "memset(&(**object_ptr).value.obj.handlers->has_property, 0, sizeof (*(&(**object_ptr).value.obj.handlers->has_property)))", "memset(&(**object_ptr).value.obj.handlers->read_dimension, 0, sizeof (*(&(**object_ptr).value.obj.handlers->read_dimension)))", "memset(&(**object_ptr).value.obj.handlers->read_property, 0, sizeof (*(&(**object_ptr).value.obj.handlers->read_property)))", "memset(&(**object_ptr).value.obj.handlers->set, 0, sizeof (*(&(**object_ptr).value.obj.handlers->set)))", "memset(&(**object_ptr).value.obj.handlers->unset_dimension, 0, sizeof (*(&(**object_ptr).value.obj.handlers->unset_dimension)))", "memset(&(**object_ptr).value.obj.handlers->unset_property, 0, sizeof (*(&(**object_ptr).value.obj.handlers->unset_property)))", "memset(&(**object_ptr).value.obj.handlers->write_dimension, 0, sizeof (*(&(**object_ptr).value.obj.handlers->write_dimension)))", "memset(&(**object_ptr).value.obj.handlers->write_property, 0, sizeof (*(&(**object_ptr).value.obj.handlers->write_property)))", "memset(&(**object_ptr).value.str, 0, sizeof (*(&(**object_ptr).value.str)))", "memset(&(*intern->inner.zobject).is_ref__gc, 0, sizeof (*(&(*intern->inner.zobject).is_ref__gc)))", "memset(&(*intern->inner.zobject).refcount__gc, 0, sizeof (*(&(*intern->inner.zobject).refcount__gc)))", "memset(&(*intern->inner.zobject).type, 0, sizeof (*(&(*intern->inner.zobject).type)))", "memset(&(*intern->inner.zobject).value, 0, sizeof (*(&(*intern->inner.zobject).value)))", "memset(&(*intern->inner.zobject).value.dval, 0, sizeof (*(&(*intern->inner.zobject).value.dval)))", "memset(&(*intern->inner.zobject).value.ht, 0, sizeof (*(&(*intern->inner.zobject).value.ht)))", "memset(&(*intern->inner.zobject).value.lval, 0, sizeof (*(&(*intern->inner.zobject).value.lval)))", "memset(&(*intern->inner.zobject).value.obj, 0, sizeof (*(&(*intern->inner.zobject).value.obj)))", "memset(&(*intern->inner.zobject).value.obj.handle, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handle)))", "memset(&(*intern->inner.zobject).value.obj.handlers, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers)))", "memset(&(*intern->inner.zobject).value.obj.handlers->add_ref, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->add_ref)))", "memset(&(*intern->inner.zobject).value.obj.handlers->call_method, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->call_method)))", "memset(&(*intern->inner.zobject).value.obj.handlers->cast_object, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->cast_object)))", "memset(&(*intern->inner.zobject).value.obj.handlers->clone_obj, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->clone_obj)))", "memset(&(*intern->inner.zobject).value.obj.handlers->compare_objects, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->compare_objects)))", "memset(&(*intern->inner.zobject).value.obj.handlers->count_elements, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->count_elements)))", "memset(&(*intern->inner.zobject).value.obj.handlers->del_ref, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->del_ref)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_class_entry, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_class_entry)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_class_name, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_class_name)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_closure, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_closure)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_constructor, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_constructor)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_debug_info, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_debug_info)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_method, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_method)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_properties, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_properties)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(*intern->inner.zobject).value.obj.handlers->has_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->has_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->has_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->has_property)))", "memset(&(*intern->inner.zobject).value.obj.handlers->read_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->read_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->read_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->read_property)))", "memset(&(*intern->inner.zobject).value.obj.handlers->set, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->set)))", "memset(&(*intern->inner.zobject).value.obj.handlers->unset_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->unset_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->unset_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->unset_property)))", "memset(&(*intern->inner.zobject).value.obj.handlers->write_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->write_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->write_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->write_property)))", "memset(&(*intern->inner.zobject).value.str, 0, sizeof (*(&(*intern->inner.zobject).value.str)))", "memset(&intern->current, 0, sizeof (*(&intern->current)))", "memset(&intern->dit_type, 0, sizeof (*(&intern->dit_type)))", "memset(&intern->inner, 0, sizeof (*(&intern->inner)))", "memset(&intern->inner.ce, 0, sizeof (*(&intern->inner.ce)))", "memset(&intern->inner.ce->__call, 0, sizeof (*(&intern->inner.ce->__call)))", "memset(&intern->inner.ce->__callstatic, 0, sizeof (*(&intern->inner.ce->__callstatic)))", "memset(&intern->inner.ce->__get, 0, sizeof (*(&intern->inner.ce->__get)))", "memset(&intern->inner.ce->__isset, 0, sizeof (*(&intern->inner.ce->__isset)))", "memset(&intern->inner.ce->__set, 0, sizeof (*(&intern->inner.ce->__set)))", "memset(&intern->inner.ce->__tostring, 0, sizeof (*(&intern->inner.ce->__tostring)))", "memset(&intern->inner.ce->__unset, 0, sizeof (*(&intern->inner.ce->__unset)))", "memset(&intern->inner.ce->ce_flags, 0, sizeof (*(&intern->inner.ce->ce_flags)))", "memset(&intern->inner.ce->clone, 0, sizeof (*(&intern->inner.ce->clone)))", "memset(&intern->inner.ce->constants_table, 0, sizeof (*(&intern->inner.ce->constants_table)))", "memset(&intern->inner.ce->constructor, 0, sizeof (*(&intern->inner.ce->constructor)))", "memset(&intern->inner.ce->create_object, 0, sizeof (*(&intern->inner.ce->create_object)))", "memset(&intern->inner.ce->default_properties_count, 0, sizeof (*(&intern->inner.ce->default_properties_count)))", "memset(&intern->inner.ce->default_properties_table, 0, sizeof (*(&intern->inner.ce->default_properties_table)))", "memset(&intern->inner.ce->default_static_members_count, 0, sizeof (*(&intern->inner.ce->default_static_members_count)))", "memset(&intern->inner.ce->default_static_members_table, 0, sizeof (*(&intern->inner.ce->default_static_members_table)))", "memset(&intern->inner.ce->destructor, 0, sizeof (*(&intern->inner.ce->destructor)))", "memset(&intern->inner.ce->function_table, 0, sizeof (*(&intern->inner.ce->function_table)))", "memset(&intern->inner.ce->get_iterator, 0, sizeof (*(&intern->inner.ce->get_iterator)))", "memset(&intern->inner.ce->get_static_method, 0, sizeof (*(&intern->inner.ce->get_static_method)))", "memset(&intern->inner.ce->info, 0, sizeof (*(&intern->inner.ce->info)))", "memset(&intern->inner.ce->interface_gets_implemented, 0, sizeof (*(&intern->inner.ce->interface_gets_implemented)))", "memset(&intern->inner.ce->interfaces, 0, sizeof (*(&intern->inner.ce->interfaces)))", "memset(&intern->inner.ce->iterator_funcs, 0, sizeof (*(&intern->inner.ce->iterator_funcs)))", "memset(&intern->inner.ce->name, 0, sizeof (*(&intern->inner.ce->name)))", "memset(&intern->inner.ce->name_length, 0, sizeof (*(&intern->inner.ce->name_length)))", "memset(&intern->inner.ce->num_interfaces, 0, sizeof (*(&intern->inner.ce->num_interfaces)))", "memset(&intern->inner.ce->num_traits, 0, sizeof (*(&intern->inner.ce->num_traits)))", "memset(&intern->inner.ce->parent, 0, sizeof (*(&intern->inner.ce->parent)))", "memset(&intern->inner.ce->properties_info, 0, sizeof (*(&intern->inner.ce->properties_info)))", "memset(&intern->inner.ce->refcount, 0, sizeof (*(&intern->inner.ce->refcount)))", "memset(&intern->inner.ce->serialize, 0, sizeof (*(&intern->inner.ce->serialize)))", "memset(&intern->inner.ce->serialize_func, 0, sizeof (*(&intern->inner.ce->serialize_func)))", "memset(&intern->inner.ce->static_members_table, 0, sizeof (*(&intern->inner.ce->static_members_table)))", "memset(&intern->inner.ce->trait_aliases, 0, sizeof (*(&intern->inner.ce->trait_aliases)))", "memset(&intern->inner.ce->trait_precedences, 0, sizeof (*(&intern->inner.ce->trait_precedences)))", "memset(&intern->inner.ce->traits, 0, sizeof (*(&intern->inner.ce->traits)))", "memset(&intern->inner.ce->type, 0, sizeof (*(&intern->inner.ce->type)))", "memset(&intern->inner.ce->unserialize, 0, sizeof (*(&intern->inner.ce->unserialize)))", "memset(&intern->inner.ce->unserialize_func, 0, sizeof (*(&intern->inner.ce->unserialize_func)))", "memset(&intern->inner.iterator, 0, sizeof (*(&intern->inner.iterator)))", "memset(&intern->inner.object, 0, sizeof (*(&intern->inner.object)))", "memset(&intern->inner.zobject, 0, sizeof (*(&intern->inner.zobject)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&std_object_handlers.add_ref, 0, sizeof (*(&std_object_handlers.add_ref)))", "memset(&std_object_handlers.call_method, 0, sizeof (*(&std_object_handlers.call_method)))", "memset(&std_object_handlers.cast_object, 0, sizeof (*(&std_object_handlers.cast_object)))", "memset(&std_object_handlers.clone_obj, 0, sizeof (*(&std_object_handlers.clone_obj)))", "memset(&std_object_handlers.compare_objects, 0, sizeof (*(&std_object_handlers.compare_objects)))", "memset(&std_object_handlers.count_elements, 0, sizeof (*(&std_object_handlers.count_elements)))", "memset(&std_object_handlers.del_ref, 0, sizeof (*(&std_object_handlers.del_ref)))", "memset(&std_object_handlers.get, 0, sizeof (*(&std_object_handlers.get)))", "memset(&std_object_handlers.get_class_entry, 0, sizeof (*(&std_object_handlers.get_class_entry)))", "memset(&std_object_handlers.get_class_name, 0, sizeof (*(&std_object_handlers.get_class_name)))", "memset(&std_object_handlers.get_closure, 0, sizeof (*(&std_object_handlers.get_closure)))", "memset(&std_object_handlers.get_constructor, 0, sizeof (*(&std_object_handlers.get_constructor)))", "memset(&std_object_handlers.get_debug_info, 0, sizeof (*(&std_object_handlers.get_debug_info)))", "memset(&std_object_handlers.get_method, 0, sizeof (*(&std_object_handlers.get_method)))", "memset(&std_object_handlers.get_properties, 0, sizeof (*(&std_object_handlers.get_properties)))", "memset(&std_object_handlers.get_property_ptr_ptr, 0, sizeof (*(&std_object_handlers.get_property_ptr_ptr)))", "memset(&std_object_handlers.has_dimension, 0, sizeof (*(&std_object_handlers.has_dimension)))", "memset(&std_object_handlers.has_property, 0, sizeof (*(&std_object_handlers.has_property)))", "memset(&std_object_handlers.read_dimension, 0, sizeof (*(&std_object_handlers.read_dimension)))", "memset(&std_object_handlers.read_property, 0, sizeof (*(&std_object_handlers.read_property)))", "memset(&std_object_handlers.set, 0, sizeof (*(&std_object_handlers.set)))", "memset(&std_object_handlers.unset_dimension, 0, sizeof (*(&std_object_handlers.unset_dimension)))", "memset(&std_object_handlers.unset_property, 0, sizeof (*(&std_object_handlers.unset_property)))", "memset(&std_object_handlers.write_dimension, 0, sizeof (*(&std_object_handlers.write_dimension)))", "memset(&std_object_handlers.write_property, 0, sizeof (*(&std_object_handlers.write_property)))", "memset((**object_ptr).value.ht, 0, sizeof (*((**object_ptr).value.ht)))", "memset((**object_ptr).value.obj.handlers, 0, sizeof (*((**object_ptr).value.obj.handlers)))", "memset((**object_ptr).value.obj.handlers->add_ref, 0, sizeof (*((**object_ptr).value.obj.handlers->add_ref)))", "memset((**object_ptr).value.obj.handlers->call_method, 0, sizeof (*((**object_ptr).value.obj.handlers->call_method)))", "memset((**object_ptr).value.obj.handlers->cast_object, 0, sizeof (*((**object_ptr).value.obj.handlers->cast_object)))", "memset((**object_ptr).value.obj.handlers->clone_obj, 0, sizeof (*((**object_ptr).value.obj.handlers->clone_obj)))", "memset((**object_ptr).value.obj.handlers->compare_objects, 0, sizeof (*((**object_ptr).value.obj.handlers->compare_objects)))", "memset((**object_ptr).value.obj.handlers->count_elements, 0, sizeof (*((**object_ptr).value.obj.handlers->count_elements)))", "memset((**object_ptr).value.obj.handlers->del_ref, 0, sizeof (*((**object_ptr).value.obj.handlers->del_ref)))", "memset((**object_ptr).value.obj.handlers->get, 0, sizeof (*((**object_ptr).value.obj.handlers->get)))", "memset((**object_ptr).value.obj.handlers->get_class_entry, 0, sizeof (*((**object_ptr).value.obj.handlers->get_class_entry)))", "memset((**object_ptr).value.obj.handlers->get_class_name, 0, sizeof (*((**object_ptr).value.obj.handlers->get_class_name)))", "memset((**object_ptr).value.obj.handlers->get_closure, 0, sizeof (*((**object_ptr).value.obj.handlers->get_closure)))", "memset((**object_ptr).value.obj.handlers->get_constructor, 0, sizeof (*((**object_ptr).value.obj.handlers->get_constructor)))", "memset((**object_ptr).value.obj.handlers->get_debug_info, 0, sizeof (*((**object_ptr).value.obj.handlers->get_debug_info)))", "memset((**object_ptr).value.obj.handlers->get_method, 0, sizeof (*((**object_ptr).value.obj.handlers->get_method)))", "memset((**object_ptr).value.obj.handlers->get_properties, 0, sizeof (*((**object_ptr).value.obj.handlers->get_properties)))", "memset((**object_ptr).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((**object_ptr).value.obj.handlers->get_property_ptr_ptr)))", "memset((**object_ptr).value.obj.handlers->has_dimension, 0, sizeof (*((**object_ptr).value.obj.handlers->has_dimension)))", "memset((**object_ptr).value.obj.handlers->has_property, 0, sizeof (*((**object_ptr).value.obj.handlers->has_property)))", "memset((**object_ptr).value.obj.handlers->read_dimension, 0, sizeof (*((**object_ptr).value.obj.handlers->read_dimension)))", "memset((**object_ptr).value.obj.handlers->read_property, 0, sizeof (*((**object_ptr).value.obj.handlers->read_property)))", "memset((**object_ptr).value.obj.handlers->set, 0, sizeof (*((**object_ptr).value.obj.handlers->set)))", "memset((**object_ptr).value.obj.handlers->unset_dimension, 0, sizeof (*((**object_ptr).value.obj.handlers->unset_dimension)))", "memset((**object_ptr).value.obj.handlers->unset_property, 0, sizeof (*((**object_ptr).value.obj.handlers->unset_property)))", "memset((**object_ptr).value.obj.handlers->write_dimension, 0, sizeof (*((**object_ptr).value.obj.handlers->write_dimension)))", "memset((**object_ptr).value.obj.handlers->write_property, 0, sizeof (*((**object_ptr).value.obj.handlers->write_property)))", "memset((*intern->inner.zobject).value.ht, 0, sizeof (*((*intern->inner.zobject).value.ht)))", "memset((*intern->inner.zobject).value.obj.handlers, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers)))", "memset((*intern->inner.zobject).value.obj.handlers->add_ref, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->add_ref)))", "memset((*intern->inner.zobject).value.obj.handlers->call_method, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->call_method)))", "memset((*intern->inner.zobject).value.obj.handlers->cast_object, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->cast_object)))", "memset((*intern->inner.zobject).value.obj.handlers->clone_obj, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->clone_obj)))", "memset((*intern->inner.zobject).value.obj.handlers->compare_objects, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->compare_objects)))", "memset((*intern->inner.zobject).value.obj.handlers->count_elements, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->count_elements)))", "memset((*intern->inner.zobject).value.obj.handlers->del_ref, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->del_ref)))", "memset((*intern->inner.zobject).value.obj.handlers->get, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get)))", "memset((*intern->inner.zobject).value.obj.handlers->get_class_entry, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_class_entry)))", "memset((*intern->inner.zobject).value.obj.handlers->get_class_name, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_class_name)))", "memset((*intern->inner.zobject).value.obj.handlers->get_closure, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_closure)))", "memset((*intern->inner.zobject).value.obj.handlers->get_constructor, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_constructor)))", "memset((*intern->inner.zobject).value.obj.handlers->get_debug_info, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_debug_info)))", "memset((*intern->inner.zobject).value.obj.handlers->get_method, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_method)))", "memset((*intern->inner.zobject).value.obj.handlers->get_properties, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_properties)))", "memset((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr)))", "memset((*intern->inner.zobject).value.obj.handlers->has_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->has_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->has_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->has_property)))", "memset((*intern->inner.zobject).value.obj.handlers->read_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->read_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->read_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->read_property)))", "memset((*intern->inner.zobject).value.obj.handlers->set, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->set)))", "memset((*intern->inner.zobject).value.obj.handlers->unset_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->unset_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->unset_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->unset_property)))", "memset((*intern->inner.zobject).value.obj.handlers->write_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->write_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->write_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->write_property)))", "memset(intern->inner.ce, 0, sizeof (*(intern->inner.ce)))", "memset(intern->inner.ce->__call, 0, sizeof (*(intern->inner.ce->__call)))", "memset(intern->inner.ce->__callstatic, 0, sizeof (*(intern->inner.ce->__callstatic)))", "memset(intern->inner.ce->__get, 0, sizeof (*(intern->inner.ce->__get)))", "memset(intern->inner.ce->__isset, 0, sizeof (*(intern->inner.ce->__isset)))", "memset(intern->inner.ce->__set, 0, sizeof (*(intern->inner.ce->__set)))", "memset(intern->inner.ce->__tostring, 0, sizeof (*(intern->inner.ce->__tostring)))", "memset(intern->inner.ce->__unset, 0, sizeof (*(intern->inner.ce->__unset)))", "memset(intern->inner.ce->clone, 0, sizeof (*(intern->inner.ce->clone)))", "memset(intern->inner.ce->constructor, 0, sizeof (*(intern->inner.ce->constructor)))", "memset(intern->inner.ce->create_object, 0, sizeof (*(intern->inner.ce->create_object)))", "memset(intern->inner.ce->default_properties_table, 0, sizeof (*(intern->inner.ce->default_properties_table)))", "memset(intern->inner.ce->default_static_members_table, 0, sizeof (*(intern->inner.ce->default_static_members_table)))", "memset(intern->inner.ce->destructor, 0, sizeof (*(intern->inner.ce->destructor)))", "memset(intern->inner.ce->get_iterator, 0, sizeof (*(intern->inner.ce->get_iterator)))", "memset(intern->inner.ce->get_static_method, 0, sizeof (*(intern->inner.ce->get_static_method)))", "memset(intern->inner.ce->interface_gets_implemented, 0, sizeof (*(intern->inner.ce->interface_gets_implemented)))", "memset(intern->inner.ce->interfaces, 0, sizeof (*(intern->inner.ce->interfaces)))", "memset(intern->inner.ce->name, 0, sizeof (*(intern->inner.ce->name)))", "memset(intern->inner.ce->parent, 0, sizeof (*(intern->inner.ce->parent)))", "memset(intern->inner.ce->serialize, 0, sizeof (*(intern->inner.ce->serialize)))", "memset(intern->inner.ce->serialize_func, 0, sizeof (*(intern->inner.ce->serialize_func)))", "memset(intern->inner.ce->static_members_table, 0, sizeof (*(intern->inner.ce->static_members_table)))", "memset(intern->inner.ce->trait_aliases, 0, sizeof (*(intern->inner.ce->trait_aliases)))", "memset(intern->inner.ce->trait_precedences, 0, sizeof (*(intern->inner.ce->trait_precedences)))", "memset(intern->inner.ce->traits, 0, sizeof (*(intern->inner.ce->traits)))", "memset(intern->inner.ce->unserialize, 0, sizeof (*(intern->inner.ce->unserialize)))", "memset(intern->inner.ce->unserialize_func, 0, sizeof (*(intern->inner.ce->unserialize_func)))", "memset(intern->inner.iterator, 0, sizeof (*(intern->inner.iterator)))", "memset(intern->inner.object, 0, sizeof (*(intern->inner.object)))", "memset(intern->inner.zobject, 0, sizeof (*(intern->inner.zobject)))", "memset(std_object_handlers.add_ref, 0, sizeof (*(std_object_handlers.add_ref)))", "memset(std_object_handlers.call_method, 0, sizeof (*(std_object_handlers.call_method)))", "memset(std_object_handlers.cast_object, 0, sizeof (*(std_object_handlers.cast_object)))", "memset(std_object_handlers.clone_obj, 0, sizeof (*(std_object_handlers.clone_obj)))", "memset(std_object_handlers.compare_objects, 0, sizeof (*(std_object_handlers.compare_objects)))", "memset(std_object_handlers.count_elements, 0, sizeof (*(std_object_handlers.count_elements)))", "memset(std_object_handlers.del_ref, 0, sizeof (*(std_object_handlers.del_ref)))", "memset(std_object_handlers.get, 0, sizeof (*(std_object_handlers.get)))", "memset(std_object_handlers.get_class_entry, 0, sizeof (*(std_object_handlers.get_class_entry)))", "memset(std_object_handlers.get_class_name, 0, sizeof (*(std_object_handlers.get_class_name)))", "memset(std_object_handlers.get_closure, 0, sizeof (*(std_object_handlers.get_closure)))", "memset(std_object_handlers.get_constructor, 0, sizeof (*(std_object_handlers.get_constructor)))", "memset(std_object_handlers.get_debug_info, 0, sizeof (*(std_object_handlers.get_debug_info)))", "memset(std_object_handlers.get_method, 0, sizeof (*(std_object_handlers.get_method)))", "memset(std_object_handlers.get_properties, 0, sizeof (*(std_object_handlers.get_properties)))", "memset(std_object_handlers.get_property_ptr_ptr, 0, sizeof (*(std_object_handlers.get_property_ptr_ptr)))", "memset(std_object_handlers.has_dimension, 0, sizeof (*(std_object_handlers.has_dimension)))", "memset(std_object_handlers.has_property, 0, sizeof (*(std_object_handlers.has_property)))", "memset(std_object_handlers.read_dimension, 0, sizeof (*(std_object_handlers.read_dimension)))", "memset(std_object_handlers.read_property, 0, sizeof (*(std_object_handlers.read_property)))", "memset(std_object_handlers.set, 0, sizeof (*(std_object_handlers.set)))", "memset(std_object_handlers.unset_dimension, 0, sizeof (*(std_object_handlers.unset_dimension)))", "memset(std_object_handlers.unset_property, 0, sizeof (*(std_object_handlers.unset_property)))", "memset(std_object_handlers.write_dimension, 0, sizeof (*(std_object_handlers.write_dimension)))", "memset(std_object_handlers.write_property, 0, sizeof (*(std_object_handlers.write_property)))", "(intern)->current.pos++", "(intern)->u.regex.pce->refcount++", "(intern)->u.regex.pce->refcount--", "(method)++", "_array_init(((intern)->u.caching.zcache), 0)", "_efree(((intern)))", "_efree(((intern)->current.str_key))", "_efree(((intern)->u.regex.regex))", "_efree(((method)))", "_zval_copy_ctor(((intern)->u.caching.zstr))", "_zval_ptr_dtor((&(intern)->current.data))", "_zval_ptr_dtor((&(intern)->inner.zobject))", "_zval_ptr_dtor((&(intern)->u.append.zarrayit))", "_zval_ptr_dtor((&(intern)->u.caching.zcache))", "_zval_ptr_dtor((&(intern)->u.caching.zchildren))", "_zval_ptr_dtor((&(intern)->u.caching.zstr))", "_zval_ptr_dtor((&*(object_ptr)))", "function_handler = (**(object_ptr)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((object_ptr), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (method), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (key))", "function_handler = (function_handler)", "function_handler = std_object_handlers.get_method((object_ptr), method, method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, (method), method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, method, method_len, (key))", "intern = (intern)", "memset((intern), 0, sizeof(spl_dual_it_object))", "php_error_docref0(((void *)0), (1 << 0L), \"The %s instance wasn't initialized properly\", zend_get_class_entry(&(**(object_ptr)))->name)", "spl_append_it_fetch((intern))", "spl_append_it_next((intern))", "spl_append_it_next_iterator((intern))", "spl_caching_it_next((intern))", "spl_caching_it_rewind((intern))", "spl_dual_it_fetch((intern), 0)", "spl_dual_it_fetch((intern), 1)", "spl_dual_it_free((intern))", "spl_dual_it_next((intern), 0)", "spl_dual_it_next((intern), 1)", "spl_dual_it_require((intern))", "spl_dual_it_rewind((intern))", "zend_call_method(&(intern)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (method))", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->current.data)", "zval_addref_p(*((object_ptr)))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, method, method_len, key)", "intern = (spl_dual_it_object *)zend_object_store_get_object(*object_ptr)", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "if (__is_neg(\"\", \"L1269\", 41, &(object_ptr), sizeof (object_ptr), &(method), sizeof (method), &(method_len), sizeof (method_len), &(key), sizeof (key), &(function_handler), sizeof (function_handler), &((**object_ptr).value.obj.handlers), sizeof ((**object_ptr).value.obj.handlers), &((**object_ptr).value.obj.handlers->get_method), sizeof ((**object_ptr).value.obj.handlers->get_method), &(intern), sizeof (intern), &(intern->inner.zobject), sizeof (intern->inner.zobject), &(intern->inner.ce), sizeof (intern->inner.ce), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &((**object_ptr).refcount__gc), sizeof ((**object_ptr).refcount__gc), &((**object_ptr).type), sizeof ((**object_ptr).type), &((**object_ptr).is_ref__gc), sizeof ((**object_ptr).is_ref__gc), &((**object_ptr).value.obj.handle), sizeof ((**object_ptr).value.obj.handle), &((**object_ptr).value.obj.handlers->add_ref), sizeof ((**object_ptr).value.obj.handlers->add_ref), &((**object_ptr).value.obj.handlers->del_ref), sizeof ((**object_ptr).value.obj.handlers->del_ref), &((**object_ptr).value.obj.handlers->clone_obj), sizeof ((**object_ptr).value.obj.handlers->clone_obj), &((**object_ptr).value.obj.handlers->read_property), sizeof ((**object_ptr).value.obj.handlers->read_property), &((**object_ptr).value.obj.handlers->write_property), sizeof ((**object_ptr).value.obj.handlers->write_property), &((**object_ptr).value.obj.handlers->read_dimension), sizeof ((**object_ptr).value.obj.handlers->read_dimension), &((**object_ptr).value.obj.handlers->write_dimension), sizeof ((**object_ptr).value.obj.handlers->write_dimension), &((**object_ptr).value.obj.handlers->get_property_ptr_ptr), sizeof ((**object_ptr).value.obj.handlers->get_property_ptr_ptr), &((**object_ptr).value.obj.handlers->get), sizeof ((**object_ptr).value.obj.handlers->get), &((**object_ptr).value.obj.handlers->set), sizeof ((**object_ptr).value.obj.handlers->set), &((**object_ptr).value.obj.handlers->has_property), sizeof ((**object_ptr).value.obj.handlers->has_property), &((**object_ptr).value.obj.handlers->unset_property), sizeof ((**object_ptr).value.obj.handlers->unset_property), &((**object_ptr).value.obj.handlers->has_dimension), sizeof ((**object_ptr).value.obj.handlers->has_dimension), &((**object_ptr).value.obj.handlers->unset_dimension), sizeof ((**object_ptr).value.obj.handlers->unset_dimension), &((**object_ptr).value.obj.handlers->get_properties), sizeof ((**object_ptr).value.obj.handlers->get_properties), &((**object_ptr).value.obj.handlers->call_method), sizeof ((**object_ptr).value.obj.handlers->call_method), &((**object_ptr).value.obj.handlers->get_constructor), sizeof ((**object_ptr).value.obj.handlers->get_constructor), &((**object_ptr).value.obj.handlers->get_class_entry), sizeof ((**object_ptr).value.obj.handlers->get_class_entry), &((**object_ptr).value.obj.handlers->get_class_name), sizeof ((**object_ptr).value.obj.handlers->get_class_name), &((**object_ptr).value.obj.handlers->compare_objects), sizeof ((**object_ptr).value.obj.handlers->compare_objects), &((**object_ptr).value.obj.handlers->cast_object), sizeof ((**object_ptr).value.obj.handlers->cast_object), &((**object_ptr).value.obj.handlers->count_elements), sizeof ((**object_ptr).value.obj.handlers->count_elements), &((**object_ptr).value.obj.handlers->get_debug_info), sizeof ((**object_ptr).value.obj.handlers->get_debug_info), &((**object_ptr).value.obj.handlers->get_closure), sizeof ((**object_ptr).value.obj.handlers->get_closure)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	2,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	3,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	4,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	5,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	6,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	7,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	8,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	9,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	10,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	11,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	12,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	13,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	14,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	15,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	16,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	17,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	18,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	19,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	20,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	21,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	22,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	23,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	24,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	25,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	26,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	27,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	28,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	29,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	30,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	31,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	32,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	33,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	34,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	35,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	36,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	37,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	38,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	39,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	40,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	41,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	42,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	43,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	44,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	45,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	46,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	47,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	48,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	49,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	50,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	51,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	52,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	53,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	54,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	55,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	56,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	57,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	58,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	59,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	60,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	61,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	62,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	63,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	64,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	65,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	66,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	67,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	68,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	69,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	70,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	71,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	72,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	73,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	74,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	75,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	76,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	77,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	78,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	79,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	80,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	81,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	82,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	83,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	84,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	85,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	86,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	87,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	88,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	89,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	90,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	91,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	92,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	93,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	94,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	95,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	96,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	97,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	98,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	99,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	100,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	101,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	102,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	103,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	104,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	105,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	106,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	107,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	108,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	109,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	110,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	111,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	112,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	113,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	114,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	115,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	116,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	117,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	118,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	119,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	120,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	121,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	122,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	123,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	124,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	125,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	126,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	127,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	128,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	129,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	130,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	131,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	132,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	133,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	134,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	135,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	136,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	137,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	138,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	139,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	140,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	141,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	142,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	143,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	144,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	145,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	146,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	147,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	148,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	149,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	150,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	151,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	152,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	153,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	154,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	155,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	156,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	157,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	158,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	159,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	160,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	161,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	162,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	163,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	164,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	165,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	166,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	167,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	168,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	169,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	170,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	171,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	172,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	173,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	174,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	175,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	176,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	177,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	178,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	179,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	180,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	181,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	182,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	183,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	184,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	185,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	186,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	187,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	188,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	189,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	190,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	191,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	192,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	193,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	194,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	195,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	196,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	197,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	198,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	199,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	200,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	201,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	202,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	203,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	204,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	205,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	206,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	207,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	208,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	209,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	210,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	211,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	212,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	213,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	214,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	215,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	216,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	217,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	218,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	219,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	220,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	221,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	222,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	223,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	224,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	225,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	226,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	227,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	228,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	229,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	230,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	231,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	232,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	233,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	234,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	235,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	236,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	237,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	238,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	239,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	240,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	241,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	242,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	243,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	244,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	245,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	246,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	247,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	248,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	249,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	250,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	251,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	252,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	253,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	254,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	255,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	256,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	257,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	258,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	259,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	260,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	261,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	262,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	263,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	264,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	265,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	266,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	267,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	268,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	269,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	270,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	271,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	272,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	273,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	274,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	275,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	276,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	277,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	278,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	279,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	280,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	281,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	282,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	283,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	284,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	285,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	286,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	287,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	288,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	289,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	290,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	291,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	292,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	293,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	294,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	295,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	296,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	297,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	298,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	299,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	300,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	301,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	302,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	303,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	304,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	305,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	306,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	307,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	308,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	309,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	310,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	311,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	312,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	313,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	314,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	315,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	316,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	317,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	318,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	319,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	320,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	321,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	322,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	323,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	324,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	325,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	326,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	327,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	328,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	329,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	330,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	331,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	332,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	333,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	334,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	335,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	336,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	337,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	338,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	339,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	340,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	341,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	342,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	343,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	344,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	345,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	346,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	347,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	348,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	349,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	350,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	351,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	352,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	353,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	354,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	355,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	356,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	357,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	358,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	359,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	360,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	361,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	362,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	363,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	364,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	365,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	366,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	367,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	368,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	369,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	370,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	371,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	372,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	373,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	374,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	375,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	376,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	377,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	378,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	379,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	380,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	381,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	382,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	383,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	384,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	385,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	386,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	387,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	388,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	389,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	390,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	391,
									"scores":	[-4.7819289767456654, -4.1647470567456653, -3.4529229397456653, -4.1998968535456651, -5.8093958667456649, -6.968241765445665, -5.0623491541556653, -7.0557608425456646, -7.3346433165456659, -7.5487185965456653, -7.3026796827456657, -7.5487185965456653, -7.5487185965456653, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657, -7.3026796827456657]
								}]
						}, {
							"switch":	9,
							"types":	[[], [], [1], [], [], [], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [3, 4, 5], [], [], [], [], [], [], [], [2]],
							"begin_line":	1269,
							"begin_column":	5,
							"end_line":	1269,
							"end_column":	105,
							"patch_codes":	["if (!__is_neg(\"\", \"L1269\", 41, &(object_ptr), sizeof (object_ptr), &(method), sizeof (method), &(method_len), sizeof (method_len), &(key), sizeof (key), &(function_handler), sizeof (function_handler), &((**object_ptr).value.obj.handlers), sizeof ((**object_ptr).value.obj.handlers), &((**object_ptr).value.obj.handlers->get_method), sizeof ((**object_ptr).value.obj.handlers->get_method), &(intern), sizeof (intern), &(intern->inner.zobject), sizeof (intern->inner.zobject), &(intern->inner.ce), sizeof (intern->inner.ce), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &((**object_ptr).refcount__gc), sizeof ((**object_ptr).refcount__gc), &((**object_ptr).type), sizeof ((**object_ptr).type), &((**object_ptr).is_ref__gc), sizeof ((**object_ptr).is_ref__gc), &((**object_ptr).value.obj.handle), sizeof ((**object_ptr).value.obj.handle), &((**object_ptr).value.obj.handlers->add_ref), sizeof ((**object_ptr).value.obj.handlers->add_ref), &((**object_ptr).value.obj.handlers->del_ref), sizeof ((**object_ptr).value.obj.handlers->del_ref), &((**object_ptr).value.obj.handlers->clone_obj), sizeof ((**object_ptr).value.obj.handlers->clone_obj), &((**object_ptr).value.obj.handlers->read_property), sizeof ((**object_ptr).value.obj.handlers->read_property), &((**object_ptr).value.obj.handlers->write_property), sizeof ((**object_ptr).value.obj.handlers->write_property), &((**object_ptr).value.obj.handlers->read_dimension), sizeof ((**object_ptr).value.obj.handlers->read_dimension), &((**object_ptr).value.obj.handlers->write_dimension), sizeof ((**object_ptr).value.obj.handlers->write_dimension), &((**object_ptr).value.obj.handlers->get_property_ptr_ptr), sizeof ((**object_ptr).value.obj.handlers->get_property_ptr_ptr), &((**object_ptr).value.obj.handlers->get), sizeof ((**object_ptr).value.obj.handlers->get), &((**object_ptr).value.obj.handlers->set), sizeof ((**object_ptr).value.obj.handlers->set), &((**object_ptr).value.obj.handlers->has_property), sizeof ((**object_ptr).value.obj.handlers->has_property), &((**object_ptr).value.obj.handlers->unset_property), sizeof ((**object_ptr).value.obj.handlers->unset_property), &((**object_ptr).value.obj.handlers->has_dimension), sizeof ((**object_ptr).value.obj.handlers->has_dimension), &((**object_ptr).value.obj.handlers->unset_dimension), sizeof ((**object_ptr).value.obj.handlers->unset_dimension), &((**object_ptr).value.obj.handlers->get_properties), sizeof ((**object_ptr).value.obj.handlers->get_properties), &((**object_ptr).value.obj.handlers->call_method), sizeof ((**object_ptr).value.obj.handlers->call_method), &((**object_ptr).value.obj.handlers->get_constructor), sizeof ((**object_ptr).value.obj.handlers->get_constructor), &((**object_ptr).value.obj.handlers->get_class_entry), sizeof ((**object_ptr).value.obj.handlers->get_class_entry), &((**object_ptr).value.obj.handlers->get_class_name), sizeof ((**object_ptr).value.obj.handlers->get_class_name), &((**object_ptr).value.obj.handlers->compare_objects), sizeof ((**object_ptr).value.obj.handlers->compare_objects), &((**object_ptr).value.obj.handlers->cast_object), sizeof ((**object_ptr).value.obj.handlers->cast_object), &((**object_ptr).value.obj.handlers->count_elements), sizeof ((**object_ptr).value.obj.handlers->count_elements), &((**object_ptr).value.obj.handlers->get_debug_info), sizeof ((**object_ptr).value.obj.handlers->get_debug_info), &((**object_ptr).value.obj.handlers->get_closure), sizeof ((**object_ptr).value.obj.handlers->get_closure)))\n    function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n", "{\n}\n", "function_handler = spl_dual_it_get_method(object_ptr, method, method_len, key)", "function_handler = spl_recursive_it_get_method(object_ptr, method, method_len, key)", "function_handler = zend_std_get_static_method(object_ptr, method, method_len, key)", "function_handler = (**(&function_handler)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**(&intern)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**(&key)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**(&method)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**(&method_len)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**(&object_ptr)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**(object_ptr)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((&function_handler), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((&intern), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((&key), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((&method), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((&method_len), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((&object_ptr), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((object_ptr), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (&function_handler), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (&intern), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (&key), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (&method), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (&method_len), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (&object_ptr), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (method), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (0 * method_len), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (function_handler != 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (function_handler == 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (intern != 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (intern == 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (key != 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (key == 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (method != 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (method == 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (method_len != 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (method_len + 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (method_len - 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (method_len == 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (method_len), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (object_ptr != 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, (object_ptr == 0), key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (&function_handler))", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (&intern))", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (&key))", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (&method))", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (&method_len))", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (&object_ptr))", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (key))", "function_handler = (function_handler)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.9054582032456659, -4.3979034927456651, -3.6066324627456656, -4.6865315927456654, -5.1788395037456656, -5.1217239027456651, -3.4313518027456658, -5.471749573245666, -5.7548068927456653, -6.125369892745665, -5.3674817927456653, -6.125369892745665, -6.125369892745665, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653, -5.3674817927456653]
								}, {
									"case":	2,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	3,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	4,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	5,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	6,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	7,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	8,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	9,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	10,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	11,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	12,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	13,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	14,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	15,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	16,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	17,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	18,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	19,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	20,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	21,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	22,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	23,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	24,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	25,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	26,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	27,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	28,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	29,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	30,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	31,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	32,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	33,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	34,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	35,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	36,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	37,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	38,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	39,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	40,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	41,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	42,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	43,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	44,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	45,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	46,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	47,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	48,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	49,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	50,
									"scores":	[-3.9322257127456655]
								}]
						}]
				}, {
					"line":	1266,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [329], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195], [], [], [], [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328], [196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], [], [], [], [], [], []],
							"begin_line":	1267,
							"begin_column":	2,
							"end_line":	1267,
							"end_column":	2,
							"patch_codes":	["memset(&(*intern->inner.zobject), 0, sizeof (*(&(*intern->inner.zobject))))", "memset(&(*intern->inner.zobject).is_ref__gc, 0, sizeof (*(&(*intern->inner.zobject).is_ref__gc)))", "memset(&(*intern->inner.zobject).refcount__gc, 0, sizeof (*(&(*intern->inner.zobject).refcount__gc)))", "memset(&(*intern->inner.zobject).type, 0, sizeof (*(&(*intern->inner.zobject).type)))", "memset(&(*intern->inner.zobject).value, 0, sizeof (*(&(*intern->inner.zobject).value)))", "memset(&(*intern->inner.zobject).value.dval, 0, sizeof (*(&(*intern->inner.zobject).value.dval)))", "memset(&(*intern->inner.zobject).value.ht, 0, sizeof (*(&(*intern->inner.zobject).value.ht)))", "memset(&(*intern->inner.zobject).value.lval, 0, sizeof (*(&(*intern->inner.zobject).value.lval)))", "memset(&(*intern->inner.zobject).value.obj, 0, sizeof (*(&(*intern->inner.zobject).value.obj)))", "memset(&(*intern->inner.zobject).value.obj.handle, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handle)))", "memset(&(*intern->inner.zobject).value.obj.handlers, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers)))", "memset(&(*intern->inner.zobject).value.obj.handlers->add_ref, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->add_ref)))", "memset(&(*intern->inner.zobject).value.obj.handlers->call_method, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->call_method)))", "memset(&(*intern->inner.zobject).value.obj.handlers->cast_object, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->cast_object)))", "memset(&(*intern->inner.zobject).value.obj.handlers->clone_obj, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->clone_obj)))", "memset(&(*intern->inner.zobject).value.obj.handlers->compare_objects, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->compare_objects)))", "memset(&(*intern->inner.zobject).value.obj.handlers->count_elements, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->count_elements)))", "memset(&(*intern->inner.zobject).value.obj.handlers->del_ref, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->del_ref)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_class_entry, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_class_entry)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_class_name, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_class_name)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_closure, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_closure)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_constructor, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_constructor)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_debug_info, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_debug_info)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_method, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_method)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_properties, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_properties)))", "memset(&(*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr)))", "memset(&(*intern->inner.zobject).value.obj.handlers->has_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->has_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->has_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->has_property)))", "memset(&(*intern->inner.zobject).value.obj.handlers->read_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->read_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->read_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->read_property)))", "memset(&(*intern->inner.zobject).value.obj.handlers->set, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->set)))", "memset(&(*intern->inner.zobject).value.obj.handlers->unset_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->unset_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->unset_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->unset_property)))", "memset(&(*intern->inner.zobject).value.obj.handlers->write_dimension, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->write_dimension)))", "memset(&(*intern->inner.zobject).value.obj.handlers->write_property, 0, sizeof (*(&(*intern->inner.zobject).value.obj.handlers->write_property)))", "memset(&(*intern->inner.zobject).value.str, 0, sizeof (*(&(*intern->inner.zobject).value.str)))", "memset(&intern->current, 0, sizeof (*(&intern->current)))", "memset(&intern->dit_type, 0, sizeof (*(&intern->dit_type)))", "memset(&intern->inner, 0, sizeof (*(&intern->inner)))", "memset(&intern->inner.ce, 0, sizeof (*(&intern->inner.ce)))", "memset(&intern->inner.ce->__call, 0, sizeof (*(&intern->inner.ce->__call)))", "memset(&intern->inner.ce->__callstatic, 0, sizeof (*(&intern->inner.ce->__callstatic)))", "memset(&intern->inner.ce->__get, 0, sizeof (*(&intern->inner.ce->__get)))", "memset(&intern->inner.ce->__isset, 0, sizeof (*(&intern->inner.ce->__isset)))", "memset(&intern->inner.ce->__set, 0, sizeof (*(&intern->inner.ce->__set)))", "memset(&intern->inner.ce->__tostring, 0, sizeof (*(&intern->inner.ce->__tostring)))", "memset(&intern->inner.ce->__unset, 0, sizeof (*(&intern->inner.ce->__unset)))", "memset(&intern->inner.ce->ce_flags, 0, sizeof (*(&intern->inner.ce->ce_flags)))", "memset(&intern->inner.ce->clone, 0, sizeof (*(&intern->inner.ce->clone)))", "memset(&intern->inner.ce->constants_table, 0, sizeof (*(&intern->inner.ce->constants_table)))", "memset(&intern->inner.ce->constructor, 0, sizeof (*(&intern->inner.ce->constructor)))", "memset(&intern->inner.ce->create_object, 0, sizeof (*(&intern->inner.ce->create_object)))", "memset(&intern->inner.ce->default_properties_count, 0, sizeof (*(&intern->inner.ce->default_properties_count)))", "memset(&intern->inner.ce->default_properties_table, 0, sizeof (*(&intern->inner.ce->default_properties_table)))", "memset(&intern->inner.ce->default_static_members_count, 0, sizeof (*(&intern->inner.ce->default_static_members_count)))", "memset(&intern->inner.ce->default_static_members_table, 0, sizeof (*(&intern->inner.ce->default_static_members_table)))", "memset(&intern->inner.ce->destructor, 0, sizeof (*(&intern->inner.ce->destructor)))", "memset(&intern->inner.ce->function_table, 0, sizeof (*(&intern->inner.ce->function_table)))", "memset(&intern->inner.ce->get_iterator, 0, sizeof (*(&intern->inner.ce->get_iterator)))", "memset(&intern->inner.ce->get_static_method, 0, sizeof (*(&intern->inner.ce->get_static_method)))", "memset(&intern->inner.ce->info, 0, sizeof (*(&intern->inner.ce->info)))", "memset(&intern->inner.ce->interface_gets_implemented, 0, sizeof (*(&intern->inner.ce->interface_gets_implemented)))", "memset(&intern->inner.ce->interfaces, 0, sizeof (*(&intern->inner.ce->interfaces)))", "memset(&intern->inner.ce->iterator_funcs, 0, sizeof (*(&intern->inner.ce->iterator_funcs)))", "memset(&intern->inner.ce->name, 0, sizeof (*(&intern->inner.ce->name)))", "memset(&intern->inner.ce->name_length, 0, sizeof (*(&intern->inner.ce->name_length)))", "memset(&intern->inner.ce->num_interfaces, 0, sizeof (*(&intern->inner.ce->num_interfaces)))", "memset(&intern->inner.ce->num_traits, 0, sizeof (*(&intern->inner.ce->num_traits)))", "memset(&intern->inner.ce->parent, 0, sizeof (*(&intern->inner.ce->parent)))", "memset(&intern->inner.ce->properties_info, 0, sizeof (*(&intern->inner.ce->properties_info)))", "memset(&intern->inner.ce->refcount, 0, sizeof (*(&intern->inner.ce->refcount)))", "memset(&intern->inner.ce->serialize, 0, sizeof (*(&intern->inner.ce->serialize)))", "memset(&intern->inner.ce->serialize_func, 0, sizeof (*(&intern->inner.ce->serialize_func)))", "memset(&intern->inner.ce->static_members_table, 0, sizeof (*(&intern->inner.ce->static_members_table)))", "memset(&intern->inner.ce->trait_aliases, 0, sizeof (*(&intern->inner.ce->trait_aliases)))", "memset(&intern->inner.ce->trait_precedences, 0, sizeof (*(&intern->inner.ce->trait_precedences)))", "memset(&intern->inner.ce->traits, 0, sizeof (*(&intern->inner.ce->traits)))", "memset(&intern->inner.ce->type, 0, sizeof (*(&intern->inner.ce->type)))", "memset(&intern->inner.ce->unserialize, 0, sizeof (*(&intern->inner.ce->unserialize)))", "memset(&intern->inner.ce->unserialize_func, 0, sizeof (*(&intern->inner.ce->unserialize_func)))", "memset(&intern->inner.iterator, 0, sizeof (*(&intern->inner.iterator)))", "memset(&intern->inner.object, 0, sizeof (*(&intern->inner.object)))", "memset(&intern->inner.zobject, 0, sizeof (*(&intern->inner.zobject)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&std_object_handlers.add_ref, 0, sizeof (*(&std_object_handlers.add_ref)))", "memset(&std_object_handlers.call_method, 0, sizeof (*(&std_object_handlers.call_method)))", "memset(&std_object_handlers.cast_object, 0, sizeof (*(&std_object_handlers.cast_object)))", "memset(&std_object_handlers.clone_obj, 0, sizeof (*(&std_object_handlers.clone_obj)))", "memset(&std_object_handlers.compare_objects, 0, sizeof (*(&std_object_handlers.compare_objects)))", "memset(&std_object_handlers.count_elements, 0, sizeof (*(&std_object_handlers.count_elements)))", "memset(&std_object_handlers.del_ref, 0, sizeof (*(&std_object_handlers.del_ref)))", "memset(&std_object_handlers.get, 0, sizeof (*(&std_object_handlers.get)))", "memset(&std_object_handlers.get_class_entry, 0, sizeof (*(&std_object_handlers.get_class_entry)))", "memset(&std_object_handlers.get_class_name, 0, sizeof (*(&std_object_handlers.get_class_name)))", "memset(&std_object_handlers.get_closure, 0, sizeof (*(&std_object_handlers.get_closure)))", "memset(&std_object_handlers.get_constructor, 0, sizeof (*(&std_object_handlers.get_constructor)))", "memset(&std_object_handlers.get_debug_info, 0, sizeof (*(&std_object_handlers.get_debug_info)))", "memset(&std_object_handlers.get_method, 0, sizeof (*(&std_object_handlers.get_method)))", "memset(&std_object_handlers.get_properties, 0, sizeof (*(&std_object_handlers.get_properties)))", "memset(&std_object_handlers.get_property_ptr_ptr, 0, sizeof (*(&std_object_handlers.get_property_ptr_ptr)))", "memset(&std_object_handlers.has_dimension, 0, sizeof (*(&std_object_handlers.has_dimension)))", "memset(&std_object_handlers.has_property, 0, sizeof (*(&std_object_handlers.has_property)))", "memset(&std_object_handlers.read_dimension, 0, sizeof (*(&std_object_handlers.read_dimension)))", "memset(&std_object_handlers.read_property, 0, sizeof (*(&std_object_handlers.read_property)))", "memset(&std_object_handlers.set, 0, sizeof (*(&std_object_handlers.set)))", "memset(&std_object_handlers.unset_dimension, 0, sizeof (*(&std_object_handlers.unset_dimension)))", "memset(&std_object_handlers.unset_property, 0, sizeof (*(&std_object_handlers.unset_property)))", "memset(&std_object_handlers.write_dimension, 0, sizeof (*(&std_object_handlers.write_dimension)))", "memset(&std_object_handlers.write_property, 0, sizeof (*(&std_object_handlers.write_property)))", "memset((*intern->inner.zobject).value.ht, 0, sizeof (*((*intern->inner.zobject).value.ht)))", "memset((*intern->inner.zobject).value.obj.handlers, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers)))", "memset((*intern->inner.zobject).value.obj.handlers->add_ref, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->add_ref)))", "memset((*intern->inner.zobject).value.obj.handlers->call_method, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->call_method)))", "memset((*intern->inner.zobject).value.obj.handlers->cast_object, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->cast_object)))", "memset((*intern->inner.zobject).value.obj.handlers->clone_obj, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->clone_obj)))", "memset((*intern->inner.zobject).value.obj.handlers->compare_objects, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->compare_objects)))", "memset((*intern->inner.zobject).value.obj.handlers->count_elements, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->count_elements)))", "memset((*intern->inner.zobject).value.obj.handlers->del_ref, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->del_ref)))", "memset((*intern->inner.zobject).value.obj.handlers->get, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get)))", "memset((*intern->inner.zobject).value.obj.handlers->get_class_entry, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_class_entry)))", "memset((*intern->inner.zobject).value.obj.handlers->get_class_name, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_class_name)))", "memset((*intern->inner.zobject).value.obj.handlers->get_closure, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_closure)))", "memset((*intern->inner.zobject).value.obj.handlers->get_constructor, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_constructor)))", "memset((*intern->inner.zobject).value.obj.handlers->get_debug_info, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_debug_info)))", "memset((*intern->inner.zobject).value.obj.handlers->get_method, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_method)))", "memset((*intern->inner.zobject).value.obj.handlers->get_properties, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_properties)))", "memset((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr)))", "memset((*intern->inner.zobject).value.obj.handlers->has_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->has_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->has_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->has_property)))", "memset((*intern->inner.zobject).value.obj.handlers->read_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->read_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->read_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->read_property)))", "memset((*intern->inner.zobject).value.obj.handlers->set, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->set)))", "memset((*intern->inner.zobject).value.obj.handlers->unset_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->unset_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->unset_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->unset_property)))", "memset((*intern->inner.zobject).value.obj.handlers->write_dimension, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->write_dimension)))", "memset((*intern->inner.zobject).value.obj.handlers->write_property, 0, sizeof (*((*intern->inner.zobject).value.obj.handlers->write_property)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->inner.ce, 0, sizeof (*(intern->inner.ce)))", "memset(intern->inner.ce->__call, 0, sizeof (*(intern->inner.ce->__call)))", "memset(intern->inner.ce->__callstatic, 0, sizeof (*(intern->inner.ce->__callstatic)))", "memset(intern->inner.ce->__get, 0, sizeof (*(intern->inner.ce->__get)))", "memset(intern->inner.ce->__isset, 0, sizeof (*(intern->inner.ce->__isset)))", "memset(intern->inner.ce->__set, 0, sizeof (*(intern->inner.ce->__set)))", "memset(intern->inner.ce->__tostring, 0, sizeof (*(intern->inner.ce->__tostring)))", "memset(intern->inner.ce->__unset, 0, sizeof (*(intern->inner.ce->__unset)))", "memset(intern->inner.ce->clone, 0, sizeof (*(intern->inner.ce->clone)))", "memset(intern->inner.ce->constructor, 0, sizeof (*(intern->inner.ce->constructor)))", "memset(intern->inner.ce->create_object, 0, sizeof (*(intern->inner.ce->create_object)))", "memset(intern->inner.ce->default_properties_table, 0, sizeof (*(intern->inner.ce->default_properties_table)))", "memset(intern->inner.ce->default_static_members_table, 0, sizeof (*(intern->inner.ce->default_static_members_table)))", "memset(intern->inner.ce->destructor, 0, sizeof (*(intern->inner.ce->destructor)))", "memset(intern->inner.ce->get_iterator, 0, sizeof (*(intern->inner.ce->get_iterator)))", "memset(intern->inner.ce->get_static_method, 0, sizeof (*(intern->inner.ce->get_static_method)))", "memset(intern->inner.ce->interface_gets_implemented, 0, sizeof (*(intern->inner.ce->interface_gets_implemented)))", "memset(intern->inner.ce->interfaces, 0, sizeof (*(intern->inner.ce->interfaces)))", "memset(intern->inner.ce->name, 0, sizeof (*(intern->inner.ce->name)))", "memset(intern->inner.ce->parent, 0, sizeof (*(intern->inner.ce->parent)))", "memset(intern->inner.ce->serialize, 0, sizeof (*(intern->inner.ce->serialize)))", "memset(intern->inner.ce->serialize_func, 0, sizeof (*(intern->inner.ce->serialize_func)))", "memset(intern->inner.ce->static_members_table, 0, sizeof (*(intern->inner.ce->static_members_table)))", "memset(intern->inner.ce->trait_aliases, 0, sizeof (*(intern->inner.ce->trait_aliases)))", "memset(intern->inner.ce->trait_precedences, 0, sizeof (*(intern->inner.ce->trait_precedences)))", "memset(intern->inner.ce->traits, 0, sizeof (*(intern->inner.ce->traits)))", "memset(intern->inner.ce->unserialize, 0, sizeof (*(intern->inner.ce->unserialize)))", "memset(intern->inner.ce->unserialize_func, 0, sizeof (*(intern->inner.ce->unserialize_func)))", "memset(intern->inner.iterator, 0, sizeof (*(intern->inner.iterator)))", "memset(intern->inner.object, 0, sizeof (*(intern->inner.object)))", "memset(intern->inner.zobject, 0, sizeof (*(intern->inner.zobject)))", "memset(std_object_handlers.add_ref, 0, sizeof (*(std_object_handlers.add_ref)))", "memset(std_object_handlers.call_method, 0, sizeof (*(std_object_handlers.call_method)))", "memset(std_object_handlers.cast_object, 0, sizeof (*(std_object_handlers.cast_object)))", "memset(std_object_handlers.clone_obj, 0, sizeof (*(std_object_handlers.clone_obj)))", "memset(std_object_handlers.compare_objects, 0, sizeof (*(std_object_handlers.compare_objects)))", "memset(std_object_handlers.count_elements, 0, sizeof (*(std_object_handlers.count_elements)))", "memset(std_object_handlers.del_ref, 0, sizeof (*(std_object_handlers.del_ref)))", "memset(std_object_handlers.get, 0, sizeof (*(std_object_handlers.get)))", "memset(std_object_handlers.get_class_entry, 0, sizeof (*(std_object_handlers.get_class_entry)))", "memset(std_object_handlers.get_class_name, 0, sizeof (*(std_object_handlers.get_class_name)))", "memset(std_object_handlers.get_closure, 0, sizeof (*(std_object_handlers.get_closure)))", "memset(std_object_handlers.get_constructor, 0, sizeof (*(std_object_handlers.get_constructor)))", "memset(std_object_handlers.get_debug_info, 0, sizeof (*(std_object_handlers.get_debug_info)))", "memset(std_object_handlers.get_method, 0, sizeof (*(std_object_handlers.get_method)))", "memset(std_object_handlers.get_properties, 0, sizeof (*(std_object_handlers.get_properties)))", "memset(std_object_handlers.get_property_ptr_ptr, 0, sizeof (*(std_object_handlers.get_property_ptr_ptr)))", "memset(std_object_handlers.has_dimension, 0, sizeof (*(std_object_handlers.has_dimension)))", "memset(std_object_handlers.has_property, 0, sizeof (*(std_object_handlers.has_property)))", "memset(std_object_handlers.read_dimension, 0, sizeof (*(std_object_handlers.read_dimension)))", "memset(std_object_handlers.read_property, 0, sizeof (*(std_object_handlers.read_property)))", "memset(std_object_handlers.set, 0, sizeof (*(std_object_handlers.set)))", "memset(std_object_handlers.unset_dimension, 0, sizeof (*(std_object_handlers.unset_dimension)))", "memset(std_object_handlers.unset_property, 0, sizeof (*(std_object_handlers.unset_property)))", "memset(std_object_handlers.write_dimension, 0, sizeof (*(std_object_handlers.write_dimension)))", "memset(std_object_handlers.write_property, 0, sizeof (*(std_object_handlers.write_property)))", "(intern)->current.pos++", "(intern)->u.regex.pce->refcount++", "(intern)->u.regex.pce->refcount--", "(method)++", "_array_init(((intern)->u.caching.zcache), 0)", "_efree(((intern)))", "_efree(((intern)->current.str_key))", "_efree(((intern)->u.regex.regex))", "_efree(((method)))", "_zval_copy_ctor(((intern)->u.caching.zstr))", "_zval_ptr_dtor((&(intern)->current.data))", "_zval_ptr_dtor((&(intern)->inner.zobject))", "_zval_ptr_dtor((&(intern)->u.append.zarrayit))", "_zval_ptr_dtor((&(intern)->u.caching.zcache))", "_zval_ptr_dtor((&(intern)->u.caching.zchildren))", "_zval_ptr_dtor((&(intern)->u.caching.zstr))", "_zval_ptr_dtor((&*(object_ptr)))", "function_handler = (**(object_ptr)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((object_ptr), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (method), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (key))", "function_handler = (function_handler)", "function_handler = std_object_handlers.get_method((object_ptr), method, method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, (method), method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, method, method_len, (key))", "intern = (intern)", "memset((intern), 0, sizeof(spl_dual_it_object))", "php_error_docref0(((void *)0), (1 << 0L), \"The %s instance wasn't initialized properly\", zend_get_class_entry(&(**(object_ptr)))->name)", "spl_append_it_fetch((intern))", "spl_append_it_next((intern))", "spl_append_it_next_iterator((intern))", "spl_caching_it_next((intern))", "spl_caching_it_rewind((intern))", "spl_dual_it_fetch((intern), 0)", "spl_dual_it_fetch((intern), 1)", "spl_dual_it_free((intern))", "spl_dual_it_next((intern), 0)", "spl_dual_it_next((intern), 1)", "spl_dual_it_require((intern))", "spl_dual_it_rewind((intern))", "zend_call_method(&(intern)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (method))", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->current.data)", "zval_addref_p(*((object_ptr)))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, method, method_len, key)", "intern = (spl_dual_it_object *)zend_object_store_get_object(*object_ptr)", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "if (__is_neg(\"\", \"L1267\", 88, &(intern), sizeof (intern), &(intern->inner.zobject), sizeof (intern->inner.zobject), &((*intern->inner.zobject).value.obj.handlers), sizeof ((*intern->inner.zobject).value.obj.handlers), &((*intern->inner.zobject).value.obj.handlers->get_method), sizeof ((*intern->inner.zobject).value.obj.handlers->get_method), &(object_ptr), sizeof (object_ptr), &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern->inner.ce), sizeof (intern->inner.ce), &(key), sizeof (key), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &((*intern->inner.zobject).refcount__gc), sizeof ((*intern->inner.zobject).refcount__gc), &((*intern->inner.zobject).type), sizeof ((*intern->inner.zobject).type), &((*intern->inner.zobject).is_ref__gc), sizeof ((*intern->inner.zobject).is_ref__gc), &((*intern->inner.zobject).value.obj.handle), sizeof ((*intern->inner.zobject).value.obj.handle), &((*intern->inner.zobject).value.obj.handlers->add_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->add_ref), &((*intern->inner.zobject).value.obj.handlers->del_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->del_ref), &((*intern->inner.zobject).value.obj.handlers->clone_obj), sizeof ((*intern->inner.zobject).value.obj.handlers->clone_obj), &((*intern->inner.zobject).value.obj.handlers->read_property), sizeof ((*intern->inner.zobject).value.obj.handlers->read_property), &((*intern->inner.zobject).value.obj.handlers->write_property), sizeof ((*intern->inner.zobject).value.obj.handlers->write_property), &((*intern->inner.zobject).value.obj.handlers->read_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->read_dimension), &((*intern->inner.zobject).value.obj.handlers->write_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->write_dimension), &((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), sizeof ((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), &((*intern->inner.zobject).value.obj.handlers->get), sizeof ((*intern->inner.zobject).value.obj.handlers->get), &((*intern->inner.zobject).value.obj.handlers->set), sizeof ((*intern->inner.zobject).value.obj.handlers->set), &((*intern->inner.zobject).value.obj.handlers->has_property), sizeof ((*intern->inner.zobject).value.obj.handlers->has_property), &((*intern->inner.zobject).value.obj.handlers->unset_property), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_property), &((*intern->inner.zobject).value.obj.handlers->has_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->has_dimension), &((*intern->inner.zobject).value.obj.handlers->unset_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_dimension), &((*intern->inner.zobject).value.obj.handlers->get_properties), sizeof ((*intern->inner.zobject).value.obj.handlers->get_properties), &((*intern->inner.zobject).value.obj.handlers->call_method), sizeof ((*intern->inner.zobject).value.obj.handlers->call_method), &((*intern->inner.zobject).value.obj.handlers->get_constructor), sizeof ((*intern->inner.zobject).value.obj.handlers->get_constructor), &((*intern->inner.zobject).value.obj.handlers->get_class_entry), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_entry), &((*intern->inner.zobject).value.obj.handlers->get_class_name), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_name), &((*intern->inner.zobject).value.obj.handlers->compare_objects), sizeof ((*intern->inner.zobject).value.obj.handlers->compare_objects), &((*intern->inner.zobject).value.obj.handlers->cast_object), sizeof ((*intern->inner.zobject).value.obj.handlers->cast_object), &((*intern->inner.zobject).value.obj.handlers->count_elements), sizeof ((*intern->inner.zobject).value.obj.handlers->count_elements), &((*intern->inner.zobject).value.obj.handlers->get_debug_info), sizeof ((*intern->inner.zobject).value.obj.handlers->get_debug_info), &((*intern->inner.zobject).value.obj.handlers->get_closure), sizeof ((*intern->inner.zobject).value.obj.handlers->get_closure)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	2,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	3,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	4,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	5,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	6,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	7,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	8,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	9,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	10,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	11,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	12,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	13,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	14,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	15,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	16,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	17,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	18,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	19,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	20,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	21,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	22,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	23,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	24,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	25,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	26,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	27,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	28,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	29,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	30,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	31,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	32,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	33,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	34,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	35,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	36,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	37,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	38,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	39,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	40,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	41,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	42,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	43,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	44,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	45,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	46,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	47,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	48,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	49,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	50,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	51,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	52,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	53,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	54,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	55,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	56,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	57,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	58,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	59,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	60,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	61,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	62,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	63,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	64,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	65,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	66,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	67,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	68,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	69,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	70,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	71,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	72,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	73,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	74,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	75,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	76,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	77,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	78,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	79,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	80,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	81,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	82,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	83,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	84,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	85,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	86,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	87,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	88,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	89,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	90,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	91,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	92,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	93,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	94,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	95,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	96,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	97,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	98,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	99,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	100,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	101,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	102,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	103,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	104,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	105,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	106,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	107,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	108,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	109,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	110,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	111,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	112,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	113,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	114,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	115,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	116,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	117,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	118,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	119,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	120,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	121,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	122,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	123,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	124,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	125,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	126,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	127,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	128,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	129,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	130,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	131,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	132,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	133,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	134,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	135,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	136,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	137,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	138,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	139,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	140,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	141,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	142,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	143,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	144,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	145,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	146,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	147,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	148,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	149,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	150,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	151,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	152,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	153,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	154,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	155,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	156,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	157,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	158,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	159,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	160,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	161,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	162,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	163,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	164,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	165,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	166,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	167,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	168,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	169,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	170,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	171,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	172,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	173,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	174,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	175,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	176,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	177,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	178,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	179,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	180,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	181,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	182,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	183,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	184,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	185,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	186,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	187,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	188,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	189,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	190,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	191,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	192,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	193,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	194,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	195,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	196,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	197,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	198,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	199,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	200,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	201,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	202,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	203,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	204,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	205,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	206,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	207,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	208,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	209,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	210,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	211,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	212,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	213,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	214,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	215,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	216,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	217,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	218,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	219,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	220,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	221,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	222,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	223,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	224,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	225,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	226,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	227,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	228,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	229,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	230,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	231,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	232,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	233,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	234,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	235,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	236,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	237,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	238,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	239,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	240,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	241,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	242,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	243,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	244,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	245,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	246,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	247,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	248,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	249,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	250,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	251,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	252,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	253,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	254,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	255,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	256,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	257,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	258,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	259,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	260,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	261,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	262,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	263,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	264,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	265,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	266,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	267,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	268,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	269,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	270,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	271,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	272,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	273,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	274,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	275,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	276,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	277,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	278,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	279,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	280,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	281,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	282,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	283,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	284,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	285,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	286,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	287,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	288,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	289,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	290,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	291,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	292,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	293,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	294,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	295,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	296,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	297,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	298,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	299,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	300,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	301,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	302,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	303,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	304,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	305,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	306,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	307,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	308,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	309,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	310,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	311,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	312,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	313,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	314,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	315,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	316,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	317,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	318,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	319,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	320,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	321,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	322,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	323,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	324,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	325,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	326,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	327,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	328,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	329,
									"scores":	[-6.9720416280807047, -7.0372268111807053, -9.5026558020807048, -7.9854520973807048, -5.369723271380705, -4.8475194713807053, -4.1356953543807045, -6.4921682813807049, -8.2314910111807045, -4.8826692681807051, -7.9854520973807048, -8.1963412143807037, -7.4845170973807047, -8.2314910111807045, -7.9854520973807048, -7.9854520973807048, -8.1963412143807037, -8.1963412143807037, -8.1963412143807037, -7.9854520973807048, -7.9854520973807048, -8.1963412143807037, -8.1963412143807037, -8.1963412143807037, -8.1963412143807037, -8.1963412143807037, -8.1963412143807037, -8.1963412143807037, -8.1963412143807037, -8.1963412143807037, -8.1963412143807037, -8.1963412143807037, -8.1963412143807037, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -8.1963412143807037, -7.9854520973807048, -8.1963412143807037, -7.9854520973807048, -8.1963412143807037, -8.1963412143807037, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -8.2314910111807045, -8.2314910111807045, -8.2314910111807045, -8.1963412143807037, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -8.2314910111807045, -8.2314910111807045, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048, -7.9854520973807048]
								}]
						}, {
							"switch":	5,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1267,
							"begin_column":	4,
							"end_line":	1270,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L1267\", 88, &(intern), sizeof (intern), &(intern->inner.zobject), sizeof (intern->inner.zobject), &((*intern->inner.zobject).value.obj.handlers), sizeof ((*intern->inner.zobject).value.obj.handlers), &((*intern->inner.zobject).value.obj.handlers->get_method), sizeof ((*intern->inner.zobject).value.obj.handlers->get_method), &(object_ptr), sizeof (object_ptr), &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern->inner.ce), sizeof (intern->inner.ce), &(key), sizeof (key), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &((*intern->inner.zobject).refcount__gc), sizeof ((*intern->inner.zobject).refcount__gc), &((*intern->inner.zobject).type), sizeof ((*intern->inner.zobject).type), &((*intern->inner.zobject).is_ref__gc), sizeof ((*intern->inner.zobject).is_ref__gc), &((*intern->inner.zobject).value.obj.handle), sizeof ((*intern->inner.zobject).value.obj.handle), &((*intern->inner.zobject).value.obj.handlers->add_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->add_ref), &((*intern->inner.zobject).value.obj.handlers->del_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->del_ref), &((*intern->inner.zobject).value.obj.handlers->clone_obj), sizeof ((*intern->inner.zobject).value.obj.handlers->clone_obj), &((*intern->inner.zobject).value.obj.handlers->read_property), sizeof ((*intern->inner.zobject).value.obj.handlers->read_property), &((*intern->inner.zobject).value.obj.handlers->write_property), sizeof ((*intern->inner.zobject).value.obj.handlers->write_property), &((*intern->inner.zobject).value.obj.handlers->read_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->read_dimension), &((*intern->inner.zobject).value.obj.handlers->write_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->write_dimension), &((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), sizeof ((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), &((*intern->inner.zobject).value.obj.handlers->get), sizeof ((*intern->inner.zobject).value.obj.handlers->get), &((*intern->inner.zobject).value.obj.handlers->set), sizeof ((*intern->inner.zobject).value.obj.handlers->set), &((*intern->inner.zobject).value.obj.handlers->has_property), sizeof ((*intern->inner.zobject).value.obj.handlers->has_property), &((*intern->inner.zobject).value.obj.handlers->unset_property), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_property), &((*intern->inner.zobject).value.obj.handlers->has_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->has_dimension), &((*intern->inner.zobject).value.obj.handlers->unset_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_dimension), &((*intern->inner.zobject).value.obj.handlers->get_properties), sizeof ((*intern->inner.zobject).value.obj.handlers->get_properties), &((*intern->inner.zobject).value.obj.handlers->call_method), sizeof ((*intern->inner.zobject).value.obj.handlers->call_method), &((*intern->inner.zobject).value.obj.handlers->get_constructor), sizeof ((*intern->inner.zobject).value.obj.handlers->get_constructor), &((*intern->inner.zobject).value.obj.handlers->get_class_entry), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_entry), &((*intern->inner.zobject).value.obj.handlers->get_class_name), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_name), &((*intern->inner.zobject).value.obj.handlers->compare_objects), sizeof ((*intern->inner.zobject).value.obj.handlers->compare_objects), &((*intern->inner.zobject).value.obj.handlers->cast_object), sizeof ((*intern->inner.zobject).value.obj.handlers->cast_object), &((*intern->inner.zobject).value.obj.handlers->count_elements), sizeof ((*intern->inner.zobject).value.obj.handlers->count_elements), &((*intern->inner.zobject).value.obj.handlers->get_debug_info), sizeof ((*intern->inner.zobject).value.obj.handlers->get_debug_info), &((*intern->inner.zobject).value.obj.handlers->get_closure), sizeof ((*intern->inner.zobject).value.obj.handlers->get_closure))) {\n    *object_ptr = intern->inner.zobject;\n    function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n}\n", "if (((*intern->inner.zobject).value.obj.handlers->get_method) || __is_neg(\"\", \"L1267\", 88, &(intern), sizeof (intern), &(intern->inner.zobject), sizeof (intern->inner.zobject), &((*intern->inner.zobject).value.obj.handlers), sizeof ((*intern->inner.zobject).value.obj.handlers), &((*intern->inner.zobject).value.obj.handlers->get_method), sizeof ((*intern->inner.zobject).value.obj.handlers->get_method), &(object_ptr), sizeof (object_ptr), &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern->inner.ce), sizeof (intern->inner.ce), &(key), sizeof (key), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &((*intern->inner.zobject).refcount__gc), sizeof ((*intern->inner.zobject).refcount__gc), &((*intern->inner.zobject).type), sizeof ((*intern->inner.zobject).type), &((*intern->inner.zobject).is_ref__gc), sizeof ((*intern->inner.zobject).is_ref__gc), &((*intern->inner.zobject).value.obj.handle), sizeof ((*intern->inner.zobject).value.obj.handle), &((*intern->inner.zobject).value.obj.handlers->add_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->add_ref), &((*intern->inner.zobject).value.obj.handlers->del_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->del_ref), &((*intern->inner.zobject).value.obj.handlers->clone_obj), sizeof ((*intern->inner.zobject).value.obj.handlers->clone_obj), &((*intern->inner.zobject).value.obj.handlers->read_property), sizeof ((*intern->inner.zobject).value.obj.handlers->read_property), &((*intern->inner.zobject).value.obj.handlers->write_property), sizeof ((*intern->inner.zobject).value.obj.handlers->write_property), &((*intern->inner.zobject).value.obj.handlers->read_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->read_dimension), &((*intern->inner.zobject).value.obj.handlers->write_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->write_dimension), &((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), sizeof ((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), &((*intern->inner.zobject).value.obj.handlers->get), sizeof ((*intern->inner.zobject).value.obj.handlers->get), &((*intern->inner.zobject).value.obj.handlers->set), sizeof ((*intern->inner.zobject).value.obj.handlers->set), &((*intern->inner.zobject).value.obj.handlers->has_property), sizeof ((*intern->inner.zobject).value.obj.handlers->has_property), &((*intern->inner.zobject).value.obj.handlers->unset_property), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_property), &((*intern->inner.zobject).value.obj.handlers->has_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->has_dimension), &((*intern->inner.zobject).value.obj.handlers->unset_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_dimension), &((*intern->inner.zobject).value.obj.handlers->get_properties), sizeof ((*intern->inner.zobject).value.obj.handlers->get_properties), &((*intern->inner.zobject).value.obj.handlers->call_method), sizeof ((*intern->inner.zobject).value.obj.handlers->call_method), &((*intern->inner.zobject).value.obj.handlers->get_constructor), sizeof ((*intern->inner.zobject).value.obj.handlers->get_constructor), &((*intern->inner.zobject).value.obj.handlers->get_class_entry), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_entry), &((*intern->inner.zobject).value.obj.handlers->get_class_name), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_name), &((*intern->inner.zobject).value.obj.handlers->compare_objects), sizeof ((*intern->inner.zobject).value.obj.handlers->compare_objects), &((*intern->inner.zobject).value.obj.handlers->cast_object), sizeof ((*intern->inner.zobject).value.obj.handlers->cast_object), &((*intern->inner.zobject).value.obj.handlers->count_elements), sizeof ((*intern->inner.zobject).value.obj.handlers->count_elements), &((*intern->inner.zobject).value.obj.handlers->get_debug_info), sizeof ((*intern->inner.zobject).value.obj.handlers->get_debug_info), &((*intern->inner.zobject).value.obj.handlers->get_closure), sizeof ((*intern->inner.zobject).value.obj.handlers->get_closure))) {\n    *object_ptr = intern->inner.zobject;\n    function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n}\n", "if (((*intern->inner.zobject).value.obj.handlers->get_method) && !__is_neg(\"\", \"L1267\", 88, &(intern), sizeof (intern), &(intern->inner.zobject), sizeof (intern->inner.zobject), &((*intern->inner.zobject).value.obj.handlers), sizeof ((*intern->inner.zobject).value.obj.handlers), &((*intern->inner.zobject).value.obj.handlers->get_method), sizeof ((*intern->inner.zobject).value.obj.handlers->get_method), &(object_ptr), sizeof (object_ptr), &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern->inner.ce), sizeof (intern->inner.ce), &(key), sizeof (key), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &((*intern->inner.zobject).refcount__gc), sizeof ((*intern->inner.zobject).refcount__gc), &((*intern->inner.zobject).type), sizeof ((*intern->inner.zobject).type), &((*intern->inner.zobject).is_ref__gc), sizeof ((*intern->inner.zobject).is_ref__gc), &((*intern->inner.zobject).value.obj.handle), sizeof ((*intern->inner.zobject).value.obj.handle), &((*intern->inner.zobject).value.obj.handlers->add_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->add_ref), &((*intern->inner.zobject).value.obj.handlers->del_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->del_ref), &((*intern->inner.zobject).value.obj.handlers->clone_obj), sizeof ((*intern->inner.zobject).value.obj.handlers->clone_obj), &((*intern->inner.zobject).value.obj.handlers->read_property), sizeof ((*intern->inner.zobject).value.obj.handlers->read_property), &((*intern->inner.zobject).value.obj.handlers->write_property), sizeof ((*intern->inner.zobject).value.obj.handlers->write_property), &((*intern->inner.zobject).value.obj.handlers->read_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->read_dimension), &((*intern->inner.zobject).value.obj.handlers->write_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->write_dimension), &((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), sizeof ((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), &((*intern->inner.zobject).value.obj.handlers->get), sizeof ((*intern->inner.zobject).value.obj.handlers->get), &((*intern->inner.zobject).value.obj.handlers->set), sizeof ((*intern->inner.zobject).value.obj.handlers->set), &((*intern->inner.zobject).value.obj.handlers->has_property), sizeof ((*intern->inner.zobject).value.obj.handlers->has_property), &((*intern->inner.zobject).value.obj.handlers->unset_property), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_property), &((*intern->inner.zobject).value.obj.handlers->has_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->has_dimension), &((*intern->inner.zobject).value.obj.handlers->unset_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_dimension), &((*intern->inner.zobject).value.obj.handlers->get_properties), sizeof ((*intern->inner.zobject).value.obj.handlers->get_properties), &((*intern->inner.zobject).value.obj.handlers->call_method), sizeof ((*intern->inner.zobject).value.obj.handlers->call_method), &((*intern->inner.zobject).value.obj.handlers->get_constructor), sizeof ((*intern->inner.zobject).value.obj.handlers->get_constructor), &((*intern->inner.zobject).value.obj.handlers->get_class_entry), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_entry), &((*intern->inner.zobject).value.obj.handlers->get_class_name), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_name), &((*intern->inner.zobject).value.obj.handlers->compare_objects), sizeof ((*intern->inner.zobject).value.obj.handlers->compare_objects), &((*intern->inner.zobject).value.obj.handlers->cast_object), sizeof ((*intern->inner.zobject).value.obj.handlers->cast_object), &((*intern->inner.zobject).value.obj.handlers->count_elements), sizeof ((*intern->inner.zobject).value.obj.handlers->count_elements), &((*intern->inner.zobject).value.obj.handlers->get_debug_info), sizeof ((*intern->inner.zobject).value.obj.handlers->get_debug_info), &((*intern->inner.zobject).value.obj.handlers->get_closure), sizeof ((*intern->inner.zobject).value.obj.handlers->get_closure))) {\n    *object_ptr = intern->inner.zobject;\n    function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.6793490155281456, -2.8984418255281454, -4.6991028155281462, -3.8338487155281458, -1.6658844155281436, -2.8642704155281455, -2.0729993855281457, -3.6452064265281461, -4.5917368155281455, -3.1528985155281455, -3.8338487155281458, -4.3031087155281451, -3.5118376855281461, -4.5917368155281455, -3.8338487155281458, -3.8338487155281458, -4.3031087155281451, -4.3031087155281451, -4.3031087155281451, -3.8338487155281458, -3.8338487155281458, -4.3031087155281451, -4.3031087155281451, -4.3031087155281451, -4.3031087155281451, -4.3031087155281451, -4.3031087155281451, -4.3031087155281451, -4.3031087155281451, -4.3031087155281451, -4.3031087155281451, -4.3031087155281451, -4.3031087155281451, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -4.3031087155281451, -3.8338487155281458, -4.3031087155281451, -3.8338487155281458, -4.3031087155281451, -4.3031087155281451, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -4.5917368155281455, -4.5917368155281455, -4.5917368155281455, -4.3031087155281451, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -4.5917368155281455, -4.5917368155281455, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458, -3.8338487155281458]
								}, {
									"case":	2,
									"scores":	[-3.9687276804281453, -3.1878204904281455, -4.9884814804281454, -4.1232273804281458, -1.955263080428145, -3.1536490804281456, -2.3623780504281457, -3.9345850914281453, -4.8811154804281456, -3.4422771804281451, -4.1232273804281458, -4.5924873804281452, -3.8012163504281453, -4.8811154804281456, -4.1232273804281458, -4.1232273804281458, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.1232273804281458, -4.1232273804281458, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.5924873804281452, -4.1232273804281458, -4.5924873804281452, -4.1232273804281458, -4.5924873804281452, -4.5924873804281452, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.8811154804281456, -4.8811154804281456, -4.8811154804281456, -4.5924873804281452, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.8811154804281456, -4.8811154804281456, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458]
								}, {
									"case":	3,
									"scores":	[-3.9687276804281453, -3.1878204904281455, -4.9884814804281454, -4.1232273804281458, -1.955263080428145, -3.1536490804281456, -2.3623780504281457, -3.9345850914281453, -4.8811154804281456, -3.4422771804281451, -4.1232273804281458, -4.5924873804281452, -3.8012163504281453, -4.8811154804281456, -4.1232273804281458, -4.1232273804281458, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.1232273804281458, -4.1232273804281458, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.5924873804281452, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.5924873804281452, -4.1232273804281458, -4.5924873804281452, -4.1232273804281458, -4.5924873804281452, -4.5924873804281452, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.8811154804281456, -4.8811154804281456, -4.8811154804281456, -4.5924873804281452, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.8811154804281456, -4.8811154804281456, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458, -4.1232273804281458]
								}]
						}, {
							"switch":	10,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1267,
							"begin_column":	4,
							"end_line":	1270,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L1267\", 88, &(intern), sizeof (intern), &(intern->inner.zobject), sizeof (intern->inner.zobject), &((*intern->inner.zobject).value.obj.handlers), sizeof ((*intern->inner.zobject).value.obj.handlers), &((*intern->inner.zobject).value.obj.handlers->get_method), sizeof ((*intern->inner.zobject).value.obj.handlers->get_method), &(object_ptr), sizeof (object_ptr), &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern->inner.ce), sizeof (intern->inner.ce), &(key), sizeof (key), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &((*intern->inner.zobject).refcount__gc), sizeof ((*intern->inner.zobject).refcount__gc), &((*intern->inner.zobject).type), sizeof ((*intern->inner.zobject).type), &((*intern->inner.zobject).is_ref__gc), sizeof ((*intern->inner.zobject).is_ref__gc), &((*intern->inner.zobject).value.obj.handle), sizeof ((*intern->inner.zobject).value.obj.handle), &((*intern->inner.zobject).value.obj.handlers->add_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->add_ref), &((*intern->inner.zobject).value.obj.handlers->del_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->del_ref), &((*intern->inner.zobject).value.obj.handlers->clone_obj), sizeof ((*intern->inner.zobject).value.obj.handlers->clone_obj), &((*intern->inner.zobject).value.obj.handlers->read_property), sizeof ((*intern->inner.zobject).value.obj.handlers->read_property), &((*intern->inner.zobject).value.obj.handlers->write_property), sizeof ((*intern->inner.zobject).value.obj.handlers->write_property), &((*intern->inner.zobject).value.obj.handlers->read_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->read_dimension), &((*intern->inner.zobject).value.obj.handlers->write_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->write_dimension), &((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), sizeof ((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), &((*intern->inner.zobject).value.obj.handlers->get), sizeof ((*intern->inner.zobject).value.obj.handlers->get), &((*intern->inner.zobject).value.obj.handlers->set), sizeof ((*intern->inner.zobject).value.obj.handlers->set), &((*intern->inner.zobject).value.obj.handlers->has_property), sizeof ((*intern->inner.zobject).value.obj.handlers->has_property), &((*intern->inner.zobject).value.obj.handlers->unset_property), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_property), &((*intern->inner.zobject).value.obj.handlers->has_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->has_dimension), &((*intern->inner.zobject).value.obj.handlers->unset_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_dimension), &((*intern->inner.zobject).value.obj.handlers->get_properties), sizeof ((*intern->inner.zobject).value.obj.handlers->get_properties), &((*intern->inner.zobject).value.obj.handlers->call_method), sizeof ((*intern->inner.zobject).value.obj.handlers->call_method), &((*intern->inner.zobject).value.obj.handlers->get_constructor), sizeof ((*intern->inner.zobject).value.obj.handlers->get_constructor), &((*intern->inner.zobject).value.obj.handlers->get_class_entry), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_entry), &((*intern->inner.zobject).value.obj.handlers->get_class_name), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_name), &((*intern->inner.zobject).value.obj.handlers->compare_objects), sizeof ((*intern->inner.zobject).value.obj.handlers->compare_objects), &((*intern->inner.zobject).value.obj.handlers->cast_object), sizeof ((*intern->inner.zobject).value.obj.handlers->cast_object), &((*intern->inner.zobject).value.obj.handlers->count_elements), sizeof ((*intern->inner.zobject).value.obj.handlers->count_elements), &((*intern->inner.zobject).value.obj.handlers->get_debug_info), sizeof ((*intern->inner.zobject).value.obj.handlers->get_debug_info), &((*intern->inner.zobject).value.obj.handlers->get_closure), sizeof ((*intern->inner.zobject).value.obj.handlers->get_closure)))\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n", "if (!__is_neg(\"\", \"L1267\", 88, &(intern), sizeof (intern), &(intern->inner.zobject), sizeof (intern->inner.zobject), &((*intern->inner.zobject).value.obj.handlers), sizeof ((*intern->inner.zobject).value.obj.handlers), &((*intern->inner.zobject).value.obj.handlers->get_method), sizeof ((*intern->inner.zobject).value.obj.handlers->get_method), &(object_ptr), sizeof (object_ptr), &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern->inner.ce), sizeof (intern->inner.ce), &(key), sizeof (key), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &((*intern->inner.zobject).refcount__gc), sizeof ((*intern->inner.zobject).refcount__gc), &((*intern->inner.zobject).type), sizeof ((*intern->inner.zobject).type), &((*intern->inner.zobject).is_ref__gc), sizeof ((*intern->inner.zobject).is_ref__gc), &((*intern->inner.zobject).value.obj.handle), sizeof ((*intern->inner.zobject).value.obj.handle), &((*intern->inner.zobject).value.obj.handlers->add_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->add_ref), &((*intern->inner.zobject).value.obj.handlers->del_ref), sizeof ((*intern->inner.zobject).value.obj.handlers->del_ref), &((*intern->inner.zobject).value.obj.handlers->clone_obj), sizeof ((*intern->inner.zobject).value.obj.handlers->clone_obj), &((*intern->inner.zobject).value.obj.handlers->read_property), sizeof ((*intern->inner.zobject).value.obj.handlers->read_property), &((*intern->inner.zobject).value.obj.handlers->write_property), sizeof ((*intern->inner.zobject).value.obj.handlers->write_property), &((*intern->inner.zobject).value.obj.handlers->read_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->read_dimension), &((*intern->inner.zobject).value.obj.handlers->write_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->write_dimension), &((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), sizeof ((*intern->inner.zobject).value.obj.handlers->get_property_ptr_ptr), &((*intern->inner.zobject).value.obj.handlers->get), sizeof ((*intern->inner.zobject).value.obj.handlers->get), &((*intern->inner.zobject).value.obj.handlers->set), sizeof ((*intern->inner.zobject).value.obj.handlers->set), &((*intern->inner.zobject).value.obj.handlers->has_property), sizeof ((*intern->inner.zobject).value.obj.handlers->has_property), &((*intern->inner.zobject).value.obj.handlers->unset_property), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_property), &((*intern->inner.zobject).value.obj.handlers->has_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->has_dimension), &((*intern->inner.zobject).value.obj.handlers->unset_dimension), sizeof ((*intern->inner.zobject).value.obj.handlers->unset_dimension), &((*intern->inner.zobject).value.obj.handlers->get_properties), sizeof ((*intern->inner.zobject).value.obj.handlers->get_properties), &((*intern->inner.zobject).value.obj.handlers->call_method), sizeof ((*intern->inner.zobject).value.obj.handlers->call_method), &((*intern->inner.zobject).value.obj.handlers->get_constructor), sizeof ((*intern->inner.zobject).value.obj.handlers->get_constructor), &((*intern->inner.zobject).value.obj.handlers->get_class_entry), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_entry), &((*intern->inner.zobject).value.obj.handlers->get_class_name), sizeof ((*intern->inner.zobject).value.obj.handlers->get_class_name), &((*intern->inner.zobject).value.obj.handlers->compare_objects), sizeof ((*intern->inner.zobject).value.obj.handlers->compare_objects), &((*intern->inner.zobject).value.obj.handlers->cast_object), sizeof ((*intern->inner.zobject).value.obj.handlers->cast_object), &((*intern->inner.zobject).value.obj.handlers->count_elements), sizeof ((*intern->inner.zobject).value.obj.handlers->count_elements), &((*intern->inner.zobject).value.obj.handlers->get_debug_info), sizeof ((*intern->inner.zobject).value.obj.handlers->get_debug_info), &((*intern->inner.zobject).value.obj.handlers->get_closure), sizeof ((*intern->inner.zobject).value.obj.handlers->get_closure)) && ((*intern->inner.zobject).value.obj.handlers->get_method)) {\n    *object_ptr = intern->inner.zobject;\n    function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2206515073807047, -5.4397443173807041, -7.2404053073807049, -6.3751512073807044, -4.2071869073807049, -5.4055729073807051, -4.6143018773807043, -6.1865089183807047, -7.1330393073807041, -5.6942010073807046, -6.3751512073807044, -6.8444112073807046, -6.0531401773807048, -7.1330393073807041, -6.3751512073807044, -6.3751512073807044, -6.8444112073807046, -6.8444112073807046, -6.8444112073807046, -6.3751512073807044, -6.3751512073807044, -6.8444112073807046, -6.8444112073807046, -6.8444112073807046, -6.8444112073807046, -6.8444112073807046, -6.8444112073807046, -6.8444112073807046, -6.8444112073807046, -6.8444112073807046, -6.8444112073807046, -6.8444112073807046, -6.8444112073807046, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.8444112073807046, -6.3751512073807044, -6.8444112073807046, -6.3751512073807044, -6.8444112073807046, -6.8444112073807046, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -7.1330393073807041, -7.1330393073807041, -7.1330393073807041, -6.8444112073807046, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -7.1330393073807041, -7.1330393073807041, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044, -6.3751512073807044]
								}, {
									"case":	2,
									"scores":	[-4.5446745123807046, -6.3453355023807045, -5.4800814023807041, -5.3255817023807044, -6.2379695023807038, -3.3121171023807041, -4.5105031023807038, -3.7192320723807044, -5.2914391133807044, -4.7991312023807042, -5.4800814023807041, -5.9493414023807043, -5.1580703723807044, -6.2379695023807038, -5.4800814023807041, -5.4800814023807041, -5.9493414023807043, -5.9493414023807043, -5.9493414023807043, -5.4800814023807041, -5.4800814023807041, -5.9493414023807043, -5.9493414023807043, -5.9493414023807043, -5.9493414023807043, -5.9493414023807043, -5.9493414023807043, -5.9493414023807043, -5.9493414023807043, -5.9493414023807043, -5.9493414023807043, -5.9493414023807043, -5.9493414023807043, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.9493414023807043, -5.4800814023807041, -5.9493414023807043, -5.4800814023807041, -5.9493414023807043, -5.9493414023807043, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -6.2379695023807038, -6.2379695023807038, -6.2379695023807038, -5.9493414023807043, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -6.2379695023807038, -6.2379695023807038, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041, -5.4800814023807041]
								}]
						}]
				}, {
					"line":	1265,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [265], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131], [], [], [], [177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], [132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], [], [], [], [], [], []],
							"begin_line":	1266,
							"begin_column":	1,
							"end_line":	1266,
							"end_column":	1,
							"patch_codes":	["memset(&intern->current, 0, sizeof (*(&intern->current)))", "memset(&intern->dit_type, 0, sizeof (*(&intern->dit_type)))", "memset(&intern->inner, 0, sizeof (*(&intern->inner)))", "memset(&intern->inner.ce, 0, sizeof (*(&intern->inner.ce)))", "memset(&intern->inner.ce->__call, 0, sizeof (*(&intern->inner.ce->__call)))", "memset(&intern->inner.ce->__callstatic, 0, sizeof (*(&intern->inner.ce->__callstatic)))", "memset(&intern->inner.ce->__get, 0, sizeof (*(&intern->inner.ce->__get)))", "memset(&intern->inner.ce->__isset, 0, sizeof (*(&intern->inner.ce->__isset)))", "memset(&intern->inner.ce->__set, 0, sizeof (*(&intern->inner.ce->__set)))", "memset(&intern->inner.ce->__tostring, 0, sizeof (*(&intern->inner.ce->__tostring)))", "memset(&intern->inner.ce->__unset, 0, sizeof (*(&intern->inner.ce->__unset)))", "memset(&intern->inner.ce->ce_flags, 0, sizeof (*(&intern->inner.ce->ce_flags)))", "memset(&intern->inner.ce->clone, 0, sizeof (*(&intern->inner.ce->clone)))", "memset(&intern->inner.ce->constants_table, 0, sizeof (*(&intern->inner.ce->constants_table)))", "memset(&intern->inner.ce->constructor, 0, sizeof (*(&intern->inner.ce->constructor)))", "memset(&intern->inner.ce->create_object, 0, sizeof (*(&intern->inner.ce->create_object)))", "memset(&intern->inner.ce->default_properties_count, 0, sizeof (*(&intern->inner.ce->default_properties_count)))", "memset(&intern->inner.ce->default_properties_table, 0, sizeof (*(&intern->inner.ce->default_properties_table)))", "memset(&intern->inner.ce->default_static_members_count, 0, sizeof (*(&intern->inner.ce->default_static_members_count)))", "memset(&intern->inner.ce->default_static_members_table, 0, sizeof (*(&intern->inner.ce->default_static_members_table)))", "memset(&intern->inner.ce->destructor, 0, sizeof (*(&intern->inner.ce->destructor)))", "memset(&intern->inner.ce->function_table, 0, sizeof (*(&intern->inner.ce->function_table)))", "memset(&intern->inner.ce->get_iterator, 0, sizeof (*(&intern->inner.ce->get_iterator)))", "memset(&intern->inner.ce->get_static_method, 0, sizeof (*(&intern->inner.ce->get_static_method)))", "memset(&intern->inner.ce->info, 0, sizeof (*(&intern->inner.ce->info)))", "memset(&intern->inner.ce->interface_gets_implemented, 0, sizeof (*(&intern->inner.ce->interface_gets_implemented)))", "memset(&intern->inner.ce->interfaces, 0, sizeof (*(&intern->inner.ce->interfaces)))", "memset(&intern->inner.ce->iterator_funcs, 0, sizeof (*(&intern->inner.ce->iterator_funcs)))", "memset(&intern->inner.ce->name, 0, sizeof (*(&intern->inner.ce->name)))", "memset(&intern->inner.ce->name_length, 0, sizeof (*(&intern->inner.ce->name_length)))", "memset(&intern->inner.ce->num_interfaces, 0, sizeof (*(&intern->inner.ce->num_interfaces)))", "memset(&intern->inner.ce->num_traits, 0, sizeof (*(&intern->inner.ce->num_traits)))", "memset(&intern->inner.ce->parent, 0, sizeof (*(&intern->inner.ce->parent)))", "memset(&intern->inner.ce->properties_info, 0, sizeof (*(&intern->inner.ce->properties_info)))", "memset(&intern->inner.ce->refcount, 0, sizeof (*(&intern->inner.ce->refcount)))", "memset(&intern->inner.ce->serialize, 0, sizeof (*(&intern->inner.ce->serialize)))", "memset(&intern->inner.ce->serialize_func, 0, sizeof (*(&intern->inner.ce->serialize_func)))", "memset(&intern->inner.ce->static_members_table, 0, sizeof (*(&intern->inner.ce->static_members_table)))", "memset(&intern->inner.ce->trait_aliases, 0, sizeof (*(&intern->inner.ce->trait_aliases)))", "memset(&intern->inner.ce->trait_precedences, 0, sizeof (*(&intern->inner.ce->trait_precedences)))", "memset(&intern->inner.ce->traits, 0, sizeof (*(&intern->inner.ce->traits)))", "memset(&intern->inner.ce->type, 0, sizeof (*(&intern->inner.ce->type)))", "memset(&intern->inner.ce->unserialize, 0, sizeof (*(&intern->inner.ce->unserialize)))", "memset(&intern->inner.ce->unserialize_func, 0, sizeof (*(&intern->inner.ce->unserialize_func)))", "memset(&intern->inner.iterator, 0, sizeof (*(&intern->inner.iterator)))", "memset(&intern->inner.object, 0, sizeof (*(&intern->inner.object)))", "memset(&intern->inner.zobject, 0, sizeof (*(&intern->inner.zobject)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&std_object_handlers.add_ref, 0, sizeof (*(&std_object_handlers.add_ref)))", "memset(&std_object_handlers.call_method, 0, sizeof (*(&std_object_handlers.call_method)))", "memset(&std_object_handlers.cast_object, 0, sizeof (*(&std_object_handlers.cast_object)))", "memset(&std_object_handlers.clone_obj, 0, sizeof (*(&std_object_handlers.clone_obj)))", "memset(&std_object_handlers.compare_objects, 0, sizeof (*(&std_object_handlers.compare_objects)))", "memset(&std_object_handlers.count_elements, 0, sizeof (*(&std_object_handlers.count_elements)))", "memset(&std_object_handlers.del_ref, 0, sizeof (*(&std_object_handlers.del_ref)))", "memset(&std_object_handlers.get, 0, sizeof (*(&std_object_handlers.get)))", "memset(&std_object_handlers.get_class_entry, 0, sizeof (*(&std_object_handlers.get_class_entry)))", "memset(&std_object_handlers.get_class_name, 0, sizeof (*(&std_object_handlers.get_class_name)))", "memset(&std_object_handlers.get_closure, 0, sizeof (*(&std_object_handlers.get_closure)))", "memset(&std_object_handlers.get_constructor, 0, sizeof (*(&std_object_handlers.get_constructor)))", "memset(&std_object_handlers.get_debug_info, 0, sizeof (*(&std_object_handlers.get_debug_info)))", "memset(&std_object_handlers.get_method, 0, sizeof (*(&std_object_handlers.get_method)))", "memset(&std_object_handlers.get_properties, 0, sizeof (*(&std_object_handlers.get_properties)))", "memset(&std_object_handlers.get_property_ptr_ptr, 0, sizeof (*(&std_object_handlers.get_property_ptr_ptr)))", "memset(&std_object_handlers.has_dimension, 0, sizeof (*(&std_object_handlers.has_dimension)))", "memset(&std_object_handlers.has_property, 0, sizeof (*(&std_object_handlers.has_property)))", "memset(&std_object_handlers.read_dimension, 0, sizeof (*(&std_object_handlers.read_dimension)))", "memset(&std_object_handlers.read_property, 0, sizeof (*(&std_object_handlers.read_property)))", "memset(&std_object_handlers.set, 0, sizeof (*(&std_object_handlers.set)))", "memset(&std_object_handlers.unset_dimension, 0, sizeof (*(&std_object_handlers.unset_dimension)))", "memset(&std_object_handlers.unset_property, 0, sizeof (*(&std_object_handlers.unset_property)))", "memset(&std_object_handlers.write_dimension, 0, sizeof (*(&std_object_handlers.write_dimension)))", "memset(&std_object_handlers.write_property, 0, sizeof (*(&std_object_handlers.write_property)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->inner.ce, 0, sizeof (*(intern->inner.ce)))", "memset(intern->inner.ce->__call, 0, sizeof (*(intern->inner.ce->__call)))", "memset(intern->inner.ce->__callstatic, 0, sizeof (*(intern->inner.ce->__callstatic)))", "memset(intern->inner.ce->__get, 0, sizeof (*(intern->inner.ce->__get)))", "memset(intern->inner.ce->__isset, 0, sizeof (*(intern->inner.ce->__isset)))", "memset(intern->inner.ce->__set, 0, sizeof (*(intern->inner.ce->__set)))", "memset(intern->inner.ce->__tostring, 0, sizeof (*(intern->inner.ce->__tostring)))", "memset(intern->inner.ce->__unset, 0, sizeof (*(intern->inner.ce->__unset)))", "memset(intern->inner.ce->clone, 0, sizeof (*(intern->inner.ce->clone)))", "memset(intern->inner.ce->constructor, 0, sizeof (*(intern->inner.ce->constructor)))", "memset(intern->inner.ce->create_object, 0, sizeof (*(intern->inner.ce->create_object)))", "memset(intern->inner.ce->default_properties_table, 0, sizeof (*(intern->inner.ce->default_properties_table)))", "memset(intern->inner.ce->default_static_members_table, 0, sizeof (*(intern->inner.ce->default_static_members_table)))", "memset(intern->inner.ce->destructor, 0, sizeof (*(intern->inner.ce->destructor)))", "memset(intern->inner.ce->get_iterator, 0, sizeof (*(intern->inner.ce->get_iterator)))", "memset(intern->inner.ce->get_static_method, 0, sizeof (*(intern->inner.ce->get_static_method)))", "memset(intern->inner.ce->interface_gets_implemented, 0, sizeof (*(intern->inner.ce->interface_gets_implemented)))", "memset(intern->inner.ce->interfaces, 0, sizeof (*(intern->inner.ce->interfaces)))", "memset(intern->inner.ce->name, 0, sizeof (*(intern->inner.ce->name)))", "memset(intern->inner.ce->parent, 0, sizeof (*(intern->inner.ce->parent)))", "memset(intern->inner.ce->serialize, 0, sizeof (*(intern->inner.ce->serialize)))", "memset(intern->inner.ce->serialize_func, 0, sizeof (*(intern->inner.ce->serialize_func)))", "memset(intern->inner.ce->static_members_table, 0, sizeof (*(intern->inner.ce->static_members_table)))", "memset(intern->inner.ce->trait_aliases, 0, sizeof (*(intern->inner.ce->trait_aliases)))", "memset(intern->inner.ce->trait_precedences, 0, sizeof (*(intern->inner.ce->trait_precedences)))", "memset(intern->inner.ce->traits, 0, sizeof (*(intern->inner.ce->traits)))", "memset(intern->inner.ce->unserialize, 0, sizeof (*(intern->inner.ce->unserialize)))", "memset(intern->inner.ce->unserialize_func, 0, sizeof (*(intern->inner.ce->unserialize_func)))", "memset(intern->inner.iterator, 0, sizeof (*(intern->inner.iterator)))", "memset(intern->inner.object, 0, sizeof (*(intern->inner.object)))", "memset(intern->inner.zobject, 0, sizeof (*(intern->inner.zobject)))", "memset(std_object_handlers.add_ref, 0, sizeof (*(std_object_handlers.add_ref)))", "memset(std_object_handlers.call_method, 0, sizeof (*(std_object_handlers.call_method)))", "memset(std_object_handlers.cast_object, 0, sizeof (*(std_object_handlers.cast_object)))", "memset(std_object_handlers.clone_obj, 0, sizeof (*(std_object_handlers.clone_obj)))", "memset(std_object_handlers.compare_objects, 0, sizeof (*(std_object_handlers.compare_objects)))", "memset(std_object_handlers.count_elements, 0, sizeof (*(std_object_handlers.count_elements)))", "memset(std_object_handlers.del_ref, 0, sizeof (*(std_object_handlers.del_ref)))", "memset(std_object_handlers.get, 0, sizeof (*(std_object_handlers.get)))", "memset(std_object_handlers.get_class_entry, 0, sizeof (*(std_object_handlers.get_class_entry)))", "memset(std_object_handlers.get_class_name, 0, sizeof (*(std_object_handlers.get_class_name)))", "memset(std_object_handlers.get_closure, 0, sizeof (*(std_object_handlers.get_closure)))", "memset(std_object_handlers.get_constructor, 0, sizeof (*(std_object_handlers.get_constructor)))", "memset(std_object_handlers.get_debug_info, 0, sizeof (*(std_object_handlers.get_debug_info)))", "memset(std_object_handlers.get_method, 0, sizeof (*(std_object_handlers.get_method)))", "memset(std_object_handlers.get_properties, 0, sizeof (*(std_object_handlers.get_properties)))", "memset(std_object_handlers.get_property_ptr_ptr, 0, sizeof (*(std_object_handlers.get_property_ptr_ptr)))", "memset(std_object_handlers.has_dimension, 0, sizeof (*(std_object_handlers.has_dimension)))", "memset(std_object_handlers.has_property, 0, sizeof (*(std_object_handlers.has_property)))", "memset(std_object_handlers.read_dimension, 0, sizeof (*(std_object_handlers.read_dimension)))", "memset(std_object_handlers.read_property, 0, sizeof (*(std_object_handlers.read_property)))", "memset(std_object_handlers.set, 0, sizeof (*(std_object_handlers.set)))", "memset(std_object_handlers.unset_dimension, 0, sizeof (*(std_object_handlers.unset_dimension)))", "memset(std_object_handlers.unset_property, 0, sizeof (*(std_object_handlers.unset_property)))", "memset(std_object_handlers.write_dimension, 0, sizeof (*(std_object_handlers.write_dimension)))", "memset(std_object_handlers.write_property, 0, sizeof (*(std_object_handlers.write_property)))", "(intern)->current.pos++", "(intern)->u.regex.pce->refcount++", "(intern)->u.regex.pce->refcount--", "(method)++", "_array_init(((intern)->u.caching.zcache), 0)", "_efree(((intern)))", "_efree(((intern)->current.str_key))", "_efree(((intern)->u.regex.regex))", "_efree(((method)))", "_zval_copy_ctor(((intern)->u.caching.zstr))", "_zval_ptr_dtor((&(intern)->current.data))", "_zval_ptr_dtor((&(intern)->inner.zobject))", "_zval_ptr_dtor((&(intern)->u.append.zarrayit))", "_zval_ptr_dtor((&(intern)->u.caching.zcache))", "_zval_ptr_dtor((&(intern)->u.caching.zchildren))", "_zval_ptr_dtor((&(intern)->u.caching.zstr))", "_zval_ptr_dtor((&*(object_ptr)))", "function_handler = (**(object_ptr)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((object_ptr), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (method), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (key))", "function_handler = (function_handler)", "function_handler = std_object_handlers.get_method((object_ptr), method, method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, (method), method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, method, method_len, (key))", "intern = (intern)", "memset((intern), 0, sizeof(spl_dual_it_object))", "php_error_docref0(((void *)0), (1 << 0L), \"The %s instance wasn't initialized properly\", zend_get_class_entry(&(**(object_ptr)))->name)", "spl_append_it_fetch((intern))", "spl_append_it_next((intern))", "spl_append_it_next_iterator((intern))", "spl_caching_it_next((intern))", "spl_caching_it_rewind((intern))", "spl_dual_it_fetch((intern), 0)", "spl_dual_it_fetch((intern), 1)", "spl_dual_it_free((intern))", "spl_dual_it_next((intern), 0)", "spl_dual_it_next((intern), 1)", "spl_dual_it_require((intern))", "spl_dual_it_rewind((intern))", "zend_call_method(&(intern)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (method))", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->current.data)", "zval_addref_p(*((object_ptr)))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, method, method_len, key)", "intern = (spl_dual_it_object *)zend_object_store_get_object(*object_ptr)", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "if (__is_neg(\"\", \"L1266\", 58, &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern), sizeof (intern), &(intern->inner.ce), sizeof (intern->inner.ce), &(intern->inner.zobject), sizeof (intern->inner.zobject), &(object_ptr), sizeof (object_ptr), &(key), sizeof (key), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.215063615190938]
								}, {
									"case":	2,
									"scores":	[-4.215063615190938]
								}, {
									"case":	3,
									"scores":	[-4.215063615190938]
								}, {
									"case":	4,
									"scores":	[-4.215063615190938]
								}, {
									"case":	5,
									"scores":	[-4.215063615190938]
								}, {
									"case":	6,
									"scores":	[-4.215063615190938]
								}, {
									"case":	7,
									"scores":	[-4.215063615190938]
								}, {
									"case":	8,
									"scores":	[-4.215063615190938]
								}, {
									"case":	9,
									"scores":	[-4.215063615190938]
								}, {
									"case":	10,
									"scores":	[-4.215063615190938]
								}, {
									"case":	11,
									"scores":	[-4.215063615190938]
								}, {
									"case":	12,
									"scores":	[-4.215063615190938]
								}, {
									"case":	13,
									"scores":	[-4.215063615190938]
								}, {
									"case":	14,
									"scores":	[-4.215063615190938]
								}, {
									"case":	15,
									"scores":	[-4.215063615190938]
								}, {
									"case":	16,
									"scores":	[-4.215063615190938]
								}, {
									"case":	17,
									"scores":	[-4.215063615190938]
								}, {
									"case":	18,
									"scores":	[-4.215063615190938]
								}, {
									"case":	19,
									"scores":	[-4.215063615190938]
								}, {
									"case":	20,
									"scores":	[-4.215063615190938]
								}, {
									"case":	21,
									"scores":	[-4.215063615190938]
								}, {
									"case":	22,
									"scores":	[-4.215063615190938]
								}, {
									"case":	23,
									"scores":	[-4.215063615190938]
								}, {
									"case":	24,
									"scores":	[-4.215063615190938]
								}, {
									"case":	25,
									"scores":	[-4.215063615190938]
								}, {
									"case":	26,
									"scores":	[-4.215063615190938]
								}, {
									"case":	27,
									"scores":	[-4.215063615190938]
								}, {
									"case":	28,
									"scores":	[-4.215063615190938]
								}, {
									"case":	29,
									"scores":	[-4.215063615190938]
								}, {
									"case":	30,
									"scores":	[-4.215063615190938]
								}, {
									"case":	31,
									"scores":	[-4.215063615190938]
								}, {
									"case":	32,
									"scores":	[-4.215063615190938]
								}, {
									"case":	33,
									"scores":	[-4.215063615190938]
								}, {
									"case":	34,
									"scores":	[-4.215063615190938]
								}, {
									"case":	35,
									"scores":	[-4.215063615190938]
								}, {
									"case":	36,
									"scores":	[-4.215063615190938]
								}, {
									"case":	37,
									"scores":	[-4.215063615190938]
								}, {
									"case":	38,
									"scores":	[-4.215063615190938]
								}, {
									"case":	39,
									"scores":	[-4.215063615190938]
								}, {
									"case":	40,
									"scores":	[-4.215063615190938]
								}, {
									"case":	41,
									"scores":	[-4.215063615190938]
								}, {
									"case":	42,
									"scores":	[-4.215063615190938]
								}, {
									"case":	43,
									"scores":	[-4.215063615190938]
								}, {
									"case":	44,
									"scores":	[-4.215063615190938]
								}, {
									"case":	45,
									"scores":	[-4.215063615190938]
								}, {
									"case":	46,
									"scores":	[-4.215063615190938]
								}, {
									"case":	47,
									"scores":	[-4.215063615190938]
								}, {
									"case":	48,
									"scores":	[-4.215063615190938]
								}, {
									"case":	49,
									"scores":	[-4.215063615190938]
								}, {
									"case":	50,
									"scores":	[-4.215063615190938]
								}, {
									"case":	51,
									"scores":	[-4.215063615190938]
								}, {
									"case":	52,
									"scores":	[-4.215063615190938]
								}, {
									"case":	53,
									"scores":	[-4.215063615190938]
								}, {
									"case":	54,
									"scores":	[-4.215063615190938]
								}, {
									"case":	55,
									"scores":	[-4.215063615190938]
								}, {
									"case":	56,
									"scores":	[-4.215063615190938]
								}, {
									"case":	57,
									"scores":	[-4.215063615190938]
								}, {
									"case":	58,
									"scores":	[-4.215063615190938]
								}, {
									"case":	59,
									"scores":	[-4.215063615190938]
								}, {
									"case":	60,
									"scores":	[-4.215063615190938]
								}, {
									"case":	61,
									"scores":	[-4.215063615190938]
								}, {
									"case":	62,
									"scores":	[-4.215063615190938]
								}, {
									"case":	63,
									"scores":	[-4.215063615190938]
								}, {
									"case":	64,
									"scores":	[-4.215063615190938]
								}, {
									"case":	65,
									"scores":	[-4.215063615190938]
								}, {
									"case":	66,
									"scores":	[-4.215063615190938]
								}, {
									"case":	67,
									"scores":	[-4.215063615190938]
								}, {
									"case":	68,
									"scores":	[-4.215063615190938]
								}, {
									"case":	69,
									"scores":	[-4.215063615190938]
								}, {
									"case":	70,
									"scores":	[-4.215063615190938]
								}, {
									"case":	71,
									"scores":	[-4.215063615190938]
								}, {
									"case":	72,
									"scores":	[-4.215063615190938]
								}, {
									"case":	73,
									"scores":	[-4.215063615190938]
								}, {
									"case":	74,
									"scores":	[-4.215063615190938]
								}, {
									"case":	75,
									"scores":	[-4.215063615190938]
								}, {
									"case":	76,
									"scores":	[-4.215063615190938]
								}, {
									"case":	77,
									"scores":	[-4.215063615190938]
								}, {
									"case":	78,
									"scores":	[-4.215063615190938]
								}, {
									"case":	79,
									"scores":	[-4.215063615190938]
								}, {
									"case":	80,
									"scores":	[-4.215063615190938]
								}, {
									"case":	81,
									"scores":	[-4.215063615190938]
								}, {
									"case":	82,
									"scores":	[-4.215063615190938]
								}, {
									"case":	83,
									"scores":	[-4.215063615190938]
								}, {
									"case":	84,
									"scores":	[-4.215063615190938]
								}, {
									"case":	85,
									"scores":	[-4.215063615190938]
								}, {
									"case":	86,
									"scores":	[-4.215063615190938]
								}, {
									"case":	87,
									"scores":	[-4.215063615190938]
								}, {
									"case":	88,
									"scores":	[-4.215063615190938]
								}, {
									"case":	89,
									"scores":	[-4.215063615190938]
								}, {
									"case":	90,
									"scores":	[-4.215063615190938]
								}, {
									"case":	91,
									"scores":	[-4.215063615190938]
								}, {
									"case":	92,
									"scores":	[-4.215063615190938]
								}, {
									"case":	93,
									"scores":	[-4.215063615190938]
								}, {
									"case":	94,
									"scores":	[-4.215063615190938]
								}, {
									"case":	95,
									"scores":	[-4.215063615190938]
								}, {
									"case":	96,
									"scores":	[-4.215063615190938]
								}, {
									"case":	97,
									"scores":	[-4.215063615190938]
								}, {
									"case":	98,
									"scores":	[-4.215063615190938]
								}, {
									"case":	99,
									"scores":	[-4.215063615190938]
								}, {
									"case":	100,
									"scores":	[-4.215063615190938]
								}, {
									"case":	101,
									"scores":	[-4.215063615190938]
								}, {
									"case":	102,
									"scores":	[-4.215063615190938]
								}, {
									"case":	103,
									"scores":	[-4.215063615190938]
								}, {
									"case":	104,
									"scores":	[-4.215063615190938]
								}, {
									"case":	105,
									"scores":	[-4.215063615190938]
								}, {
									"case":	106,
									"scores":	[-4.215063615190938]
								}, {
									"case":	107,
									"scores":	[-4.215063615190938]
								}, {
									"case":	108,
									"scores":	[-4.215063615190938]
								}, {
									"case":	109,
									"scores":	[-4.215063615190938]
								}, {
									"case":	110,
									"scores":	[-4.215063615190938]
								}, {
									"case":	111,
									"scores":	[-4.215063615190938]
								}, {
									"case":	112,
									"scores":	[-4.215063615190938]
								}, {
									"case":	113,
									"scores":	[-4.215063615190938]
								}, {
									"case":	114,
									"scores":	[-4.215063615190938]
								}, {
									"case":	115,
									"scores":	[-4.215063615190938]
								}, {
									"case":	116,
									"scores":	[-4.215063615190938]
								}, {
									"case":	117,
									"scores":	[-4.215063615190938]
								}, {
									"case":	118,
									"scores":	[-4.215063615190938]
								}, {
									"case":	119,
									"scores":	[-4.215063615190938]
								}, {
									"case":	120,
									"scores":	[-4.215063615190938]
								}, {
									"case":	121,
									"scores":	[-4.215063615190938]
								}, {
									"case":	122,
									"scores":	[-4.215063615190938]
								}, {
									"case":	123,
									"scores":	[-4.215063615190938]
								}, {
									"case":	124,
									"scores":	[-4.215063615190938]
								}, {
									"case":	125,
									"scores":	[-4.215063615190938]
								}, {
									"case":	126,
									"scores":	[-4.215063615190938]
								}, {
									"case":	127,
									"scores":	[-4.215063615190938]
								}, {
									"case":	128,
									"scores":	[-4.215063615190938]
								}, {
									"case":	129,
									"scores":	[-4.215063615190938]
								}, {
									"case":	130,
									"scores":	[-4.215063615190938]
								}, {
									"case":	131,
									"scores":	[-4.215063615190938]
								}, {
									"case":	132,
									"scores":	[-4.215063615190938]
								}, {
									"case":	133,
									"scores":	[-4.215063615190938]
								}, {
									"case":	134,
									"scores":	[-4.215063615190938]
								}, {
									"case":	135,
									"scores":	[-4.215063615190938]
								}, {
									"case":	136,
									"scores":	[-4.215063615190938]
								}, {
									"case":	137,
									"scores":	[-4.215063615190938]
								}, {
									"case":	138,
									"scores":	[-4.215063615190938]
								}, {
									"case":	139,
									"scores":	[-4.215063615190938]
								}, {
									"case":	140,
									"scores":	[-4.215063615190938]
								}, {
									"case":	141,
									"scores":	[-4.215063615190938]
								}, {
									"case":	142,
									"scores":	[-4.215063615190938]
								}, {
									"case":	143,
									"scores":	[-4.215063615190938]
								}, {
									"case":	144,
									"scores":	[-4.215063615190938]
								}, {
									"case":	145,
									"scores":	[-4.215063615190938]
								}, {
									"case":	146,
									"scores":	[-4.215063615190938]
								}, {
									"case":	147,
									"scores":	[-4.215063615190938]
								}, {
									"case":	148,
									"scores":	[-4.215063615190938]
								}, {
									"case":	149,
									"scores":	[-4.215063615190938]
								}, {
									"case":	150,
									"scores":	[-4.215063615190938]
								}, {
									"case":	151,
									"scores":	[-4.215063615190938]
								}, {
									"case":	152,
									"scores":	[-4.215063615190938]
								}, {
									"case":	153,
									"scores":	[-4.215063615190938]
								}, {
									"case":	154,
									"scores":	[-4.215063615190938]
								}, {
									"case":	155,
									"scores":	[-4.215063615190938]
								}, {
									"case":	156,
									"scores":	[-4.215063615190938]
								}, {
									"case":	157,
									"scores":	[-4.215063615190938]
								}, {
									"case":	158,
									"scores":	[-4.215063615190938]
								}, {
									"case":	159,
									"scores":	[-4.215063615190938]
								}, {
									"case":	160,
									"scores":	[-4.215063615190938]
								}, {
									"case":	161,
									"scores":	[-4.215063615190938]
								}, {
									"case":	162,
									"scores":	[-4.215063615190938]
								}, {
									"case":	163,
									"scores":	[-4.215063615190938]
								}, {
									"case":	164,
									"scores":	[-4.215063615190938]
								}, {
									"case":	165,
									"scores":	[-4.215063615190938]
								}, {
									"case":	166,
									"scores":	[-4.215063615190938]
								}, {
									"case":	167,
									"scores":	[-4.215063615190938]
								}, {
									"case":	168,
									"scores":	[-4.215063615190938]
								}, {
									"case":	169,
									"scores":	[-4.215063615190938]
								}, {
									"case":	170,
									"scores":	[-4.215063615190938]
								}, {
									"case":	171,
									"scores":	[-4.215063615190938]
								}, {
									"case":	172,
									"scores":	[-4.215063615190938]
								}, {
									"case":	173,
									"scores":	[-4.215063615190938]
								}, {
									"case":	174,
									"scores":	[-4.215063615190938]
								}, {
									"case":	175,
									"scores":	[-4.215063615190938]
								}, {
									"case":	176,
									"scores":	[-4.215063615190938]
								}, {
									"case":	177,
									"scores":	[-4.215063615190938]
								}, {
									"case":	178,
									"scores":	[-4.215063615190938]
								}, {
									"case":	179,
									"scores":	[-4.215063615190938]
								}, {
									"case":	180,
									"scores":	[-4.215063615190938]
								}, {
									"case":	181,
									"scores":	[-4.215063615190938]
								}, {
									"case":	182,
									"scores":	[-4.215063615190938]
								}, {
									"case":	183,
									"scores":	[-4.215063615190938]
								}, {
									"case":	184,
									"scores":	[-4.215063615190938]
								}, {
									"case":	185,
									"scores":	[-4.215063615190938]
								}, {
									"case":	186,
									"scores":	[-4.215063615190938]
								}, {
									"case":	187,
									"scores":	[-4.215063615190938]
								}, {
									"case":	188,
									"scores":	[-4.215063615190938]
								}, {
									"case":	189,
									"scores":	[-4.215063615190938]
								}, {
									"case":	190,
									"scores":	[-4.215063615190938]
								}, {
									"case":	191,
									"scores":	[-4.215063615190938]
								}, {
									"case":	192,
									"scores":	[-4.215063615190938]
								}, {
									"case":	193,
									"scores":	[-4.215063615190938]
								}, {
									"case":	194,
									"scores":	[-4.215063615190938]
								}, {
									"case":	195,
									"scores":	[-4.215063615190938]
								}, {
									"case":	196,
									"scores":	[-4.215063615190938]
								}, {
									"case":	197,
									"scores":	[-4.215063615190938]
								}, {
									"case":	198,
									"scores":	[-4.215063615190938]
								}, {
									"case":	199,
									"scores":	[-4.215063615190938]
								}, {
									"case":	200,
									"scores":	[-4.215063615190938]
								}, {
									"case":	201,
									"scores":	[-4.215063615190938]
								}, {
									"case":	202,
									"scores":	[-4.215063615190938]
								}, {
									"case":	203,
									"scores":	[-4.215063615190938]
								}, {
									"case":	204,
									"scores":	[-4.215063615190938]
								}, {
									"case":	205,
									"scores":	[-4.215063615190938]
								}, {
									"case":	206,
									"scores":	[-4.215063615190938]
								}, {
									"case":	207,
									"scores":	[-4.215063615190938]
								}, {
									"case":	208,
									"scores":	[-4.215063615190938]
								}, {
									"case":	209,
									"scores":	[-4.215063615190938]
								}, {
									"case":	210,
									"scores":	[-4.215063615190938]
								}, {
									"case":	211,
									"scores":	[-4.215063615190938]
								}, {
									"case":	212,
									"scores":	[-4.215063615190938]
								}, {
									"case":	213,
									"scores":	[-4.215063615190938]
								}, {
									"case":	214,
									"scores":	[-4.215063615190938]
								}, {
									"case":	215,
									"scores":	[-4.215063615190938]
								}, {
									"case":	216,
									"scores":	[-4.215063615190938]
								}, {
									"case":	217,
									"scores":	[-4.215063615190938]
								}, {
									"case":	218,
									"scores":	[-4.215063615190938]
								}, {
									"case":	219,
									"scores":	[-4.215063615190938]
								}, {
									"case":	220,
									"scores":	[-4.215063615190938]
								}, {
									"case":	221,
									"scores":	[-4.215063615190938]
								}, {
									"case":	222,
									"scores":	[-4.215063615190938]
								}, {
									"case":	223,
									"scores":	[-4.215063615190938]
								}, {
									"case":	224,
									"scores":	[-4.215063615190938]
								}, {
									"case":	225,
									"scores":	[-4.215063615190938]
								}, {
									"case":	226,
									"scores":	[-4.215063615190938]
								}, {
									"case":	227,
									"scores":	[-4.215063615190938]
								}, {
									"case":	228,
									"scores":	[-4.215063615190938]
								}, {
									"case":	229,
									"scores":	[-4.215063615190938]
								}, {
									"case":	230,
									"scores":	[-4.215063615190938]
								}, {
									"case":	231,
									"scores":	[-4.215063615190938]
								}, {
									"case":	232,
									"scores":	[-4.215063615190938]
								}, {
									"case":	233,
									"scores":	[-4.215063615190938]
								}, {
									"case":	234,
									"scores":	[-4.215063615190938]
								}, {
									"case":	235,
									"scores":	[-4.215063615190938]
								}, {
									"case":	236,
									"scores":	[-4.215063615190938]
								}, {
									"case":	237,
									"scores":	[-4.215063615190938]
								}, {
									"case":	238,
									"scores":	[-4.215063615190938]
								}, {
									"case":	239,
									"scores":	[-4.215063615190938]
								}, {
									"case":	240,
									"scores":	[-4.215063615190938]
								}, {
									"case":	241,
									"scores":	[-4.215063615190938]
								}, {
									"case":	242,
									"scores":	[-4.215063615190938]
								}, {
									"case":	243,
									"scores":	[-4.215063615190938]
								}, {
									"case":	244,
									"scores":	[-4.215063615190938]
								}, {
									"case":	245,
									"scores":	[-4.215063615190938]
								}, {
									"case":	246,
									"scores":	[-4.215063615190938]
								}, {
									"case":	247,
									"scores":	[-4.215063615190938]
								}, {
									"case":	248,
									"scores":	[-4.215063615190938]
								}, {
									"case":	249,
									"scores":	[-4.215063615190938]
								}, {
									"case":	250,
									"scores":	[-4.215063615190938]
								}, {
									"case":	251,
									"scores":	[-4.215063615190938]
								}, {
									"case":	252,
									"scores":	[-4.215063615190938]
								}, {
									"case":	253,
									"scores":	[-4.215063615190938]
								}, {
									"case":	254,
									"scores":	[-4.215063615190938]
								}, {
									"case":	255,
									"scores":	[-4.215063615190938]
								}, {
									"case":	256,
									"scores":	[-4.215063615190938]
								}, {
									"case":	257,
									"scores":	[-4.215063615190938]
								}, {
									"case":	258,
									"scores":	[-4.215063615190938]
								}, {
									"case":	259,
									"scores":	[-4.215063615190938]
								}, {
									"case":	260,
									"scores":	[-4.215063615190938]
								}, {
									"case":	261,
									"scores":	[-4.215063615190938]
								}, {
									"case":	262,
									"scores":	[-4.215063615190938]
								}, {
									"case":	263,
									"scores":	[-4.215063615190938]
								}, {
									"case":	264,
									"scores":	[-4.215063615190938]
								}, {
									"case":	265,
									"scores":	[-5.0899519591909383, -4.1063371915909386, -6.9786440991909382, -7.07930049389094, -9.6099146678909371, -7.2796592989909383, -5.6121557591909381, -5.1251017559909382, -8.22788458519094, -8.47392349899094, -8.47392349899094, -8.22788458519094, -8.4387737021909359, -7.7269495851909378, -8.47392349899094, -8.22788458519094, -8.22788458519094, -8.4387737021909359, -8.4387737021909359, -8.4387737021909359, -8.22788458519094, -8.22788458519094, -8.4387737021909359, -8.4387737021909359, -8.4387737021909359, -8.4387737021909359, -8.4387737021909359, -8.4387737021909359, -8.4387737021909359, -8.4387737021909359, -8.4387737021909359, -8.4387737021909359, -8.4387737021909359, -8.4387737021909359, -8.22788458519094, -8.22788458519094, -8.22788458519094, -8.22788458519094, -8.22788458519094, -8.22788458519094, -8.4387737021909359, -8.22788458519094, -8.4387737021909359, -8.22788458519094, -8.4387737021909359, -8.4387737021909359, -8.22788458519094, -8.22788458519094, -8.22788458519094, -8.22788458519094, -8.47392349899094, -8.47392349899094, -8.47392349899094, -8.4387737021909359, -8.22788458519094, -8.22788458519094, -8.22788458519094, -8.22788458519094]
								}]
						}, {
							"switch":	3,
							"types":	[[14], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], []],
							"begin_line":	1266,
							"begin_column":	3,
							"end_line":	1271,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L1266\", 58, &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern), sizeof (intern), &(intern->inner.ce), sizeof (intern->inner.ce), &(intern->inner.zobject), sizeof (intern->inner.zobject), &(object_ptr), sizeof (object_ptr), &(key), sizeof (key), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection))) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if ((zend_hash_find(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) || __is_neg(\"\", \"L1266\", 58, &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern), sizeof (intern), &(intern->inner.ce), sizeof (intern->inner.ce), &(intern->inner.zobject), sizeof (intern->inner.zobject), &(object_ptr), sizeof (object_ptr), &(key), sizeof (key), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection))) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if (Debug(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if (ap_php_asprintf(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if (execl(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if (execle(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if (execlp(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if (fprintf(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if (php_printf(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if (php_sprintf(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if (printf(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if (sprintf(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if (zend_symtable_find(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n", "if ((zend_hash_find(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) && !__is_neg(\"\", \"L1266\", 58, &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern), sizeof (intern), &(intern->inner.ce), sizeof (intern->inner.ce), &(intern->inner.zobject), sizeof (intern->inner.zobject), &(object_ptr), sizeof (object_ptr), &(key), sizeof (key), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection))) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.4038049048281467, -0.63882587482814746, -2.7293900158281463, -2.6027805048281456, -3.6225343048281458, -2.4379763148281457, -1.2054189048281456, -2.6924330048281462, -3.373383204828146, -4.1312713048281466, -4.1312713048281466, -3.373383204828146, -3.8426432048281458, -3.0513721748281464, -4.1312713048281466, -3.373383204828146, -3.373383204828146, -3.8426432048281458, -3.8426432048281458, -3.8426432048281458, -3.373383204828146, -3.373383204828146, -3.8426432048281458, -3.8426432048281458, -3.8426432048281458, -3.8426432048281458, -3.8426432048281458, -3.8426432048281458, -3.8426432048281458, -3.8426432048281458, -3.8426432048281458, -3.8426432048281458, -3.8426432048281458, -3.8426432048281458, -3.373383204828146, -3.373383204828146, -3.373383204828146, -3.373383204828146, -3.373383204828146, -3.373383204828146, -3.8426432048281458, -3.373383204828146, -3.8426432048281458, -3.373383204828146, -3.8426432048281458, -3.8426432048281458, -3.373383204828146, -3.373383204828146, -3.373383204828146, -3.373383204828146, -4.1312713048281466, -4.1312713048281466, -4.1312713048281466, -3.8426432048281458, -3.373383204828146, -3.373383204828146, -3.373383204828146, -3.373383204828146]
								}, {
									"case":	2,
									"scores":	[-3.5996239244281445, -1.8346448944281426, -3.9252090354281464, -3.7985995244281461, -4.8183533244281458, -3.633795334428144, -2.4012379244281448, -3.8882520244281444, -4.5692022244281461, -5.3270903244281467, -5.3270903244281467, -4.5692022244281461, -5.0384622244281463, -4.2471911944281464, -5.3270903244281467, -4.5692022244281461, -4.5692022244281461, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -4.5692022244281461, -4.5692022244281461, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -5.0384622244281463, -4.5692022244281461, -5.0384622244281463, -4.5692022244281461, -5.0384622244281463, -5.0384622244281463, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -5.3270903244281467, -5.3270903244281467, -5.3270903244281467, -5.0384622244281463, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.5996239244281445, -1.8346448944281426, -3.9252090354281464, -3.7985995244281461, -4.8183533244281458, -3.633795334428144, -2.4012379244281448, -3.8882520244281444, -4.5692022244281461, -5.3270903244281467, -5.3270903244281467, -4.5692022244281461, -5.0384622244281463, -4.2471911944281464, -5.3270903244281467, -4.5692022244281461, -4.5692022244281461, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -4.5692022244281461, -4.5692022244281461, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -5.0384622244281463, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -5.0384622244281463, -4.5692022244281461, -5.0384622244281463, -4.5692022244281461, -5.0384622244281463, -5.0384622244281463, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -5.3270903244281467, -5.3270903244281467, -5.3270903244281467, -5.0384622244281463, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461, -4.5692022244281461]
								}]
						}, {
							"switch":	11,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1266,
							"begin_column":	3,
							"end_line":	1271,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L1266\", 58, &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern), sizeof (intern), &(intern->inner.ce), sizeof (intern->inner.ce), &(intern->inner.zobject), sizeof (intern->inner.zobject), &(object_ptr), sizeof (object_ptr), &(key), sizeof (key), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection)))\n    if (zend_hash_find(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n        if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n            *object_ptr = intern->inner.zobject;\n            function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n        }\n    }\n", "if (!__is_neg(\"\", \"L1266\", 58, &(method), sizeof (method), &(method_len), sizeof (method_len), &(function_handler), sizeof (function_handler), &(intern), sizeof (intern), &(intern->inner.ce), sizeof (intern->inner.ce), &(intern->inner.zobject), sizeof (intern->inner.zobject), &(object_ptr), sizeof (object_ptr), &(key), sizeof (key), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &(intern->inner.ce->type), sizeof (intern->inner.ce->type), &(intern->inner.ce->name), sizeof (intern->inner.ce->name), &(intern->inner.ce->name_length), sizeof (intern->inner.ce->name_length), &(intern->inner.ce->parent), sizeof (intern->inner.ce->parent), &(intern->inner.ce->refcount), sizeof (intern->inner.ce->refcount), &(intern->inner.ce->ce_flags), sizeof (intern->inner.ce->ce_flags), &(intern->inner.ce->default_properties_table), sizeof (intern->inner.ce->default_properties_table), &(intern->inner.ce->default_static_members_table), sizeof (intern->inner.ce->default_static_members_table), &(intern->inner.ce->static_members_table), sizeof (intern->inner.ce->static_members_table), &(intern->inner.ce->default_properties_count), sizeof (intern->inner.ce->default_properties_count), &(intern->inner.ce->default_static_members_count), sizeof (intern->inner.ce->default_static_members_count), &(intern->inner.ce->constructor), sizeof (intern->inner.ce->constructor), &(intern->inner.ce->destructor), sizeof (intern->inner.ce->destructor), &(intern->inner.ce->clone), sizeof (intern->inner.ce->clone), &(intern->inner.ce->__get), sizeof (intern->inner.ce->__get), &(intern->inner.ce->__set), sizeof (intern->inner.ce->__set), &(intern->inner.ce->__unset), sizeof (intern->inner.ce->__unset), &(intern->inner.ce->__isset), sizeof (intern->inner.ce->__isset), &(intern->inner.ce->__call), sizeof (intern->inner.ce->__call), &(intern->inner.ce->__callstatic), sizeof (intern->inner.ce->__callstatic), &(intern->inner.ce->__tostring), sizeof (intern->inner.ce->__tostring), &(intern->inner.ce->serialize_func), sizeof (intern->inner.ce->serialize_func), &(intern->inner.ce->unserialize_func), sizeof (intern->inner.ce->unserialize_func), &(intern->inner.ce->create_object), sizeof (intern->inner.ce->create_object), &(intern->inner.ce->get_iterator), sizeof (intern->inner.ce->get_iterator), &(intern->inner.ce->interface_gets_implemented), sizeof (intern->inner.ce->interface_gets_implemented), &(intern->inner.ce->get_static_method), sizeof (intern->inner.ce->get_static_method), &(intern->inner.ce->serialize), sizeof (intern->inner.ce->serialize), &(intern->inner.ce->unserialize), sizeof (intern->inner.ce->unserialize), &(intern->inner.ce->interfaces), sizeof (intern->inner.ce->interfaces), &(intern->inner.ce->num_interfaces), sizeof (intern->inner.ce->num_interfaces), &(intern->inner.ce->traits), sizeof (intern->inner.ce->traits), &(intern->inner.ce->num_traits), sizeof (intern->inner.ce->num_traits), &(intern->inner.ce->trait_aliases), sizeof (intern->inner.ce->trait_aliases), &(intern->inner.ce->trait_precedences), sizeof (intern->inner.ce->trait_precedences), &(intern->inner.ce->function_table.nTableSize), sizeof (intern->inner.ce->function_table.nTableSize), &(intern->inner.ce->function_table.nTableMask), sizeof (intern->inner.ce->function_table.nTableMask), &(intern->inner.ce->function_table.nNumOfElements), sizeof (intern->inner.ce->function_table.nNumOfElements), &(intern->inner.ce->function_table.nNextFreeElement), sizeof (intern->inner.ce->function_table.nNextFreeElement), &(intern->inner.ce->function_table.pInternalPointer), sizeof (intern->inner.ce->function_table.pInternalPointer), &(intern->inner.ce->function_table.pListHead), sizeof (intern->inner.ce->function_table.pListHead), &(intern->inner.ce->function_table.pListTail), sizeof (intern->inner.ce->function_table.pListTail), &(intern->inner.ce->function_table.arBuckets), sizeof (intern->inner.ce->function_table.arBuckets), &(intern->inner.ce->function_table.pDestructor), sizeof (intern->inner.ce->function_table.pDestructor), &(intern->inner.ce->function_table.persistent), sizeof (intern->inner.ce->function_table.persistent), &(intern->inner.ce->function_table.nApplyCount), sizeof (intern->inner.ce->function_table.nApplyCount), &(intern->inner.ce->function_table.bApplyProtection), sizeof (intern->inner.ce->function_table.bApplyProtection)) && (zend_hash_find(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1)) {\n    if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n        *object_ptr = intern->inner.zobject;\n        function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.6480053951909381, -3.883026365190938, -5.9735905061909378, -5.8469809951909379, -6.8667347951909381, -5.682176805190938, -4.449619395190938, -5.9366334951909385, -6.6175836951909375, -7.3754717951909381, -7.3754717951909381, -6.6175836951909375, -7.0868436951909377, -6.2955726651909378, -7.3754717951909381, -6.6175836951909375, -6.6175836951909375, -7.0868436951909377, -7.0868436951909377, -7.0868436951909377, -6.6175836951909375, -6.6175836951909375, -7.0868436951909377, -7.0868436951909377, -7.0868436951909377, -7.0868436951909377, -7.0868436951909377, -7.0868436951909377, -7.0868436951909377, -7.0868436951909377, -7.0868436951909377, -7.0868436951909377, -7.0868436951909377, -7.0868436951909377, -6.6175836951909375, -6.6175836951909375, -6.6175836951909375, -6.6175836951909375, -6.6175836951909375, -6.6175836951909375, -7.0868436951909377, -6.6175836951909375, -7.0868436951909377, -6.6175836951909375, -7.0868436951909377, -7.0868436951909377, -6.6175836951909375, -6.6175836951909375, -6.6175836951909375, -6.6175836951909375, -7.3754717951909381, -7.3754717951909381, -7.3754717951909381, -7.0868436951909377, -6.6175836951909375, -6.6175836951909375, -6.6175836951909375, -6.6175836951909375]
								}, {
									"case":	2,
									"scores":	[-5.40768383419094, -3.6427048041909389, -5.7332689451909378, -5.6066594341909379, -6.6264132341909372, -5.441855244190938, -4.2092978341909379, -5.69631193419094, -6.3772621341909375, -7.1351502341909372, -7.1351502341909372, -6.3772621341909375, -6.8465221341909377, -6.0552511041909378, -7.1351502341909372, -6.3772621341909375, -6.3772621341909375, -6.8465221341909377, -6.8465221341909377, -6.8465221341909377, -6.3772621341909375, -6.3772621341909375, -6.8465221341909377, -6.8465221341909377, -6.8465221341909377, -6.8465221341909377, -6.8465221341909377, -6.8465221341909377, -6.8465221341909377, -6.8465221341909377, -6.8465221341909377, -6.8465221341909377, -6.8465221341909377, -6.8465221341909377, -6.3772621341909375, -6.3772621341909375, -6.3772621341909375, -6.3772621341909375, -6.3772621341909375, -6.3772621341909375, -6.8465221341909377, -6.3772621341909375, -6.8465221341909377, -6.3772621341909375, -6.8465221341909377, -6.8465221341909377, -6.3772621341909375, -6.3772621341909375, -6.3772621341909375, -6.3772621341909375, -7.1351502341909372, -7.1351502341909372, -7.1351502341909372, -6.8465221341909377, -6.3772621341909375, -6.3772621341909375, -6.3772621341909375, -6.3772621341909375]
								}]
						}]
				}, {
					"line":	1264,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [], [], [], [], [], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [], [], [], [], []],
							"begin_line":	1265,
							"begin_column":	0,
							"end_line":	1265,
							"end_column":	0,
							"patch_codes":	["(intern)->current.pos++", "(intern)->u.regex.pce->refcount++", "(intern)->u.regex.pce->refcount--", "(method)++", "_array_init(((intern)->u.caching.zcache), 0)", "_efree(((intern)))", "_efree(((intern)->current.str_key))", "_efree(((intern)->u.regex.regex))", "_efree(((method)))", "_zval_copy_ctor(((intern)->u.caching.zstr))", "_zval_ptr_dtor((&(intern)->current.data))", "_zval_ptr_dtor((&(intern)->inner.zobject))", "_zval_ptr_dtor((&(intern)->u.append.zarrayit))", "_zval_ptr_dtor((&(intern)->u.caching.zcache))", "_zval_ptr_dtor((&(intern)->u.caching.zchildren))", "_zval_ptr_dtor((&(intern)->u.caching.zstr))", "_zval_ptr_dtor((&*(object_ptr)))", "function_handler = (**(object_ptr)).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method((object_ptr), method, method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, (method), method_len, key)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, (key))", "function_handler = (function_handler)", "function_handler = std_object_handlers.get_method((object_ptr), method, method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, (method), method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, method, method_len, (key))", "intern = (intern)", "memset((intern), 0, sizeof(spl_dual_it_object))", "php_error_docref0(((void *)0), (1 << 0L), \"The %s instance wasn't initialized properly\", zend_get_class_entry(&(**(object_ptr)))->name)", "spl_append_it_fetch((intern))", "spl_append_it_next((intern))", "spl_append_it_next_iterator((intern))", "spl_caching_it_next((intern))", "spl_caching_it_rewind((intern))", "spl_dual_it_fetch((intern), 0)", "spl_dual_it_fetch((intern), 1)", "spl_dual_it_free((intern))", "spl_dual_it_next((intern), 0)", "spl_dual_it_next((intern), 1)", "spl_dual_it_require((intern))", "spl_dual_it_rewind((intern))", "zend_call_method(&(intern)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (method))", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->current.data)", "zval_addref_p(*((object_ptr)))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key)", "function_handler = std_object_handlers.get_method(object_ptr, method, method_len, key)", "intern = (spl_dual_it_object *)zend_object_store_get_object(*object_ptr)", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.215063615190938]
								}, {
									"case":	2,
									"scores":	[-4.215063615190938]
								}, {
									"case":	3,
									"scores":	[-4.215063615190938]
								}, {
									"case":	4,
									"scores":	[-4.215063615190938]
								}, {
									"case":	5,
									"scores":	[-4.215063615190938]
								}, {
									"case":	6,
									"scores":	[-4.215063615190938]
								}, {
									"case":	7,
									"scores":	[-4.215063615190938]
								}, {
									"case":	8,
									"scores":	[-4.215063615190938]
								}, {
									"case":	9,
									"scores":	[-4.215063615190938]
								}, {
									"case":	10,
									"scores":	[-4.215063615190938]
								}, {
									"case":	11,
									"scores":	[-4.215063615190938]
								}, {
									"case":	12,
									"scores":	[-4.215063615190938]
								}, {
									"case":	13,
									"scores":	[-4.215063615190938]
								}, {
									"case":	14,
									"scores":	[-4.215063615190938]
								}, {
									"case":	15,
									"scores":	[-4.215063615190938]
								}, {
									"case":	16,
									"scores":	[-4.215063615190938]
								}, {
									"case":	17,
									"scores":	[-4.215063615190938]
								}, {
									"case":	18,
									"scores":	[-4.215063615190938]
								}, {
									"case":	19,
									"scores":	[-4.215063615190938]
								}, {
									"case":	20,
									"scores":	[-4.215063615190938]
								}, {
									"case":	21,
									"scores":	[-4.215063615190938]
								}, {
									"case":	22,
									"scores":	[-4.215063615190938]
								}, {
									"case":	23,
									"scores":	[-4.215063615190938]
								}, {
									"case":	24,
									"scores":	[-4.215063615190938]
								}, {
									"case":	25,
									"scores":	[-4.215063615190938]
								}, {
									"case":	26,
									"scores":	[-4.215063615190938]
								}, {
									"case":	27,
									"scores":	[-4.215063615190938]
								}, {
									"case":	28,
									"scores":	[-4.215063615190938]
								}, {
									"case":	29,
									"scores":	[-4.215063615190938]
								}, {
									"case":	30,
									"scores":	[-4.215063615190938]
								}, {
									"case":	31,
									"scores":	[-4.215063615190938]
								}, {
									"case":	32,
									"scores":	[-4.215063615190938]
								}, {
									"case":	33,
									"scores":	[-4.215063615190938]
								}, {
									"case":	34,
									"scores":	[-4.215063615190938]
								}, {
									"case":	35,
									"scores":	[-4.215063615190938]
								}, {
									"case":	36,
									"scores":	[-4.215063615190938]
								}, {
									"case":	37,
									"scores":	[-4.215063615190938]
								}, {
									"case":	38,
									"scores":	[-4.215063615190938]
								}, {
									"case":	39,
									"scores":	[-4.215063615190938]
								}, {
									"case":	40,
									"scores":	[-4.215063615190938]
								}, {
									"case":	41,
									"scores":	[-4.215063615190938]
								}, {
									"case":	42,
									"scores":	[-4.215063615190938]
								}, {
									"case":	43,
									"scores":	[-4.215063615190938]
								}, {
									"case":	44,
									"scores":	[-4.215063615190938]
								}, {
									"case":	45,
									"scores":	[-4.215063615190938]
								}, {
									"case":	46,
									"scores":	[-4.215063615190938]
								}, {
									"case":	47,
									"scores":	[-4.215063615190938]
								}, {
									"case":	48,
									"scores":	[-4.215063615190938]
								}, {
									"case":	49,
									"scores":	[-4.215063615190938]
								}, {
									"case":	50,
									"scores":	[-4.215063615190938]
								}, {
									"case":	51,
									"scores":	[-4.215063615190938]
								}, {
									"case":	52,
									"scores":	[-4.215063615190938]
								}, {
									"case":	53,
									"scores":	[-4.215063615190938]
								}, {
									"case":	54,
									"scores":	[-4.215063615190938]
								}, {
									"case":	55,
									"scores":	[-4.215063615190938]
								}, {
									"case":	56,
									"scores":	[-4.215063615190938]
								}, {
									"case":	57,
									"scores":	[-4.215063615190938]
								}, {
									"case":	58,
									"scores":	[-4.215063615190938]
								}, {
									"case":	59,
									"scores":	[-4.215063615190938]
								}, {
									"case":	60,
									"scores":	[-4.215063615190938]
								}, {
									"case":	61,
									"scores":	[-4.215063615190938]
								}, {
									"case":	62,
									"scores":	[-4.215063615190938]
								}, {
									"case":	63,
									"scores":	[-4.215063615190938]
								}, {
									"case":	64,
									"scores":	[-4.215063615190938]
								}, {
									"case":	65,
									"scores":	[-4.215063615190938]
								}, {
									"case":	66,
									"scores":	[-4.215063615190938]
								}, {
									"case":	67,
									"scores":	[-4.215063615190938]
								}, {
									"case":	68,
									"scores":	[-4.215063615190938]
								}, {
									"case":	69,
									"scores":	[-4.215063615190938]
								}, {
									"case":	70,
									"scores":	[-4.215063615190938]
								}, {
									"case":	71,
									"scores":	[-4.215063615190938]
								}, {
									"case":	72,
									"scores":	[-4.215063615190938]
								}, {
									"case":	73,
									"scores":	[-4.215063615190938]
								}, {
									"case":	74,
									"scores":	[-4.215063615190938]
								}, {
									"case":	75,
									"scores":	[-4.215063615190938]
								}, {
									"case":	76,
									"scores":	[-4.215063615190938]
								}, {
									"case":	77,
									"scores":	[-4.215063615190938]
								}, {
									"case":	78,
									"scores":	[-4.215063615190938]
								}, {
									"case":	79,
									"scores":	[-4.215063615190938]
								}, {
									"case":	80,
									"scores":	[-4.215063615190938]
								}, {
									"case":	81,
									"scores":	[-4.215063615190938]
								}, {
									"case":	82,
									"scores":	[-4.215063615190938]
								}, {
									"case":	83,
									"scores":	[-4.215063615190938]
								}, {
									"case":	84,
									"scores":	[-4.215063615190938]
								}, {
									"case":	85,
									"scores":	[-4.215063615190938]
								}, {
									"case":	86,
									"scores":	[-4.215063615190938]
								}, {
									"case":	87,
									"scores":	[-4.215063615190938]
								}, {
									"case":	88,
									"scores":	[-4.215063615190938]
								}, {
									"case":	89,
									"scores":	[-4.215063615190938]
								}, {
									"case":	90,
									"scores":	[-4.215063615190938]
								}, {
									"case":	91,
									"scores":	[-4.215063615190938]
								}, {
									"case":	92,
									"scores":	[-4.215063615190938]
								}, {
									"case":	93,
									"scores":	[-4.215063615190938]
								}, {
									"case":	94,
									"scores":	[-4.215063615190938]
								}, {
									"case":	95,
									"scores":	[-4.215063615190938]
								}, {
									"case":	96,
									"scores":	[-4.215063615190938]
								}, {
									"case":	97,
									"scores":	[-4.215063615190938]
								}, {
									"case":	98,
									"scores":	[-4.215063615190938]
								}, {
									"case":	99,
									"scores":	[-4.215063615190938]
								}, {
									"case":	100,
									"scores":	[-4.215063615190938]
								}, {
									"case":	101,
									"scores":	[-4.215063615190938]
								}, {
									"case":	102,
									"scores":	[-4.215063615190938]
								}, {
									"case":	103,
									"scores":	[-4.215063615190938]
								}, {
									"case":	104,
									"scores":	[-4.215063615190938]
								}, {
									"case":	105,
									"scores":	[-4.215063615190938]
								}, {
									"case":	106,
									"scores":	[-4.215063615190938]
								}, {
									"case":	107,
									"scores":	[-4.215063615190938]
								}, {
									"case":	108,
									"scores":	[-4.215063615190938]
								}, {
									"case":	109,
									"scores":	[-4.215063615190938]
								}, {
									"case":	110,
									"scores":	[-4.215063615190938]
								}, {
									"case":	111,
									"scores":	[-4.215063615190938]
								}, {
									"case":	112,
									"scores":	[-4.215063615190938]
								}, {
									"case":	113,
									"scores":	[-4.215063615190938]
								}, {
									"case":	114,
									"scores":	[-4.215063615190938]
								}, {
									"case":	115,
									"scores":	[-4.215063615190938]
								}, {
									"case":	116,
									"scores":	[-4.215063615190938]
								}, {
									"case":	117,
									"scores":	[-4.215063615190938]
								}, {
									"case":	118,
									"scores":	[-4.215063615190938]
								}, {
									"case":	119,
									"scores":	[-4.215063615190938]
								}, {
									"case":	120,
									"scores":	[-4.215063615190938]
								}, {
									"case":	121,
									"scores":	[-4.215063615190938]
								}, {
									"case":	122,
									"scores":	[-4.215063615190938]
								}, {
									"case":	123,
									"scores":	[-4.215063615190938]
								}, {
									"case":	124,
									"scores":	[-4.215063615190938]
								}, {
									"case":	125,
									"scores":	[-4.215063615190938]
								}, {
									"case":	126,
									"scores":	[-4.215063615190938]
								}, {
									"case":	127,
									"scores":	[-4.215063615190938]
								}, {
									"case":	128,
									"scores":	[-4.215063615190938]
								}, {
									"case":	129,
									"scores":	[-4.215063615190938]
								}, {
									"case":	130,
									"scores":	[-4.215063615190938]
								}, {
									"case":	131,
									"scores":	[-4.215063615190938]
								}, {
									"case":	132,
									"scores":	[-4.215063615190938]
								}, {
									"case":	133,
									"scores":	[-4.215063615190938]
								}]
						}, {
							"switch":	1,
							"types":	[[3], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [2]],
							"begin_line":	1265,
							"begin_column":	2,
							"end_line":	1272,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1265\", 61, &(function_handler), sizeof (function_handler), &(intern), sizeof (intern), &(intern->inner.ce), sizeof (intern->inner.ce), &(object_ptr), sizeof (object_ptr), &(method), sizeof (method), &(method_len), sizeof (method_len), &(key), sizeof (key), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(intern->inner.zobject), sizeof (intern->inner.zobject), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure))) {\n    if (zend_hash_find(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n        if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n            *object_ptr = intern->inner.zobject;\n            function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n        }\n    }\n}\n", "if (!function_handler) {\n    if (zend_hash_find(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n        if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n            *object_ptr = intern->inner.zobject;\n            function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n        }\n    }\n}\n", "if ((!function_handler && intern->inner.ce) && !__is_neg(\"\", \"L1265\", 61, &(function_handler), sizeof (function_handler), &(intern), sizeof (intern), &(intern->inner.ce), sizeof (intern->inner.ce), &(object_ptr), sizeof (object_ptr), &(method), sizeof (method), &(method_len), sizeof (method_len), &(key), sizeof (key), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(intern->inner.zobject), sizeof (intern->inner.zobject), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure), &(intern->dit_type), sizeof (intern->dit_type), &(intern->inner.object), sizeof (intern->inner.object), &(intern->inner.iterator), sizeof (intern->inner.iterator), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure))) {\n    if (zend_hash_find(&intern->inner.ce->function_table, method, method_len + 1, (void **)&function_handler) == -1) {\n        if ((*intern->inner.zobject).value.obj.handlers->get_method) {\n            *object_ptr = intern->inner.zobject;\n            function_handler = (**object_ptr).value.obj.handlers->get_method(object_ptr, method, method_len, key);\n        }\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3516797611281479, -6.3489805481281483, -8.2494112081281461, -5.627219364628143, -6.7491016541281486, -4.9841226241281422, -7.0377297541281472, -7.7214987375781483, -7.7214987375781483, -7.064853218128146, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.75814820812815, -8.75814820812815, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473, -8.0002601081281473]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.0856431764281469, -3.0829439634281464, -4.983374623428146, -2.3611827799281473, -3.4830650694281466, -1.7180860394281456, -3.7716931694281466, -4.4554621528781455, -4.4554621528781455, -3.7988166334281459, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -5.492111623428146, -5.492111623428146, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462, -4.7342235234281462]
								}]
						}]
				}, {
					"line":	1469,
					"switches":	[{
							"switch":	12,
							"types":	[[], [], [], [], [816], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], [], [], [], [700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815], [176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699], [], [], [], [], [], []],
							"begin_line":	1470,
							"begin_column":	2,
							"end_line":	1470,
							"end_column":	2,
							"patch_codes":	["memset(&intern->current, 0, sizeof (*(&intern->current)))", "memset(&intern->dit_type, 0, sizeof (*(&intern->dit_type)))", "memset(&intern->inner, 0, sizeof (*(&intern->inner)))", "memset(&intern->inner.ce, 0, sizeof (*(&intern->inner.ce)))", "memset(&intern->inner.ce->__call, 0, sizeof (*(&intern->inner.ce->__call)))", "memset(&intern->inner.ce->__callstatic, 0, sizeof (*(&intern->inner.ce->__callstatic)))", "memset(&intern->inner.ce->__get, 0, sizeof (*(&intern->inner.ce->__get)))", "memset(&intern->inner.ce->__isset, 0, sizeof (*(&intern->inner.ce->__isset)))", "memset(&intern->inner.ce->__set, 0, sizeof (*(&intern->inner.ce->__set)))", "memset(&intern->inner.ce->__tostring, 0, sizeof (*(&intern->inner.ce->__tostring)))", "memset(&intern->inner.ce->__unset, 0, sizeof (*(&intern->inner.ce->__unset)))", "memset(&intern->inner.ce->ce_flags, 0, sizeof (*(&intern->inner.ce->ce_flags)))", "memset(&intern->inner.ce->clone, 0, sizeof (*(&intern->inner.ce->clone)))", "memset(&intern->inner.ce->constants_table, 0, sizeof (*(&intern->inner.ce->constants_table)))", "memset(&intern->inner.ce->constructor, 0, sizeof (*(&intern->inner.ce->constructor)))", "memset(&intern->inner.ce->create_object, 0, sizeof (*(&intern->inner.ce->create_object)))", "memset(&intern->inner.ce->default_properties_count, 0, sizeof (*(&intern->inner.ce->default_properties_count)))", "memset(&intern->inner.ce->default_properties_table, 0, sizeof (*(&intern->inner.ce->default_properties_table)))", "memset(&intern->inner.ce->default_static_members_count, 0, sizeof (*(&intern->inner.ce->default_static_members_count)))", "memset(&intern->inner.ce->default_static_members_table, 0, sizeof (*(&intern->inner.ce->default_static_members_table)))", "memset(&intern->inner.ce->destructor, 0, sizeof (*(&intern->inner.ce->destructor)))", "memset(&intern->inner.ce->function_table, 0, sizeof (*(&intern->inner.ce->function_table)))", "memset(&intern->inner.ce->get_iterator, 0, sizeof (*(&intern->inner.ce->get_iterator)))", "memset(&intern->inner.ce->get_static_method, 0, sizeof (*(&intern->inner.ce->get_static_method)))", "memset(&intern->inner.ce->info, 0, sizeof (*(&intern->inner.ce->info)))", "memset(&intern->inner.ce->interface_gets_implemented, 0, sizeof (*(&intern->inner.ce->interface_gets_implemented)))", "memset(&intern->inner.ce->interfaces, 0, sizeof (*(&intern->inner.ce->interfaces)))", "memset(&intern->inner.ce->iterator_funcs, 0, sizeof (*(&intern->inner.ce->iterator_funcs)))", "memset(&intern->inner.ce->name, 0, sizeof (*(&intern->inner.ce->name)))", "memset(&intern->inner.ce->name_length, 0, sizeof (*(&intern->inner.ce->name_length)))", "memset(&intern->inner.ce->num_interfaces, 0, sizeof (*(&intern->inner.ce->num_interfaces)))", "memset(&intern->inner.ce->num_traits, 0, sizeof (*(&intern->inner.ce->num_traits)))", "memset(&intern->inner.ce->parent, 0, sizeof (*(&intern->inner.ce->parent)))", "memset(&intern->inner.ce->properties_info, 0, sizeof (*(&intern->inner.ce->properties_info)))", "memset(&intern->inner.ce->refcount, 0, sizeof (*(&intern->inner.ce->refcount)))", "memset(&intern->inner.ce->serialize, 0, sizeof (*(&intern->inner.ce->serialize)))", "memset(&intern->inner.ce->serialize_func, 0, sizeof (*(&intern->inner.ce->serialize_func)))", "memset(&intern->inner.ce->static_members_table, 0, sizeof (*(&intern->inner.ce->static_members_table)))", "memset(&intern->inner.ce->trait_aliases, 0, sizeof (*(&intern->inner.ce->trait_aliases)))", "memset(&intern->inner.ce->trait_precedences, 0, sizeof (*(&intern->inner.ce->trait_precedences)))", "memset(&intern->inner.ce->traits, 0, sizeof (*(&intern->inner.ce->traits)))", "memset(&intern->inner.ce->type, 0, sizeof (*(&intern->inner.ce->type)))", "memset(&intern->inner.ce->unserialize, 0, sizeof (*(&intern->inner.ce->unserialize)))", "memset(&intern->inner.ce->unserialize_func, 0, sizeof (*(&intern->inner.ce->unserialize_func)))", "memset(&intern->inner.iterator, 0, sizeof (*(&intern->inner.iterator)))", "memset(&intern->inner.object, 0, sizeof (*(&intern->inner.object)))", "memset(&intern->inner.zobject, 0, sizeof (*(&intern->inner.zobject)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.append, 0, sizeof (*(&intern->u.append)))", "memset(&intern->u.append.iterator, 0, sizeof (*(&intern->u.append.iterator)))", "memset(&intern->u.append.zarrayit, 0, sizeof (*(&intern->u.append.zarrayit)))", "memset(&intern->u.caching, 0, sizeof (*(&intern->u.caching)))", "memset(&intern->u.limit, 0, sizeof (*(&intern->u.limit)))", "memset(&intern->u.regex, 0, sizeof (*(&intern->u.regex)))", "memset(&intern->u.regex.flags, 0, sizeof (*(&intern->u.regex.flags)))", "memset(&intern->u.regex.mode, 0, sizeof (*(&intern->u.regex.mode)))", "memset(&intern->u.regex.pce, 0, sizeof (*(&intern->u.regex.pce)))", "memset(&intern->u.regex.pce->compile_options, 0, sizeof (*(&intern->u.regex.pce->compile_options)))", "memset(&intern->u.regex.pce->extra, 0, sizeof (*(&intern->u.regex.pce->extra)))", "memset(&intern->u.regex.pce->locale, 0, sizeof (*(&intern->u.regex.pce->locale)))", "memset(&intern->u.regex.pce->preg_options, 0, sizeof (*(&intern->u.regex.pce->preg_options)))", "memset(&intern->u.regex.pce->re, 0, sizeof (*(&intern->u.regex.pce->re)))", "memset(&intern->u.regex.pce->refcount, 0, sizeof (*(&intern->u.regex.pce->refcount)))", "memset(&intern->u.regex.pce->tables, 0, sizeof (*(&intern->u.regex.pce->tables)))", "memset(&intern->u.regex.preg_flags, 0, sizeof (*(&intern->u.regex.preg_flags)))", "memset(&intern->u.regex.regex, 0, sizeof (*(&intern->u.regex.regex)))", "memset(&intern->u.regex.use_flags, 0, sizeof (*(&intern->u.regex.use_flags)))", "memset(&spl_ce_ArrayIterator->__call, 0, sizeof (*(&spl_ce_ArrayIterator->__call)))", "memset(&spl_ce_ArrayIterator->__callstatic, 0, sizeof (*(&spl_ce_ArrayIterator->__callstatic)))", "memset(&spl_ce_ArrayIterator->__get, 0, sizeof (*(&spl_ce_ArrayIterator->__get)))", "memset(&spl_ce_ArrayIterator->__isset, 0, sizeof (*(&spl_ce_ArrayIterator->__isset)))", "memset(&spl_ce_ArrayIterator->__set, 0, sizeof (*(&spl_ce_ArrayIterator->__set)))", "memset(&spl_ce_ArrayIterator->__tostring, 0, sizeof (*(&spl_ce_ArrayIterator->__tostring)))", "memset(&spl_ce_ArrayIterator->__unset, 0, sizeof (*(&spl_ce_ArrayIterator->__unset)))", "memset(&spl_ce_ArrayIterator->ce_flags, 0, sizeof (*(&spl_ce_ArrayIterator->ce_flags)))", "memset(&spl_ce_ArrayIterator->clone, 0, sizeof (*(&spl_ce_ArrayIterator->clone)))", "memset(&spl_ce_ArrayIterator->constants_table, 0, sizeof (*(&spl_ce_ArrayIterator->constants_table)))", "memset(&spl_ce_ArrayIterator->constructor, 0, sizeof (*(&spl_ce_ArrayIterator->constructor)))", "memset(&spl_ce_ArrayIterator->create_object, 0, sizeof (*(&spl_ce_ArrayIterator->create_object)))", "memset(&spl_ce_ArrayIterator->default_properties_count, 0, sizeof (*(&spl_ce_ArrayIterator->default_properties_count)))", "memset(&spl_ce_ArrayIterator->default_properties_table, 0, sizeof (*(&spl_ce_ArrayIterator->default_properties_table)))", "memset(&spl_ce_ArrayIterator->default_static_members_count, 0, sizeof (*(&spl_ce_ArrayIterator->default_static_members_count)))", "memset(&spl_ce_ArrayIterator->default_static_members_table, 0, sizeof (*(&spl_ce_ArrayIterator->default_static_members_table)))", "memset(&spl_ce_ArrayIterator->destructor, 0, sizeof (*(&spl_ce_ArrayIterator->destructor)))", "memset(&spl_ce_ArrayIterator->function_table, 0, sizeof (*(&spl_ce_ArrayIterator->function_table)))", "memset(&spl_ce_ArrayIterator->get_iterator, 0, sizeof (*(&spl_ce_ArrayIterator->get_iterator)))", "memset(&spl_ce_ArrayIterator->get_static_method, 0, sizeof (*(&spl_ce_ArrayIterator->get_static_method)))", "memset(&spl_ce_ArrayIterator->info, 0, sizeof (*(&spl_ce_ArrayIterator->info)))", "memset(&spl_ce_ArrayIterator->interface_gets_implemented, 0, sizeof (*(&spl_ce_ArrayIterator->interface_gets_implemented)))", "memset(&spl_ce_ArrayIterator->interfaces, 0, sizeof (*(&spl_ce_ArrayIterator->interfaces)))", "memset(&spl_ce_ArrayIterator->iterator_funcs, 0, sizeof (*(&spl_ce_ArrayIterator->iterator_funcs)))", "memset(&spl_ce_ArrayIterator->name, 0, sizeof (*(&spl_ce_ArrayIterator->name)))", "memset(&spl_ce_ArrayIterator->name_length, 0, sizeof (*(&spl_ce_ArrayIterator->name_length)))", "memset(&spl_ce_ArrayIterator->num_interfaces, 0, sizeof (*(&spl_ce_ArrayIterator->num_interfaces)))", "memset(&spl_ce_ArrayIterator->num_traits, 0, sizeof (*(&spl_ce_ArrayIterator->num_traits)))", "memset(&spl_ce_ArrayIterator->parent, 0, sizeof (*(&spl_ce_ArrayIterator->parent)))", "memset(&spl_ce_ArrayIterator->properties_info, 0, sizeof (*(&spl_ce_ArrayIterator->properties_info)))", "memset(&spl_ce_ArrayIterator->refcount, 0, sizeof (*(&spl_ce_ArrayIterator->refcount)))", "memset(&spl_ce_ArrayIterator->serialize, 0, sizeof (*(&spl_ce_ArrayIterator->serialize)))", "memset(&spl_ce_ArrayIterator->serialize_func, 0, sizeof (*(&spl_ce_ArrayIterator->serialize_func)))", "memset(&spl_ce_ArrayIterator->static_members_table, 0, sizeof (*(&spl_ce_ArrayIterator->static_members_table)))", "memset(&spl_ce_ArrayIterator->trait_aliases, 0, sizeof (*(&spl_ce_ArrayIterator->trait_aliases)))", "memset(&spl_ce_ArrayIterator->trait_precedences, 0, sizeof (*(&spl_ce_ArrayIterator->trait_precedences)))", "memset(&spl_ce_ArrayIterator->traits, 0, sizeof (*(&spl_ce_ArrayIterator->traits)))", "memset(&spl_ce_ArrayIterator->type, 0, sizeof (*(&spl_ce_ArrayIterator->type)))", "memset(&spl_ce_ArrayIterator->unserialize, 0, sizeof (*(&spl_ce_ArrayIterator->unserialize)))", "memset(&spl_ce_ArrayIterator->unserialize_func, 0, sizeof (*(&spl_ce_ArrayIterator->unserialize_func)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->inner.ce, 0, sizeof (*(intern->inner.ce)))", "memset(intern->inner.ce->__call, 0, sizeof (*(intern->inner.ce->__call)))", "memset(intern->inner.ce->__callstatic, 0, sizeof (*(intern->inner.ce->__callstatic)))", "memset(intern->inner.ce->__get, 0, sizeof (*(intern->inner.ce->__get)))", "memset(intern->inner.ce->__isset, 0, sizeof (*(intern->inner.ce->__isset)))", "memset(intern->inner.ce->__set, 0, sizeof (*(intern->inner.ce->__set)))", "memset(intern->inner.ce->__tostring, 0, sizeof (*(intern->inner.ce->__tostring)))", "memset(intern->inner.ce->__unset, 0, sizeof (*(intern->inner.ce->__unset)))", "memset(intern->inner.ce->clone, 0, sizeof (*(intern->inner.ce->clone)))", "memset(intern->inner.ce->constructor, 0, sizeof (*(intern->inner.ce->constructor)))", "memset(intern->inner.ce->create_object, 0, sizeof (*(intern->inner.ce->create_object)))", "memset(intern->inner.ce->default_properties_table, 0, sizeof (*(intern->inner.ce->default_properties_table)))", "memset(intern->inner.ce->default_static_members_table, 0, sizeof (*(intern->inner.ce->default_static_members_table)))", "memset(intern->inner.ce->destructor, 0, sizeof (*(intern->inner.ce->destructor)))", "memset(intern->inner.ce->get_iterator, 0, sizeof (*(intern->inner.ce->get_iterator)))", "memset(intern->inner.ce->get_static_method, 0, sizeof (*(intern->inner.ce->get_static_method)))", "memset(intern->inner.ce->interface_gets_implemented, 0, sizeof (*(intern->inner.ce->interface_gets_implemented)))", "memset(intern->inner.ce->interfaces, 0, sizeof (*(intern->inner.ce->interfaces)))", "memset(intern->inner.ce->name, 0, sizeof (*(intern->inner.ce->name)))", "memset(intern->inner.ce->parent, 0, sizeof (*(intern->inner.ce->parent)))", "memset(intern->inner.ce->serialize, 0, sizeof (*(intern->inner.ce->serialize)))", "memset(intern->inner.ce->serialize_func, 0, sizeof (*(intern->inner.ce->serialize_func)))", "memset(intern->inner.ce->static_members_table, 0, sizeof (*(intern->inner.ce->static_members_table)))", "memset(intern->inner.ce->trait_aliases, 0, sizeof (*(intern->inner.ce->trait_aliases)))", "memset(intern->inner.ce->trait_precedences, 0, sizeof (*(intern->inner.ce->trait_precedences)))", "memset(intern->inner.ce->traits, 0, sizeof (*(intern->inner.ce->traits)))", "memset(intern->inner.ce->unserialize, 0, sizeof (*(intern->inner.ce->unserialize)))", "memset(intern->inner.ce->unserialize_func, 0, sizeof (*(intern->inner.ce->unserialize_func)))", "memset(intern->inner.iterator, 0, sizeof (*(intern->inner.iterator)))", "memset(intern->inner.object, 0, sizeof (*(intern->inner.object)))", "memset(intern->inner.zobject, 0, sizeof (*(intern->inner.zobject)))", "memset(intern->u.append.iterator, 0, sizeof (*(intern->u.append.iterator)))", "memset(intern->u.append.zarrayit, 0, sizeof (*(intern->u.append.zarrayit)))", "memset(intern->u.regex.pce, 0, sizeof (*(intern->u.regex.pce)))", "memset(intern->u.regex.pce->extra, 0, sizeof (*(intern->u.regex.pce->extra)))", "memset(intern->u.regex.pce->locale, 0, sizeof (*(intern->u.regex.pce->locale)))", "memset(intern->u.regex.pce->re, 0, sizeof (*(intern->u.regex.pce->re)))", "memset(intern->u.regex.pce->tables, 0, sizeof (*(intern->u.regex.pce->tables)))", "memset(intern->u.regex.regex, 0, sizeof (*(intern->u.regex.regex)))", "memset(spl_ce_ArrayIterator->__call, 0, sizeof (*(spl_ce_ArrayIterator->__call)))", "memset(spl_ce_ArrayIterator->__callstatic, 0, sizeof (*(spl_ce_ArrayIterator->__callstatic)))", "memset(spl_ce_ArrayIterator->__get, 0, sizeof (*(spl_ce_ArrayIterator->__get)))", "memset(spl_ce_ArrayIterator->__isset, 0, sizeof (*(spl_ce_ArrayIterator->__isset)))", "memset(spl_ce_ArrayIterator->__set, 0, sizeof (*(spl_ce_ArrayIterator->__set)))", "memset(spl_ce_ArrayIterator->__tostring, 0, sizeof (*(spl_ce_ArrayIterator->__tostring)))", "memset(spl_ce_ArrayIterator->__unset, 0, sizeof (*(spl_ce_ArrayIterator->__unset)))", "memset(spl_ce_ArrayIterator->clone, 0, sizeof (*(spl_ce_ArrayIterator->clone)))", "memset(spl_ce_ArrayIterator->constructor, 0, sizeof (*(spl_ce_ArrayIterator->constructor)))", "memset(spl_ce_ArrayIterator->create_object, 0, sizeof (*(spl_ce_ArrayIterator->create_object)))", "memset(spl_ce_ArrayIterator->default_properties_table, 0, sizeof (*(spl_ce_ArrayIterator->default_properties_table)))", "memset(spl_ce_ArrayIterator->default_static_members_table, 0, sizeof (*(spl_ce_ArrayIterator->default_static_members_table)))", "memset(spl_ce_ArrayIterator->destructor, 0, sizeof (*(spl_ce_ArrayIterator->destructor)))", "memset(spl_ce_ArrayIterator->get_iterator, 0, sizeof (*(spl_ce_ArrayIterator->get_iterator)))", "memset(spl_ce_ArrayIterator->get_static_method, 0, sizeof (*(spl_ce_ArrayIterator->get_static_method)))", "memset(spl_ce_ArrayIterator->interface_gets_implemented, 0, sizeof (*(spl_ce_ArrayIterator->interface_gets_implemented)))", "memset(spl_ce_ArrayIterator->interfaces, 0, sizeof (*(spl_ce_ArrayIterator->interfaces)))", "memset(spl_ce_ArrayIterator->name, 0, sizeof (*(spl_ce_ArrayIterator->name)))", "memset(spl_ce_ArrayIterator->parent, 0, sizeof (*(spl_ce_ArrayIterator->parent)))", "memset(spl_ce_ArrayIterator->serialize, 0, sizeof (*(spl_ce_ArrayIterator->serialize)))", "memset(spl_ce_ArrayIterator->serialize_func, 0, sizeof (*(spl_ce_ArrayIterator->serialize_func)))", "memset(spl_ce_ArrayIterator->static_members_table, 0, sizeof (*(spl_ce_ArrayIterator->static_members_table)))", "memset(spl_ce_ArrayIterator->trait_aliases, 0, sizeof (*(spl_ce_ArrayIterator->trait_aliases)))", "memset(spl_ce_ArrayIterator->trait_precedences, 0, sizeof (*(spl_ce_ArrayIterator->trait_precedences)))", "memset(spl_ce_ArrayIterator->traits, 0, sizeof (*(spl_ce_ArrayIterator->traits)))", "memset(spl_ce_ArrayIterator->unserialize, 0, sizeof (*(spl_ce_ArrayIterator->unserialize)))", "memset(spl_ce_ArrayIterator->unserialize_func, 0, sizeof (*(spl_ce_ArrayIterator->unserialize_func)))", "(intern)->current.pos++", "(intern)->u.regex.pce->refcount++", "(intern)->u.regex.pce->refcount--", "(intern->u.caching.zcache)->is_ref__gc = (-1)", "(intern->u.caching.zcache)->is_ref__gc = (0)", "(intern->u.caching.zcache)->is_ref__gc = (1)", "(intern->u.caching.zcache)->is_ref__gc = (5)", "(intern->u.caching.zcache)->refcount__gc = (-1)", "(intern->u.caching.zcache)->refcount__gc = (0)", "(intern->u.caching.zcache)->refcount__gc = (1)", "(intern->u.caching.zcache)->refcount__gc = (5)", "(regex)++", "_array_init(((intern)->u.caching.zcache), 0)", "_array_init(((return_value)), 0)", "_array_init(((retval)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zobject)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((retval)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zobject)))", "_efree(((intern)))", "_efree(((intern)->current.str_key))", "_efree(((intern)->u.regex.regex))", "_efree(((regex)))", "_efree(((return_value)))", "_efree(((retval)))", "_efree(((this_ptr)))", "_efree(((zobject)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((retval))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zobject))))", "_zval_copy_ctor(((intern)->u.caching.zstr))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((retval)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zobject)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((retval))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zobject))", "_zval_dtor(((return_value)))", "_zval_dtor(((retval)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zobject)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((retval))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zobject))", "_zval_ptr_dtor((&(intern)->current.data))", "_zval_ptr_dtor((&(intern)->inner.zobject))", "_zval_ptr_dtor((&(intern)->u.append.zarrayit))", "_zval_ptr_dtor((&(intern)->u.caching.zcache))", "_zval_ptr_dtor((&(intern)->u.caching.zchildren))", "_zval_ptr_dtor((&(intern)->u.caching.zstr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zobject)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "ce = (ce)", "ce = (ce_base)", "ce = (ce_inner)", "ce = zend_get_class_entry(&(*(return_value)))", "ce = zend_get_class_entry(&(*(retval)))", "ce = zend_get_class_entry(&(*(this_ptr)))", "ce = zend_get_class_entry(&(*(zobject)))", "convert_to_boolean((return_value))", "convert_to_boolean((retval))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zobject))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((retval))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zobject))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((retval)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zobject)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((retval))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zobject))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((retval))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zobject))", "inc_refcount = (-1)", "inc_refcount = (0)", "inc_refcount = (1)", "inc_refcount = (5)", "inc_refcount = (ht)", "inc_refcount = (inc_refcount)", "inc_refcount = (regex_len)", "inc_refcount = (return_value_used)", "intern = (intern)", "intern->dit_type = (-1)", "intern->dit_type = (0)", "intern->dit_type = (1)", "intern->dit_type = (5)", "intern->dit_type = (dit_type)", "intern->inner.ce = (ce)", "intern->inner.ce = (ce_base)", "intern->inner.ce = (ce_inner)", "intern->inner.ce = dit_type == (DIT_AppendIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_CachingIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_Default) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_FilterIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_InfiniteIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_IteratorIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_LimitIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_NoRewindIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_ParentIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RecursiveCachingIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RecursiveFilterIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RecursiveRegexIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RegexIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_Unknown) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? (ce) : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? (ce_base) : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? (ce_inner) : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(return_value)))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(retval)))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(this_ptr)))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(zobject)))", "intern->inner.iterator = (intern)->inner.ce->get_iterator(intern->inner.ce, zobject, 0)", "intern->inner.iterator = intern->inner.ce->get_iterator((intern)->inner.ce, zobject, 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (return_value), 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (retval), 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (this_ptr), 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (zobject), 0)", "intern->inner.object = zend_object_store_get_object((return_value))", "intern->inner.object = zend_object_store_get_object((retval))", "intern->inner.object = zend_object_store_get_object((this_ptr))", "intern->inner.object = zend_object_store_get_object((zobject))", "intern->inner.zobject = (return_value)", "intern->inner.zobject = (retval)", "intern->inner.zobject = (this_ptr)", "intern->inner.zobject = (zobject)", "intern->u.append.iterator = (ce)->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.append.iterator = (ce_base)->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.append.iterator = (ce_inner)->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator((ce), intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator((ce_base), intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator((ce_inner), intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator(spl_ce_ArrayIterator, (intern)->u.append.zarrayit, 0)", "intern->u.limit.count = (-1)", "intern->u.limit.count = (0)", "intern->u.limit.count = (1)", "intern->u.limit.count = (5)", "intern->u.limit.count = (mode)", "intern->u.limit.offset = (-1)", "intern->u.limit.offset = (0)", "intern->u.limit.offset = (1)", "intern->u.limit.offset = (5)", "intern->u.limit.offset = (mode)", "intern->u.regex.flags = (-1)", "intern->u.regex.flags = (0)", "intern->u.regex.flags = (1)", "intern->u.regex.flags = (5)", "intern->u.regex.flags = (mode)", "intern->u.regex.mode = (-1)", "intern->u.regex.mode = (0)", "intern->u.regex.mode = (1)", "intern->u.regex.mode = (5)", "intern->u.regex.pce = pcre_get_compiled_regex_cache((regex), regex_len)", "intern->u.regex.preg_flags = (-1)", "intern->u.regex.preg_flags = (0)", "intern->u.regex.preg_flags = (1)", "intern->u.regex.preg_flags = (5)", "intern->u.regex.preg_flags = (mode)", "intern->u.regex.regex = (regex)", "intern->u.regex.regex = _estrndup(((regex)), (regex_len))", "intern->u.regex.use_flags = (-1)", "intern->u.regex.use_flags = (0)", "intern->u.regex.use_flags = (1)", "intern->u.regex.use_flags = (5)", "intern->u.regex.use_flags = (ht)", "intern->u.regex.use_flags = (inc_refcount)", "intern->u.regex.use_flags = (regex_len)", "intern->u.regex.use_flags = (return_value_used)", "memset((intern), 0, sizeof(spl_dual_it_object))", "php_error_docref0(((void *)0), (1 << 0L), \"The %s instance wasn't initialized properly\", zend_get_class_entry(&(**(return_value_ptr)))->name)", "spl_append_it_fetch((intern))", "spl_append_it_next((intern))", "spl_append_it_next_iterator((intern))", "spl_caching_it_next((intern))", "spl_caching_it_rewind((intern))", "spl_dual_it_fetch((intern), 0)", "spl_dual_it_fetch((intern), 1)", "spl_dual_it_free((intern))", "spl_dual_it_next((intern), 0)", "spl_dual_it_next((intern), 1)", "spl_dual_it_require((intern))", "spl_dual_it_rewind((intern))", "spl_register_interface(&(ce), \"Countable\", spl_funcs_Countable)", "spl_register_interface(&(ce), \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&(ce), \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&(ce), \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_interface(&(ce_base), \"Countable\", spl_funcs_Countable)", "spl_register_interface(&(ce_base), \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&(ce_base), \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&(ce_base), \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_interface(&(ce_inner), \"Countable\", spl_funcs_Countable)", "spl_register_interface(&(ce_inner), \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&(ce_inner), \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&(ce_inner), \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property((ce), \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_property((ce_base), \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_property((ce_inner), \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&(ce), \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&(ce), \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&(ce), \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_std_class(&(ce_base), \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&(ce_base), \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&(ce_base), \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_std_class(&(ce_inner), \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&(ce_inner), \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&(ce_inner), \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&(ce), spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&(ce), spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&(ce), spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&(ce), spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&(ce), spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&(ce), spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&(ce_base), spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&(ce_base), spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&(ce_base), spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&(ce_base), spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&(ce_base), spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&(ce_base), spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, (ce), \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, (ce_base), \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, (ce_inner), \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, (ce), \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, (ce_base), \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, (ce_inner), \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, (ce), \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, (ce_base), \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, (ce_inner), \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, (ce), \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, (ce_base), \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, (ce_inner), \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, (ce), \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, (ce_base), \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, (ce_inner), \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, (ce), \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, (ce_base), \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, (ce_inner), \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, (ce), \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, (ce_base), \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, (ce_inner), \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, (ce), \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, (ce_base), \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, (ce_inner), \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, (ce), \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, (ce_base), \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, (ce_inner), \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, (ce), \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, (ce_base), \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, (ce_inner), \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, (ce), \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, (ce_base), \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, (ce_inner), \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, (ce), \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, (ce_base), \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, (ce_inner), \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_call_method(&(intern)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&(return_value), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&(retval), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&(this_ptr), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&(zobject), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, (ce), &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, (ce_base), &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, (ce_inner), &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &(ce)->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &(ce_base)->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &(ce_inner)->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, (ce), &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, (ce_base), &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, (ce_inner), &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &(ce)->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &(ce_base)->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &(ce_inner)->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(return_value), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(retval), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(this_ptr), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(zobject), 0, ((void *)0), ((void *)0))", "zend_class_implements((ce), 1, spl_ce_Countable)", "zend_class_implements((ce), 1, spl_ce_OuterIterator)", "zend_class_implements((ce), 1, spl_ce_RecursiveIterator)", "zend_class_implements((ce), 1, zend_ce_arrayaccess)", "zend_class_implements((ce), 1, zend_ce_iterator)", "zend_class_implements((ce_base), 1, spl_ce_Countable)", "zend_class_implements((ce_base), 1, spl_ce_OuterIterator)", "zend_class_implements((ce_base), 1, spl_ce_RecursiveIterator)", "zend_class_implements((ce_base), 1, zend_ce_arrayaccess)", "zend_class_implements((ce_base), 1, zend_ce_iterator)", "zend_class_implements((ce_inner), 1, spl_ce_Countable)", "zend_class_implements((ce_inner), 1, spl_ce_OuterIterator)", "zend_class_implements((ce_inner), 1, spl_ce_RecursiveIterator)", "zend_class_implements((ce_inner), 1, zend_ce_arrayaccess)", "zend_class_implements((ce_inner), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_CachingIterator, 1, (ce))", "zend_class_implements(spl_ce_CachingIterator, 1, (ce_base))", "zend_class_implements(spl_ce_CachingIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_EmptyIterator, 1, (ce))", "zend_class_implements(spl_ce_EmptyIterator, 1, (ce_base))", "zend_class_implements(spl_ce_EmptyIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_IteratorIterator, 1, (ce))", "zend_class_implements(spl_ce_IteratorIterator, 1, (ce_base))", "zend_class_implements(spl_ce_IteratorIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_OuterIterator, 1, (ce))", "zend_class_implements(spl_ce_OuterIterator, 1, (ce_base))", "zend_class_implements(spl_ce_OuterIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_SeekableIterator, 1, (ce))", "zend_class_implements(spl_ce_SeekableIterator, 1, (ce_base))", "zend_class_implements(spl_ce_SeekableIterator, 1, (ce_inner))", "zend_declare_class_constant_long((ce), \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long((ce), \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long((ce), \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long((ce), \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long((ce), \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long((ce), \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long((ce), \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long((ce), \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long((ce), \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long((ce), \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long((ce), \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long((ce), \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long((ce), \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long((ce), \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long((ce), \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long((ce), \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long((ce), \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long((ce), \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long((ce), \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long((ce), \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long((ce), \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long((ce), \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long((ce), \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_declare_class_constant_long((ce_base), \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long((ce_base), \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long((ce_base), \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long((ce_base), \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long((ce_base), \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long((ce_base), \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long((ce_base), \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long((ce_base), \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long((ce_base), \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long((ce_base), \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long((ce_base), \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long((ce_base), \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long((ce_base), \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long((ce_base), \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long((ce_base), \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long((ce_base), \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long((ce_base), \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long((ce_base), \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long((ce_base), \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long((ce_base), \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long((ce_base), \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long((ce_base), \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long((ce_base), \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_declare_class_constant_long((ce_inner), \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long((ce_inner), \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long((ce_inner), \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long((ce_inner), \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long((ce_inner), \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long((ce_inner), \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long((ce_inner), \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long((ce_inner), \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long((ce_inner), \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long((ce_inner), \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long((ce_inner), \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long((ce_inner), \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long((ce_inner), \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long((ce_inner), \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long((ce_inner), \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long((ce_inner), \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long((ce_inner), \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 3L), \"Undefined index:  %s\", (regex))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_InvalidArgumentException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_InvalidArgumentException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_InvalidArgumentException, &error_handling)", "zend_replace_error_handling(EH_THROW, (ce), &error_handling)", "zend_replace_error_handling(EH_THROW, (ce_base), &error_handling)", "zend_replace_error_handling(EH_THROW, (ce_inner), &error_handling)", "zend_throw_exception((ce), \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception((ce), \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception((ce), \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception((ce), \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception((ce), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception((ce), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception((ce), \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception((ce), \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception((ce), \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception((ce), \"Parameter offset must be >= 0\", 0)", "zend_throw_exception((ce), \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception((ce), \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception((ce_base), \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception((ce_base), \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception((ce_base), \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception((ce_base), \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception((ce_base), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception((ce_base), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception((ce_base), \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception((ce_base), \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception((ce_base), \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception((ce_base), \"Parameter offset must be >= 0\", 0)", "zend_throw_exception((ce_base), \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception((ce_base), \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception((ce_inner), \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception((ce_inner), \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception((ce_inner), \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception((ce_inner), \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception((ce_inner), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception((ce_inner), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception((ce_inner), \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception((ce_inner), \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception((ce_inner), \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception((ce_inner), \"Parameter offset must be >= 0\", 0)", "zend_throw_exception((ce_inner), \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception((ce_inner), \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception_ex((ce), 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex((ce), 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex((ce), 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex((ce), 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex((ce), 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zend_throw_exception_ex((ce_base), 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex((ce_base), 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex((ce_base), 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex((ce_base), 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex((ce_base), 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zend_throw_exception_ex((ce_inner), 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex((ce_inner), 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex((ce_inner), 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex((ce_inner), 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex((ce_inner), 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((retval))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((zobject))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((retval))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((zobject))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", (ce)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", (ce_base)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", (ce_inner)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((retval))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((zobject))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", ((ce))->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", ((ce_base))->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", ((ce_inner))->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, ((ce))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, ((ce_base))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, ((ce_inner))->name)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", (ce)->name)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", (ce_base)->name)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", (ce_inner)->name)", "zobject = (return_value)", "zobject = (retval)", "zobject = (this_ptr)", "zobject = (zobject)", "zval_addref_p((intern)->current.data)", "zval_addref_p((return_value))", "zval_addref_p((retval))", "zval_addref_p((this_ptr))", "zval_addref_p((zobject))", "zval_addref_p(*((return_value_ptr)))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((retval))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zobject))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->u.caching.zcache)->is_ref__gc = 0", "(intern->u.caching.zcache)->refcount__gc = 1", "_array_init((intern->u.caching.zcache), 0)", "_zval_ptr_dtor((&retval))", "ce = zend_get_class_entry(&(*zobject))", "exit(1)", "inc_refcount = 0", "intern = (spl_dual_it_object *)zend_object_store_get_object((this_ptr))", "intern->dit_type = dit_type", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, zobject, 0)", "intern->inner.object = zend_object_store_get_object(zobject)", "intern->inner.zobject = zobject", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.limit.count = -1", "intern->u.limit.offset = 0", "intern->u.regex.flags = 0", "intern->u.regex.mode = mode", "intern->u.regex.pce = pcre_get_compiled_regex_cache(regex, regex_len)", "intern->u.regex.pce->refcount++", "intern->u.regex.preg_flags = 0", "intern->u.regex.regex = _estrndup((regex), (regex_len))", "intern->u.regex.use_flags = (ht) >= 5", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_InvalidArgumentException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zobject = retval", "zval_addref_p(zobject)", "if (__is_neg(\"\", \"L1470\", 35, &(intern), sizeof (intern), &(intern->u.regex.pce), sizeof (intern->u.regex.pce), &(regex), sizeof (regex), &(regex_len), sizeof (regex_len), &(intern->u.regex.regex), sizeof (intern->u.regex.regex), &(mode), sizeof (mode), &(intern->u.regex.mode), sizeof (intern->u.regex.mode), &(intern->u.regex.pce->refcount), sizeof (intern->u.regex.pce->refcount), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(ht), sizeof (ht), &(ce_inner), sizeof (ce_inner), &(zobject), sizeof (zobject), &(intern->u.regex.flags), sizeof (intern->u.regex.flags), &(intern->u.regex.preg_flags), sizeof (intern->u.regex.preg_flags), &(intern->u.regex.use_flags), sizeof (intern->u.regex.use_flags), &(inc_refcount), sizeof (inc_refcount), &(dit_type), sizeof (dit_type), &(ce), sizeof (ce), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(retval), sizeof (retval), &(spl_ce_LogicException), sizeof (spl_ce_LogicException), &(zend_ce_traversable), sizeof (zend_ce_traversable), &(zend_ce_aggregate), sizeof (zend_ce_aggregate), &(zend_ce_iterator), sizeof (zend_ce_iterator), &(spl_ce_OutOfRangeException), sizeof (spl_ce_OutOfRangeException), &(intern->dit_type), sizeof (intern->dit_type), &(ce_base), sizeof (ce_base), &(spl_ce_BadMethodCallException), sizeof (spl_ce_BadMethodCallException), &(this_ptr), sizeof (this_ptr), &(intern->u.regex.pce->re), sizeof (intern->u.regex.pce->re), &(intern->u.regex.pce->extra), sizeof (intern->u.regex.pce->extra), &(intern->u.regex.pce->preg_options), sizeof (intern->u.regex.pce->preg_options), &(intern->u.regex.pce->locale), sizeof (intern->u.regex.pce->locale), &(intern->u.regex.pce->tables), sizeof (intern->u.regex.pce->tables), &(intern->u.regex.pce->compile_options), sizeof (intern->u.regex.pce->compile_options)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	2,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	3,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	4,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	5,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	6,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	7,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	8,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	9,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	10,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	11,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	12,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	13,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	14,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	15,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	16,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	17,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	18,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	19,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	20,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	21,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	22,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	23,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	24,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	25,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	26,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	27,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	28,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	29,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	30,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	31,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	32,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	33,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	34,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	35,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	36,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	37,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	38,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	39,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	40,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	41,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	42,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	43,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	44,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	45,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	46,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	47,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	48,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	49,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	50,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	51,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	52,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	53,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	54,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	55,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	56,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	57,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	58,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	59,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	60,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	61,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	62,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	63,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	64,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	65,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	66,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	67,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	68,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	69,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	70,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	71,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	72,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	73,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	74,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	75,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	76,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	77,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	78,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	79,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	80,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	81,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	82,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	83,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	84,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	85,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	86,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	87,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	88,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	89,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	90,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	91,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	92,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	93,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	94,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	95,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	96,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	97,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	98,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	99,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	100,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	101,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	102,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	103,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	104,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	105,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	106,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	107,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	108,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	109,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	110,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	111,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	112,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	113,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	114,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	115,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	116,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	117,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	118,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	119,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	120,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	121,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	122,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	123,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	124,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	125,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	126,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	127,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	128,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	129,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	130,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	131,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	132,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	133,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	134,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	135,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	136,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	137,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	138,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	139,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	140,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	141,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	142,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	143,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	144,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	145,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	146,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	147,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	148,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	149,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	150,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	151,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	152,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	153,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	154,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	155,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	156,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	157,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	158,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	159,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	160,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	161,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	162,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	163,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	164,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	165,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	166,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	167,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	168,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	169,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	170,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	171,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	172,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	173,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	174,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	175,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	176,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	177,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	178,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	179,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	180,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	181,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	182,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	183,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	184,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	185,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	186,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	187,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	188,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	189,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	190,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	191,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	192,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	193,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	194,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	195,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	196,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	197,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	198,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	199,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	200,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	201,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	202,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	203,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	204,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	205,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	206,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	207,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	208,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	209,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	210,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	211,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	212,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	213,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	214,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	215,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	216,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	217,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	218,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	219,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	220,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	221,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	222,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	223,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	224,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	225,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	226,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	227,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	228,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	229,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	230,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	231,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	232,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	233,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	234,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	235,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	236,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	237,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	238,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	239,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	240,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	241,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	242,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	243,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	244,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	245,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	246,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	247,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	248,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	249,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	250,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	251,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	252,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	253,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	254,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	255,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	256,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	257,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	258,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	259,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	260,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	261,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	262,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	263,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	264,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	265,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	266,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	267,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	268,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	269,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	270,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	271,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	272,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	273,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	274,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	275,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	276,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	277,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	278,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	279,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	280,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	281,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	282,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	283,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	284,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	285,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	286,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	287,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	288,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	289,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	290,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	291,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	292,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	293,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	294,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	295,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	296,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	297,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	298,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	299,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	300,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	301,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	302,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	303,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	304,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	305,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	306,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	307,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	308,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	309,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	310,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	311,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	312,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	313,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	314,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	315,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	316,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	317,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	318,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	319,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	320,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	321,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	322,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	323,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	324,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	325,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	326,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	327,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	328,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	329,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	330,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	331,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	332,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	333,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	334,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	335,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	336,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	337,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	338,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	339,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	340,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	341,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	342,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	343,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	344,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	345,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	346,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	347,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	348,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	349,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	350,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	351,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	352,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	353,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	354,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	355,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	356,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	357,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	358,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	359,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	360,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	361,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	362,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	363,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	364,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	365,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	366,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	367,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	368,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	369,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	370,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	371,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	372,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	373,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	374,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	375,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	376,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	377,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	378,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	379,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	380,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	381,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	382,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	383,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	384,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	385,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	386,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	387,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	388,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	389,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	390,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	391,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	392,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	393,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	394,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	395,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	396,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	397,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	398,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	399,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	400,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	401,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	402,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	403,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	404,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	405,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	406,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	407,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	408,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	409,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	410,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	411,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	412,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	413,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	414,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	415,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	416,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	417,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	418,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	419,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	420,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	421,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	422,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	423,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	424,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	425,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	426,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	427,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	428,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	429,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	430,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	431,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	432,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	433,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	434,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	435,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	436,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	437,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	438,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	439,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	440,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	441,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	442,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	443,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	444,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	445,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	446,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	447,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	448,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	449,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	450,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	451,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	452,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	453,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	454,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	455,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	456,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	457,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	458,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	459,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	460,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	461,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	462,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	463,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	464,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	465,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	466,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	467,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	468,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	469,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	470,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	471,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	472,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	473,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	474,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	475,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	476,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	477,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	478,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	479,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	480,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	481,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	482,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	483,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	484,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	485,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	486,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	487,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	488,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	489,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	490,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	491,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	492,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	493,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	494,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	495,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	496,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	497,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	498,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	499,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	500,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	501,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	502,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	503,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	504,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	505,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	506,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	507,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	508,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	509,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	510,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	511,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	512,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	513,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	514,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	515,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	516,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	517,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	518,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	519,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	520,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	521,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	522,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	523,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	524,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	525,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	526,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	527,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	528,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	529,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	530,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	531,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	532,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	533,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	534,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	535,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	536,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	537,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	538,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	539,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	540,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	541,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	542,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	543,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	544,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	545,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	546,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	547,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	548,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	549,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	550,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	551,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	552,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	553,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	554,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	555,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	556,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	557,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	558,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	559,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	560,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	561,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	562,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	563,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	564,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	565,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	566,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	567,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	568,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	569,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	570,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	571,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	572,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	573,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	574,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	575,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	576,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	577,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	578,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	579,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	580,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	581,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	582,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	583,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	584,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	585,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	586,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	587,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	588,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	589,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	590,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	591,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	592,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	593,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	594,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	595,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	596,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	597,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	598,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	599,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	600,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	601,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	602,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	603,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	604,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	605,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	606,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	607,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	608,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	609,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	610,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	611,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	612,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	613,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	614,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	615,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	616,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	617,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	618,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	619,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	620,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	621,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	622,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	623,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	624,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	625,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	626,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	627,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	628,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	629,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	630,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	631,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	632,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	633,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	634,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	635,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	636,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	637,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	638,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	639,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	640,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	641,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	642,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	643,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	644,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	645,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	646,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	647,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	648,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	649,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	650,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	651,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	652,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	653,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	654,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	655,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	656,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	657,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	658,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	659,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	660,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	661,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	662,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	663,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	664,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	665,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	666,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	667,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	668,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	669,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	670,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	671,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	672,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	673,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	674,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	675,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	676,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	677,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	678,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	679,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	680,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	681,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	682,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	683,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	684,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	685,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	686,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	687,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	688,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	689,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	690,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	691,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	692,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	693,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	694,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	695,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	696,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	697,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	698,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	699,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	700,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	701,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	702,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	703,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	704,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	705,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	706,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	707,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	708,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	709,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	710,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	711,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	712,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	713,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	714,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	715,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	716,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	717,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	718,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	719,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	720,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	721,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	722,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	723,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	724,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	725,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	726,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	727,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	728,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	729,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	730,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	731,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	732,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	733,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	734,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	735,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	736,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	737,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	738,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	739,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	740,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	741,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	742,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	743,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	744,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	745,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	746,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	747,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	748,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	749,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	750,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	751,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	752,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	753,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	754,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	755,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	756,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	757,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	758,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	759,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	760,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	761,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	762,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	763,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	764,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	765,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	766,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	767,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	768,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	769,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	770,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	771,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	772,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	773,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	774,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	775,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	776,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	777,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	778,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	779,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	780,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	781,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	782,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	783,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	784,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	785,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	786,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	787,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	788,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	789,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	790,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	791,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	792,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	793,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	794,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	795,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	796,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	797,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	798,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	799,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	800,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	801,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	802,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	803,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	804,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	805,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	806,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	807,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	808,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	809,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	810,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	811,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	812,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	813,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	814,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	815,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	816,
									"scores":	[-11.588773441624589, -9.581492627624586, -9.5097240599245865, -8.7978999429245857, -8.7129999539245873, -9.2787208629245868, -8.5021108369245866, -10.591877006924586, -9.997907264724585, -9.5298965429245861, -9.7759354567245857, -9.7388350567245858, -10.306942316924586, -10.306942316924586, -10.306942316924586, -9.4927961429245862, -9.5298965429245861, -9.7388350567245858, -9.997907264724585, -9.7388350567245858, -9.997907264724585, -9.997907264724585, -9.997907264724585, -9.997907264724585, -9.997907264724585, -10.306942316924586, -9.7759354567245857, -9.997907264724585, -9.7759354567245857, -10.552981230724587, -10.552981230724587, -10.306942316924586, -10.517831433924584, -10.517831433924584, -10.306942316924586]
								}]
						}, {
							"switch":	13,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1470,
							"begin_column":	4,
							"end_line":	1474,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L1470\", 35, &(intern), sizeof (intern), &(intern->u.regex.pce), sizeof (intern->u.regex.pce), &(regex), sizeof (regex), &(regex_len), sizeof (regex_len), &(intern->u.regex.regex), sizeof (intern->u.regex.regex), &(mode), sizeof (mode), &(intern->u.regex.mode), sizeof (intern->u.regex.mode), &(intern->u.regex.pce->refcount), sizeof (intern->u.regex.pce->refcount), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(ht), sizeof (ht), &(ce_inner), sizeof (ce_inner), &(zobject), sizeof (zobject), &(intern->u.regex.flags), sizeof (intern->u.regex.flags), &(intern->u.regex.preg_flags), sizeof (intern->u.regex.preg_flags), &(intern->u.regex.use_flags), sizeof (intern->u.regex.use_flags), &(inc_refcount), sizeof (inc_refcount), &(dit_type), sizeof (dit_type), &(ce), sizeof (ce), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(retval), sizeof (retval), &(spl_ce_LogicException), sizeof (spl_ce_LogicException), &(zend_ce_traversable), sizeof (zend_ce_traversable), &(zend_ce_aggregate), sizeof (zend_ce_aggregate), &(zend_ce_iterator), sizeof (zend_ce_iterator), &(spl_ce_OutOfRangeException), sizeof (spl_ce_OutOfRangeException), &(intern->dit_type), sizeof (intern->dit_type), &(ce_base), sizeof (ce_base), &(spl_ce_BadMethodCallException), sizeof (spl_ce_BadMethodCallException), &(this_ptr), sizeof (this_ptr), &(intern->u.regex.pce->re), sizeof (intern->u.regex.pce->re), &(intern->u.regex.pce->extra), sizeof (intern->u.regex.pce->extra), &(intern->u.regex.pce->preg_options), sizeof (intern->u.regex.pce->preg_options), &(intern->u.regex.pce->locale), sizeof (intern->u.regex.pce->locale), &(intern->u.regex.pce->tables), sizeof (intern->u.regex.pce->tables), &(intern->u.regex.pce->compile_options), sizeof (intern->u.regex.pce->compile_options))) {\n    zend_restore_error_handling(&error_handling);\n    return ((void *)0);\n}\n", "if ((intern->u.regex.pce == ((void *)0)) || __is_neg(\"\", \"L1470\", 35, &(intern), sizeof (intern), &(intern->u.regex.pce), sizeof (intern->u.regex.pce), &(regex), sizeof (regex), &(regex_len), sizeof (regex_len), &(intern->u.regex.regex), sizeof (intern->u.regex.regex), &(mode), sizeof (mode), &(intern->u.regex.mode), sizeof (intern->u.regex.mode), &(intern->u.regex.pce->refcount), sizeof (intern->u.regex.pce->refcount), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(ht), sizeof (ht), &(ce_inner), sizeof (ce_inner), &(zobject), sizeof (zobject), &(intern->u.regex.flags), sizeof (intern->u.regex.flags), &(intern->u.regex.preg_flags), sizeof (intern->u.regex.preg_flags), &(intern->u.regex.use_flags), sizeof (intern->u.regex.use_flags), &(inc_refcount), sizeof (inc_refcount), &(dit_type), sizeof (dit_type), &(ce), sizeof (ce), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(retval), sizeof (retval), &(spl_ce_LogicException), sizeof (spl_ce_LogicException), &(zend_ce_traversable), sizeof (zend_ce_traversable), &(zend_ce_aggregate), sizeof (zend_ce_aggregate), &(zend_ce_iterator), sizeof (zend_ce_iterator), &(spl_ce_OutOfRangeException), sizeof (spl_ce_OutOfRangeException), &(intern->dit_type), sizeof (intern->dit_type), &(ce_base), sizeof (ce_base), &(spl_ce_BadMethodCallException), sizeof (spl_ce_BadMethodCallException), &(this_ptr), sizeof (this_ptr), &(intern->u.regex.pce->re), sizeof (intern->u.regex.pce->re), &(intern->u.regex.pce->extra), sizeof (intern->u.regex.pce->extra), &(intern->u.regex.pce->preg_options), sizeof (intern->u.regex.pce->preg_options), &(intern->u.regex.pce->locale), sizeof (intern->u.regex.pce->locale), &(intern->u.regex.pce->tables), sizeof (intern->u.regex.pce->tables), &(intern->u.regex.pce->compile_options), sizeof (intern->u.regex.pce->compile_options))) {\n    zend_restore_error_handling(&error_handling);\n    return ((void *)0);\n}\n", "if ((intern->u.regex.pce == ((void *)0)) && !__is_neg(\"\", \"L1470\", 35, &(intern), sizeof (intern), &(intern->u.regex.pce), sizeof (intern->u.regex.pce), &(regex), sizeof (regex), &(regex_len), sizeof (regex_len), &(intern->u.regex.regex), sizeof (intern->u.regex.regex), &(mode), sizeof (mode), &(intern->u.regex.mode), sizeof (intern->u.regex.mode), &(intern->u.regex.pce->refcount), sizeof (intern->u.regex.pce->refcount), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(ht), sizeof (ht), &(ce_inner), sizeof (ce_inner), &(zobject), sizeof (zobject), &(intern->u.regex.flags), sizeof (intern->u.regex.flags), &(intern->u.regex.preg_flags), sizeof (intern->u.regex.preg_flags), &(intern->u.regex.use_flags), sizeof (intern->u.regex.use_flags), &(inc_refcount), sizeof (inc_refcount), &(dit_type), sizeof (dit_type), &(ce), sizeof (ce), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(retval), sizeof (retval), &(spl_ce_LogicException), sizeof (spl_ce_LogicException), &(zend_ce_traversable), sizeof (zend_ce_traversable), &(zend_ce_aggregate), sizeof (zend_ce_aggregate), &(zend_ce_iterator), sizeof (zend_ce_iterator), &(spl_ce_OutOfRangeException), sizeof (spl_ce_OutOfRangeException), &(intern->dit_type), sizeof (intern->dit_type), &(ce_base), sizeof (ce_base), &(spl_ce_BadMethodCallException), sizeof (spl_ce_BadMethodCallException), &(this_ptr), sizeof (this_ptr), &(intern->u.regex.pce->re), sizeof (intern->u.regex.pce->re), &(intern->u.regex.pce->extra), sizeof (intern->u.regex.pce->extra), &(intern->u.regex.pce->preg_options), sizeof (intern->u.regex.pce->preg_options), &(intern->u.regex.pce->locale), sizeof (intern->u.regex.pce->locale), &(intern->u.regex.pce->tables), sizeof (intern->u.regex.pce->tables), &(intern->u.regex.pce->compile_options), sizeof (intern->u.regex.pce->compile_options))) {\n    zend_restore_error_handling(&error_handling);\n    return ((void *)0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6077387038281454, -4.9428944633281464, -6.2083205214281456, -5.4170494914281457, -6.1340686254281458, -5.6500776754281459, -5.6648086254281456, -6.6516165924281454, -7.0955839154281453, -6.3149914754281458, -7.0728795754281446, -6.7785287754281445, -6.545485485428145, -6.545485485428145, -6.545485485428145, -6.0206406754281456, -6.3149914754281458, -6.7785287754281445, -7.0955839154281453, -6.7785287754281445, -7.0955839154281453, -7.0955839154281453, -7.0955839154281453, -7.0955839154281453, -7.0955839154281453, -6.545485485428145, -7.0728795754281446, -7.0955839154281453, -7.0728795754281446, -7.3033735854281456, -7.3033735854281456, -6.545485485428145, -7.0147454854281452, -7.0147454854281452, -6.545485485428145]
								}, {
									"case":	2,
									"scores":	[-7.3599046898281459, -4.6950604493281443, -5.9604865074281461, -5.1692154774281462, -5.8862346114281463, -5.4022436614281464, -5.4169746114281461, -6.4037825784281459, -6.8477499014281458, -6.0671574614281463, -6.825045561428146, -6.5306947614281459, -6.2976514714281464, -6.2976514714281464, -6.2976514714281464, -5.7728066614281461, -6.0671574614281463, -6.5306947614281459, -6.8477499014281458, -6.5306947614281459, -6.8477499014281458, -6.8477499014281458, -6.8477499014281458, -6.8477499014281458, -6.8477499014281458, -6.2976514714281464, -6.825045561428146, -6.8477499014281458, -6.825045561428146, -7.0555395714281453, -7.0555395714281453, -6.2976514714281464, -6.7669114714281458, -6.7669114714281458, -6.2976514714281464]
								}, {
									"case":	3,
									"scores":	[-7.3599046898281459, -4.6950604493281443, -5.9604865074281461, -5.1692154774281462, -5.8862346114281463, -5.4022436614281464, -5.4169746114281461, -6.4037825784281459, -6.8477499014281458, -6.0671574614281463, -6.825045561428146, -6.5306947614281459, -6.2976514714281464, -6.2976514714281464, -6.2976514714281464, -5.7728066614281461, -6.0671574614281463, -6.5306947614281459, -6.8477499014281458, -6.5306947614281459, -6.8477499014281458, -6.8477499014281458, -6.8477499014281458, -6.8477499014281458, -6.8477499014281458, -6.2976514714281464, -6.825045561428146, -6.8477499014281458, -6.825045561428146, -7.0555395714281453, -7.0555395714281453, -6.2976514714281464, -6.7669114714281458, -6.7669114714281458, -6.2976514714281464]
								}]
						}, {
							"switch":	14,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1470,
							"begin_column":	4,
							"end_line":	1474,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L1470\", 35, &(intern), sizeof (intern), &(intern->u.regex.pce), sizeof (intern->u.regex.pce), &(regex), sizeof (regex), &(regex_len), sizeof (regex_len), &(intern->u.regex.regex), sizeof (intern->u.regex.regex), &(mode), sizeof (mode), &(intern->u.regex.mode), sizeof (intern->u.regex.mode), &(intern->u.regex.pce->refcount), sizeof (intern->u.regex.pce->refcount), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(ht), sizeof (ht), &(ce_inner), sizeof (ce_inner), &(zobject), sizeof (zobject), &(intern->u.regex.flags), sizeof (intern->u.regex.flags), &(intern->u.regex.preg_flags), sizeof (intern->u.regex.preg_flags), &(intern->u.regex.use_flags), sizeof (intern->u.regex.use_flags), &(inc_refcount), sizeof (inc_refcount), &(dit_type), sizeof (dit_type), &(ce), sizeof (ce), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(retval), sizeof (retval), &(spl_ce_LogicException), sizeof (spl_ce_LogicException), &(zend_ce_traversable), sizeof (zend_ce_traversable), &(zend_ce_aggregate), sizeof (zend_ce_aggregate), &(zend_ce_iterator), sizeof (zend_ce_iterator), &(spl_ce_OutOfRangeException), sizeof (spl_ce_OutOfRangeException), &(intern->dit_type), sizeof (intern->dit_type), &(ce_base), sizeof (ce_base), &(spl_ce_BadMethodCallException), sizeof (spl_ce_BadMethodCallException), &(this_ptr), sizeof (this_ptr), &(intern->u.regex.pce->re), sizeof (intern->u.regex.pce->re), &(intern->u.regex.pce->extra), sizeof (intern->u.regex.pce->extra), &(intern->u.regex.pce->preg_options), sizeof (intern->u.regex.pce->preg_options), &(intern->u.regex.pce->locale), sizeof (intern->u.regex.pce->locale), &(intern->u.regex.pce->tables), sizeof (intern->u.regex.pce->tables), &(intern->u.regex.pce->compile_options), sizeof (intern->u.regex.pce->compile_options)))\n    if (intern->u.regex.pce == ((void *)0)) {\n        zend_restore_error_handling(&error_handling);\n        return ((void *)0);\n    }\n", "if (!__is_neg(\"\", \"L1470\", 35, &(intern), sizeof (intern), &(intern->u.regex.pce), sizeof (intern->u.regex.pce), &(regex), sizeof (regex), &(regex_len), sizeof (regex_len), &(intern->u.regex.regex), sizeof (intern->u.regex.regex), &(mode), sizeof (mode), &(intern->u.regex.mode), sizeof (intern->u.regex.mode), &(intern->u.regex.pce->refcount), sizeof (intern->u.regex.pce->refcount), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(ht), sizeof (ht), &(ce_inner), sizeof (ce_inner), &(zobject), sizeof (zobject), &(intern->u.regex.flags), sizeof (intern->u.regex.flags), &(intern->u.regex.preg_flags), sizeof (intern->u.regex.preg_flags), &(intern->u.regex.use_flags), sizeof (intern->u.regex.use_flags), &(inc_refcount), sizeof (inc_refcount), &(dit_type), sizeof (dit_type), &(ce), sizeof (ce), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(retval), sizeof (retval), &(spl_ce_LogicException), sizeof (spl_ce_LogicException), &(zend_ce_traversable), sizeof (zend_ce_traversable), &(zend_ce_aggregate), sizeof (zend_ce_aggregate), &(zend_ce_iterator), sizeof (zend_ce_iterator), &(spl_ce_OutOfRangeException), sizeof (spl_ce_OutOfRangeException), &(intern->dit_type), sizeof (intern->dit_type), &(ce_base), sizeof (ce_base), &(spl_ce_BadMethodCallException), sizeof (spl_ce_BadMethodCallException), &(this_ptr), sizeof (this_ptr), &(intern->u.regex.pce->re), sizeof (intern->u.regex.pce->re), &(intern->u.regex.pce->extra), sizeof (intern->u.regex.pce->extra), &(intern->u.regex.pce->preg_options), sizeof (intern->u.regex.pce->preg_options), &(intern->u.regex.pce->locale), sizeof (intern->u.regex.pce->locale), &(intern->u.regex.pce->tables), sizeof (intern->u.regex.pce->tables), &(intern->u.regex.pce->compile_options), sizeof (intern->u.regex.pce->compile_options)) && (intern->u.regex.pce == ((void *)0))) {\n    zend_restore_error_handling(&error_handling);\n    return ((void *)0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.9680996453245871, -6.3032554048245863, -7.5686814629245864, -6.7774104329245866, -7.4944295669245866, -7.0104386169245867, -7.0251695669245864, -8.0119775339245862, -8.455944856924587, -7.6753524169245866, -8.4332405169245863, -8.1388897169245862, -7.9058464269245867, -7.9058464269245867, -7.9058464269245867, -7.3810016169245865, -7.6753524169245866, -8.1388897169245862, -8.455944856924587, -8.1388897169245862, -8.455944856924587, -8.455944856924587, -8.455944856924587, -8.455944856924587, -8.455944856924587, -7.9058464269245867, -8.4332405169245863, -8.455944856924587, -8.4332405169245863, -8.6637345269245856, -8.6637345269245856, -7.9058464269245867, -8.375106426924587, -8.375106426924587, -7.9058464269245867]
								}, {
									"case":	2,
									"scores":	[-9.7061018313245864, -7.0412575908245856, -8.3066836489245865, -7.5154126189245858, -8.2324317529245867, -7.7484408029245859, -7.7631717529245865, -8.7499797199245855, -9.1939470429245862, -8.4133546029245867, -9.1712427029245855, -8.8768919029245854, -8.643848612924586, -8.643848612924586, -8.643848612924586, -8.1190038029245866, -8.4133546029245867, -8.8768919029245854, -9.1939470429245862, -8.8768919029245854, -9.1939470429245862, -9.1939470429245862, -9.1939470429245862, -9.1939470429245862, -9.1939470429245862, -8.643848612924586, -9.1712427029245855, -9.1939470429245862, -9.1712427029245855, -9.4017367129245866, -9.4017367129245866, -8.643848612924586, -9.1131086129245862, -9.1131086129245862, -8.643848612924586]
								}]
						}]
				}, {
					"line":	1474,
					"switches":	[{
							"switch":	15,
							"types":	[[], [], [], [], [816], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], [], [], [], [700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815], [176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699], [], [], [], [], [], []],
							"begin_line":	1475,
							"begin_column":	2,
							"end_line":	1475,
							"end_column":	2,
							"patch_codes":	["memset(&intern->current, 0, sizeof (*(&intern->current)))", "memset(&intern->dit_type, 0, sizeof (*(&intern->dit_type)))", "memset(&intern->inner, 0, sizeof (*(&intern->inner)))", "memset(&intern->inner.ce, 0, sizeof (*(&intern->inner.ce)))", "memset(&intern->inner.ce->__call, 0, sizeof (*(&intern->inner.ce->__call)))", "memset(&intern->inner.ce->__callstatic, 0, sizeof (*(&intern->inner.ce->__callstatic)))", "memset(&intern->inner.ce->__get, 0, sizeof (*(&intern->inner.ce->__get)))", "memset(&intern->inner.ce->__isset, 0, sizeof (*(&intern->inner.ce->__isset)))", "memset(&intern->inner.ce->__set, 0, sizeof (*(&intern->inner.ce->__set)))", "memset(&intern->inner.ce->__tostring, 0, sizeof (*(&intern->inner.ce->__tostring)))", "memset(&intern->inner.ce->__unset, 0, sizeof (*(&intern->inner.ce->__unset)))", "memset(&intern->inner.ce->ce_flags, 0, sizeof (*(&intern->inner.ce->ce_flags)))", "memset(&intern->inner.ce->clone, 0, sizeof (*(&intern->inner.ce->clone)))", "memset(&intern->inner.ce->constants_table, 0, sizeof (*(&intern->inner.ce->constants_table)))", "memset(&intern->inner.ce->constructor, 0, sizeof (*(&intern->inner.ce->constructor)))", "memset(&intern->inner.ce->create_object, 0, sizeof (*(&intern->inner.ce->create_object)))", "memset(&intern->inner.ce->default_properties_count, 0, sizeof (*(&intern->inner.ce->default_properties_count)))", "memset(&intern->inner.ce->default_properties_table, 0, sizeof (*(&intern->inner.ce->default_properties_table)))", "memset(&intern->inner.ce->default_static_members_count, 0, sizeof (*(&intern->inner.ce->default_static_members_count)))", "memset(&intern->inner.ce->default_static_members_table, 0, sizeof (*(&intern->inner.ce->default_static_members_table)))", "memset(&intern->inner.ce->destructor, 0, sizeof (*(&intern->inner.ce->destructor)))", "memset(&intern->inner.ce->function_table, 0, sizeof (*(&intern->inner.ce->function_table)))", "memset(&intern->inner.ce->get_iterator, 0, sizeof (*(&intern->inner.ce->get_iterator)))", "memset(&intern->inner.ce->get_static_method, 0, sizeof (*(&intern->inner.ce->get_static_method)))", "memset(&intern->inner.ce->info, 0, sizeof (*(&intern->inner.ce->info)))", "memset(&intern->inner.ce->interface_gets_implemented, 0, sizeof (*(&intern->inner.ce->interface_gets_implemented)))", "memset(&intern->inner.ce->interfaces, 0, sizeof (*(&intern->inner.ce->interfaces)))", "memset(&intern->inner.ce->iterator_funcs, 0, sizeof (*(&intern->inner.ce->iterator_funcs)))", "memset(&intern->inner.ce->name, 0, sizeof (*(&intern->inner.ce->name)))", "memset(&intern->inner.ce->name_length, 0, sizeof (*(&intern->inner.ce->name_length)))", "memset(&intern->inner.ce->num_interfaces, 0, sizeof (*(&intern->inner.ce->num_interfaces)))", "memset(&intern->inner.ce->num_traits, 0, sizeof (*(&intern->inner.ce->num_traits)))", "memset(&intern->inner.ce->parent, 0, sizeof (*(&intern->inner.ce->parent)))", "memset(&intern->inner.ce->properties_info, 0, sizeof (*(&intern->inner.ce->properties_info)))", "memset(&intern->inner.ce->refcount, 0, sizeof (*(&intern->inner.ce->refcount)))", "memset(&intern->inner.ce->serialize, 0, sizeof (*(&intern->inner.ce->serialize)))", "memset(&intern->inner.ce->serialize_func, 0, sizeof (*(&intern->inner.ce->serialize_func)))", "memset(&intern->inner.ce->static_members_table, 0, sizeof (*(&intern->inner.ce->static_members_table)))", "memset(&intern->inner.ce->trait_aliases, 0, sizeof (*(&intern->inner.ce->trait_aliases)))", "memset(&intern->inner.ce->trait_precedences, 0, sizeof (*(&intern->inner.ce->trait_precedences)))", "memset(&intern->inner.ce->traits, 0, sizeof (*(&intern->inner.ce->traits)))", "memset(&intern->inner.ce->type, 0, sizeof (*(&intern->inner.ce->type)))", "memset(&intern->inner.ce->unserialize, 0, sizeof (*(&intern->inner.ce->unserialize)))", "memset(&intern->inner.ce->unserialize_func, 0, sizeof (*(&intern->inner.ce->unserialize_func)))", "memset(&intern->inner.iterator, 0, sizeof (*(&intern->inner.iterator)))", "memset(&intern->inner.object, 0, sizeof (*(&intern->inner.object)))", "memset(&intern->inner.zobject, 0, sizeof (*(&intern->inner.zobject)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.append, 0, sizeof (*(&intern->u.append)))", "memset(&intern->u.append.iterator, 0, sizeof (*(&intern->u.append.iterator)))", "memset(&intern->u.append.zarrayit, 0, sizeof (*(&intern->u.append.zarrayit)))", "memset(&intern->u.caching, 0, sizeof (*(&intern->u.caching)))", "memset(&intern->u.limit, 0, sizeof (*(&intern->u.limit)))", "memset(&intern->u.regex, 0, sizeof (*(&intern->u.regex)))", "memset(&intern->u.regex.flags, 0, sizeof (*(&intern->u.regex.flags)))", "memset(&intern->u.regex.mode, 0, sizeof (*(&intern->u.regex.mode)))", "memset(&intern->u.regex.pce, 0, sizeof (*(&intern->u.regex.pce)))", "memset(&intern->u.regex.pce->compile_options, 0, sizeof (*(&intern->u.regex.pce->compile_options)))", "memset(&intern->u.regex.pce->extra, 0, sizeof (*(&intern->u.regex.pce->extra)))", "memset(&intern->u.regex.pce->locale, 0, sizeof (*(&intern->u.regex.pce->locale)))", "memset(&intern->u.regex.pce->preg_options, 0, sizeof (*(&intern->u.regex.pce->preg_options)))", "memset(&intern->u.regex.pce->re, 0, sizeof (*(&intern->u.regex.pce->re)))", "memset(&intern->u.regex.pce->refcount, 0, sizeof (*(&intern->u.regex.pce->refcount)))", "memset(&intern->u.regex.pce->tables, 0, sizeof (*(&intern->u.regex.pce->tables)))", "memset(&intern->u.regex.preg_flags, 0, sizeof (*(&intern->u.regex.preg_flags)))", "memset(&intern->u.regex.regex, 0, sizeof (*(&intern->u.regex.regex)))", "memset(&intern->u.regex.use_flags, 0, sizeof (*(&intern->u.regex.use_flags)))", "memset(&spl_ce_ArrayIterator->__call, 0, sizeof (*(&spl_ce_ArrayIterator->__call)))", "memset(&spl_ce_ArrayIterator->__callstatic, 0, sizeof (*(&spl_ce_ArrayIterator->__callstatic)))", "memset(&spl_ce_ArrayIterator->__get, 0, sizeof (*(&spl_ce_ArrayIterator->__get)))", "memset(&spl_ce_ArrayIterator->__isset, 0, sizeof (*(&spl_ce_ArrayIterator->__isset)))", "memset(&spl_ce_ArrayIterator->__set, 0, sizeof (*(&spl_ce_ArrayIterator->__set)))", "memset(&spl_ce_ArrayIterator->__tostring, 0, sizeof (*(&spl_ce_ArrayIterator->__tostring)))", "memset(&spl_ce_ArrayIterator->__unset, 0, sizeof (*(&spl_ce_ArrayIterator->__unset)))", "memset(&spl_ce_ArrayIterator->ce_flags, 0, sizeof (*(&spl_ce_ArrayIterator->ce_flags)))", "memset(&spl_ce_ArrayIterator->clone, 0, sizeof (*(&spl_ce_ArrayIterator->clone)))", "memset(&spl_ce_ArrayIterator->constants_table, 0, sizeof (*(&spl_ce_ArrayIterator->constants_table)))", "memset(&spl_ce_ArrayIterator->constructor, 0, sizeof (*(&spl_ce_ArrayIterator->constructor)))", "memset(&spl_ce_ArrayIterator->create_object, 0, sizeof (*(&spl_ce_ArrayIterator->create_object)))", "memset(&spl_ce_ArrayIterator->default_properties_count, 0, sizeof (*(&spl_ce_ArrayIterator->default_properties_count)))", "memset(&spl_ce_ArrayIterator->default_properties_table, 0, sizeof (*(&spl_ce_ArrayIterator->default_properties_table)))", "memset(&spl_ce_ArrayIterator->default_static_members_count, 0, sizeof (*(&spl_ce_ArrayIterator->default_static_members_count)))", "memset(&spl_ce_ArrayIterator->default_static_members_table, 0, sizeof (*(&spl_ce_ArrayIterator->default_static_members_table)))", "memset(&spl_ce_ArrayIterator->destructor, 0, sizeof (*(&spl_ce_ArrayIterator->destructor)))", "memset(&spl_ce_ArrayIterator->function_table, 0, sizeof (*(&spl_ce_ArrayIterator->function_table)))", "memset(&spl_ce_ArrayIterator->get_iterator, 0, sizeof (*(&spl_ce_ArrayIterator->get_iterator)))", "memset(&spl_ce_ArrayIterator->get_static_method, 0, sizeof (*(&spl_ce_ArrayIterator->get_static_method)))", "memset(&spl_ce_ArrayIterator->info, 0, sizeof (*(&spl_ce_ArrayIterator->info)))", "memset(&spl_ce_ArrayIterator->interface_gets_implemented, 0, sizeof (*(&spl_ce_ArrayIterator->interface_gets_implemented)))", "memset(&spl_ce_ArrayIterator->interfaces, 0, sizeof (*(&spl_ce_ArrayIterator->interfaces)))", "memset(&spl_ce_ArrayIterator->iterator_funcs, 0, sizeof (*(&spl_ce_ArrayIterator->iterator_funcs)))", "memset(&spl_ce_ArrayIterator->name, 0, sizeof (*(&spl_ce_ArrayIterator->name)))", "memset(&spl_ce_ArrayIterator->name_length, 0, sizeof (*(&spl_ce_ArrayIterator->name_length)))", "memset(&spl_ce_ArrayIterator->num_interfaces, 0, sizeof (*(&spl_ce_ArrayIterator->num_interfaces)))", "memset(&spl_ce_ArrayIterator->num_traits, 0, sizeof (*(&spl_ce_ArrayIterator->num_traits)))", "memset(&spl_ce_ArrayIterator->parent, 0, sizeof (*(&spl_ce_ArrayIterator->parent)))", "memset(&spl_ce_ArrayIterator->properties_info, 0, sizeof (*(&spl_ce_ArrayIterator->properties_info)))", "memset(&spl_ce_ArrayIterator->refcount, 0, sizeof (*(&spl_ce_ArrayIterator->refcount)))", "memset(&spl_ce_ArrayIterator->serialize, 0, sizeof (*(&spl_ce_ArrayIterator->serialize)))", "memset(&spl_ce_ArrayIterator->serialize_func, 0, sizeof (*(&spl_ce_ArrayIterator->serialize_func)))", "memset(&spl_ce_ArrayIterator->static_members_table, 0, sizeof (*(&spl_ce_ArrayIterator->static_members_table)))", "memset(&spl_ce_ArrayIterator->trait_aliases, 0, sizeof (*(&spl_ce_ArrayIterator->trait_aliases)))", "memset(&spl_ce_ArrayIterator->trait_precedences, 0, sizeof (*(&spl_ce_ArrayIterator->trait_precedences)))", "memset(&spl_ce_ArrayIterator->traits, 0, sizeof (*(&spl_ce_ArrayIterator->traits)))", "memset(&spl_ce_ArrayIterator->type, 0, sizeof (*(&spl_ce_ArrayIterator->type)))", "memset(&spl_ce_ArrayIterator->unserialize, 0, sizeof (*(&spl_ce_ArrayIterator->unserialize)))", "memset(&spl_ce_ArrayIterator->unserialize_func, 0, sizeof (*(&spl_ce_ArrayIterator->unserialize_func)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->inner.ce, 0, sizeof (*(intern->inner.ce)))", "memset(intern->inner.ce->__call, 0, sizeof (*(intern->inner.ce->__call)))", "memset(intern->inner.ce->__callstatic, 0, sizeof (*(intern->inner.ce->__callstatic)))", "memset(intern->inner.ce->__get, 0, sizeof (*(intern->inner.ce->__get)))", "memset(intern->inner.ce->__isset, 0, sizeof (*(intern->inner.ce->__isset)))", "memset(intern->inner.ce->__set, 0, sizeof (*(intern->inner.ce->__set)))", "memset(intern->inner.ce->__tostring, 0, sizeof (*(intern->inner.ce->__tostring)))", "memset(intern->inner.ce->__unset, 0, sizeof (*(intern->inner.ce->__unset)))", "memset(intern->inner.ce->clone, 0, sizeof (*(intern->inner.ce->clone)))", "memset(intern->inner.ce->constructor, 0, sizeof (*(intern->inner.ce->constructor)))", "memset(intern->inner.ce->create_object, 0, sizeof (*(intern->inner.ce->create_object)))", "memset(intern->inner.ce->default_properties_table, 0, sizeof (*(intern->inner.ce->default_properties_table)))", "memset(intern->inner.ce->default_static_members_table, 0, sizeof (*(intern->inner.ce->default_static_members_table)))", "memset(intern->inner.ce->destructor, 0, sizeof (*(intern->inner.ce->destructor)))", "memset(intern->inner.ce->get_iterator, 0, sizeof (*(intern->inner.ce->get_iterator)))", "memset(intern->inner.ce->get_static_method, 0, sizeof (*(intern->inner.ce->get_static_method)))", "memset(intern->inner.ce->interface_gets_implemented, 0, sizeof (*(intern->inner.ce->interface_gets_implemented)))", "memset(intern->inner.ce->interfaces, 0, sizeof (*(intern->inner.ce->interfaces)))", "memset(intern->inner.ce->name, 0, sizeof (*(intern->inner.ce->name)))", "memset(intern->inner.ce->parent, 0, sizeof (*(intern->inner.ce->parent)))", "memset(intern->inner.ce->serialize, 0, sizeof (*(intern->inner.ce->serialize)))", "memset(intern->inner.ce->serialize_func, 0, sizeof (*(intern->inner.ce->serialize_func)))", "memset(intern->inner.ce->static_members_table, 0, sizeof (*(intern->inner.ce->static_members_table)))", "memset(intern->inner.ce->trait_aliases, 0, sizeof (*(intern->inner.ce->trait_aliases)))", "memset(intern->inner.ce->trait_precedences, 0, sizeof (*(intern->inner.ce->trait_precedences)))", "memset(intern->inner.ce->traits, 0, sizeof (*(intern->inner.ce->traits)))", "memset(intern->inner.ce->unserialize, 0, sizeof (*(intern->inner.ce->unserialize)))", "memset(intern->inner.ce->unserialize_func, 0, sizeof (*(intern->inner.ce->unserialize_func)))", "memset(intern->inner.iterator, 0, sizeof (*(intern->inner.iterator)))", "memset(intern->inner.object, 0, sizeof (*(intern->inner.object)))", "memset(intern->inner.zobject, 0, sizeof (*(intern->inner.zobject)))", "memset(intern->u.append.iterator, 0, sizeof (*(intern->u.append.iterator)))", "memset(intern->u.append.zarrayit, 0, sizeof (*(intern->u.append.zarrayit)))", "memset(intern->u.regex.pce, 0, sizeof (*(intern->u.regex.pce)))", "memset(intern->u.regex.pce->extra, 0, sizeof (*(intern->u.regex.pce->extra)))", "memset(intern->u.regex.pce->locale, 0, sizeof (*(intern->u.regex.pce->locale)))", "memset(intern->u.regex.pce->re, 0, sizeof (*(intern->u.regex.pce->re)))", "memset(intern->u.regex.pce->tables, 0, sizeof (*(intern->u.regex.pce->tables)))", "memset(intern->u.regex.regex, 0, sizeof (*(intern->u.regex.regex)))", "memset(spl_ce_ArrayIterator->__call, 0, sizeof (*(spl_ce_ArrayIterator->__call)))", "memset(spl_ce_ArrayIterator->__callstatic, 0, sizeof (*(spl_ce_ArrayIterator->__callstatic)))", "memset(spl_ce_ArrayIterator->__get, 0, sizeof (*(spl_ce_ArrayIterator->__get)))", "memset(spl_ce_ArrayIterator->__isset, 0, sizeof (*(spl_ce_ArrayIterator->__isset)))", "memset(spl_ce_ArrayIterator->__set, 0, sizeof (*(spl_ce_ArrayIterator->__set)))", "memset(spl_ce_ArrayIterator->__tostring, 0, sizeof (*(spl_ce_ArrayIterator->__tostring)))", "memset(spl_ce_ArrayIterator->__unset, 0, sizeof (*(spl_ce_ArrayIterator->__unset)))", "memset(spl_ce_ArrayIterator->clone, 0, sizeof (*(spl_ce_ArrayIterator->clone)))", "memset(spl_ce_ArrayIterator->constructor, 0, sizeof (*(spl_ce_ArrayIterator->constructor)))", "memset(spl_ce_ArrayIterator->create_object, 0, sizeof (*(spl_ce_ArrayIterator->create_object)))", "memset(spl_ce_ArrayIterator->default_properties_table, 0, sizeof (*(spl_ce_ArrayIterator->default_properties_table)))", "memset(spl_ce_ArrayIterator->default_static_members_table, 0, sizeof (*(spl_ce_ArrayIterator->default_static_members_table)))", "memset(spl_ce_ArrayIterator->destructor, 0, sizeof (*(spl_ce_ArrayIterator->destructor)))", "memset(spl_ce_ArrayIterator->get_iterator, 0, sizeof (*(spl_ce_ArrayIterator->get_iterator)))", "memset(spl_ce_ArrayIterator->get_static_method, 0, sizeof (*(spl_ce_ArrayIterator->get_static_method)))", "memset(spl_ce_ArrayIterator->interface_gets_implemented, 0, sizeof (*(spl_ce_ArrayIterator->interface_gets_implemented)))", "memset(spl_ce_ArrayIterator->interfaces, 0, sizeof (*(spl_ce_ArrayIterator->interfaces)))", "memset(spl_ce_ArrayIterator->name, 0, sizeof (*(spl_ce_ArrayIterator->name)))", "memset(spl_ce_ArrayIterator->parent, 0, sizeof (*(spl_ce_ArrayIterator->parent)))", "memset(spl_ce_ArrayIterator->serialize, 0, sizeof (*(spl_ce_ArrayIterator->serialize)))", "memset(spl_ce_ArrayIterator->serialize_func, 0, sizeof (*(spl_ce_ArrayIterator->serialize_func)))", "memset(spl_ce_ArrayIterator->static_members_table, 0, sizeof (*(spl_ce_ArrayIterator->static_members_table)))", "memset(spl_ce_ArrayIterator->trait_aliases, 0, sizeof (*(spl_ce_ArrayIterator->trait_aliases)))", "memset(spl_ce_ArrayIterator->trait_precedences, 0, sizeof (*(spl_ce_ArrayIterator->trait_precedences)))", "memset(spl_ce_ArrayIterator->traits, 0, sizeof (*(spl_ce_ArrayIterator->traits)))", "memset(spl_ce_ArrayIterator->unserialize, 0, sizeof (*(spl_ce_ArrayIterator->unserialize)))", "memset(spl_ce_ArrayIterator->unserialize_func, 0, sizeof (*(spl_ce_ArrayIterator->unserialize_func)))", "(intern)->current.pos++", "(intern)->u.regex.pce->refcount++", "(intern)->u.regex.pce->refcount--", "(intern->u.caching.zcache)->is_ref__gc = (-1)", "(intern->u.caching.zcache)->is_ref__gc = (0)", "(intern->u.caching.zcache)->is_ref__gc = (1)", "(intern->u.caching.zcache)->is_ref__gc = (5)", "(intern->u.caching.zcache)->refcount__gc = (-1)", "(intern->u.caching.zcache)->refcount__gc = (0)", "(intern->u.caching.zcache)->refcount__gc = (1)", "(intern->u.caching.zcache)->refcount__gc = (5)", "(regex)++", "_array_init(((intern)->u.caching.zcache), 0)", "_array_init(((return_value)), 0)", "_array_init(((retval)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zobject)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((retval)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zobject)))", "_efree(((intern)))", "_efree(((intern)->current.str_key))", "_efree(((intern)->u.regex.regex))", "_efree(((regex)))", "_efree(((return_value)))", "_efree(((retval)))", "_efree(((this_ptr)))", "_efree(((zobject)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((retval))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zobject))))", "_zval_copy_ctor(((intern)->u.caching.zstr))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((retval)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zobject)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((retval))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zobject))", "_zval_dtor(((return_value)))", "_zval_dtor(((retval)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zobject)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((retval))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zobject))", "_zval_ptr_dtor((&(intern)->current.data))", "_zval_ptr_dtor((&(intern)->inner.zobject))", "_zval_ptr_dtor((&(intern)->u.append.zarrayit))", "_zval_ptr_dtor((&(intern)->u.caching.zcache))", "_zval_ptr_dtor((&(intern)->u.caching.zchildren))", "_zval_ptr_dtor((&(intern)->u.caching.zstr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zobject)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "ce = (ce)", "ce = (ce_base)", "ce = (ce_inner)", "ce = zend_get_class_entry(&(*(return_value)))", "ce = zend_get_class_entry(&(*(retval)))", "ce = zend_get_class_entry(&(*(this_ptr)))", "ce = zend_get_class_entry(&(*(zobject)))", "convert_to_boolean((return_value))", "convert_to_boolean((retval))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zobject))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((retval))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zobject))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((retval)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zobject)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((retval))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zobject))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((retval))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zobject))", "inc_refcount = (-1)", "inc_refcount = (0)", "inc_refcount = (1)", "inc_refcount = (5)", "inc_refcount = (ht)", "inc_refcount = (inc_refcount)", "inc_refcount = (regex_len)", "inc_refcount = (return_value_used)", "intern = (intern)", "intern->dit_type = (-1)", "intern->dit_type = (0)", "intern->dit_type = (1)", "intern->dit_type = (5)", "intern->dit_type = (dit_type)", "intern->inner.ce = (ce)", "intern->inner.ce = (ce_base)", "intern->inner.ce = (ce_inner)", "intern->inner.ce = dit_type == (DIT_AppendIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_CachingIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_Default) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_FilterIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_InfiniteIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_IteratorIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_LimitIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_NoRewindIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_ParentIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RecursiveCachingIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RecursiveFilterIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RecursiveRegexIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RegexIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_Unknown) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? (ce) : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? (ce_base) : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? (ce_inner) : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(return_value)))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(retval)))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(this_ptr)))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(zobject)))", "intern->inner.iterator = (intern)->inner.ce->get_iterator(intern->inner.ce, zobject, 0)", "intern->inner.iterator = intern->inner.ce->get_iterator((intern)->inner.ce, zobject, 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (return_value), 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (retval), 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (this_ptr), 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (zobject), 0)", "intern->inner.object = zend_object_store_get_object((return_value))", "intern->inner.object = zend_object_store_get_object((retval))", "intern->inner.object = zend_object_store_get_object((this_ptr))", "intern->inner.object = zend_object_store_get_object((zobject))", "intern->inner.zobject = (return_value)", "intern->inner.zobject = (retval)", "intern->inner.zobject = (this_ptr)", "intern->inner.zobject = (zobject)", "intern->u.append.iterator = (ce)->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.append.iterator = (ce_base)->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.append.iterator = (ce_inner)->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator((ce), intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator((ce_base), intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator((ce_inner), intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator(spl_ce_ArrayIterator, (intern)->u.append.zarrayit, 0)", "intern->u.limit.count = (-1)", "intern->u.limit.count = (0)", "intern->u.limit.count = (1)", "intern->u.limit.count = (5)", "intern->u.limit.count = (mode)", "intern->u.limit.offset = (-1)", "intern->u.limit.offset = (0)", "intern->u.limit.offset = (1)", "intern->u.limit.offset = (5)", "intern->u.limit.offset = (mode)", "intern->u.regex.flags = (-1)", "intern->u.regex.flags = (0)", "intern->u.regex.flags = (1)", "intern->u.regex.flags = (5)", "intern->u.regex.flags = (mode)", "intern->u.regex.mode = (-1)", "intern->u.regex.mode = (0)", "intern->u.regex.mode = (1)", "intern->u.regex.mode = (5)", "intern->u.regex.pce = pcre_get_compiled_regex_cache((regex), regex_len)", "intern->u.regex.preg_flags = (-1)", "intern->u.regex.preg_flags = (0)", "intern->u.regex.preg_flags = (1)", "intern->u.regex.preg_flags = (5)", "intern->u.regex.preg_flags = (mode)", "intern->u.regex.regex = (regex)", "intern->u.regex.regex = _estrndup(((regex)), (regex_len))", "intern->u.regex.use_flags = (-1)", "intern->u.regex.use_flags = (0)", "intern->u.regex.use_flags = (1)", "intern->u.regex.use_flags = (5)", "intern->u.regex.use_flags = (ht)", "intern->u.regex.use_flags = (inc_refcount)", "intern->u.regex.use_flags = (regex_len)", "intern->u.regex.use_flags = (return_value_used)", "memset((intern), 0, sizeof(spl_dual_it_object))", "php_error_docref0(((void *)0), (1 << 0L), \"The %s instance wasn't initialized properly\", zend_get_class_entry(&(**(return_value_ptr)))->name)", "spl_append_it_fetch((intern))", "spl_append_it_next((intern))", "spl_append_it_next_iterator((intern))", "spl_caching_it_next((intern))", "spl_caching_it_rewind((intern))", "spl_dual_it_fetch((intern), 0)", "spl_dual_it_fetch((intern), 1)", "spl_dual_it_free((intern))", "spl_dual_it_next((intern), 0)", "spl_dual_it_next((intern), 1)", "spl_dual_it_require((intern))", "spl_dual_it_rewind((intern))", "spl_register_interface(&(ce), \"Countable\", spl_funcs_Countable)", "spl_register_interface(&(ce), \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&(ce), \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&(ce), \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_interface(&(ce_base), \"Countable\", spl_funcs_Countable)", "spl_register_interface(&(ce_base), \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&(ce_base), \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&(ce_base), \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_interface(&(ce_inner), \"Countable\", spl_funcs_Countable)", "spl_register_interface(&(ce_inner), \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&(ce_inner), \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&(ce_inner), \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property((ce), \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_property((ce_base), \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_property((ce_inner), \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&(ce), \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&(ce), \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&(ce), \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_std_class(&(ce_base), \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&(ce_base), \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&(ce_base), \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_std_class(&(ce_inner), \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&(ce_inner), \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&(ce_inner), \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&(ce), spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&(ce), spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&(ce), spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&(ce), spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&(ce), spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&(ce), spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&(ce_base), spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&(ce_base), spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&(ce_base), spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&(ce_base), spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&(ce_base), spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&(ce_base), spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, (ce), \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, (ce_base), \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, (ce_inner), \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, (ce), \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, (ce_base), \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, (ce_inner), \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, (ce), \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, (ce_base), \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, (ce_inner), \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, (ce), \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, (ce_base), \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, (ce_inner), \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, (ce), \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, (ce_base), \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, (ce_inner), \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, (ce), \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, (ce_base), \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, (ce_inner), \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, (ce), \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, (ce_base), \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, (ce_inner), \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, (ce), \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, (ce_base), \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, (ce_inner), \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, (ce), \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, (ce_base), \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, (ce_inner), \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, (ce), \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, (ce_base), \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, (ce_inner), \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, (ce), \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, (ce_base), \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, (ce_inner), \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, (ce), \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, (ce_base), \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, (ce_inner), \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_call_method(&(intern)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&(return_value), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&(retval), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&(this_ptr), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&(zobject), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, (ce), &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, (ce_base), &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, (ce_inner), &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &(ce)->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &(ce_base)->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &(ce_inner)->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, (ce), &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, (ce_base), &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, (ce_inner), &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &(ce)->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &(ce_base)->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &(ce_inner)->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(return_value), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(retval), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(this_ptr), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(zobject), 0, ((void *)0), ((void *)0))", "zend_class_implements((ce), 1, spl_ce_Countable)", "zend_class_implements((ce), 1, spl_ce_OuterIterator)", "zend_class_implements((ce), 1, spl_ce_RecursiveIterator)", "zend_class_implements((ce), 1, zend_ce_arrayaccess)", "zend_class_implements((ce), 1, zend_ce_iterator)", "zend_class_implements((ce_base), 1, spl_ce_Countable)", "zend_class_implements((ce_base), 1, spl_ce_OuterIterator)", "zend_class_implements((ce_base), 1, spl_ce_RecursiveIterator)", "zend_class_implements((ce_base), 1, zend_ce_arrayaccess)", "zend_class_implements((ce_base), 1, zend_ce_iterator)", "zend_class_implements((ce_inner), 1, spl_ce_Countable)", "zend_class_implements((ce_inner), 1, spl_ce_OuterIterator)", "zend_class_implements((ce_inner), 1, spl_ce_RecursiveIterator)", "zend_class_implements((ce_inner), 1, zend_ce_arrayaccess)", "zend_class_implements((ce_inner), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_CachingIterator, 1, (ce))", "zend_class_implements(spl_ce_CachingIterator, 1, (ce_base))", "zend_class_implements(spl_ce_CachingIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_EmptyIterator, 1, (ce))", "zend_class_implements(spl_ce_EmptyIterator, 1, (ce_base))", "zend_class_implements(spl_ce_EmptyIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_IteratorIterator, 1, (ce))", "zend_class_implements(spl_ce_IteratorIterator, 1, (ce_base))", "zend_class_implements(spl_ce_IteratorIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_OuterIterator, 1, (ce))", "zend_class_implements(spl_ce_OuterIterator, 1, (ce_base))", "zend_class_implements(spl_ce_OuterIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_SeekableIterator, 1, (ce))", "zend_class_implements(spl_ce_SeekableIterator, 1, (ce_base))", "zend_class_implements(spl_ce_SeekableIterator, 1, (ce_inner))", "zend_declare_class_constant_long((ce), \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long((ce), \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long((ce), \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long((ce), \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long((ce), \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long((ce), \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long((ce), \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long((ce), \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long((ce), \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long((ce), \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long((ce), \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long((ce), \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long((ce), \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long((ce), \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long((ce), \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long((ce), \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long((ce), \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long((ce), \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long((ce), \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long((ce), \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long((ce), \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long((ce), \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long((ce), \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_declare_class_constant_long((ce_base), \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long((ce_base), \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long((ce_base), \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long((ce_base), \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long((ce_base), \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long((ce_base), \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long((ce_base), \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long((ce_base), \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long((ce_base), \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long((ce_base), \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long((ce_base), \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long((ce_base), \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long((ce_base), \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long((ce_base), \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long((ce_base), \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long((ce_base), \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long((ce_base), \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long((ce_base), \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long((ce_base), \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long((ce_base), \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long((ce_base), \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long((ce_base), \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long((ce_base), \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_declare_class_constant_long((ce_inner), \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long((ce_inner), \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long((ce_inner), \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long((ce_inner), \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long((ce_inner), \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long((ce_inner), \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long((ce_inner), \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long((ce_inner), \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long((ce_inner), \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long((ce_inner), \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long((ce_inner), \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long((ce_inner), \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long((ce_inner), \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long((ce_inner), \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long((ce_inner), \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long((ce_inner), \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long((ce_inner), \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 3L), \"Undefined index:  %s\", (regex))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_InvalidArgumentException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_InvalidArgumentException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_InvalidArgumentException, &error_handling)", "zend_replace_error_handling(EH_THROW, (ce), &error_handling)", "zend_replace_error_handling(EH_THROW, (ce_base), &error_handling)", "zend_replace_error_handling(EH_THROW, (ce_inner), &error_handling)", "zend_throw_exception((ce), \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception((ce), \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception((ce), \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception((ce), \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception((ce), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception((ce), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception((ce), \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception((ce), \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception((ce), \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception((ce), \"Parameter offset must be >= 0\", 0)", "zend_throw_exception((ce), \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception((ce), \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception((ce_base), \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception((ce_base), \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception((ce_base), \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception((ce_base), \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception((ce_base), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception((ce_base), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception((ce_base), \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception((ce_base), \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception((ce_base), \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception((ce_base), \"Parameter offset must be >= 0\", 0)", "zend_throw_exception((ce_base), \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception((ce_base), \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception((ce_inner), \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception((ce_inner), \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception((ce_inner), \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception((ce_inner), \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception((ce_inner), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception((ce_inner), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception((ce_inner), \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception((ce_inner), \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception((ce_inner), \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception((ce_inner), \"Parameter offset must be >= 0\", 0)", "zend_throw_exception((ce_inner), \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception((ce_inner), \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception_ex((ce), 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex((ce), 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex((ce), 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex((ce), 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex((ce), 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zend_throw_exception_ex((ce_base), 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex((ce_base), 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex((ce_base), 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex((ce_base), 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex((ce_base), 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zend_throw_exception_ex((ce_inner), 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex((ce_inner), 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex((ce_inner), 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex((ce_inner), 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex((ce_inner), 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((retval))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((zobject))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((retval))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((zobject))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", (ce)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", (ce_base)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", (ce_inner)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((retval))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((zobject))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", ((ce))->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", ((ce_base))->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", ((ce_inner))->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, ((ce))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, ((ce_base))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, ((ce_inner))->name)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", (ce)->name)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", (ce_base)->name)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", (ce_inner)->name)", "zobject = (return_value)", "zobject = (retval)", "zobject = (this_ptr)", "zobject = (zobject)", "zval_addref_p((intern)->current.data)", "zval_addref_p((return_value))", "zval_addref_p((retval))", "zval_addref_p((this_ptr))", "zval_addref_p((zobject))", "zval_addref_p(*((return_value_ptr)))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((retval))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zobject))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->u.caching.zcache)->is_ref__gc = 0", "(intern->u.caching.zcache)->refcount__gc = 1", "_array_init((intern->u.caching.zcache), 0)", "_zval_ptr_dtor((&retval))", "ce = zend_get_class_entry(&(*zobject))", "exit(1)", "inc_refcount = 0", "intern = (spl_dual_it_object *)zend_object_store_get_object((this_ptr))", "intern->dit_type = dit_type", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, zobject, 0)", "intern->inner.object = zend_object_store_get_object(zobject)", "intern->inner.zobject = zobject", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.limit.count = -1", "intern->u.limit.offset = 0", "intern->u.regex.flags = 0", "intern->u.regex.mode = mode", "intern->u.regex.pce = pcre_get_compiled_regex_cache(regex, regex_len)", "intern->u.regex.pce->refcount++", "intern->u.regex.preg_flags = 0", "intern->u.regex.regex = _estrndup((regex), (regex_len))", "intern->u.regex.use_flags = (ht) >= 5", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_InvalidArgumentException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zobject = retval", "zval_addref_p(zobject)", "if (__is_neg(\"\", \"L1475\", 35, &(intern), sizeof (intern), &(intern->u.regex.pce), sizeof (intern->u.regex.pce), &(intern->u.regex.pce->refcount), sizeof (intern->u.regex.pce->refcount), &(ht), sizeof (ht), &(ce_inner), sizeof (ce_inner), &(zobject), sizeof (zobject), &(regex), sizeof (regex), &(regex_len), sizeof (regex_len), &(intern->u.regex.regex), sizeof (intern->u.regex.regex), &(mode), sizeof (mode), &(intern->u.regex.mode), sizeof (intern->u.regex.mode), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(inc_refcount), sizeof (inc_refcount), &(intern->u.regex.flags), sizeof (intern->u.regex.flags), &(intern->u.regex.preg_flags), sizeof (intern->u.regex.preg_flags), &(dit_type), sizeof (dit_type), &(ce), sizeof (ce), &(intern->u.regex.use_flags), sizeof (intern->u.regex.use_flags), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(retval), sizeof (retval), &(spl_ce_LogicException), sizeof (spl_ce_LogicException), &(zend_ce_traversable), sizeof (zend_ce_traversable), &(zend_ce_aggregate), sizeof (zend_ce_aggregate), &(zend_ce_iterator), sizeof (zend_ce_iterator), &(spl_ce_OutOfRangeException), sizeof (spl_ce_OutOfRangeException), &(intern->dit_type), sizeof (intern->dit_type), &(ce_base), sizeof (ce_base), &(spl_ce_BadMethodCallException), sizeof (spl_ce_BadMethodCallException), &(this_ptr), sizeof (this_ptr), &(intern->u.regex.pce->re), sizeof (intern->u.regex.pce->re), &(intern->u.regex.pce->extra), sizeof (intern->u.regex.pce->extra), &(intern->u.regex.pce->preg_options), sizeof (intern->u.regex.pce->preg_options), &(intern->u.regex.pce->locale), sizeof (intern->u.regex.pce->locale), &(intern->u.regex.pce->tables), sizeof (intern->u.regex.pce->tables), &(intern->u.regex.pce->compile_options), sizeof (intern->u.regex.pce->compile_options)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.386820639607067]
								}, {
									"case":	2,
									"scores":	[-5.386820639607067]
								}, {
									"case":	3,
									"scores":	[-5.386820639607067]
								}, {
									"case":	4,
									"scores":	[-5.386820639607067]
								}, {
									"case":	5,
									"scores":	[-5.386820639607067]
								}, {
									"case":	6,
									"scores":	[-5.386820639607067]
								}, {
									"case":	7,
									"scores":	[-5.386820639607067]
								}, {
									"case":	8,
									"scores":	[-5.386820639607067]
								}, {
									"case":	9,
									"scores":	[-5.386820639607067]
								}, {
									"case":	10,
									"scores":	[-5.386820639607067]
								}, {
									"case":	11,
									"scores":	[-5.386820639607067]
								}, {
									"case":	12,
									"scores":	[-5.386820639607067]
								}, {
									"case":	13,
									"scores":	[-5.386820639607067]
								}, {
									"case":	14,
									"scores":	[-5.386820639607067]
								}, {
									"case":	15,
									"scores":	[-5.386820639607067]
								}, {
									"case":	16,
									"scores":	[-5.386820639607067]
								}, {
									"case":	17,
									"scores":	[-5.386820639607067]
								}, {
									"case":	18,
									"scores":	[-5.386820639607067]
								}, {
									"case":	19,
									"scores":	[-5.386820639607067]
								}, {
									"case":	20,
									"scores":	[-5.386820639607067]
								}, {
									"case":	21,
									"scores":	[-5.386820639607067]
								}, {
									"case":	22,
									"scores":	[-5.386820639607067]
								}, {
									"case":	23,
									"scores":	[-5.386820639607067]
								}, {
									"case":	24,
									"scores":	[-5.386820639607067]
								}, {
									"case":	25,
									"scores":	[-5.386820639607067]
								}, {
									"case":	26,
									"scores":	[-5.386820639607067]
								}, {
									"case":	27,
									"scores":	[-5.386820639607067]
								}, {
									"case":	28,
									"scores":	[-5.386820639607067]
								}, {
									"case":	29,
									"scores":	[-5.386820639607067]
								}, {
									"case":	30,
									"scores":	[-5.386820639607067]
								}, {
									"case":	31,
									"scores":	[-5.386820639607067]
								}, {
									"case":	32,
									"scores":	[-5.386820639607067]
								}, {
									"case":	33,
									"scores":	[-5.386820639607067]
								}, {
									"case":	34,
									"scores":	[-5.386820639607067]
								}, {
									"case":	35,
									"scores":	[-5.386820639607067]
								}, {
									"case":	36,
									"scores":	[-5.386820639607067]
								}, {
									"case":	37,
									"scores":	[-5.386820639607067]
								}, {
									"case":	38,
									"scores":	[-5.386820639607067]
								}, {
									"case":	39,
									"scores":	[-5.386820639607067]
								}, {
									"case":	40,
									"scores":	[-5.386820639607067]
								}, {
									"case":	41,
									"scores":	[-5.386820639607067]
								}, {
									"case":	42,
									"scores":	[-5.386820639607067]
								}, {
									"case":	43,
									"scores":	[-5.386820639607067]
								}, {
									"case":	44,
									"scores":	[-5.386820639607067]
								}, {
									"case":	45,
									"scores":	[-5.386820639607067]
								}, {
									"case":	46,
									"scores":	[-5.386820639607067]
								}, {
									"case":	47,
									"scores":	[-5.386820639607067]
								}, {
									"case":	48,
									"scores":	[-5.386820639607067]
								}, {
									"case":	49,
									"scores":	[-5.386820639607067]
								}, {
									"case":	50,
									"scores":	[-5.386820639607067]
								}, {
									"case":	51,
									"scores":	[-5.386820639607067]
								}, {
									"case":	52,
									"scores":	[-5.386820639607067]
								}, {
									"case":	53,
									"scores":	[-5.386820639607067]
								}, {
									"case":	54,
									"scores":	[-5.386820639607067]
								}, {
									"case":	55,
									"scores":	[-5.386820639607067]
								}, {
									"case":	56,
									"scores":	[-5.386820639607067]
								}, {
									"case":	57,
									"scores":	[-5.386820639607067]
								}, {
									"case":	58,
									"scores":	[-5.386820639607067]
								}, {
									"case":	59,
									"scores":	[-5.386820639607067]
								}, {
									"case":	60,
									"scores":	[-5.386820639607067]
								}, {
									"case":	61,
									"scores":	[-5.386820639607067]
								}, {
									"case":	62,
									"scores":	[-5.386820639607067]
								}, {
									"case":	63,
									"scores":	[-5.386820639607067]
								}, {
									"case":	64,
									"scores":	[-5.386820639607067]
								}, {
									"case":	65,
									"scores":	[-5.386820639607067]
								}, {
									"case":	66,
									"scores":	[-5.386820639607067]
								}, {
									"case":	67,
									"scores":	[-5.386820639607067]
								}, {
									"case":	68,
									"scores":	[-5.386820639607067]
								}, {
									"case":	69,
									"scores":	[-5.386820639607067]
								}, {
									"case":	70,
									"scores":	[-5.386820639607067]
								}, {
									"case":	71,
									"scores":	[-5.386820639607067]
								}, {
									"case":	72,
									"scores":	[-5.386820639607067]
								}, {
									"case":	73,
									"scores":	[-5.386820639607067]
								}, {
									"case":	74,
									"scores":	[-5.386820639607067]
								}, {
									"case":	75,
									"scores":	[-5.386820639607067]
								}, {
									"case":	76,
									"scores":	[-5.386820639607067]
								}, {
									"case":	77,
									"scores":	[-5.386820639607067]
								}, {
									"case":	78,
									"scores":	[-5.386820639607067]
								}, {
									"case":	79,
									"scores":	[-5.386820639607067]
								}, {
									"case":	80,
									"scores":	[-5.386820639607067]
								}, {
									"case":	81,
									"scores":	[-5.386820639607067]
								}, {
									"case":	82,
									"scores":	[-5.386820639607067]
								}, {
									"case":	83,
									"scores":	[-5.386820639607067]
								}, {
									"case":	84,
									"scores":	[-5.386820639607067]
								}, {
									"case":	85,
									"scores":	[-5.386820639607067]
								}, {
									"case":	86,
									"scores":	[-5.386820639607067]
								}, {
									"case":	87,
									"scores":	[-5.386820639607067]
								}, {
									"case":	88,
									"scores":	[-5.386820639607067]
								}, {
									"case":	89,
									"scores":	[-5.386820639607067]
								}, {
									"case":	90,
									"scores":	[-5.386820639607067]
								}, {
									"case":	91,
									"scores":	[-5.386820639607067]
								}, {
									"case":	92,
									"scores":	[-5.386820639607067]
								}, {
									"case":	93,
									"scores":	[-5.386820639607067]
								}, {
									"case":	94,
									"scores":	[-5.386820639607067]
								}, {
									"case":	95,
									"scores":	[-5.386820639607067]
								}, {
									"case":	96,
									"scores":	[-5.386820639607067]
								}, {
									"case":	97,
									"scores":	[-5.386820639607067]
								}, {
									"case":	98,
									"scores":	[-5.386820639607067]
								}, {
									"case":	99,
									"scores":	[-5.386820639607067]
								}, {
									"case":	100,
									"scores":	[-5.386820639607067]
								}, {
									"case":	101,
									"scores":	[-5.386820639607067]
								}, {
									"case":	102,
									"scores":	[-5.386820639607067]
								}, {
									"case":	103,
									"scores":	[-5.386820639607067]
								}, {
									"case":	104,
									"scores":	[-5.386820639607067]
								}, {
									"case":	105,
									"scores":	[-5.386820639607067]
								}, {
									"case":	106,
									"scores":	[-5.386820639607067]
								}, {
									"case":	107,
									"scores":	[-5.386820639607067]
								}, {
									"case":	108,
									"scores":	[-5.386820639607067]
								}, {
									"case":	109,
									"scores":	[-5.386820639607067]
								}, {
									"case":	110,
									"scores":	[-5.386820639607067]
								}, {
									"case":	111,
									"scores":	[-5.386820639607067]
								}, {
									"case":	112,
									"scores":	[-5.386820639607067]
								}, {
									"case":	113,
									"scores":	[-5.386820639607067]
								}, {
									"case":	114,
									"scores":	[-5.386820639607067]
								}, {
									"case":	115,
									"scores":	[-5.386820639607067]
								}, {
									"case":	116,
									"scores":	[-5.386820639607067]
								}, {
									"case":	117,
									"scores":	[-5.386820639607067]
								}, {
									"case":	118,
									"scores":	[-5.386820639607067]
								}, {
									"case":	119,
									"scores":	[-5.386820639607067]
								}, {
									"case":	120,
									"scores":	[-5.386820639607067]
								}, {
									"case":	121,
									"scores":	[-5.386820639607067]
								}, {
									"case":	122,
									"scores":	[-5.386820639607067]
								}, {
									"case":	123,
									"scores":	[-5.386820639607067]
								}, {
									"case":	124,
									"scores":	[-5.386820639607067]
								}, {
									"case":	125,
									"scores":	[-5.386820639607067]
								}, {
									"case":	126,
									"scores":	[-5.386820639607067]
								}, {
									"case":	127,
									"scores":	[-5.386820639607067]
								}, {
									"case":	128,
									"scores":	[-5.386820639607067]
								}, {
									"case":	129,
									"scores":	[-5.386820639607067]
								}, {
									"case":	130,
									"scores":	[-5.386820639607067]
								}, {
									"case":	131,
									"scores":	[-5.386820639607067]
								}, {
									"case":	132,
									"scores":	[-5.386820639607067]
								}, {
									"case":	133,
									"scores":	[-5.386820639607067]
								}, {
									"case":	134,
									"scores":	[-5.386820639607067]
								}, {
									"case":	135,
									"scores":	[-5.386820639607067]
								}, {
									"case":	136,
									"scores":	[-5.386820639607067]
								}, {
									"case":	137,
									"scores":	[-5.386820639607067]
								}, {
									"case":	138,
									"scores":	[-5.386820639607067]
								}, {
									"case":	139,
									"scores":	[-5.386820639607067]
								}, {
									"case":	140,
									"scores":	[-5.386820639607067]
								}, {
									"case":	141,
									"scores":	[-5.386820639607067]
								}, {
									"case":	142,
									"scores":	[-5.386820639607067]
								}, {
									"case":	143,
									"scores":	[-5.386820639607067]
								}, {
									"case":	144,
									"scores":	[-5.386820639607067]
								}, {
									"case":	145,
									"scores":	[-5.386820639607067]
								}, {
									"case":	146,
									"scores":	[-5.386820639607067]
								}, {
									"case":	147,
									"scores":	[-5.386820639607067]
								}, {
									"case":	148,
									"scores":	[-5.386820639607067]
								}, {
									"case":	149,
									"scores":	[-5.386820639607067]
								}, {
									"case":	150,
									"scores":	[-5.386820639607067]
								}, {
									"case":	151,
									"scores":	[-5.386820639607067]
								}, {
									"case":	152,
									"scores":	[-5.386820639607067]
								}, {
									"case":	153,
									"scores":	[-5.386820639607067]
								}, {
									"case":	154,
									"scores":	[-5.386820639607067]
								}, {
									"case":	155,
									"scores":	[-5.386820639607067]
								}, {
									"case":	156,
									"scores":	[-5.386820639607067]
								}, {
									"case":	157,
									"scores":	[-5.386820639607067]
								}, {
									"case":	158,
									"scores":	[-5.386820639607067]
								}, {
									"case":	159,
									"scores":	[-5.386820639607067]
								}, {
									"case":	160,
									"scores":	[-5.386820639607067]
								}, {
									"case":	161,
									"scores":	[-5.386820639607067]
								}, {
									"case":	162,
									"scores":	[-5.386820639607067]
								}, {
									"case":	163,
									"scores":	[-5.386820639607067]
								}, {
									"case":	164,
									"scores":	[-5.386820639607067]
								}, {
									"case":	165,
									"scores":	[-5.386820639607067]
								}, {
									"case":	166,
									"scores":	[-5.386820639607067]
								}, {
									"case":	167,
									"scores":	[-5.386820639607067]
								}, {
									"case":	168,
									"scores":	[-5.386820639607067]
								}, {
									"case":	169,
									"scores":	[-5.386820639607067]
								}, {
									"case":	170,
									"scores":	[-5.386820639607067]
								}, {
									"case":	171,
									"scores":	[-5.386820639607067]
								}, {
									"case":	172,
									"scores":	[-5.386820639607067]
								}, {
									"case":	173,
									"scores":	[-5.386820639607067]
								}, {
									"case":	174,
									"scores":	[-5.386820639607067]
								}, {
									"case":	175,
									"scores":	[-5.386820639607067]
								}, {
									"case":	176,
									"scores":	[-5.386820639607067]
								}, {
									"case":	177,
									"scores":	[-5.386820639607067]
								}, {
									"case":	178,
									"scores":	[-5.386820639607067]
								}, {
									"case":	179,
									"scores":	[-5.386820639607067]
								}, {
									"case":	180,
									"scores":	[-5.386820639607067]
								}, {
									"case":	181,
									"scores":	[-5.386820639607067]
								}, {
									"case":	182,
									"scores":	[-5.386820639607067]
								}, {
									"case":	183,
									"scores":	[-5.386820639607067]
								}, {
									"case":	184,
									"scores":	[-5.386820639607067]
								}, {
									"case":	185,
									"scores":	[-5.386820639607067]
								}, {
									"case":	186,
									"scores":	[-5.386820639607067]
								}, {
									"case":	187,
									"scores":	[-5.386820639607067]
								}, {
									"case":	188,
									"scores":	[-5.386820639607067]
								}, {
									"case":	189,
									"scores":	[-5.386820639607067]
								}, {
									"case":	190,
									"scores":	[-5.386820639607067]
								}, {
									"case":	191,
									"scores":	[-5.386820639607067]
								}, {
									"case":	192,
									"scores":	[-5.386820639607067]
								}, {
									"case":	193,
									"scores":	[-5.386820639607067]
								}, {
									"case":	194,
									"scores":	[-5.386820639607067]
								}, {
									"case":	195,
									"scores":	[-5.386820639607067]
								}, {
									"case":	196,
									"scores":	[-5.386820639607067]
								}, {
									"case":	197,
									"scores":	[-5.386820639607067]
								}, {
									"case":	198,
									"scores":	[-5.386820639607067]
								}, {
									"case":	199,
									"scores":	[-5.386820639607067]
								}, {
									"case":	200,
									"scores":	[-5.386820639607067]
								}, {
									"case":	201,
									"scores":	[-5.386820639607067]
								}, {
									"case":	202,
									"scores":	[-5.386820639607067]
								}, {
									"case":	203,
									"scores":	[-5.386820639607067]
								}, {
									"case":	204,
									"scores":	[-5.386820639607067]
								}, {
									"case":	205,
									"scores":	[-5.386820639607067]
								}, {
									"case":	206,
									"scores":	[-5.386820639607067]
								}, {
									"case":	207,
									"scores":	[-5.386820639607067]
								}, {
									"case":	208,
									"scores":	[-5.386820639607067]
								}, {
									"case":	209,
									"scores":	[-5.386820639607067]
								}, {
									"case":	210,
									"scores":	[-5.386820639607067]
								}, {
									"case":	211,
									"scores":	[-5.386820639607067]
								}, {
									"case":	212,
									"scores":	[-5.386820639607067]
								}, {
									"case":	213,
									"scores":	[-5.386820639607067]
								}, {
									"case":	214,
									"scores":	[-5.386820639607067]
								}, {
									"case":	215,
									"scores":	[-5.386820639607067]
								}, {
									"case":	216,
									"scores":	[-5.386820639607067]
								}, {
									"case":	217,
									"scores":	[-5.386820639607067]
								}, {
									"case":	218,
									"scores":	[-5.386820639607067]
								}, {
									"case":	219,
									"scores":	[-5.386820639607067]
								}, {
									"case":	220,
									"scores":	[-5.386820639607067]
								}, {
									"case":	221,
									"scores":	[-5.386820639607067]
								}, {
									"case":	222,
									"scores":	[-5.386820639607067]
								}, {
									"case":	223,
									"scores":	[-5.386820639607067]
								}, {
									"case":	224,
									"scores":	[-5.386820639607067]
								}, {
									"case":	225,
									"scores":	[-5.386820639607067]
								}, {
									"case":	226,
									"scores":	[-5.386820639607067]
								}, {
									"case":	227,
									"scores":	[-5.386820639607067]
								}, {
									"case":	228,
									"scores":	[-5.386820639607067]
								}, {
									"case":	229,
									"scores":	[-5.386820639607067]
								}, {
									"case":	230,
									"scores":	[-5.386820639607067]
								}, {
									"case":	231,
									"scores":	[-5.386820639607067]
								}, {
									"case":	232,
									"scores":	[-5.386820639607067]
								}, {
									"case":	233,
									"scores":	[-5.386820639607067]
								}, {
									"case":	234,
									"scores":	[-5.386820639607067]
								}, {
									"case":	235,
									"scores":	[-5.386820639607067]
								}, {
									"case":	236,
									"scores":	[-5.386820639607067]
								}, {
									"case":	237,
									"scores":	[-5.386820639607067]
								}, {
									"case":	238,
									"scores":	[-5.386820639607067]
								}, {
									"case":	239,
									"scores":	[-5.386820639607067]
								}, {
									"case":	240,
									"scores":	[-5.386820639607067]
								}, {
									"case":	241,
									"scores":	[-5.386820639607067]
								}, {
									"case":	242,
									"scores":	[-5.386820639607067]
								}, {
									"case":	243,
									"scores":	[-5.386820639607067]
								}, {
									"case":	244,
									"scores":	[-5.386820639607067]
								}, {
									"case":	245,
									"scores":	[-5.386820639607067]
								}, {
									"case":	246,
									"scores":	[-5.386820639607067]
								}, {
									"case":	247,
									"scores":	[-5.386820639607067]
								}, {
									"case":	248,
									"scores":	[-5.386820639607067]
								}, {
									"case":	249,
									"scores":	[-5.386820639607067]
								}, {
									"case":	250,
									"scores":	[-5.386820639607067]
								}, {
									"case":	251,
									"scores":	[-5.386820639607067]
								}, {
									"case":	252,
									"scores":	[-5.386820639607067]
								}, {
									"case":	253,
									"scores":	[-5.386820639607067]
								}, {
									"case":	254,
									"scores":	[-5.386820639607067]
								}, {
									"case":	255,
									"scores":	[-5.386820639607067]
								}, {
									"case":	256,
									"scores":	[-5.386820639607067]
								}, {
									"case":	257,
									"scores":	[-5.386820639607067]
								}, {
									"case":	258,
									"scores":	[-5.386820639607067]
								}, {
									"case":	259,
									"scores":	[-5.386820639607067]
								}, {
									"case":	260,
									"scores":	[-5.386820639607067]
								}, {
									"case":	261,
									"scores":	[-5.386820639607067]
								}, {
									"case":	262,
									"scores":	[-5.386820639607067]
								}, {
									"case":	263,
									"scores":	[-5.386820639607067]
								}, {
									"case":	264,
									"scores":	[-5.386820639607067]
								}, {
									"case":	265,
									"scores":	[-5.386820639607067]
								}, {
									"case":	266,
									"scores":	[-5.386820639607067]
								}, {
									"case":	267,
									"scores":	[-5.386820639607067]
								}, {
									"case":	268,
									"scores":	[-5.386820639607067]
								}, {
									"case":	269,
									"scores":	[-5.386820639607067]
								}, {
									"case":	270,
									"scores":	[-5.386820639607067]
								}, {
									"case":	271,
									"scores":	[-5.386820639607067]
								}, {
									"case":	272,
									"scores":	[-5.386820639607067]
								}, {
									"case":	273,
									"scores":	[-5.386820639607067]
								}, {
									"case":	274,
									"scores":	[-5.386820639607067]
								}, {
									"case":	275,
									"scores":	[-5.386820639607067]
								}, {
									"case":	276,
									"scores":	[-5.386820639607067]
								}, {
									"case":	277,
									"scores":	[-5.386820639607067]
								}, {
									"case":	278,
									"scores":	[-5.386820639607067]
								}, {
									"case":	279,
									"scores":	[-5.386820639607067]
								}, {
									"case":	280,
									"scores":	[-5.386820639607067]
								}, {
									"case":	281,
									"scores":	[-5.386820639607067]
								}, {
									"case":	282,
									"scores":	[-5.386820639607067]
								}, {
									"case":	283,
									"scores":	[-5.386820639607067]
								}, {
									"case":	284,
									"scores":	[-5.386820639607067]
								}, {
									"case":	285,
									"scores":	[-5.386820639607067]
								}, {
									"case":	286,
									"scores":	[-5.386820639607067]
								}, {
									"case":	287,
									"scores":	[-5.386820639607067]
								}, {
									"case":	288,
									"scores":	[-5.386820639607067]
								}, {
									"case":	289,
									"scores":	[-5.386820639607067]
								}, {
									"case":	290,
									"scores":	[-5.386820639607067]
								}, {
									"case":	291,
									"scores":	[-5.386820639607067]
								}, {
									"case":	292,
									"scores":	[-5.386820639607067]
								}, {
									"case":	293,
									"scores":	[-5.386820639607067]
								}, {
									"case":	294,
									"scores":	[-5.386820639607067]
								}, {
									"case":	295,
									"scores":	[-5.386820639607067]
								}, {
									"case":	296,
									"scores":	[-5.386820639607067]
								}, {
									"case":	297,
									"scores":	[-5.386820639607067]
								}, {
									"case":	298,
									"scores":	[-5.386820639607067]
								}, {
									"case":	299,
									"scores":	[-5.386820639607067]
								}, {
									"case":	300,
									"scores":	[-5.386820639607067]
								}, {
									"case":	301,
									"scores":	[-5.386820639607067]
								}, {
									"case":	302,
									"scores":	[-5.386820639607067]
								}, {
									"case":	303,
									"scores":	[-5.386820639607067]
								}, {
									"case":	304,
									"scores":	[-5.386820639607067]
								}, {
									"case":	305,
									"scores":	[-5.386820639607067]
								}, {
									"case":	306,
									"scores":	[-5.386820639607067]
								}, {
									"case":	307,
									"scores":	[-5.386820639607067]
								}, {
									"case":	308,
									"scores":	[-5.386820639607067]
								}, {
									"case":	309,
									"scores":	[-5.386820639607067]
								}, {
									"case":	310,
									"scores":	[-5.386820639607067]
								}, {
									"case":	311,
									"scores":	[-5.386820639607067]
								}, {
									"case":	312,
									"scores":	[-5.386820639607067]
								}, {
									"case":	313,
									"scores":	[-5.386820639607067]
								}, {
									"case":	314,
									"scores":	[-5.386820639607067]
								}, {
									"case":	315,
									"scores":	[-5.386820639607067]
								}, {
									"case":	316,
									"scores":	[-5.386820639607067]
								}, {
									"case":	317,
									"scores":	[-5.386820639607067]
								}, {
									"case":	318,
									"scores":	[-5.386820639607067]
								}, {
									"case":	319,
									"scores":	[-5.386820639607067]
								}, {
									"case":	320,
									"scores":	[-5.386820639607067]
								}, {
									"case":	321,
									"scores":	[-5.386820639607067]
								}, {
									"case":	322,
									"scores":	[-5.386820639607067]
								}, {
									"case":	323,
									"scores":	[-5.386820639607067]
								}, {
									"case":	324,
									"scores":	[-5.386820639607067]
								}, {
									"case":	325,
									"scores":	[-5.386820639607067]
								}, {
									"case":	326,
									"scores":	[-5.386820639607067]
								}, {
									"case":	327,
									"scores":	[-5.386820639607067]
								}, {
									"case":	328,
									"scores":	[-5.386820639607067]
								}, {
									"case":	329,
									"scores":	[-5.386820639607067]
								}, {
									"case":	330,
									"scores":	[-5.386820639607067]
								}, {
									"case":	331,
									"scores":	[-5.386820639607067]
								}, {
									"case":	332,
									"scores":	[-5.386820639607067]
								}, {
									"case":	333,
									"scores":	[-5.386820639607067]
								}, {
									"case":	334,
									"scores":	[-5.386820639607067]
								}, {
									"case":	335,
									"scores":	[-5.386820639607067]
								}, {
									"case":	336,
									"scores":	[-5.386820639607067]
								}, {
									"case":	337,
									"scores":	[-5.386820639607067]
								}, {
									"case":	338,
									"scores":	[-5.386820639607067]
								}, {
									"case":	339,
									"scores":	[-5.386820639607067]
								}, {
									"case":	340,
									"scores":	[-5.386820639607067]
								}, {
									"case":	341,
									"scores":	[-5.386820639607067]
								}, {
									"case":	342,
									"scores":	[-5.386820639607067]
								}, {
									"case":	343,
									"scores":	[-5.386820639607067]
								}, {
									"case":	344,
									"scores":	[-5.386820639607067]
								}, {
									"case":	345,
									"scores":	[-5.386820639607067]
								}, {
									"case":	346,
									"scores":	[-5.386820639607067]
								}, {
									"case":	347,
									"scores":	[-5.386820639607067]
								}, {
									"case":	348,
									"scores":	[-5.386820639607067]
								}, {
									"case":	349,
									"scores":	[-5.386820639607067]
								}, {
									"case":	350,
									"scores":	[-5.386820639607067]
								}, {
									"case":	351,
									"scores":	[-5.386820639607067]
								}, {
									"case":	352,
									"scores":	[-5.386820639607067]
								}, {
									"case":	353,
									"scores":	[-5.386820639607067]
								}, {
									"case":	354,
									"scores":	[-5.386820639607067]
								}, {
									"case":	355,
									"scores":	[-5.386820639607067]
								}, {
									"case":	356,
									"scores":	[-5.386820639607067]
								}, {
									"case":	357,
									"scores":	[-5.386820639607067]
								}, {
									"case":	358,
									"scores":	[-5.386820639607067]
								}, {
									"case":	359,
									"scores":	[-5.386820639607067]
								}, {
									"case":	360,
									"scores":	[-5.386820639607067]
								}, {
									"case":	361,
									"scores":	[-5.386820639607067]
								}, {
									"case":	362,
									"scores":	[-5.386820639607067]
								}, {
									"case":	363,
									"scores":	[-5.386820639607067]
								}, {
									"case":	364,
									"scores":	[-5.386820639607067]
								}, {
									"case":	365,
									"scores":	[-5.386820639607067]
								}, {
									"case":	366,
									"scores":	[-5.386820639607067]
								}, {
									"case":	367,
									"scores":	[-5.386820639607067]
								}, {
									"case":	368,
									"scores":	[-5.386820639607067]
								}, {
									"case":	369,
									"scores":	[-5.386820639607067]
								}, {
									"case":	370,
									"scores":	[-5.386820639607067]
								}, {
									"case":	371,
									"scores":	[-5.386820639607067]
								}, {
									"case":	372,
									"scores":	[-5.386820639607067]
								}, {
									"case":	373,
									"scores":	[-5.386820639607067]
								}, {
									"case":	374,
									"scores":	[-5.386820639607067]
								}, {
									"case":	375,
									"scores":	[-5.386820639607067]
								}, {
									"case":	376,
									"scores":	[-5.386820639607067]
								}, {
									"case":	377,
									"scores":	[-5.386820639607067]
								}, {
									"case":	378,
									"scores":	[-5.386820639607067]
								}, {
									"case":	379,
									"scores":	[-5.386820639607067]
								}, {
									"case":	380,
									"scores":	[-5.386820639607067]
								}, {
									"case":	381,
									"scores":	[-5.386820639607067]
								}, {
									"case":	382,
									"scores":	[-5.386820639607067]
								}, {
									"case":	383,
									"scores":	[-5.386820639607067]
								}, {
									"case":	384,
									"scores":	[-5.386820639607067]
								}, {
									"case":	385,
									"scores":	[-5.386820639607067]
								}, {
									"case":	386,
									"scores":	[-5.386820639607067]
								}, {
									"case":	387,
									"scores":	[-5.386820639607067]
								}, {
									"case":	388,
									"scores":	[-5.386820639607067]
								}, {
									"case":	389,
									"scores":	[-5.386820639607067]
								}, {
									"case":	390,
									"scores":	[-5.386820639607067]
								}, {
									"case":	391,
									"scores":	[-5.386820639607067]
								}, {
									"case":	392,
									"scores":	[-5.386820639607067]
								}, {
									"case":	393,
									"scores":	[-5.386820639607067]
								}, {
									"case":	394,
									"scores":	[-5.386820639607067]
								}, {
									"case":	395,
									"scores":	[-5.386820639607067]
								}, {
									"case":	396,
									"scores":	[-5.386820639607067]
								}, {
									"case":	397,
									"scores":	[-5.386820639607067]
								}, {
									"case":	398,
									"scores":	[-5.386820639607067]
								}, {
									"case":	399,
									"scores":	[-5.386820639607067]
								}, {
									"case":	400,
									"scores":	[-5.386820639607067]
								}, {
									"case":	401,
									"scores":	[-5.386820639607067]
								}, {
									"case":	402,
									"scores":	[-5.386820639607067]
								}, {
									"case":	403,
									"scores":	[-5.386820639607067]
								}, {
									"case":	404,
									"scores":	[-5.386820639607067]
								}, {
									"case":	405,
									"scores":	[-5.386820639607067]
								}, {
									"case":	406,
									"scores":	[-5.386820639607067]
								}, {
									"case":	407,
									"scores":	[-5.386820639607067]
								}, {
									"case":	408,
									"scores":	[-5.386820639607067]
								}, {
									"case":	409,
									"scores":	[-5.386820639607067]
								}, {
									"case":	410,
									"scores":	[-5.386820639607067]
								}, {
									"case":	411,
									"scores":	[-5.386820639607067]
								}, {
									"case":	412,
									"scores":	[-5.386820639607067]
								}, {
									"case":	413,
									"scores":	[-5.386820639607067]
								}, {
									"case":	414,
									"scores":	[-5.386820639607067]
								}, {
									"case":	415,
									"scores":	[-5.386820639607067]
								}, {
									"case":	416,
									"scores":	[-5.386820639607067]
								}, {
									"case":	417,
									"scores":	[-5.386820639607067]
								}, {
									"case":	418,
									"scores":	[-5.386820639607067]
								}, {
									"case":	419,
									"scores":	[-5.386820639607067]
								}, {
									"case":	420,
									"scores":	[-5.386820639607067]
								}, {
									"case":	421,
									"scores":	[-5.386820639607067]
								}, {
									"case":	422,
									"scores":	[-5.386820639607067]
								}, {
									"case":	423,
									"scores":	[-5.386820639607067]
								}, {
									"case":	424,
									"scores":	[-5.386820639607067]
								}, {
									"case":	425,
									"scores":	[-5.386820639607067]
								}, {
									"case":	426,
									"scores":	[-5.386820639607067]
								}, {
									"case":	427,
									"scores":	[-5.386820639607067]
								}, {
									"case":	428,
									"scores":	[-5.386820639607067]
								}, {
									"case":	429,
									"scores":	[-5.386820639607067]
								}, {
									"case":	430,
									"scores":	[-5.386820639607067]
								}, {
									"case":	431,
									"scores":	[-5.386820639607067]
								}, {
									"case":	432,
									"scores":	[-5.386820639607067]
								}, {
									"case":	433,
									"scores":	[-5.386820639607067]
								}, {
									"case":	434,
									"scores":	[-5.386820639607067]
								}, {
									"case":	435,
									"scores":	[-5.386820639607067]
								}, {
									"case":	436,
									"scores":	[-5.386820639607067]
								}, {
									"case":	437,
									"scores":	[-5.386820639607067]
								}, {
									"case":	438,
									"scores":	[-5.386820639607067]
								}, {
									"case":	439,
									"scores":	[-5.386820639607067]
								}, {
									"case":	440,
									"scores":	[-5.386820639607067]
								}, {
									"case":	441,
									"scores":	[-5.386820639607067]
								}, {
									"case":	442,
									"scores":	[-5.386820639607067]
								}, {
									"case":	443,
									"scores":	[-5.386820639607067]
								}, {
									"case":	444,
									"scores":	[-5.386820639607067]
								}, {
									"case":	445,
									"scores":	[-5.386820639607067]
								}, {
									"case":	446,
									"scores":	[-5.386820639607067]
								}, {
									"case":	447,
									"scores":	[-5.386820639607067]
								}, {
									"case":	448,
									"scores":	[-5.386820639607067]
								}, {
									"case":	449,
									"scores":	[-5.386820639607067]
								}, {
									"case":	450,
									"scores":	[-5.386820639607067]
								}, {
									"case":	451,
									"scores":	[-5.386820639607067]
								}, {
									"case":	452,
									"scores":	[-5.386820639607067]
								}, {
									"case":	453,
									"scores":	[-5.386820639607067]
								}, {
									"case":	454,
									"scores":	[-5.386820639607067]
								}, {
									"case":	455,
									"scores":	[-5.386820639607067]
								}, {
									"case":	456,
									"scores":	[-5.386820639607067]
								}, {
									"case":	457,
									"scores":	[-5.386820639607067]
								}, {
									"case":	458,
									"scores":	[-5.386820639607067]
								}, {
									"case":	459,
									"scores":	[-5.386820639607067]
								}, {
									"case":	460,
									"scores":	[-5.386820639607067]
								}, {
									"case":	461,
									"scores":	[-5.386820639607067]
								}, {
									"case":	462,
									"scores":	[-5.386820639607067]
								}, {
									"case":	463,
									"scores":	[-5.386820639607067]
								}, {
									"case":	464,
									"scores":	[-5.386820639607067]
								}, {
									"case":	465,
									"scores":	[-5.386820639607067]
								}, {
									"case":	466,
									"scores":	[-5.386820639607067]
								}, {
									"case":	467,
									"scores":	[-5.386820639607067]
								}, {
									"case":	468,
									"scores":	[-5.386820639607067]
								}, {
									"case":	469,
									"scores":	[-5.386820639607067]
								}, {
									"case":	470,
									"scores":	[-5.386820639607067]
								}, {
									"case":	471,
									"scores":	[-5.386820639607067]
								}, {
									"case":	472,
									"scores":	[-5.386820639607067]
								}, {
									"case":	473,
									"scores":	[-5.386820639607067]
								}, {
									"case":	474,
									"scores":	[-5.386820639607067]
								}, {
									"case":	475,
									"scores":	[-5.386820639607067]
								}, {
									"case":	476,
									"scores":	[-5.386820639607067]
								}, {
									"case":	477,
									"scores":	[-5.386820639607067]
								}, {
									"case":	478,
									"scores":	[-5.386820639607067]
								}, {
									"case":	479,
									"scores":	[-5.386820639607067]
								}, {
									"case":	480,
									"scores":	[-5.386820639607067]
								}, {
									"case":	481,
									"scores":	[-5.386820639607067]
								}, {
									"case":	482,
									"scores":	[-5.386820639607067]
								}, {
									"case":	483,
									"scores":	[-5.386820639607067]
								}, {
									"case":	484,
									"scores":	[-5.386820639607067]
								}, {
									"case":	485,
									"scores":	[-5.386820639607067]
								}, {
									"case":	486,
									"scores":	[-5.386820639607067]
								}, {
									"case":	487,
									"scores":	[-5.386820639607067]
								}, {
									"case":	488,
									"scores":	[-5.386820639607067]
								}, {
									"case":	489,
									"scores":	[-5.386820639607067]
								}, {
									"case":	490,
									"scores":	[-5.386820639607067]
								}, {
									"case":	491,
									"scores":	[-5.386820639607067]
								}, {
									"case":	492,
									"scores":	[-5.386820639607067]
								}, {
									"case":	493,
									"scores":	[-5.386820639607067]
								}, {
									"case":	494,
									"scores":	[-5.386820639607067]
								}, {
									"case":	495,
									"scores":	[-5.386820639607067]
								}, {
									"case":	496,
									"scores":	[-5.386820639607067]
								}, {
									"case":	497,
									"scores":	[-5.386820639607067]
								}, {
									"case":	498,
									"scores":	[-5.386820639607067]
								}, {
									"case":	499,
									"scores":	[-5.386820639607067]
								}, {
									"case":	500,
									"scores":	[-5.386820639607067]
								}, {
									"case":	501,
									"scores":	[-5.386820639607067]
								}, {
									"case":	502,
									"scores":	[-5.386820639607067]
								}, {
									"case":	503,
									"scores":	[-5.386820639607067]
								}, {
									"case":	504,
									"scores":	[-5.386820639607067]
								}, {
									"case":	505,
									"scores":	[-5.386820639607067]
								}, {
									"case":	506,
									"scores":	[-5.386820639607067]
								}, {
									"case":	507,
									"scores":	[-5.386820639607067]
								}, {
									"case":	508,
									"scores":	[-5.386820639607067]
								}, {
									"case":	509,
									"scores":	[-5.386820639607067]
								}, {
									"case":	510,
									"scores":	[-5.386820639607067]
								}, {
									"case":	511,
									"scores":	[-5.386820639607067]
								}, {
									"case":	512,
									"scores":	[-5.386820639607067]
								}, {
									"case":	513,
									"scores":	[-5.386820639607067]
								}, {
									"case":	514,
									"scores":	[-5.386820639607067]
								}, {
									"case":	515,
									"scores":	[-5.386820639607067]
								}, {
									"case":	516,
									"scores":	[-5.386820639607067]
								}, {
									"case":	517,
									"scores":	[-5.386820639607067]
								}, {
									"case":	518,
									"scores":	[-5.386820639607067]
								}, {
									"case":	519,
									"scores":	[-5.386820639607067]
								}, {
									"case":	520,
									"scores":	[-5.386820639607067]
								}, {
									"case":	521,
									"scores":	[-5.386820639607067]
								}, {
									"case":	522,
									"scores":	[-5.386820639607067]
								}, {
									"case":	523,
									"scores":	[-5.386820639607067]
								}, {
									"case":	524,
									"scores":	[-5.386820639607067]
								}, {
									"case":	525,
									"scores":	[-5.386820639607067]
								}, {
									"case":	526,
									"scores":	[-5.386820639607067]
								}, {
									"case":	527,
									"scores":	[-5.386820639607067]
								}, {
									"case":	528,
									"scores":	[-5.386820639607067]
								}, {
									"case":	529,
									"scores":	[-5.386820639607067]
								}, {
									"case":	530,
									"scores":	[-5.386820639607067]
								}, {
									"case":	531,
									"scores":	[-5.386820639607067]
								}, {
									"case":	532,
									"scores":	[-5.386820639607067]
								}, {
									"case":	533,
									"scores":	[-5.386820639607067]
								}, {
									"case":	534,
									"scores":	[-5.386820639607067]
								}, {
									"case":	535,
									"scores":	[-5.386820639607067]
								}, {
									"case":	536,
									"scores":	[-5.386820639607067]
								}, {
									"case":	537,
									"scores":	[-5.386820639607067]
								}, {
									"case":	538,
									"scores":	[-5.386820639607067]
								}, {
									"case":	539,
									"scores":	[-5.386820639607067]
								}, {
									"case":	540,
									"scores":	[-5.386820639607067]
								}, {
									"case":	541,
									"scores":	[-5.386820639607067]
								}, {
									"case":	542,
									"scores":	[-5.386820639607067]
								}, {
									"case":	543,
									"scores":	[-5.386820639607067]
								}, {
									"case":	544,
									"scores":	[-5.386820639607067]
								}, {
									"case":	545,
									"scores":	[-5.386820639607067]
								}, {
									"case":	546,
									"scores":	[-5.386820639607067]
								}, {
									"case":	547,
									"scores":	[-5.386820639607067]
								}, {
									"case":	548,
									"scores":	[-5.386820639607067]
								}, {
									"case":	549,
									"scores":	[-5.386820639607067]
								}, {
									"case":	550,
									"scores":	[-5.386820639607067]
								}, {
									"case":	551,
									"scores":	[-5.386820639607067]
								}, {
									"case":	552,
									"scores":	[-5.386820639607067]
								}, {
									"case":	553,
									"scores":	[-5.386820639607067]
								}, {
									"case":	554,
									"scores":	[-5.386820639607067]
								}, {
									"case":	555,
									"scores":	[-5.386820639607067]
								}, {
									"case":	556,
									"scores":	[-5.386820639607067]
								}, {
									"case":	557,
									"scores":	[-5.386820639607067]
								}, {
									"case":	558,
									"scores":	[-5.386820639607067]
								}, {
									"case":	559,
									"scores":	[-5.386820639607067]
								}, {
									"case":	560,
									"scores":	[-5.386820639607067]
								}, {
									"case":	561,
									"scores":	[-5.386820639607067]
								}, {
									"case":	562,
									"scores":	[-5.386820639607067]
								}, {
									"case":	563,
									"scores":	[-5.386820639607067]
								}, {
									"case":	564,
									"scores":	[-5.386820639607067]
								}, {
									"case":	565,
									"scores":	[-5.386820639607067]
								}, {
									"case":	566,
									"scores":	[-5.386820639607067]
								}, {
									"case":	567,
									"scores":	[-5.386820639607067]
								}, {
									"case":	568,
									"scores":	[-5.386820639607067]
								}, {
									"case":	569,
									"scores":	[-5.386820639607067]
								}, {
									"case":	570,
									"scores":	[-5.386820639607067]
								}, {
									"case":	571,
									"scores":	[-5.386820639607067]
								}, {
									"case":	572,
									"scores":	[-5.386820639607067]
								}, {
									"case":	573,
									"scores":	[-5.386820639607067]
								}, {
									"case":	574,
									"scores":	[-5.386820639607067]
								}, {
									"case":	575,
									"scores":	[-5.386820639607067]
								}, {
									"case":	576,
									"scores":	[-5.386820639607067]
								}, {
									"case":	577,
									"scores":	[-5.386820639607067]
								}, {
									"case":	578,
									"scores":	[-5.386820639607067]
								}, {
									"case":	579,
									"scores":	[-5.386820639607067]
								}, {
									"case":	580,
									"scores":	[-5.386820639607067]
								}, {
									"case":	581,
									"scores":	[-5.386820639607067]
								}, {
									"case":	582,
									"scores":	[-5.386820639607067]
								}, {
									"case":	583,
									"scores":	[-5.386820639607067]
								}, {
									"case":	584,
									"scores":	[-5.386820639607067]
								}, {
									"case":	585,
									"scores":	[-5.386820639607067]
								}, {
									"case":	586,
									"scores":	[-5.386820639607067]
								}, {
									"case":	587,
									"scores":	[-5.386820639607067]
								}, {
									"case":	588,
									"scores":	[-5.386820639607067]
								}, {
									"case":	589,
									"scores":	[-5.386820639607067]
								}, {
									"case":	590,
									"scores":	[-5.386820639607067]
								}, {
									"case":	591,
									"scores":	[-5.386820639607067]
								}, {
									"case":	592,
									"scores":	[-5.386820639607067]
								}, {
									"case":	593,
									"scores":	[-5.386820639607067]
								}, {
									"case":	594,
									"scores":	[-5.386820639607067]
								}, {
									"case":	595,
									"scores":	[-5.386820639607067]
								}, {
									"case":	596,
									"scores":	[-5.386820639607067]
								}, {
									"case":	597,
									"scores":	[-5.386820639607067]
								}, {
									"case":	598,
									"scores":	[-5.386820639607067]
								}, {
									"case":	599,
									"scores":	[-5.386820639607067]
								}, {
									"case":	600,
									"scores":	[-5.386820639607067]
								}, {
									"case":	601,
									"scores":	[-5.386820639607067]
								}, {
									"case":	602,
									"scores":	[-5.386820639607067]
								}, {
									"case":	603,
									"scores":	[-5.386820639607067]
								}, {
									"case":	604,
									"scores":	[-5.386820639607067]
								}, {
									"case":	605,
									"scores":	[-5.386820639607067]
								}, {
									"case":	606,
									"scores":	[-5.386820639607067]
								}, {
									"case":	607,
									"scores":	[-5.386820639607067]
								}, {
									"case":	608,
									"scores":	[-5.386820639607067]
								}, {
									"case":	609,
									"scores":	[-5.386820639607067]
								}, {
									"case":	610,
									"scores":	[-5.386820639607067]
								}, {
									"case":	611,
									"scores":	[-5.386820639607067]
								}, {
									"case":	612,
									"scores":	[-5.386820639607067]
								}, {
									"case":	613,
									"scores":	[-5.386820639607067]
								}, {
									"case":	614,
									"scores":	[-5.386820639607067]
								}, {
									"case":	615,
									"scores":	[-5.386820639607067]
								}, {
									"case":	616,
									"scores":	[-5.386820639607067]
								}, {
									"case":	617,
									"scores":	[-5.386820639607067]
								}, {
									"case":	618,
									"scores":	[-5.386820639607067]
								}, {
									"case":	619,
									"scores":	[-5.386820639607067]
								}, {
									"case":	620,
									"scores":	[-5.386820639607067]
								}, {
									"case":	621,
									"scores":	[-5.386820639607067]
								}, {
									"case":	622,
									"scores":	[-5.386820639607067]
								}, {
									"case":	623,
									"scores":	[-5.386820639607067]
								}, {
									"case":	624,
									"scores":	[-5.386820639607067]
								}, {
									"case":	625,
									"scores":	[-5.386820639607067]
								}, {
									"case":	626,
									"scores":	[-5.386820639607067]
								}, {
									"case":	627,
									"scores":	[-5.386820639607067]
								}, {
									"case":	628,
									"scores":	[-5.386820639607067]
								}, {
									"case":	629,
									"scores":	[-5.386820639607067]
								}, {
									"case":	630,
									"scores":	[-5.386820639607067]
								}, {
									"case":	631,
									"scores":	[-5.386820639607067]
								}, {
									"case":	632,
									"scores":	[-5.386820639607067]
								}, {
									"case":	633,
									"scores":	[-5.386820639607067]
								}, {
									"case":	634,
									"scores":	[-5.386820639607067]
								}, {
									"case":	635,
									"scores":	[-5.386820639607067]
								}, {
									"case":	636,
									"scores":	[-5.386820639607067]
								}, {
									"case":	637,
									"scores":	[-5.386820639607067]
								}, {
									"case":	638,
									"scores":	[-5.386820639607067]
								}, {
									"case":	639,
									"scores":	[-5.386820639607067]
								}, {
									"case":	640,
									"scores":	[-5.386820639607067]
								}, {
									"case":	641,
									"scores":	[-5.386820639607067]
								}, {
									"case":	642,
									"scores":	[-5.386820639607067]
								}, {
									"case":	643,
									"scores":	[-5.386820639607067]
								}, {
									"case":	644,
									"scores":	[-5.386820639607067]
								}, {
									"case":	645,
									"scores":	[-5.386820639607067]
								}, {
									"case":	646,
									"scores":	[-5.386820639607067]
								}, {
									"case":	647,
									"scores":	[-5.386820639607067]
								}, {
									"case":	648,
									"scores":	[-5.386820639607067]
								}, {
									"case":	649,
									"scores":	[-5.386820639607067]
								}, {
									"case":	650,
									"scores":	[-5.386820639607067]
								}, {
									"case":	651,
									"scores":	[-5.386820639607067]
								}, {
									"case":	652,
									"scores":	[-5.386820639607067]
								}, {
									"case":	653,
									"scores":	[-5.386820639607067]
								}, {
									"case":	654,
									"scores":	[-5.386820639607067]
								}, {
									"case":	655,
									"scores":	[-5.386820639607067]
								}, {
									"case":	656,
									"scores":	[-5.386820639607067]
								}, {
									"case":	657,
									"scores":	[-5.386820639607067]
								}, {
									"case":	658,
									"scores":	[-5.386820639607067]
								}, {
									"case":	659,
									"scores":	[-5.386820639607067]
								}, {
									"case":	660,
									"scores":	[-5.386820639607067]
								}, {
									"case":	661,
									"scores":	[-5.386820639607067]
								}, {
									"case":	662,
									"scores":	[-5.386820639607067]
								}, {
									"case":	663,
									"scores":	[-5.386820639607067]
								}, {
									"case":	664,
									"scores":	[-5.386820639607067]
								}, {
									"case":	665,
									"scores":	[-5.386820639607067]
								}, {
									"case":	666,
									"scores":	[-5.386820639607067]
								}, {
									"case":	667,
									"scores":	[-5.386820639607067]
								}, {
									"case":	668,
									"scores":	[-5.386820639607067]
								}, {
									"case":	669,
									"scores":	[-5.386820639607067]
								}, {
									"case":	670,
									"scores":	[-5.386820639607067]
								}, {
									"case":	671,
									"scores":	[-5.386820639607067]
								}, {
									"case":	672,
									"scores":	[-5.386820639607067]
								}, {
									"case":	673,
									"scores":	[-5.386820639607067]
								}, {
									"case":	674,
									"scores":	[-5.386820639607067]
								}, {
									"case":	675,
									"scores":	[-5.386820639607067]
								}, {
									"case":	676,
									"scores":	[-5.386820639607067]
								}, {
									"case":	677,
									"scores":	[-5.386820639607067]
								}, {
									"case":	678,
									"scores":	[-5.386820639607067]
								}, {
									"case":	679,
									"scores":	[-5.386820639607067]
								}, {
									"case":	680,
									"scores":	[-5.386820639607067]
								}, {
									"case":	681,
									"scores":	[-5.386820639607067]
								}, {
									"case":	682,
									"scores":	[-5.386820639607067]
								}, {
									"case":	683,
									"scores":	[-5.386820639607067]
								}, {
									"case":	684,
									"scores":	[-5.386820639607067]
								}, {
									"case":	685,
									"scores":	[-5.386820639607067]
								}, {
									"case":	686,
									"scores":	[-5.386820639607067]
								}, {
									"case":	687,
									"scores":	[-5.386820639607067]
								}, {
									"case":	688,
									"scores":	[-5.386820639607067]
								}, {
									"case":	689,
									"scores":	[-5.386820639607067]
								}, {
									"case":	690,
									"scores":	[-5.386820639607067]
								}, {
									"case":	691,
									"scores":	[-5.386820639607067]
								}, {
									"case":	692,
									"scores":	[-5.386820639607067]
								}, {
									"case":	693,
									"scores":	[-5.386820639607067]
								}, {
									"case":	694,
									"scores":	[-5.386820639607067]
								}, {
									"case":	695,
									"scores":	[-5.386820639607067]
								}, {
									"case":	696,
									"scores":	[-5.386820639607067]
								}, {
									"case":	697,
									"scores":	[-5.386820639607067]
								}, {
									"case":	698,
									"scores":	[-5.386820639607067]
								}, {
									"case":	699,
									"scores":	[-5.386820639607067]
								}, {
									"case":	700,
									"scores":	[-5.386820639607067]
								}, {
									"case":	701,
									"scores":	[-5.386820639607067]
								}, {
									"case":	702,
									"scores":	[-5.386820639607067]
								}, {
									"case":	703,
									"scores":	[-5.386820639607067]
								}, {
									"case":	704,
									"scores":	[-5.386820639607067]
								}, {
									"case":	705,
									"scores":	[-5.386820639607067]
								}, {
									"case":	706,
									"scores":	[-5.386820639607067]
								}, {
									"case":	707,
									"scores":	[-5.386820639607067]
								}, {
									"case":	708,
									"scores":	[-5.386820639607067]
								}, {
									"case":	709,
									"scores":	[-5.386820639607067]
								}, {
									"case":	710,
									"scores":	[-5.386820639607067]
								}, {
									"case":	711,
									"scores":	[-5.386820639607067]
								}, {
									"case":	712,
									"scores":	[-5.386820639607067]
								}, {
									"case":	713,
									"scores":	[-5.386820639607067]
								}, {
									"case":	714,
									"scores":	[-5.386820639607067]
								}, {
									"case":	715,
									"scores":	[-5.386820639607067]
								}, {
									"case":	716,
									"scores":	[-5.386820639607067]
								}, {
									"case":	717,
									"scores":	[-5.386820639607067]
								}, {
									"case":	718,
									"scores":	[-5.386820639607067]
								}, {
									"case":	719,
									"scores":	[-5.386820639607067]
								}, {
									"case":	720,
									"scores":	[-5.386820639607067]
								}, {
									"case":	721,
									"scores":	[-5.386820639607067]
								}, {
									"case":	722,
									"scores":	[-5.386820639607067]
								}, {
									"case":	723,
									"scores":	[-5.386820639607067]
								}, {
									"case":	724,
									"scores":	[-5.386820639607067]
								}, {
									"case":	725,
									"scores":	[-5.386820639607067]
								}, {
									"case":	726,
									"scores":	[-5.386820639607067]
								}, {
									"case":	727,
									"scores":	[-5.386820639607067]
								}, {
									"case":	728,
									"scores":	[-5.386820639607067]
								}, {
									"case":	729,
									"scores":	[-5.386820639607067]
								}, {
									"case":	730,
									"scores":	[-5.386820639607067]
								}, {
									"case":	731,
									"scores":	[-5.386820639607067]
								}, {
									"case":	732,
									"scores":	[-5.386820639607067]
								}, {
									"case":	733,
									"scores":	[-5.386820639607067]
								}, {
									"case":	734,
									"scores":	[-5.386820639607067]
								}, {
									"case":	735,
									"scores":	[-5.386820639607067]
								}, {
									"case":	736,
									"scores":	[-5.386820639607067]
								}, {
									"case":	737,
									"scores":	[-5.386820639607067]
								}, {
									"case":	738,
									"scores":	[-5.386820639607067]
								}, {
									"case":	739,
									"scores":	[-5.386820639607067]
								}, {
									"case":	740,
									"scores":	[-5.386820639607067]
								}, {
									"case":	741,
									"scores":	[-5.386820639607067]
								}, {
									"case":	742,
									"scores":	[-5.386820639607067]
								}, {
									"case":	743,
									"scores":	[-5.386820639607067]
								}, {
									"case":	744,
									"scores":	[-5.386820639607067]
								}, {
									"case":	745,
									"scores":	[-5.386820639607067]
								}, {
									"case":	746,
									"scores":	[-5.386820639607067]
								}, {
									"case":	747,
									"scores":	[-5.386820639607067]
								}, {
									"case":	748,
									"scores":	[-5.386820639607067]
								}, {
									"case":	749,
									"scores":	[-5.386820639607067]
								}, {
									"case":	750,
									"scores":	[-5.386820639607067]
								}, {
									"case":	751,
									"scores":	[-5.386820639607067]
								}, {
									"case":	752,
									"scores":	[-5.386820639607067]
								}, {
									"case":	753,
									"scores":	[-5.386820639607067]
								}, {
									"case":	754,
									"scores":	[-5.386820639607067]
								}, {
									"case":	755,
									"scores":	[-5.386820639607067]
								}, {
									"case":	756,
									"scores":	[-5.386820639607067]
								}, {
									"case":	757,
									"scores":	[-5.386820639607067]
								}, {
									"case":	758,
									"scores":	[-5.386820639607067]
								}, {
									"case":	759,
									"scores":	[-5.386820639607067]
								}, {
									"case":	760,
									"scores":	[-5.386820639607067]
								}, {
									"case":	761,
									"scores":	[-5.386820639607067]
								}, {
									"case":	762,
									"scores":	[-5.386820639607067]
								}, {
									"case":	763,
									"scores":	[-5.386820639607067]
								}, {
									"case":	764,
									"scores":	[-5.386820639607067]
								}, {
									"case":	765,
									"scores":	[-5.386820639607067]
								}, {
									"case":	766,
									"scores":	[-5.386820639607067]
								}, {
									"case":	767,
									"scores":	[-5.386820639607067]
								}, {
									"case":	768,
									"scores":	[-5.386820639607067]
								}, {
									"case":	769,
									"scores":	[-5.386820639607067]
								}, {
									"case":	770,
									"scores":	[-5.386820639607067]
								}, {
									"case":	771,
									"scores":	[-5.386820639607067]
								}, {
									"case":	772,
									"scores":	[-5.386820639607067]
								}, {
									"case":	773,
									"scores":	[-5.386820639607067]
								}, {
									"case":	774,
									"scores":	[-5.386820639607067]
								}, {
									"case":	775,
									"scores":	[-5.386820639607067]
								}, {
									"case":	776,
									"scores":	[-5.386820639607067]
								}, {
									"case":	777,
									"scores":	[-5.386820639607067]
								}, {
									"case":	778,
									"scores":	[-5.386820639607067]
								}, {
									"case":	779,
									"scores":	[-5.386820639607067]
								}, {
									"case":	780,
									"scores":	[-5.386820639607067]
								}, {
									"case":	781,
									"scores":	[-5.386820639607067]
								}, {
									"case":	782,
									"scores":	[-5.386820639607067]
								}, {
									"case":	783,
									"scores":	[-5.386820639607067]
								}, {
									"case":	784,
									"scores":	[-5.386820639607067]
								}, {
									"case":	785,
									"scores":	[-5.386820639607067]
								}, {
									"case":	786,
									"scores":	[-5.386820639607067]
								}, {
									"case":	787,
									"scores":	[-5.386820639607067]
								}, {
									"case":	788,
									"scores":	[-5.386820639607067]
								}, {
									"case":	789,
									"scores":	[-5.386820639607067]
								}, {
									"case":	790,
									"scores":	[-5.386820639607067]
								}, {
									"case":	791,
									"scores":	[-5.386820639607067]
								}, {
									"case":	792,
									"scores":	[-5.386820639607067]
								}, {
									"case":	793,
									"scores":	[-5.386820639607067]
								}, {
									"case":	794,
									"scores":	[-5.386820639607067]
								}, {
									"case":	795,
									"scores":	[-5.386820639607067]
								}, {
									"case":	796,
									"scores":	[-5.386820639607067]
								}, {
									"case":	797,
									"scores":	[-5.386820639607067]
								}, {
									"case":	798,
									"scores":	[-5.386820639607067]
								}, {
									"case":	799,
									"scores":	[-5.386820639607067]
								}, {
									"case":	800,
									"scores":	[-5.386820639607067]
								}, {
									"case":	801,
									"scores":	[-5.386820639607067]
								}, {
									"case":	802,
									"scores":	[-5.386820639607067]
								}, {
									"case":	803,
									"scores":	[-5.386820639607067]
								}, {
									"case":	804,
									"scores":	[-5.386820639607067]
								}, {
									"case":	805,
									"scores":	[-5.386820639607067]
								}, {
									"case":	806,
									"scores":	[-5.386820639607067]
								}, {
									"case":	807,
									"scores":	[-5.386820639607067]
								}, {
									"case":	808,
									"scores":	[-5.386820639607067]
								}, {
									"case":	809,
									"scores":	[-5.386820639607067]
								}, {
									"case":	810,
									"scores":	[-5.386820639607067]
								}, {
									"case":	811,
									"scores":	[-5.386820639607067]
								}, {
									"case":	812,
									"scores":	[-5.386820639607067]
								}, {
									"case":	813,
									"scores":	[-5.386820639607067]
								}, {
									"case":	814,
									"scores":	[-5.386820639607067]
								}, {
									"case":	815,
									"scores":	[-5.386820639607067]
								}, {
									"case":	816,
									"scores":	[-10.374478734307068, -8.3132158343070657, -9.5406591886070657, -8.3156018356070671, -8.5616407494070668, -8.5245403494070668, -8.2954293526070657, -7.5836052356070667, -7.4987052466070665, -8.2785014356070672, -9.0926476096070665, -8.78361255740707, -8.2785014356070672, -9.0926476096070665, -9.0926476096070665, -8.3156018356070671, -8.5245403494070668, -9.0926476096070665, -8.78361255740707, -8.5245403494070668, -8.78361255740707, -8.78361255740707, -8.78361255740707, -8.78361255740707, -8.78361255740707, -9.0926476096070665, -8.5616407494070668, -8.78361255740707, -8.5616407494070668, -9.3386865234070662, -9.3386865234070662, -9.0926476096070665, -9.3035367266070672, -9.3035367266070672, -9.0926476096070665]
								}]
						}, {
							"switch":	16,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1475,
							"begin_column":	4,
							"end_line":	1475,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L1475\", 35, &(intern), sizeof (intern), &(intern->u.regex.pce), sizeof (intern->u.regex.pce), &(intern->u.regex.pce->refcount), sizeof (intern->u.regex.pce->refcount), &(ht), sizeof (ht), &(ce_inner), sizeof (ce_inner), &(zobject), sizeof (zobject), &(regex), sizeof (regex), &(regex_len), sizeof (regex_len), &(intern->u.regex.regex), sizeof (intern->u.regex.regex), &(mode), sizeof (mode), &(intern->u.regex.mode), sizeof (intern->u.regex.mode), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(inc_refcount), sizeof (inc_refcount), &(intern->u.regex.flags), sizeof (intern->u.regex.flags), &(intern->u.regex.preg_flags), sizeof (intern->u.regex.preg_flags), &(dit_type), sizeof (dit_type), &(ce), sizeof (ce), &(intern->u.regex.use_flags), sizeof (intern->u.regex.use_flags), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(retval), sizeof (retval), &(spl_ce_LogicException), sizeof (spl_ce_LogicException), &(zend_ce_traversable), sizeof (zend_ce_traversable), &(zend_ce_aggregate), sizeof (zend_ce_aggregate), &(zend_ce_iterator), sizeof (zend_ce_iterator), &(spl_ce_OutOfRangeException), sizeof (spl_ce_OutOfRangeException), &(intern->dit_type), sizeof (intern->dit_type), &(ce_base), sizeof (ce_base), &(spl_ce_BadMethodCallException), sizeof (spl_ce_BadMethodCallException), &(this_ptr), sizeof (this_ptr), &(intern->u.regex.pce->re), sizeof (intern->u.regex.pce->re), &(intern->u.regex.pce->extra), sizeof (intern->u.regex.pce->extra), &(intern->u.regex.pce->preg_options), sizeof (intern->u.regex.pce->preg_options), &(intern->u.regex.pce->locale), sizeof (intern->u.regex.pce->locale), &(intern->u.regex.pce->tables), sizeof (intern->u.regex.pce->tables), &(intern->u.regex.pce->compile_options), sizeof (intern->u.regex.pce->compile_options)))\n    intern->u.regex.pce->refcount++;\n", "{\n}\n", "(&ce)->u.regex.pce->refcount++", "(&ce_base)->u.regex.pce->refcount++", "(&ce_inner)->u.regex.pce->refcount++", "(&dit_type)->u.regex.pce->refcount++", "(&error_handling)->u.regex.pce->refcount++", "(&ht)->u.regex.pce->refcount++", "(&inc_refcount)->u.regex.pce->refcount++", "(&intern)->u.regex.pce->refcount++", "(&mode)->u.regex.pce->refcount++", "(&regex)->u.regex.pce->refcount++", "(&regex_len)->u.regex.pce->refcount++", "(&return_value)->u.regex.pce->refcount++", "(&return_value_ptr)->u.regex.pce->refcount++", "(&return_value_used)->u.regex.pce->refcount++", "(&retval)->u.regex.pce->refcount++", "(&this_ptr)->u.regex.pce->refcount++", "(&zobject)->u.regex.pce->refcount++", "(intern)->u.regex.pce->refcount++"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.467506800107067, -6.539896719607067, -7.0622598306070667, -6.7115813096070669, -7.4694694096070666, -7.1751186096070674, -6.6049103556070676, -5.8136393256070669, -6.5306584596070669, -6.4172305096070676, -6.942075319607067, -7.4921737496070673, -6.4172305096070676, -6.942075319607067, -6.942075319607067, -6.7115813096070669, -7.1751186096070674, -6.942075319607067, -7.4921737496070673, -7.1751186096070674, -7.4921737496070673, -7.4921737496070673, -7.4921737496070673, -7.4921737496070673, -7.4921737496070673, -6.942075319607067, -7.4694694096070666, -7.4921737496070673, -7.4694694096070666, -7.6999634196070668, -7.6999634196070668, -6.942075319607067, -7.4113353196070673, -7.4113353196070673, -6.942075319607067]
								}, {
									"case":	2,
									"scores":	[-5.386820639607067]
								}, {
									"case":	3,
									"scores":	[-5.386820639607067]
								}, {
									"case":	4,
									"scores":	[-5.386820639607067]
								}, {
									"case":	5,
									"scores":	[-5.386820639607067]
								}, {
									"case":	6,
									"scores":	[-5.386820639607067]
								}, {
									"case":	7,
									"scores":	[-5.386820639607067]
								}, {
									"case":	8,
									"scores":	[-5.386820639607067]
								}, {
									"case":	9,
									"scores":	[-5.386820639607067]
								}, {
									"case":	10,
									"scores":	[-5.386820639607067]
								}, {
									"case":	11,
									"scores":	[-5.386820639607067]
								}, {
									"case":	12,
									"scores":	[-5.386820639607067]
								}, {
									"case":	13,
									"scores":	[-5.386820639607067]
								}, {
									"case":	14,
									"scores":	[-5.386820639607067]
								}, {
									"case":	15,
									"scores":	[-5.386820639607067]
								}, {
									"case":	16,
									"scores":	[-5.386820639607067]
								}, {
									"case":	17,
									"scores":	[-5.386820639607067]
								}, {
									"case":	18,
									"scores":	[-5.386820639607067]
								}, {
									"case":	19,
									"scores":	[-5.386820639607067]
								}, {
									"case":	20,
									"scores":	[-5.386820639607067]
								}]
						}]
				}, {
					"line":	1475,
					"switches":	[{
							"switch":	17,
							"types":	[[], [], [], [], [815], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698], [], [], [], [], [], []],
							"begin_line":	1476,
							"begin_column":	2,
							"end_line":	1476,
							"end_column":	2,
							"patch_codes":	["memset(&intern->current, 0, sizeof (*(&intern->current)))", "memset(&intern->dit_type, 0, sizeof (*(&intern->dit_type)))", "memset(&intern->inner, 0, sizeof (*(&intern->inner)))", "memset(&intern->inner.ce, 0, sizeof (*(&intern->inner.ce)))", "memset(&intern->inner.ce->__call, 0, sizeof (*(&intern->inner.ce->__call)))", "memset(&intern->inner.ce->__callstatic, 0, sizeof (*(&intern->inner.ce->__callstatic)))", "memset(&intern->inner.ce->__get, 0, sizeof (*(&intern->inner.ce->__get)))", "memset(&intern->inner.ce->__isset, 0, sizeof (*(&intern->inner.ce->__isset)))", "memset(&intern->inner.ce->__set, 0, sizeof (*(&intern->inner.ce->__set)))", "memset(&intern->inner.ce->__tostring, 0, sizeof (*(&intern->inner.ce->__tostring)))", "memset(&intern->inner.ce->__unset, 0, sizeof (*(&intern->inner.ce->__unset)))", "memset(&intern->inner.ce->ce_flags, 0, sizeof (*(&intern->inner.ce->ce_flags)))", "memset(&intern->inner.ce->clone, 0, sizeof (*(&intern->inner.ce->clone)))", "memset(&intern->inner.ce->constants_table, 0, sizeof (*(&intern->inner.ce->constants_table)))", "memset(&intern->inner.ce->constructor, 0, sizeof (*(&intern->inner.ce->constructor)))", "memset(&intern->inner.ce->create_object, 0, sizeof (*(&intern->inner.ce->create_object)))", "memset(&intern->inner.ce->default_properties_count, 0, sizeof (*(&intern->inner.ce->default_properties_count)))", "memset(&intern->inner.ce->default_properties_table, 0, sizeof (*(&intern->inner.ce->default_properties_table)))", "memset(&intern->inner.ce->default_static_members_count, 0, sizeof (*(&intern->inner.ce->default_static_members_count)))", "memset(&intern->inner.ce->default_static_members_table, 0, sizeof (*(&intern->inner.ce->default_static_members_table)))", "memset(&intern->inner.ce->destructor, 0, sizeof (*(&intern->inner.ce->destructor)))", "memset(&intern->inner.ce->function_table, 0, sizeof (*(&intern->inner.ce->function_table)))", "memset(&intern->inner.ce->get_iterator, 0, sizeof (*(&intern->inner.ce->get_iterator)))", "memset(&intern->inner.ce->get_static_method, 0, sizeof (*(&intern->inner.ce->get_static_method)))", "memset(&intern->inner.ce->info, 0, sizeof (*(&intern->inner.ce->info)))", "memset(&intern->inner.ce->interface_gets_implemented, 0, sizeof (*(&intern->inner.ce->interface_gets_implemented)))", "memset(&intern->inner.ce->interfaces, 0, sizeof (*(&intern->inner.ce->interfaces)))", "memset(&intern->inner.ce->iterator_funcs, 0, sizeof (*(&intern->inner.ce->iterator_funcs)))", "memset(&intern->inner.ce->name, 0, sizeof (*(&intern->inner.ce->name)))", "memset(&intern->inner.ce->name_length, 0, sizeof (*(&intern->inner.ce->name_length)))", "memset(&intern->inner.ce->num_interfaces, 0, sizeof (*(&intern->inner.ce->num_interfaces)))", "memset(&intern->inner.ce->num_traits, 0, sizeof (*(&intern->inner.ce->num_traits)))", "memset(&intern->inner.ce->parent, 0, sizeof (*(&intern->inner.ce->parent)))", "memset(&intern->inner.ce->properties_info, 0, sizeof (*(&intern->inner.ce->properties_info)))", "memset(&intern->inner.ce->refcount, 0, sizeof (*(&intern->inner.ce->refcount)))", "memset(&intern->inner.ce->serialize, 0, sizeof (*(&intern->inner.ce->serialize)))", "memset(&intern->inner.ce->serialize_func, 0, sizeof (*(&intern->inner.ce->serialize_func)))", "memset(&intern->inner.ce->static_members_table, 0, sizeof (*(&intern->inner.ce->static_members_table)))", "memset(&intern->inner.ce->trait_aliases, 0, sizeof (*(&intern->inner.ce->trait_aliases)))", "memset(&intern->inner.ce->trait_precedences, 0, sizeof (*(&intern->inner.ce->trait_precedences)))", "memset(&intern->inner.ce->traits, 0, sizeof (*(&intern->inner.ce->traits)))", "memset(&intern->inner.ce->type, 0, sizeof (*(&intern->inner.ce->type)))", "memset(&intern->inner.ce->unserialize, 0, sizeof (*(&intern->inner.ce->unserialize)))", "memset(&intern->inner.ce->unserialize_func, 0, sizeof (*(&intern->inner.ce->unserialize_func)))", "memset(&intern->inner.iterator, 0, sizeof (*(&intern->inner.iterator)))", "memset(&intern->inner.object, 0, sizeof (*(&intern->inner.object)))", "memset(&intern->inner.zobject, 0, sizeof (*(&intern->inner.zobject)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.append, 0, sizeof (*(&intern->u.append)))", "memset(&intern->u.append.iterator, 0, sizeof (*(&intern->u.append.iterator)))", "memset(&intern->u.append.zarrayit, 0, sizeof (*(&intern->u.append.zarrayit)))", "memset(&intern->u.caching, 0, sizeof (*(&intern->u.caching)))", "memset(&intern->u.limit, 0, sizeof (*(&intern->u.limit)))", "memset(&intern->u.regex, 0, sizeof (*(&intern->u.regex)))", "memset(&intern->u.regex.flags, 0, sizeof (*(&intern->u.regex.flags)))", "memset(&intern->u.regex.mode, 0, sizeof (*(&intern->u.regex.mode)))", "memset(&intern->u.regex.pce, 0, sizeof (*(&intern->u.regex.pce)))", "memset(&intern->u.regex.pce->compile_options, 0, sizeof (*(&intern->u.regex.pce->compile_options)))", "memset(&intern->u.regex.pce->extra, 0, sizeof (*(&intern->u.regex.pce->extra)))", "memset(&intern->u.regex.pce->locale, 0, sizeof (*(&intern->u.regex.pce->locale)))", "memset(&intern->u.regex.pce->preg_options, 0, sizeof (*(&intern->u.regex.pce->preg_options)))", "memset(&intern->u.regex.pce->re, 0, sizeof (*(&intern->u.regex.pce->re)))", "memset(&intern->u.regex.pce->refcount, 0, sizeof (*(&intern->u.regex.pce->refcount)))", "memset(&intern->u.regex.pce->tables, 0, sizeof (*(&intern->u.regex.pce->tables)))", "memset(&intern->u.regex.preg_flags, 0, sizeof (*(&intern->u.regex.preg_flags)))", "memset(&intern->u.regex.regex, 0, sizeof (*(&intern->u.regex.regex)))", "memset(&intern->u.regex.use_flags, 0, sizeof (*(&intern->u.regex.use_flags)))", "memset(&spl_ce_ArrayIterator->__call, 0, sizeof (*(&spl_ce_ArrayIterator->__call)))", "memset(&spl_ce_ArrayIterator->__callstatic, 0, sizeof (*(&spl_ce_ArrayIterator->__callstatic)))", "memset(&spl_ce_ArrayIterator->__get, 0, sizeof (*(&spl_ce_ArrayIterator->__get)))", "memset(&spl_ce_ArrayIterator->__isset, 0, sizeof (*(&spl_ce_ArrayIterator->__isset)))", "memset(&spl_ce_ArrayIterator->__set, 0, sizeof (*(&spl_ce_ArrayIterator->__set)))", "memset(&spl_ce_ArrayIterator->__tostring, 0, sizeof (*(&spl_ce_ArrayIterator->__tostring)))", "memset(&spl_ce_ArrayIterator->__unset, 0, sizeof (*(&spl_ce_ArrayIterator->__unset)))", "memset(&spl_ce_ArrayIterator->ce_flags, 0, sizeof (*(&spl_ce_ArrayIterator->ce_flags)))", "memset(&spl_ce_ArrayIterator->clone, 0, sizeof (*(&spl_ce_ArrayIterator->clone)))", "memset(&spl_ce_ArrayIterator->constants_table, 0, sizeof (*(&spl_ce_ArrayIterator->constants_table)))", "memset(&spl_ce_ArrayIterator->constructor, 0, sizeof (*(&spl_ce_ArrayIterator->constructor)))", "memset(&spl_ce_ArrayIterator->create_object, 0, sizeof (*(&spl_ce_ArrayIterator->create_object)))", "memset(&spl_ce_ArrayIterator->default_properties_count, 0, sizeof (*(&spl_ce_ArrayIterator->default_properties_count)))", "memset(&spl_ce_ArrayIterator->default_properties_table, 0, sizeof (*(&spl_ce_ArrayIterator->default_properties_table)))", "memset(&spl_ce_ArrayIterator->default_static_members_count, 0, sizeof (*(&spl_ce_ArrayIterator->default_static_members_count)))", "memset(&spl_ce_ArrayIterator->default_static_members_table, 0, sizeof (*(&spl_ce_ArrayIterator->default_static_members_table)))", "memset(&spl_ce_ArrayIterator->destructor, 0, sizeof (*(&spl_ce_ArrayIterator->destructor)))", "memset(&spl_ce_ArrayIterator->function_table, 0, sizeof (*(&spl_ce_ArrayIterator->function_table)))", "memset(&spl_ce_ArrayIterator->get_iterator, 0, sizeof (*(&spl_ce_ArrayIterator->get_iterator)))", "memset(&spl_ce_ArrayIterator->get_static_method, 0, sizeof (*(&spl_ce_ArrayIterator->get_static_method)))", "memset(&spl_ce_ArrayIterator->info, 0, sizeof (*(&spl_ce_ArrayIterator->info)))", "memset(&spl_ce_ArrayIterator->interface_gets_implemented, 0, sizeof (*(&spl_ce_ArrayIterator->interface_gets_implemented)))", "memset(&spl_ce_ArrayIterator->interfaces, 0, sizeof (*(&spl_ce_ArrayIterator->interfaces)))", "memset(&spl_ce_ArrayIterator->iterator_funcs, 0, sizeof (*(&spl_ce_ArrayIterator->iterator_funcs)))", "memset(&spl_ce_ArrayIterator->name, 0, sizeof (*(&spl_ce_ArrayIterator->name)))", "memset(&spl_ce_ArrayIterator->name_length, 0, sizeof (*(&spl_ce_ArrayIterator->name_length)))", "memset(&spl_ce_ArrayIterator->num_interfaces, 0, sizeof (*(&spl_ce_ArrayIterator->num_interfaces)))", "memset(&spl_ce_ArrayIterator->num_traits, 0, sizeof (*(&spl_ce_ArrayIterator->num_traits)))", "memset(&spl_ce_ArrayIterator->parent, 0, sizeof (*(&spl_ce_ArrayIterator->parent)))", "memset(&spl_ce_ArrayIterator->properties_info, 0, sizeof (*(&spl_ce_ArrayIterator->properties_info)))", "memset(&spl_ce_ArrayIterator->refcount, 0, sizeof (*(&spl_ce_ArrayIterator->refcount)))", "memset(&spl_ce_ArrayIterator->serialize, 0, sizeof (*(&spl_ce_ArrayIterator->serialize)))", "memset(&spl_ce_ArrayIterator->serialize_func, 0, sizeof (*(&spl_ce_ArrayIterator->serialize_func)))", "memset(&spl_ce_ArrayIterator->static_members_table, 0, sizeof (*(&spl_ce_ArrayIterator->static_members_table)))", "memset(&spl_ce_ArrayIterator->trait_aliases, 0, sizeof (*(&spl_ce_ArrayIterator->trait_aliases)))", "memset(&spl_ce_ArrayIterator->trait_precedences, 0, sizeof (*(&spl_ce_ArrayIterator->trait_precedences)))", "memset(&spl_ce_ArrayIterator->traits, 0, sizeof (*(&spl_ce_ArrayIterator->traits)))", "memset(&spl_ce_ArrayIterator->type, 0, sizeof (*(&spl_ce_ArrayIterator->type)))", "memset(&spl_ce_ArrayIterator->unserialize, 0, sizeof (*(&spl_ce_ArrayIterator->unserialize)))", "memset(&spl_ce_ArrayIterator->unserialize_func, 0, sizeof (*(&spl_ce_ArrayIterator->unserialize_func)))", "memset(intern->inner.ce, 0, sizeof (*(intern->inner.ce)))", "memset(intern->inner.ce->__call, 0, sizeof (*(intern->inner.ce->__call)))", "memset(intern->inner.ce->__callstatic, 0, sizeof (*(intern->inner.ce->__callstatic)))", "memset(intern->inner.ce->__get, 0, sizeof (*(intern->inner.ce->__get)))", "memset(intern->inner.ce->__isset, 0, sizeof (*(intern->inner.ce->__isset)))", "memset(intern->inner.ce->__set, 0, sizeof (*(intern->inner.ce->__set)))", "memset(intern->inner.ce->__tostring, 0, sizeof (*(intern->inner.ce->__tostring)))", "memset(intern->inner.ce->__unset, 0, sizeof (*(intern->inner.ce->__unset)))", "memset(intern->inner.ce->clone, 0, sizeof (*(intern->inner.ce->clone)))", "memset(intern->inner.ce->constructor, 0, sizeof (*(intern->inner.ce->constructor)))", "memset(intern->inner.ce->create_object, 0, sizeof (*(intern->inner.ce->create_object)))", "memset(intern->inner.ce->default_properties_table, 0, sizeof (*(intern->inner.ce->default_properties_table)))", "memset(intern->inner.ce->default_static_members_table, 0, sizeof (*(intern->inner.ce->default_static_members_table)))", "memset(intern->inner.ce->destructor, 0, sizeof (*(intern->inner.ce->destructor)))", "memset(intern->inner.ce->get_iterator, 0, sizeof (*(intern->inner.ce->get_iterator)))", "memset(intern->inner.ce->get_static_method, 0, sizeof (*(intern->inner.ce->get_static_method)))", "memset(intern->inner.ce->interface_gets_implemented, 0, sizeof (*(intern->inner.ce->interface_gets_implemented)))", "memset(intern->inner.ce->interfaces, 0, sizeof (*(intern->inner.ce->interfaces)))", "memset(intern->inner.ce->name, 0, sizeof (*(intern->inner.ce->name)))", "memset(intern->inner.ce->parent, 0, sizeof (*(intern->inner.ce->parent)))", "memset(intern->inner.ce->serialize, 0, sizeof (*(intern->inner.ce->serialize)))", "memset(intern->inner.ce->serialize_func, 0, sizeof (*(intern->inner.ce->serialize_func)))", "memset(intern->inner.ce->static_members_table, 0, sizeof (*(intern->inner.ce->static_members_table)))", "memset(intern->inner.ce->trait_aliases, 0, sizeof (*(intern->inner.ce->trait_aliases)))", "memset(intern->inner.ce->trait_precedences, 0, sizeof (*(intern->inner.ce->trait_precedences)))", "memset(intern->inner.ce->traits, 0, sizeof (*(intern->inner.ce->traits)))", "memset(intern->inner.ce->unserialize, 0, sizeof (*(intern->inner.ce->unserialize)))", "memset(intern->inner.ce->unserialize_func, 0, sizeof (*(intern->inner.ce->unserialize_func)))", "memset(intern->inner.iterator, 0, sizeof (*(intern->inner.iterator)))", "memset(intern->inner.object, 0, sizeof (*(intern->inner.object)))", "memset(intern->inner.zobject, 0, sizeof (*(intern->inner.zobject)))", "memset(intern->u.append.iterator, 0, sizeof (*(intern->u.append.iterator)))", "memset(intern->u.append.zarrayit, 0, sizeof (*(intern->u.append.zarrayit)))", "memset(intern->u.regex.pce, 0, sizeof (*(intern->u.regex.pce)))", "memset(intern->u.regex.pce->extra, 0, sizeof (*(intern->u.regex.pce->extra)))", "memset(intern->u.regex.pce->locale, 0, sizeof (*(intern->u.regex.pce->locale)))", "memset(intern->u.regex.pce->re, 0, sizeof (*(intern->u.regex.pce->re)))", "memset(intern->u.regex.pce->tables, 0, sizeof (*(intern->u.regex.pce->tables)))", "memset(intern->u.regex.regex, 0, sizeof (*(intern->u.regex.regex)))", "memset(spl_ce_ArrayIterator->__call, 0, sizeof (*(spl_ce_ArrayIterator->__call)))", "memset(spl_ce_ArrayIterator->__callstatic, 0, sizeof (*(spl_ce_ArrayIterator->__callstatic)))", "memset(spl_ce_ArrayIterator->__get, 0, sizeof (*(spl_ce_ArrayIterator->__get)))", "memset(spl_ce_ArrayIterator->__isset, 0, sizeof (*(spl_ce_ArrayIterator->__isset)))", "memset(spl_ce_ArrayIterator->__set, 0, sizeof (*(spl_ce_ArrayIterator->__set)))", "memset(spl_ce_ArrayIterator->__tostring, 0, sizeof (*(spl_ce_ArrayIterator->__tostring)))", "memset(spl_ce_ArrayIterator->__unset, 0, sizeof (*(spl_ce_ArrayIterator->__unset)))", "memset(spl_ce_ArrayIterator->clone, 0, sizeof (*(spl_ce_ArrayIterator->clone)))", "memset(spl_ce_ArrayIterator->constructor, 0, sizeof (*(spl_ce_ArrayIterator->constructor)))", "memset(spl_ce_ArrayIterator->create_object, 0, sizeof (*(spl_ce_ArrayIterator->create_object)))", "memset(spl_ce_ArrayIterator->default_properties_table, 0, sizeof (*(spl_ce_ArrayIterator->default_properties_table)))", "memset(spl_ce_ArrayIterator->default_static_members_table, 0, sizeof (*(spl_ce_ArrayIterator->default_static_members_table)))", "memset(spl_ce_ArrayIterator->destructor, 0, sizeof (*(spl_ce_ArrayIterator->destructor)))", "memset(spl_ce_ArrayIterator->get_iterator, 0, sizeof (*(spl_ce_ArrayIterator->get_iterator)))", "memset(spl_ce_ArrayIterator->get_static_method, 0, sizeof (*(spl_ce_ArrayIterator->get_static_method)))", "memset(spl_ce_ArrayIterator->interface_gets_implemented, 0, sizeof (*(spl_ce_ArrayIterator->interface_gets_implemented)))", "memset(spl_ce_ArrayIterator->interfaces, 0, sizeof (*(spl_ce_ArrayIterator->interfaces)))", "memset(spl_ce_ArrayIterator->name, 0, sizeof (*(spl_ce_ArrayIterator->name)))", "memset(spl_ce_ArrayIterator->parent, 0, sizeof (*(spl_ce_ArrayIterator->parent)))", "memset(spl_ce_ArrayIterator->serialize, 0, sizeof (*(spl_ce_ArrayIterator->serialize)))", "memset(spl_ce_ArrayIterator->serialize_func, 0, sizeof (*(spl_ce_ArrayIterator->serialize_func)))", "memset(spl_ce_ArrayIterator->static_members_table, 0, sizeof (*(spl_ce_ArrayIterator->static_members_table)))", "memset(spl_ce_ArrayIterator->trait_aliases, 0, sizeof (*(spl_ce_ArrayIterator->trait_aliases)))", "memset(spl_ce_ArrayIterator->trait_precedences, 0, sizeof (*(spl_ce_ArrayIterator->trait_precedences)))", "memset(spl_ce_ArrayIterator->traits, 0, sizeof (*(spl_ce_ArrayIterator->traits)))", "memset(spl_ce_ArrayIterator->unserialize, 0, sizeof (*(spl_ce_ArrayIterator->unserialize)))", "memset(spl_ce_ArrayIterator->unserialize_func, 0, sizeof (*(spl_ce_ArrayIterator->unserialize_func)))", "(intern)->current.pos++", "(intern)->u.regex.pce->refcount++", "(intern)->u.regex.pce->refcount--", "(intern->u.caching.zcache)->is_ref__gc = (-1)", "(intern->u.caching.zcache)->is_ref__gc = (0)", "(intern->u.caching.zcache)->is_ref__gc = (1)", "(intern->u.caching.zcache)->is_ref__gc = (5)", "(intern->u.caching.zcache)->refcount__gc = (-1)", "(intern->u.caching.zcache)->refcount__gc = (0)", "(intern->u.caching.zcache)->refcount__gc = (1)", "(intern->u.caching.zcache)->refcount__gc = (5)", "(regex)++", "_array_init(((intern)->u.caching.zcache), 0)", "_array_init(((return_value)), 0)", "_array_init(((retval)), 0)", "_array_init(((this_ptr)), 0)", "_array_init(((zobject)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((retval)))", "_convert_to_string(((this_ptr)))", "_convert_to_string(((zobject)))", "_efree(((intern)))", "_efree(((intern)->current.str_key))", "_efree(((intern)->u.regex.regex))", "_efree(((regex)))", "_efree(((return_value)))", "_efree(((retval)))", "_efree(((this_ptr)))", "_efree(((zobject)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((retval))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor((((zobject))))", "_zval_copy_ctor(((intern)->u.caching.zstr))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((retval)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor(((zobject)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((retval))", "_zval_copy_ctor_func((this_ptr))", "_zval_copy_ctor_func((zobject))", "_zval_dtor(((return_value)))", "_zval_dtor(((retval)))", "_zval_dtor(((this_ptr)))", "_zval_dtor(((zobject)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((retval))", "_zval_dtor_func((this_ptr))", "_zval_dtor_func((zobject))", "_zval_ptr_dtor((&(intern)->current.data))", "_zval_ptr_dtor((&(intern)->inner.zobject))", "_zval_ptr_dtor((&(intern)->u.append.zarrayit))", "_zval_ptr_dtor((&(intern)->u.caching.zcache))", "_zval_ptr_dtor((&(intern)->u.caching.zchildren))", "_zval_ptr_dtor((&(intern)->u.caching.zstr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&(zobject)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "ce = (ce)", "ce = (ce_base)", "ce = (ce_inner)", "ce = zend_get_class_entry(&(*(return_value)))", "ce = zend_get_class_entry(&(*(retval)))", "ce = zend_get_class_entry(&(*(this_ptr)))", "ce = zend_get_class_entry(&(*(zobject)))", "convert_to_boolean((return_value))", "convert_to_boolean((retval))", "convert_to_boolean((this_ptr))", "convert_to_boolean((zobject))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((retval))", "gc_remove_zval_from_buffer((this_ptr))", "gc_remove_zval_from_buffer((zobject))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((retval)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_check_possible_root(((zobject)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((retval))", "gc_zval_possible_root((this_ptr))", "gc_zval_possible_root((zobject))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((retval))", "i_zval_ptr_dtor((this_ptr))", "i_zval_ptr_dtor((zobject))", "inc_refcount = (-1)", "inc_refcount = (0)", "inc_refcount = (1)", "inc_refcount = (5)", "inc_refcount = (ht)", "inc_refcount = (inc_refcount)", "inc_refcount = (regex_len)", "inc_refcount = (return_value_used)", "intern = (intern)", "intern->dit_type = (-1)", "intern->dit_type = (0)", "intern->dit_type = (1)", "intern->dit_type = (5)", "intern->dit_type = (dit_type)", "intern->inner.ce = (ce)", "intern->inner.ce = (ce_base)", "intern->inner.ce = (ce_inner)", "intern->inner.ce = dit_type == (DIT_AppendIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_CachingIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_Default) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_FilterIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_InfiniteIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_IteratorIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_LimitIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_NoRewindIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_ParentIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RecursiveCachingIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RecursiveFilterIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RecursiveRegexIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_RegexIterator) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == (DIT_Unknown) ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? (ce) : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? (ce_base) : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? (ce_inner) : zend_get_class_entry(&(*zobject))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(return_value)))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(retval)))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(this_ptr)))", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*(zobject)))", "intern->inner.iterator = (intern)->inner.ce->get_iterator(intern->inner.ce, zobject, 0)", "intern->inner.iterator = intern->inner.ce->get_iterator((intern)->inner.ce, zobject, 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (return_value), 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (retval), 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (this_ptr), 0)", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, (zobject), 0)", "intern->inner.object = zend_object_store_get_object((return_value))", "intern->inner.object = zend_object_store_get_object((retval))", "intern->inner.object = zend_object_store_get_object((this_ptr))", "intern->inner.object = zend_object_store_get_object((zobject))", "intern->inner.zobject = (return_value)", "intern->inner.zobject = (retval)", "intern->inner.zobject = (this_ptr)", "intern->inner.zobject = (zobject)", "intern->u.append.iterator = (ce)->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.append.iterator = (ce_base)->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.append.iterator = (ce_inner)->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator((ce), intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator((ce_base), intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator((ce_inner), intern->u.append.zarrayit, 0)", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator(spl_ce_ArrayIterator, (intern)->u.append.zarrayit, 0)", "intern->u.limit.count = (-1)", "intern->u.limit.count = (0)", "intern->u.limit.count = (1)", "intern->u.limit.count = (5)", "intern->u.limit.count = (mode)", "intern->u.limit.offset = (-1)", "intern->u.limit.offset = (0)", "intern->u.limit.offset = (1)", "intern->u.limit.offset = (5)", "intern->u.limit.offset = (mode)", "intern->u.regex.flags = (-1)", "intern->u.regex.flags = (0)", "intern->u.regex.flags = (1)", "intern->u.regex.flags = (5)", "intern->u.regex.flags = (mode)", "intern->u.regex.mode = (-1)", "intern->u.regex.mode = (0)", "intern->u.regex.mode = (1)", "intern->u.regex.mode = (5)", "intern->u.regex.pce = pcre_get_compiled_regex_cache((regex), regex_len)", "intern->u.regex.preg_flags = (-1)", "intern->u.regex.preg_flags = (0)", "intern->u.regex.preg_flags = (1)", "intern->u.regex.preg_flags = (5)", "intern->u.regex.preg_flags = (mode)", "intern->u.regex.regex = (regex)", "intern->u.regex.regex = _estrndup(((regex)), (regex_len))", "intern->u.regex.use_flags = (-1)", "intern->u.regex.use_flags = (0)", "intern->u.regex.use_flags = (1)", "intern->u.regex.use_flags = (5)", "intern->u.regex.use_flags = (ht)", "intern->u.regex.use_flags = (inc_refcount)", "intern->u.regex.use_flags = (regex_len)", "intern->u.regex.use_flags = (return_value_used)", "memset((intern), 0, sizeof(spl_dual_it_object))", "php_error_docref0(((void *)0), (1 << 0L), \"The %s instance wasn't initialized properly\", zend_get_class_entry(&(**(return_value_ptr)))->name)", "spl_append_it_fetch((intern))", "spl_append_it_next((intern))", "spl_append_it_next_iterator((intern))", "spl_caching_it_next((intern))", "spl_caching_it_rewind((intern))", "spl_dual_it_fetch((intern), 0)", "spl_dual_it_fetch((intern), 1)", "spl_dual_it_free((intern))", "spl_dual_it_next((intern), 0)", "spl_dual_it_next((intern), 1)", "spl_dual_it_require((intern))", "spl_dual_it_rewind((intern))", "spl_register_interface(&(ce), \"Countable\", spl_funcs_Countable)", "spl_register_interface(&(ce), \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&(ce), \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&(ce), \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_interface(&(ce_base), \"Countable\", spl_funcs_Countable)", "spl_register_interface(&(ce_base), \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&(ce_base), \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&(ce_base), \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_interface(&(ce_inner), \"Countable\", spl_funcs_Countable)", "spl_register_interface(&(ce_inner), \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&(ce_inner), \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&(ce_inner), \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property((ce), \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_property((ce_base), \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_property((ce_inner), \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&(ce), \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&(ce), \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&(ce), \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_std_class(&(ce_base), \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&(ce_base), \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&(ce_base), \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_std_class(&(ce_inner), \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&(ce_inner), \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&(ce_inner), \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&(ce), spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&(ce), spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&(ce), spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&(ce), spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&(ce), spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&(ce), spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&(ce), spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&(ce_base), spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&(ce_base), spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&(ce_base), spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&(ce_base), spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&(ce_base), spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&(ce_base), spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&(ce_base), spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&(ce_inner), spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, (ce), \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, (ce_base), \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, (ce_inner), \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, (ce), \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, (ce_base), \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, (ce_inner), \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, (ce), \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, (ce_base), \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, (ce_inner), \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, (ce), \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, (ce_base), \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, (ce_inner), \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, (ce), \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, (ce_base), \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, (ce_inner), \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, (ce), \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, (ce_base), \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, (ce_inner), \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, (ce), \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, (ce_base), \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, (ce_inner), \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, (ce), \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, (ce_base), \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, (ce_inner), \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, (ce), \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, (ce_base), \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, (ce_inner), \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, (ce), \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, (ce_base), \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, (ce_inner), \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, (ce), \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, (ce_base), \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, (ce_inner), \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, (ce), \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, (ce_base), \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, (ce_inner), \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_call_method(&(intern)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&(return_value), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&(retval), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&(this_ptr), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&(zobject), ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, (ce), &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, (ce_base), &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, (ce_inner), &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &(ce)->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &(ce_base)->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &(ce_inner)->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, (ce), &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, (ce_base), &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, (ce_inner), &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &(ce)->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &(ce_base)->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &(ce_inner)->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(return_value), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(retval), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(this_ptr), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &(zobject), 0, ((void *)0), ((void *)0))", "zend_class_implements((ce), 1, spl_ce_Countable)", "zend_class_implements((ce), 1, spl_ce_OuterIterator)", "zend_class_implements((ce), 1, spl_ce_RecursiveIterator)", "zend_class_implements((ce), 1, zend_ce_arrayaccess)", "zend_class_implements((ce), 1, zend_ce_iterator)", "zend_class_implements((ce_base), 1, spl_ce_Countable)", "zend_class_implements((ce_base), 1, spl_ce_OuterIterator)", "zend_class_implements((ce_base), 1, spl_ce_RecursiveIterator)", "zend_class_implements((ce_base), 1, zend_ce_arrayaccess)", "zend_class_implements((ce_base), 1, zend_ce_iterator)", "zend_class_implements((ce_inner), 1, spl_ce_Countable)", "zend_class_implements((ce_inner), 1, spl_ce_OuterIterator)", "zend_class_implements((ce_inner), 1, spl_ce_RecursiveIterator)", "zend_class_implements((ce_inner), 1, zend_ce_arrayaccess)", "zend_class_implements((ce_inner), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_CachingIterator, 1, (ce))", "zend_class_implements(spl_ce_CachingIterator, 1, (ce_base))", "zend_class_implements(spl_ce_CachingIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_EmptyIterator, 1, (ce))", "zend_class_implements(spl_ce_EmptyIterator, 1, (ce_base))", "zend_class_implements(spl_ce_EmptyIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_IteratorIterator, 1, (ce))", "zend_class_implements(spl_ce_IteratorIterator, 1, (ce_base))", "zend_class_implements(spl_ce_IteratorIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_OuterIterator, 1, (ce))", "zend_class_implements(spl_ce_OuterIterator, 1, (ce_base))", "zend_class_implements(spl_ce_OuterIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, (ce))", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, (ce_base))", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, (ce_inner))", "zend_class_implements(spl_ce_SeekableIterator, 1, (ce))", "zend_class_implements(spl_ce_SeekableIterator, 1, (ce_base))", "zend_class_implements(spl_ce_SeekableIterator, 1, (ce_inner))", "zend_declare_class_constant_long((ce), \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long((ce), \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long((ce), \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long((ce), \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long((ce), \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long((ce), \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long((ce), \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long((ce), \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long((ce), \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long((ce), \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long((ce), \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long((ce), \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long((ce), \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long((ce), \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long((ce), \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long((ce), \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long((ce), \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long((ce), \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long((ce), \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long((ce), \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long((ce), \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long((ce), \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long((ce), \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_declare_class_constant_long((ce_base), \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long((ce_base), \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long((ce_base), \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long((ce_base), \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long((ce_base), \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long((ce_base), \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long((ce_base), \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long((ce_base), \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long((ce_base), \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long((ce_base), \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long((ce_base), \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long((ce_base), \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long((ce_base), \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long((ce_base), \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long((ce_base), \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long((ce_base), \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long((ce_base), \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long((ce_base), \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long((ce_base), \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long((ce_base), \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long((ce_base), \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long((ce_base), \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long((ce_base), \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_declare_class_constant_long((ce_inner), \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long((ce_inner), \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long((ce_inner), \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long((ce_inner), \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long((ce_inner), \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long((ce_inner), \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long((ce_inner), \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long((ce_inner), \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long((ce_inner), \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long((ce_inner), \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long((ce_inner), \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long((ce_inner), \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long((ce_inner), \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long((ce_inner), \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long((ce_inner), \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long((ce_inner), \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long((ce_inner), \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long((ce_inner), \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 3L), \"Undefined index:  %s\", (regex))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_InvalidArgumentException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_InvalidArgumentException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_InvalidArgumentException, &error_handling)", "zend_replace_error_handling(EH_THROW, (ce), &error_handling)", "zend_replace_error_handling(EH_THROW, (ce_base), &error_handling)", "zend_replace_error_handling(EH_THROW, (ce_inner), &error_handling)", "zend_throw_exception((ce), \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception((ce), \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception((ce), \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception((ce), \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception((ce), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception((ce), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception((ce), \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception((ce), \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception((ce), \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception((ce), \"Parameter offset must be >= 0\", 0)", "zend_throw_exception((ce), \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception((ce), \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception((ce_base), \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception((ce_base), \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception((ce_base), \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception((ce_base), \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception((ce_base), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception((ce_base), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception((ce_base), \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception((ce_base), \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception((ce_base), \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception((ce_base), \"Parameter offset must be >= 0\", 0)", "zend_throw_exception((ce_base), \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception((ce_base), \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception((ce_inner), \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception((ce_inner), \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception((ce_inner), \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception((ce_inner), \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception((ce_inner), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception((ce_inner), \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception((ce_inner), \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception((ce_inner), \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception((ce_inner), \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception((ce_inner), \"Parameter offset must be >= 0\", 0)", "zend_throw_exception((ce_inner), \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception((ce_inner), \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception_ex((ce), 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex((ce), 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex((ce), 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex((ce), 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex((ce), 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zend_throw_exception_ex((ce_base), 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex((ce_base), 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex((ce_base), 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex((ce_base), 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex((ce_base), 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zend_throw_exception_ex((ce_inner), 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex((ce_inner), 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex((ce_inner), 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex((ce_inner), 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex((ce_inner), 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((retval))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((zobject))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((retval))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((zobject))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", (ce)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", (ce_base)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", (ce_inner)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((retval))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((zobject))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", ((ce))->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", ((ce_base))->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", ((ce_inner))->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, ((ce))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, ((ce_base))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, ((ce_inner))->name)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", (ce)->name)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", (ce_base)->name)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", (ce_inner)->name)", "zobject = (return_value)", "zobject = (retval)", "zobject = (this_ptr)", "zobject = (zobject)", "zval_addref_p((intern)->current.data)", "zval_addref_p((return_value))", "zval_addref_p((retval))", "zval_addref_p((this_ptr))", "zval_addref_p((zobject))", "zval_addref_p(*((return_value_ptr)))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((retval))", "zval_unset_isref_p((this_ptr))", "zval_unset_isref_p((zobject))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->u.caching.zcache)->is_ref__gc = 0", "(intern->u.caching.zcache)->refcount__gc = 1", "_array_init((intern->u.caching.zcache), 0)", "_zval_ptr_dtor((&retval))", "ce = zend_get_class_entry(&(*zobject))", "exit(1)", "inc_refcount = 0", "intern = (spl_dual_it_object *)zend_object_store_get_object((this_ptr))", "intern->dit_type = dit_type", "intern->inner.ce = dit_type == DIT_IteratorIterator ? ce : zend_get_class_entry(&(*zobject))", "intern->inner.iterator = intern->inner.ce->get_iterator(intern->inner.ce, zobject, 0)", "intern->inner.object = zend_object_store_get_object(zobject)", "intern->inner.zobject = zobject", "intern->u.append.iterator = spl_ce_ArrayIterator->get_iterator(spl_ce_ArrayIterator, intern->u.append.zarrayit, 0)", "intern->u.limit.count = -1", "intern->u.limit.offset = 0", "intern->u.regex.flags = 0", "intern->u.regex.mode = mode", "intern->u.regex.pce = pcre_get_compiled_regex_cache(regex, regex_len)", "intern->u.regex.pce->refcount++", "intern->u.regex.preg_flags = 0", "intern->u.regex.regex = _estrndup((regex), (regex_len))", "intern->u.regex.use_flags = (ht) >= 5", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_call_method(&intern->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_call_method(&zobject, ce, &ce->iterator_funcs.zf_new_iterator, \"getiterator\", sizeof (\"getiterator\") - 1, &retval, 0, ((void *)0), ((void *)0))", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_InvalidArgumentException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s::getIterator() must be called exactly once per instance\", ce_base->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Illegal mode %ld\", mode)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"%s::getIterator() must return an object that implements Traversable\", ce->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "zobject = retval", "zval_addref_p(zobject)", "if (__is_neg(\"\", \"L1476\", 35, &(intern), sizeof (intern), &(intern->u.regex.pce), sizeof (intern->u.regex.pce), &(intern->u.regex.pce->refcount), sizeof (intern->u.regex.pce->refcount), &(ht), sizeof (ht), &(ce_inner), sizeof (ce_inner), &(zobject), sizeof (zobject), &(regex), sizeof (regex), &(regex_len), sizeof (regex_len), &(intern->u.regex.regex), sizeof (intern->u.regex.regex), &(mode), sizeof (mode), &(intern->u.regex.mode), sizeof (intern->u.regex.mode), &(inc_refcount), sizeof (inc_refcount), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(dit_type), sizeof (dit_type), &(ce), sizeof (ce), &(intern->u.regex.flags), sizeof (intern->u.regex.flags), &(intern->u.regex.preg_flags), sizeof (intern->u.regex.preg_flags), &(intern->u.regex.use_flags), sizeof (intern->u.regex.use_flags), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(retval), sizeof (retval), &(spl_ce_LogicException), sizeof (spl_ce_LogicException), &(zend_ce_traversable), sizeof (zend_ce_traversable), &(zend_ce_aggregate), sizeof (zend_ce_aggregate), &(zend_ce_iterator), sizeof (zend_ce_iterator), &(spl_ce_OutOfRangeException), sizeof (spl_ce_OutOfRangeException), &(intern->dit_type), sizeof (intern->dit_type), &(ce_base), sizeof (ce_base), &(spl_ce_BadMethodCallException), sizeof (spl_ce_BadMethodCallException), &(this_ptr), sizeof (this_ptr), &(intern->u.regex.pce->re), sizeof (intern->u.regex.pce->re), &(intern->u.regex.pce->extra), sizeof (intern->u.regex.pce->extra), &(intern->u.regex.pce->preg_options), sizeof (intern->u.regex.pce->preg_options), &(intern->u.regex.pce->locale), sizeof (intern->u.regex.pce->locale), &(intern->u.regex.pce->tables), sizeof (intern->u.regex.pce->tables), &(intern->u.regex.pce->compile_options), sizeof (intern->u.regex.pce->compile_options)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	2,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	3,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	4,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	5,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	6,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	7,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	8,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	9,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	10,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	11,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	12,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	13,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	14,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	15,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	16,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	17,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	18,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	19,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	20,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	21,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	22,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	23,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	24,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	25,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	26,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	27,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	28,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	29,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	30,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	31,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	32,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	33,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	34,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	35,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	36,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	37,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	38,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	39,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	40,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	41,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	42,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	43,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	44,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	45,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	46,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	47,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	48,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	49,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	50,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	51,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	52,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	53,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	54,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	55,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	56,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	57,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	58,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	59,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	60,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	61,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	62,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	63,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	64,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	65,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	66,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	67,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	68,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	69,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	70,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	71,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	72,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	73,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	74,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	75,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	76,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	77,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	78,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	79,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	80,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	81,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	82,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	83,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	84,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	85,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	86,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	87,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	88,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	89,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	90,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	91,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	92,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	93,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	94,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	95,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	96,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	97,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	98,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	99,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	100,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	101,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	102,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	103,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	104,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	105,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	106,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	107,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	108,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	109,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	110,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	111,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	112,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	113,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	114,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	115,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	116,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	117,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	118,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	119,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	120,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	121,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	122,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	123,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	124,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	125,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	126,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	127,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	128,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	129,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	130,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	131,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	132,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	133,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	134,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	135,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	136,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	137,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	138,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	139,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	140,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	141,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	142,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	143,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	144,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	145,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	146,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	147,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	148,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	149,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	150,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	151,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	152,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	153,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	154,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	155,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	156,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	157,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	158,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	159,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	160,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	161,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	162,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	163,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	164,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	165,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	166,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	167,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	168,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	169,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	170,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	171,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	172,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	173,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	174,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	175,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	176,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	177,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	178,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	179,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	180,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	181,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	182,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	183,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	184,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	185,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	186,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	187,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	188,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	189,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	190,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	191,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	192,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	193,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	194,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	195,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	196,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	197,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	198,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	199,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	200,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	201,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	202,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	203,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	204,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	205,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	206,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	207,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	208,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	209,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	210,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	211,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	212,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	213,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	214,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	215,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	216,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	217,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	218,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	219,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	220,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	221,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	222,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	223,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	224,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	225,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	226,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	227,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	228,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	229,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	230,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	231,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	232,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	233,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	234,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	235,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	236,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	237,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	238,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	239,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	240,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	241,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	242,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	243,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	244,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	245,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	246,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	247,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	248,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	249,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	250,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	251,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	252,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	253,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	254,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	255,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	256,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	257,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	258,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	259,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	260,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	261,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	262,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	263,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	264,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	265,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	266,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	267,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	268,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	269,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	270,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	271,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	272,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	273,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	274,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	275,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	276,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	277,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	278,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	279,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	280,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	281,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	282,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	283,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	284,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	285,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	286,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	287,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	288,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	289,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	290,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	291,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	292,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	293,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	294,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	295,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	296,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	297,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	298,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	299,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	300,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	301,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	302,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	303,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	304,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	305,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	306,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	307,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	308,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	309,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	310,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	311,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	312,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	313,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	314,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	315,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	316,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	317,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	318,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	319,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	320,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	321,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	322,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	323,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	324,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	325,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	326,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	327,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	328,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	329,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	330,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	331,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	332,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	333,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	334,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	335,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	336,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	337,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	338,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	339,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	340,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	341,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	342,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	343,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	344,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	345,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	346,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	347,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	348,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	349,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	350,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	351,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	352,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	353,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	354,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	355,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	356,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	357,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	358,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	359,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	360,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	361,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	362,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	363,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	364,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	365,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	366,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	367,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	368,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	369,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	370,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	371,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	372,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	373,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	374,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	375,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	376,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	377,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	378,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	379,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	380,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	381,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	382,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	383,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	384,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	385,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	386,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	387,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	388,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	389,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	390,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	391,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	392,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	393,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	394,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	395,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	396,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	397,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	398,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	399,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	400,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	401,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	402,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	403,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	404,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	405,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	406,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	407,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	408,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	409,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	410,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	411,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	412,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	413,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	414,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	415,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	416,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	417,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	418,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	419,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	420,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	421,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	422,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	423,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	424,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	425,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	426,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	427,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	428,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	429,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	430,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	431,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	432,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	433,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	434,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	435,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	436,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	437,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	438,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	439,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	440,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	441,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	442,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	443,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	444,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	445,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	446,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	447,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	448,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	449,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	450,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	451,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	452,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	453,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	454,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	455,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	456,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	457,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	458,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	459,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	460,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	461,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	462,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	463,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	464,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	465,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	466,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	467,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	468,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	469,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	470,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	471,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	472,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	473,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	474,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	475,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	476,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	477,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	478,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	479,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	480,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	481,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	482,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	483,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	484,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	485,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	486,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	487,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	488,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	489,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	490,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	491,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	492,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	493,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	494,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	495,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	496,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	497,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	498,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	499,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	500,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	501,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	502,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	503,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	504,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	505,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	506,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	507,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	508,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	509,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	510,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	511,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	512,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	513,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	514,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	515,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	516,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	517,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	518,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	519,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	520,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	521,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	522,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	523,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	524,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	525,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	526,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	527,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	528,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	529,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	530,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	531,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	532,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	533,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	534,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	535,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	536,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	537,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	538,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	539,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	540,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	541,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	542,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	543,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	544,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	545,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	546,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	547,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	548,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	549,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	550,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	551,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	552,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	553,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	554,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	555,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	556,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	557,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	558,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	559,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	560,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	561,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	562,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	563,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	564,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	565,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	566,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	567,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	568,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	569,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	570,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	571,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	572,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	573,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	574,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	575,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	576,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	577,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	578,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	579,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	580,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	581,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	582,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	583,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	584,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	585,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	586,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	587,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	588,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	589,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	590,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	591,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	592,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	593,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	594,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	595,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	596,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	597,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	598,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	599,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	600,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	601,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	602,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	603,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	604,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	605,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	606,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	607,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	608,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	609,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	610,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	611,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	612,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	613,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	614,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	615,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	616,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	617,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	618,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	619,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	620,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	621,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	622,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	623,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	624,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	625,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	626,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	627,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	628,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	629,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	630,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	631,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	632,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	633,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	634,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	635,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	636,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	637,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	638,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	639,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	640,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	641,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	642,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	643,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	644,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	645,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	646,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	647,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	648,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	649,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	650,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	651,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	652,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	653,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	654,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	655,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	656,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	657,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	658,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	659,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	660,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	661,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	662,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	663,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	664,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	665,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	666,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	667,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	668,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	669,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	670,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	671,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	672,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	673,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	674,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	675,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	676,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	677,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	678,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	679,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	680,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	681,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	682,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	683,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	684,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	685,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	686,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	687,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	688,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	689,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	690,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	691,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	692,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	693,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	694,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	695,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	696,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	697,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	698,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	699,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	700,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	701,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	702,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	703,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	704,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	705,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	706,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	707,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	708,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	709,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	710,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	711,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	712,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	713,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	714,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	715,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	716,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	717,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	718,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	719,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	720,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	721,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	722,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	723,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	724,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	725,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	726,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	727,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	728,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	729,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	730,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	731,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	732,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	733,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	734,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	735,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	736,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	737,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	738,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	739,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	740,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	741,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	742,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	743,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	744,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	745,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	746,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	747,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	748,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	749,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	750,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	751,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	752,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	753,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	754,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	755,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	756,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	757,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	758,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	759,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	760,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	761,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	762,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	763,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	764,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	765,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	766,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	767,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	768,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	769,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	770,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	771,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	772,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	773,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	774,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	775,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	776,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	777,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	778,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	779,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	780,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	781,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	782,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	783,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	784,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	785,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	786,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	787,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	788,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	789,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	790,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	791,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	792,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	793,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	794,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	795,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	796,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	797,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	798,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	799,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	800,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	801,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	802,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	803,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	804,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	805,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	806,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	807,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	808,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	809,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	810,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	811,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	812,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	813,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	814,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	815,
									"scores":	[-8.778111236089547, -7.2521120360895468, -8.4085956509895468, -7.9903991282895479, -8.23643804208955, -8.1993376420895459, -7.9702266452895465, -7.2584025282895466, -8.97833401928955, -7.9532987282895471, -8.7674449022895473, -7.9532987282895471, -8.45840985008955, -7.9903991282895479, -8.1993376420895459, -8.7674449022895473, -8.7674449022895473, -8.7674449022895473, -8.45840985008955, -8.1993376420895459, -8.45840985008955, -8.45840985008955, -8.45840985008955, -8.45840985008955, -8.45840985008955, -8.7674449022895473, -8.23643804208955, -8.45840985008955, -8.23643804208955, -9.013483816089547, -9.013483816089547, -8.7674449022895473, -8.97833401928955, -8.97833401928955, -8.7674449022895473]
								}]
						}]
				}, {
					"line":	1841,
					"switches":	[{
							"switch":	18,
							"types":	[[], [], [], [], [147], [], [], [], [], [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], [], [], [], [], [], []],
							"begin_line":	1842,
							"begin_column":	0,
							"end_line":	1842,
							"end_column":	0,
							"patch_codes":	["_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_convert_to_string(((return_value)))", "_convert_to_string(((this_ptr)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor((((return_value))))", "_zval_copy_ctor((((this_ptr))))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "php_error_docref0(((void *)0), (1 << 0L), \"The %s instance wasn't initialized properly\", zend_get_class_entry(&(**(return_value_ptr)))->name)", "spl_dual_it_construct(ht, (return_value), return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, (this_ptr), return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, (return_value_ptr), this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, (return_value), return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, (this_ptr), return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_AppendIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_CachingIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_Default))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_FilterIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_InfiniteIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_IteratorIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_LimitIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_NoRewindIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_ParentIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_RecursiveCachingIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_RecursiveFilterIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_RecursiveRegexIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_RegexIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_Unknown))", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not fetch string value (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%s does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((return_value))))->name)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"%v does not use a full cache (see CachingIterator::__construct)\", zend_get_class_entry(&(*((this_ptr))))->name)", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_addref_p(*((return_value_ptr)))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "if (__is_neg(\"\", \"L1842\", 113, &(ht), sizeof (ht), &(return_value), sizeof (return_value), &(return_value_ptr), sizeof (return_value_ptr), &(this_ptr), sizeof (this_ptr), &(return_value_used), sizeof (return_value_used), &(spl_ce_RegexIterator), sizeof (spl_ce_RegexIterator), &(zend_ce_iterator), sizeof (zend_ce_iterator), &(spl_ce_RegexIterator), sizeof (spl_ce_RegexIterator), &(spl_ce_RegexIterator->type), sizeof (spl_ce_RegexIterator->type), &(spl_ce_RegexIterator->name), sizeof (spl_ce_RegexIterator->name), &(spl_ce_RegexIterator->name_length), sizeof (spl_ce_RegexIterator->name_length), &(spl_ce_RegexIterator->parent), sizeof (spl_ce_RegexIterator->parent), &(spl_ce_RegexIterator->refcount), sizeof (spl_ce_RegexIterator->refcount), &(spl_ce_RegexIterator->ce_flags), sizeof (spl_ce_RegexIterator->ce_flags), &(spl_ce_RegexIterator->default_properties_table), sizeof (spl_ce_RegexIterator->default_properties_table), &(spl_ce_RegexIterator->default_static_members_table), sizeof (spl_ce_RegexIterator->default_static_members_table), &(spl_ce_RegexIterator->static_members_table), sizeof (spl_ce_RegexIterator->static_members_table), &(spl_ce_RegexIterator->default_properties_count), sizeof (spl_ce_RegexIterator->default_properties_count), &(spl_ce_RegexIterator->default_static_members_count), sizeof (spl_ce_RegexIterator->default_static_members_count), &(spl_ce_RegexIterator->constructor), sizeof (spl_ce_RegexIterator->constructor), &(spl_ce_RegexIterator->destructor), sizeof (spl_ce_RegexIterator->destructor), &(spl_ce_RegexIterator->clone), sizeof (spl_ce_RegexIterator->clone), &(spl_ce_RegexIterator->__get), sizeof (spl_ce_RegexIterator->__get), &(spl_ce_RegexIterator->__set), sizeof (spl_ce_RegexIterator->__set), &(spl_ce_RegexIterator->__unset), sizeof (spl_ce_RegexIterator->__unset), &(spl_ce_RegexIterator->__isset), sizeof (spl_ce_RegexIterator->__isset), &(spl_ce_RegexIterator->__call), sizeof (spl_ce_RegexIterator->__call), &(spl_ce_RegexIterator->__callstatic), sizeof (spl_ce_RegexIterator->__callstatic), &(spl_ce_RegexIterator->__tostring), sizeof (spl_ce_RegexIterator->__tostring), &(spl_ce_RegexIterator->serialize_func), sizeof (spl_ce_RegexIterator->serialize_func), &(spl_ce_RegexIterator->unserialize_func), sizeof (spl_ce_RegexIterator->unserialize_func), &(spl_ce_RegexIterator->create_object), sizeof (spl_ce_RegexIterator->create_object), &(spl_ce_RegexIterator->get_iterator), sizeof (spl_ce_RegexIterator->get_iterator), &(spl_ce_RegexIterator->interface_gets_implemented), sizeof (spl_ce_RegexIterator->interface_gets_implemented), &(spl_ce_RegexIterator->get_static_method), sizeof (spl_ce_RegexIterator->get_static_method), &(spl_ce_RegexIterator->serialize), sizeof (spl_ce_RegexIterator->serialize), &(spl_ce_RegexIterator->unserialize), sizeof (spl_ce_RegexIterator->unserialize), &(spl_ce_RegexIterator->interfaces), sizeof (spl_ce_RegexIterator->interfaces), &(spl_ce_RegexIterator->num_interfaces), sizeof (spl_ce_RegexIterator->num_interfaces), &(spl_ce_RegexIterator->traits), sizeof (spl_ce_RegexIterator->traits), &(spl_ce_RegexIterator->num_traits), sizeof (spl_ce_RegexIterator->num_traits), &(spl_ce_RegexIterator->trait_aliases), sizeof (spl_ce_RegexIterator->trait_aliases), &(spl_ce_RegexIterator->trait_precedences), sizeof (spl_ce_RegexIterator->trait_precedences), &(zend_ce_iterator->type), sizeof (zend_ce_iterator->type), &(zend_ce_iterator->name), sizeof (zend_ce_iterator->name), &(zend_ce_iterator->name_length), sizeof (zend_ce_iterator->name_length), &(zend_ce_iterator->parent), sizeof (zend_ce_iterator->parent), &(zend_ce_iterator->refcount), sizeof (zend_ce_iterator->refcount), &(zend_ce_iterator->ce_flags), sizeof (zend_ce_iterator->ce_flags), &(zend_ce_iterator->default_properties_table), sizeof (zend_ce_iterator->default_properties_table), &(zend_ce_iterator->default_static_members_table), sizeof (zend_ce_iterator->default_static_members_table), &(zend_ce_iterator->static_members_table), sizeof (zend_ce_iterator->static_members_table), &(zend_ce_iterator->default_properties_count), sizeof (zend_ce_iterator->default_properties_count), &(zend_ce_iterator->default_static_members_count), sizeof (zend_ce_iterator->default_static_members_count), &(zend_ce_iterator->constructor), sizeof (zend_ce_iterator->constructor), &(zend_ce_iterator->destructor), sizeof (zend_ce_iterator->destructor), &(zend_ce_iterator->clone), sizeof (zend_ce_iterator->clone), &(zend_ce_iterator->__get), sizeof (zend_ce_iterator->__get), &(zend_ce_iterator->__set), sizeof (zend_ce_iterator->__set), &(zend_ce_iterator->__unset), sizeof (zend_ce_iterator->__unset), &(zend_ce_iterator->__isset), sizeof (zend_ce_iterator->__isset), &(zend_ce_iterator->__call), sizeof (zend_ce_iterator->__call), &(zend_ce_iterator->__callstatic), sizeof (zend_ce_iterator->__callstatic), &(zend_ce_iterator->__tostring), sizeof (zend_ce_iterator->__tostring), &(zend_ce_iterator->serialize_func), sizeof (zend_ce_iterator->serialize_func), &(zend_ce_iterator->unserialize_func), sizeof (zend_ce_iterator->unserialize_func), &(zend_ce_iterator->create_object), sizeof (zend_ce_iterator->create_object), &(zend_ce_iterator->get_iterator), sizeof (zend_ce_iterator->get_iterator), &(zend_ce_iterator->interface_gets_implemented), sizeof (zend_ce_iterator->interface_gets_implemented), &(zend_ce_iterator->get_static_method), sizeof (zend_ce_iterator->get_static_method), &(zend_ce_iterator->serialize), sizeof (zend_ce_iterator->serialize), &(zend_ce_iterator->unserialize), sizeof (zend_ce_iterator->unserialize), &(zend_ce_iterator->interfaces), sizeof (zend_ce_iterator->interfaces), &(zend_ce_iterator->num_interfaces), sizeof (zend_ce_iterator->num_interfaces), &(zend_ce_iterator->traits), sizeof (zend_ce_iterator->traits), &(zend_ce_iterator->num_traits), sizeof (zend_ce_iterator->num_traits), &(zend_ce_iterator->trait_aliases), sizeof (zend_ce_iterator->trait_aliases), &(zend_ce_iterator->trait_precedences), sizeof (zend_ce_iterator->trait_precedences), &(spl_ce_RegexIterator->type), sizeof (spl_ce_RegexIterator->type), &(spl_ce_RegexIterator->name), sizeof (spl_ce_RegexIterator->name), &(spl_ce_RegexIterator->name_length), sizeof (spl_ce_RegexIterator->name_length), &(spl_ce_RegexIterator->parent), sizeof (spl_ce_RegexIterator->parent), &(spl_ce_RegexIterator->refcount), sizeof (spl_ce_RegexIterator->refcount), &(spl_ce_RegexIterator->ce_flags), sizeof (spl_ce_RegexIterator->ce_flags), &(spl_ce_RegexIterator->default_properties_table), sizeof (spl_ce_RegexIterator->default_properties_table), &(spl_ce_RegexIterator->default_static_members_table), sizeof (spl_ce_RegexIterator->default_static_members_table), &(spl_ce_RegexIterator->static_members_table), sizeof (spl_ce_RegexIterator->static_members_table), &(spl_ce_RegexIterator->default_properties_count), sizeof (spl_ce_RegexIterator->default_properties_count), &(spl_ce_RegexIterator->default_static_members_count), sizeof (spl_ce_RegexIterator->default_static_members_count), &(spl_ce_RegexIterator->constructor), sizeof (spl_ce_RegexIterator->constructor), &(spl_ce_RegexIterator->destructor), sizeof (spl_ce_RegexIterator->destructor), &(spl_ce_RegexIterator->clone), sizeof (spl_ce_RegexIterator->clone), &(spl_ce_RegexIterator->__get), sizeof (spl_ce_RegexIterator->__get), &(spl_ce_RegexIterator->__set), sizeof (spl_ce_RegexIterator->__set), &(spl_ce_RegexIterator->__unset), sizeof (spl_ce_RegexIterator->__unset), &(spl_ce_RegexIterator->__isset), sizeof (spl_ce_RegexIterator->__isset), &(spl_ce_RegexIterator->__call), sizeof (spl_ce_RegexIterator->__call), &(spl_ce_RegexIterator->__callstatic), sizeof (spl_ce_RegexIterator->__callstatic), &(spl_ce_RegexIterator->__tostring), sizeof (spl_ce_RegexIterator->__tostring), &(spl_ce_RegexIterator->serialize_func), sizeof (spl_ce_RegexIterator->serialize_func), &(spl_ce_RegexIterator->unserialize_func), sizeof (spl_ce_RegexIterator->unserialize_func), &(spl_ce_RegexIterator->create_object), sizeof (spl_ce_RegexIterator->create_object), &(spl_ce_RegexIterator->get_iterator), sizeof (spl_ce_RegexIterator->get_iterator), &(spl_ce_RegexIterator->interface_gets_implemented), sizeof (spl_ce_RegexIterator->interface_gets_implemented), &(spl_ce_RegexIterator->get_static_method), sizeof (spl_ce_RegexIterator->get_static_method), &(spl_ce_RegexIterator->serialize), sizeof (spl_ce_RegexIterator->serialize), &(spl_ce_RegexIterator->unserialize), sizeof (spl_ce_RegexIterator->unserialize), &(spl_ce_RegexIterator->interfaces), sizeof (spl_ce_RegexIterator->interfaces), &(spl_ce_RegexIterator->num_interfaces), sizeof (spl_ce_RegexIterator->num_interfaces), &(spl_ce_RegexIterator->traits), sizeof (spl_ce_RegexIterator->traits), &(spl_ce_RegexIterator->num_traits), sizeof (spl_ce_RegexIterator->num_traits), &(spl_ce_RegexIterator->trait_aliases), sizeof (spl_ce_RegexIterator->trait_aliases), &(spl_ce_RegexIterator->trait_precedences), sizeof (spl_ce_RegexIterator->trait_precedences)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-5.7892125849267559, -6.0352514987267565, -6.0001017019267557, -6.0352514987267565, -5.7892125849267559, -5.9996381327267558, -5.9996381327267558, -5.9996381327267558, -7.1639811539267555, -7.3748702709267562, -6.6630461539267554, -7.410020067726756, -7.1639811539267555, -7.1639811539267555, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.1639811539267555, -7.1639811539267555, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.3748702709267562, -7.1639811539267555, -7.3748702709267562, -7.1639811539267555, -7.3748702709267562, -7.3748702709267562, -7.1639811539267555, -7.3748702709267562, -6.6630461539267554, -7.410020067726756, -7.1639811539267555, -7.1639811539267555, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.1639811539267555, -7.1639811539267555, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.3748702709267562, -7.1639811539267555, -7.3748702709267562, -7.1639811539267555, -7.3748702709267562, -7.3748702709267562, -7.1639811539267555, -7.3748702709267562, -6.6630461539267554, -7.410020067726756, -7.1639811539267555, -7.1639811539267555, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.1639811539267555, -7.1639811539267555, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.3748702709267562, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.1639811539267555, -7.3748702709267562, -7.1639811539267555, -7.3748702709267562, -7.1639811539267555, -7.3748702709267562, -7.3748702709267562]
								}]
						}, {
							"switch":	19,
							"types":	[[], [], [1], [], [], [], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [], [], [], [], [], [], [], [2]],
							"begin_line":	1842,
							"begin_column":	2,
							"end_line":	1842,
							"end_column":	115,
							"patch_codes":	["if (!__is_neg(\"\", \"L1842\", 113, &(ht), sizeof (ht), &(return_value), sizeof (return_value), &(return_value_ptr), sizeof (return_value_ptr), &(this_ptr), sizeof (this_ptr), &(return_value_used), sizeof (return_value_used), &(spl_ce_RegexIterator), sizeof (spl_ce_RegexIterator), &(zend_ce_iterator), sizeof (zend_ce_iterator), &(spl_ce_RegexIterator), sizeof (spl_ce_RegexIterator), &(zend_ce_iterator->type), sizeof (zend_ce_iterator->type), &(zend_ce_iterator->name), sizeof (zend_ce_iterator->name), &(zend_ce_iterator->name_length), sizeof (zend_ce_iterator->name_length), &(zend_ce_iterator->parent), sizeof (zend_ce_iterator->parent), &(zend_ce_iterator->refcount), sizeof (zend_ce_iterator->refcount), &(zend_ce_iterator->ce_flags), sizeof (zend_ce_iterator->ce_flags), &(zend_ce_iterator->default_properties_table), sizeof (zend_ce_iterator->default_properties_table), &(zend_ce_iterator->default_static_members_table), sizeof (zend_ce_iterator->default_static_members_table), &(zend_ce_iterator->static_members_table), sizeof (zend_ce_iterator->static_members_table), &(zend_ce_iterator->default_properties_count), sizeof (zend_ce_iterator->default_properties_count), &(zend_ce_iterator->default_static_members_count), sizeof (zend_ce_iterator->default_static_members_count), &(zend_ce_iterator->constructor), sizeof (zend_ce_iterator->constructor), &(zend_ce_iterator->destructor), sizeof (zend_ce_iterator->destructor), &(zend_ce_iterator->clone), sizeof (zend_ce_iterator->clone), &(zend_ce_iterator->__get), sizeof (zend_ce_iterator->__get), &(zend_ce_iterator->__set), sizeof (zend_ce_iterator->__set), &(zend_ce_iterator->__unset), sizeof (zend_ce_iterator->__unset), &(zend_ce_iterator->__isset), sizeof (zend_ce_iterator->__isset), &(zend_ce_iterator->__call), sizeof (zend_ce_iterator->__call), &(zend_ce_iterator->__callstatic), sizeof (zend_ce_iterator->__callstatic), &(zend_ce_iterator->__tostring), sizeof (zend_ce_iterator->__tostring), &(zend_ce_iterator->serialize_func), sizeof (zend_ce_iterator->serialize_func), &(zend_ce_iterator->unserialize_func), sizeof (zend_ce_iterator->unserialize_func), &(zend_ce_iterator->create_object), sizeof (zend_ce_iterator->create_object), &(zend_ce_iterator->get_iterator), sizeof (zend_ce_iterator->get_iterator), &(zend_ce_iterator->interface_gets_implemented), sizeof (zend_ce_iterator->interface_gets_implemented), &(zend_ce_iterator->get_static_method), sizeof (zend_ce_iterator->get_static_method), &(zend_ce_iterator->serialize), sizeof (zend_ce_iterator->serialize), &(zend_ce_iterator->unserialize), sizeof (zend_ce_iterator->unserialize), &(zend_ce_iterator->interfaces), sizeof (zend_ce_iterator->interfaces), &(zend_ce_iterator->num_interfaces), sizeof (zend_ce_iterator->num_interfaces), &(zend_ce_iterator->traits), sizeof (zend_ce_iterator->traits), &(zend_ce_iterator->num_traits), sizeof (zend_ce_iterator->num_traits), &(zend_ce_iterator->trait_aliases), sizeof (zend_ce_iterator->trait_aliases), &(zend_ce_iterator->trait_precedences), sizeof (zend_ce_iterator->trait_precedences), &(spl_ce_RegexIterator->type), sizeof (spl_ce_RegexIterator->type), &(spl_ce_RegexIterator->name), sizeof (spl_ce_RegexIterator->name), &(spl_ce_RegexIterator->name_length), sizeof (spl_ce_RegexIterator->name_length), &(spl_ce_RegexIterator->parent), sizeof (spl_ce_RegexIterator->parent), &(spl_ce_RegexIterator->refcount), sizeof (spl_ce_RegexIterator->refcount), &(spl_ce_RegexIterator->ce_flags), sizeof (spl_ce_RegexIterator->ce_flags), &(spl_ce_RegexIterator->default_properties_table), sizeof (spl_ce_RegexIterator->default_properties_table), &(spl_ce_RegexIterator->default_static_members_table), sizeof (spl_ce_RegexIterator->default_static_members_table), &(spl_ce_RegexIterator->static_members_table), sizeof (spl_ce_RegexIterator->static_members_table), &(spl_ce_RegexIterator->default_properties_count), sizeof (spl_ce_RegexIterator->default_properties_count), &(spl_ce_RegexIterator->default_static_members_count), sizeof (spl_ce_RegexIterator->default_static_members_count), &(spl_ce_RegexIterator->constructor), sizeof (spl_ce_RegexIterator->constructor), &(spl_ce_RegexIterator->destructor), sizeof (spl_ce_RegexIterator->destructor), &(spl_ce_RegexIterator->clone), sizeof (spl_ce_RegexIterator->clone), &(spl_ce_RegexIterator->__get), sizeof (spl_ce_RegexIterator->__get), &(spl_ce_RegexIterator->__set), sizeof (spl_ce_RegexIterator->__set), &(spl_ce_RegexIterator->__unset), sizeof (spl_ce_RegexIterator->__unset), &(spl_ce_RegexIterator->__isset), sizeof (spl_ce_RegexIterator->__isset), &(spl_ce_RegexIterator->__call), sizeof (spl_ce_RegexIterator->__call), &(spl_ce_RegexIterator->__callstatic), sizeof (spl_ce_RegexIterator->__callstatic), &(spl_ce_RegexIterator->__tostring), sizeof (spl_ce_RegexIterator->__tostring), &(spl_ce_RegexIterator->serialize_func), sizeof (spl_ce_RegexIterator->serialize_func), &(spl_ce_RegexIterator->unserialize_func), sizeof (spl_ce_RegexIterator->unserialize_func), &(spl_ce_RegexIterator->create_object), sizeof (spl_ce_RegexIterator->create_object), &(spl_ce_RegexIterator->get_iterator), sizeof (spl_ce_RegexIterator->get_iterator), &(spl_ce_RegexIterator->interface_gets_implemented), sizeof (spl_ce_RegexIterator->interface_gets_implemented), &(spl_ce_RegexIterator->get_static_method), sizeof (spl_ce_RegexIterator->get_static_method), &(spl_ce_RegexIterator->serialize), sizeof (spl_ce_RegexIterator->serialize), &(spl_ce_RegexIterator->unserialize), sizeof (spl_ce_RegexIterator->unserialize), &(spl_ce_RegexIterator->interfaces), sizeof (spl_ce_RegexIterator->interfaces), &(spl_ce_RegexIterator->num_interfaces), sizeof (spl_ce_RegexIterator->num_interfaces), &(spl_ce_RegexIterator->traits), sizeof (spl_ce_RegexIterator->traits), &(spl_ce_RegexIterator->num_traits), sizeof (spl_ce_RegexIterator->num_traits), &(spl_ce_RegexIterator->trait_aliases), sizeof (spl_ce_RegexIterator->trait_aliases), &(spl_ce_RegexIterator->trait_precedences), sizeof (spl_ce_RegexIterator->trait_precedences), &(spl_ce_RegexIterator->type), sizeof (spl_ce_RegexIterator->type), &(spl_ce_RegexIterator->name), sizeof (spl_ce_RegexIterator->name), &(spl_ce_RegexIterator->name_length), sizeof (spl_ce_RegexIterator->name_length), &(spl_ce_RegexIterator->parent), sizeof (spl_ce_RegexIterator->parent), &(spl_ce_RegexIterator->refcount), sizeof (spl_ce_RegexIterator->refcount), &(spl_ce_RegexIterator->ce_flags), sizeof (spl_ce_RegexIterator->ce_flags), &(spl_ce_RegexIterator->default_properties_table), sizeof (spl_ce_RegexIterator->default_properties_table), &(spl_ce_RegexIterator->default_static_members_table), sizeof (spl_ce_RegexIterator->default_static_members_table), &(spl_ce_RegexIterator->static_members_table), sizeof (spl_ce_RegexIterator->static_members_table), &(spl_ce_RegexIterator->default_properties_count), sizeof (spl_ce_RegexIterator->default_properties_count), &(spl_ce_RegexIterator->default_static_members_count), sizeof (spl_ce_RegexIterator->default_static_members_count), &(spl_ce_RegexIterator->constructor), sizeof (spl_ce_RegexIterator->constructor), &(spl_ce_RegexIterator->destructor), sizeof (spl_ce_RegexIterator->destructor), &(spl_ce_RegexIterator->clone), sizeof (spl_ce_RegexIterator->clone), &(spl_ce_RegexIterator->__get), sizeof (spl_ce_RegexIterator->__get), &(spl_ce_RegexIterator->__set), sizeof (spl_ce_RegexIterator->__set), &(spl_ce_RegexIterator->__unset), sizeof (spl_ce_RegexIterator->__unset), &(spl_ce_RegexIterator->__isset), sizeof (spl_ce_RegexIterator->__isset), &(spl_ce_RegexIterator->__call), sizeof (spl_ce_RegexIterator->__call), &(spl_ce_RegexIterator->__callstatic), sizeof (spl_ce_RegexIterator->__callstatic), &(spl_ce_RegexIterator->__tostring), sizeof (spl_ce_RegexIterator->__tostring), &(spl_ce_RegexIterator->serialize_func), sizeof (spl_ce_RegexIterator->serialize_func), &(spl_ce_RegexIterator->unserialize_func), sizeof (spl_ce_RegexIterator->unserialize_func), &(spl_ce_RegexIterator->create_object), sizeof (spl_ce_RegexIterator->create_object), &(spl_ce_RegexIterator->get_iterator), sizeof (spl_ce_RegexIterator->get_iterator), &(spl_ce_RegexIterator->interface_gets_implemented), sizeof (spl_ce_RegexIterator->interface_gets_implemented), &(spl_ce_RegexIterator->get_static_method), sizeof (spl_ce_RegexIterator->get_static_method), &(spl_ce_RegexIterator->serialize), sizeof (spl_ce_RegexIterator->serialize), &(spl_ce_RegexIterator->unserialize), sizeof (spl_ce_RegexIterator->unserialize), &(spl_ce_RegexIterator->interfaces), sizeof (spl_ce_RegexIterator->interfaces), &(spl_ce_RegexIterator->num_interfaces), sizeof (spl_ce_RegexIterator->num_interfaces), &(spl_ce_RegexIterator->traits), sizeof (spl_ce_RegexIterator->traits), &(spl_ce_RegexIterator->num_traits), sizeof (spl_ce_RegexIterator->num_traits), &(spl_ce_RegexIterator->trait_aliases), sizeof (spl_ce_RegexIterator->trait_aliases), &(spl_ce_RegexIterator->trait_precedences), sizeof (spl_ce_RegexIterator->trait_precedences)))\n    spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator);\n", "{\n}\n", "dprintf(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "multi_convert_to_double_ex(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "multi_convert_to_long_ex(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "multi_convert_to_string_ex(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "php_info_print_table_header(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "php_info_print_table_row(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "php_info_print_table_row_ex(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "zend_error(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "zend_error_noreturn(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "zend_get_parameters_ex(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "zend_parse_method_parameters(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "zend_parse_parameters(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((0 * ht), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((0 * return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((ht != 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((ht != return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((ht * return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((ht + 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((ht + return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((ht - 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((ht - return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((ht == 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((ht == return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((ht), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value != 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value != this_ptr), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value == 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value == this_ptr), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value_ptr != 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value_ptr == 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value_used != 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value_used * ht), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value_used + 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value_used - 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value_used == 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((this_ptr != 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct((this_ptr == 0), return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, (&ht), return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, (&return_value), return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, (&return_value_ptr), return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, (&return_value_used), return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, (&this_ptr), return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, (return_value), return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, (this_ptr), return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, (&ht), this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, (&return_value), this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, (&return_value_ptr), this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, (&return_value_used), this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, (&this_ptr), this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, (return_value_ptr), this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, (&ht), return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, (&return_value), return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, (&return_value_ptr), return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, (&return_value_used), return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, (&this_ptr), return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, (return_value), return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, (this_ptr), return_value_used, spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (0 * ht), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (0 * return_value_used), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (ht != 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (ht != return_value_used), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (ht * return_value_used), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (ht + 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (ht + return_value_used), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (ht - 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (ht - return_value_used), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (ht == 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (ht == return_value_used), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (ht), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value != 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value != this_ptr), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value == 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value == this_ptr), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_ptr != 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_ptr == 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used != 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used * ht), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used + 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used - 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used == 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (this_ptr != 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, (this_ptr == 0), spl_ce_RegexIterator, zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (&ht), zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (&return_value), zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (&return_value_ptr), zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (&return_value_used), zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (&this_ptr), zend_ce_iterator, DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, (&ht), DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, (&return_value), DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, (&return_value_ptr), DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, (&return_value_used), DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, (&this_ptr), DIT_RegexIterator)", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (0 * ht))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (0 * return_value_used))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_AppendIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_CachingIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_Default))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_FilterIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_InfiniteIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_IteratorIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_LimitIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_NoRewindIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_ParentIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_RecursiveCachingIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_RecursiveFilterIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_RecursiveRegexIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_RegexIterator))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (DIT_Unknown))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (ht != 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (ht != return_value_used))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (ht * return_value_used))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (ht + 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (ht + return_value_used))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (ht - 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (ht - return_value_used))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (ht == 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (ht == return_value_used))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (return_value != 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (return_value != this_ptr))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (return_value == 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (return_value == this_ptr))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (return_value_ptr != 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (return_value_ptr == 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (return_value_used != 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (return_value_used * ht))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (return_value_used + 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (return_value_used - 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (return_value_used == 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (this_ptr != 0))", "spl_dual_it_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, spl_ce_RegexIterator, zend_ce_iterator, (this_ptr == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.470591792526756, -6.2284798925267566, -5.9398517925267562, -6.2284798925267566, -5.470591792526756, -5.9373865325267561, -5.9373865325267561, -5.9373865325267561, -6.1007234025267563, -6.5699834025267556, -5.7787123725267557, -6.858611502526756, -6.1007234025267563, -6.1007234025267563, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.1007234025267563, -6.1007234025267563, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.5699834025267556, -6.1007234025267563, -6.5699834025267556, -6.1007234025267563, -6.5699834025267556, -6.5699834025267556, -6.1007234025267563, -6.5699834025267556, -5.7787123725267557, -6.858611502526756, -6.1007234025267563, -6.1007234025267563, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.1007234025267563, -6.1007234025267563, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.5699834025267556, -6.1007234025267563, -6.5699834025267556, -6.1007234025267563, -6.5699834025267556, -6.5699834025267556, -6.1007234025267563, -6.5699834025267556, -5.7787123725267557, -6.858611502526756, -6.1007234025267563, -6.1007234025267563, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.1007234025267563, -6.1007234025267563, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.5699834025267556, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.1007234025267563, -6.5699834025267556, -6.1007234025267563, -6.5699834025267556, -6.1007234025267563, -6.5699834025267556, -6.5699834025267556]
								}, {
									"case":	2,
									"scores":	[-5.063577322526756]
								}, {
									"case":	3,
									"scores":	[-5.063577322526756]
								}, {
									"case":	4,
									"scores":	[-5.063577322526756]
								}, {
									"case":	5,
									"scores":	[-5.063577322526756]
								}, {
									"case":	6,
									"scores":	[-5.063577322526756]
								}, {
									"case":	7,
									"scores":	[-5.063577322526756]
								}, {
									"case":	8,
									"scores":	[-5.063577322526756]
								}, {
									"case":	9,
									"scores":	[-5.063577322526756]
								}, {
									"case":	10,
									"scores":	[-5.063577322526756]
								}, {
									"case":	11,
									"scores":	[-5.063577322526756]
								}, {
									"case":	12,
									"scores":	[-5.063577322526756]
								}, {
									"case":	13,
									"scores":	[-5.063577322526756]
								}, {
									"case":	14,
									"scores":	[-5.063577322526756]
								}, {
									"case":	15,
									"scores":	[-5.063577322526756]
								}, {
									"case":	16,
									"scores":	[-5.063577322526756]
								}, {
									"case":	17,
									"scores":	[-5.063577322526756]
								}, {
									"case":	18,
									"scores":	[-5.063577322526756]
								}, {
									"case":	19,
									"scores":	[-5.063577322526756]
								}, {
									"case":	20,
									"scores":	[-5.063577322526756]
								}, {
									"case":	21,
									"scores":	[-5.063577322526756]
								}, {
									"case":	22,
									"scores":	[-5.063577322526756]
								}, {
									"case":	23,
									"scores":	[-5.063577322526756]
								}, {
									"case":	24,
									"scores":	[-5.063577322526756]
								}, {
									"case":	25,
									"scores":	[-5.063577322526756]
								}, {
									"case":	26,
									"scores":	[-5.063577322526756]
								}, {
									"case":	27,
									"scores":	[-5.063577322526756]
								}, {
									"case":	28,
									"scores":	[-5.063577322526756]
								}, {
									"case":	29,
									"scores":	[-5.063577322526756]
								}, {
									"case":	30,
									"scores":	[-5.063577322526756]
								}, {
									"case":	31,
									"scores":	[-5.063577322526756]
								}, {
									"case":	32,
									"scores":	[-5.063577322526756]
								}, {
									"case":	33,
									"scores":	[-5.063577322526756]
								}, {
									"case":	34,
									"scores":	[-5.063577322526756]
								}, {
									"case":	35,
									"scores":	[-5.063577322526756]
								}, {
									"case":	36,
									"scores":	[-5.063577322526756]
								}, {
									"case":	37,
									"scores":	[-5.063577322526756]
								}, {
									"case":	38,
									"scores":	[-5.063577322526756]
								}, {
									"case":	39,
									"scores":	[-5.063577322526756]
								}, {
									"case":	40,
									"scores":	[-5.063577322526756]
								}, {
									"case":	41,
									"scores":	[-5.063577322526756]
								}, {
									"case":	42,
									"scores":	[-5.063577322526756]
								}, {
									"case":	43,
									"scores":	[-5.063577322526756]
								}, {
									"case":	44,
									"scores":	[-5.063577322526756]
								}, {
									"case":	45,
									"scores":	[-5.063577322526756]
								}, {
									"case":	46,
									"scores":	[-5.063577322526756]
								}, {
									"case":	47,
									"scores":	[-5.063577322526756]
								}, {
									"case":	48,
									"scores":	[-5.063577322526756]
								}, {
									"case":	49,
									"scores":	[-5.063577322526756]
								}, {
									"case":	50,
									"scores":	[-5.063577322526756]
								}, {
									"case":	51,
									"scores":	[-5.063577322526756]
								}, {
									"case":	52,
									"scores":	[-5.063577322526756]
								}, {
									"case":	53,
									"scores":	[-5.063577322526756]
								}, {
									"case":	54,
									"scores":	[-5.063577322526756]
								}, {
									"case":	55,
									"scores":	[-5.063577322526756]
								}, {
									"case":	56,
									"scores":	[-5.063577322526756]
								}, {
									"case":	57,
									"scores":	[-5.063577322526756]
								}, {
									"case":	58,
									"scores":	[-5.063577322526756]
								}, {
									"case":	59,
									"scores":	[-5.063577322526756]
								}, {
									"case":	60,
									"scores":	[-5.063577322526756]
								}, {
									"case":	61,
									"scores":	[-5.063577322526756]
								}, {
									"case":	62,
									"scores":	[-5.063577322526756]
								}, {
									"case":	63,
									"scores":	[-5.063577322526756]
								}, {
									"case":	64,
									"scores":	[-5.063577322526756]
								}, {
									"case":	65,
									"scores":	[-5.063577322526756]
								}, {
									"case":	66,
									"scores":	[-5.063577322526756]
								}, {
									"case":	67,
									"scores":	[-5.063577322526756]
								}, {
									"case":	68,
									"scores":	[-5.063577322526756]
								}, {
									"case":	69,
									"scores":	[-5.063577322526756]
								}, {
									"case":	70,
									"scores":	[-5.063577322526756]
								}, {
									"case":	71,
									"scores":	[-5.063577322526756]
								}, {
									"case":	72,
									"scores":	[-5.063577322526756]
								}, {
									"case":	73,
									"scores":	[-5.063577322526756]
								}, {
									"case":	74,
									"scores":	[-5.063577322526756]
								}, {
									"case":	75,
									"scores":	[-5.063577322526756]
								}, {
									"case":	76,
									"scores":	[-5.063577322526756]
								}, {
									"case":	77,
									"scores":	[-5.063577322526756]
								}, {
									"case":	78,
									"scores":	[-5.063577322526756]
								}, {
									"case":	79,
									"scores":	[-5.063577322526756]
								}, {
									"case":	80,
									"scores":	[-5.063577322526756]
								}, {
									"case":	81,
									"scores":	[-5.063577322526756]
								}, {
									"case":	82,
									"scores":	[-5.063577322526756]
								}, {
									"case":	83,
									"scores":	[-5.063577322526756]
								}, {
									"case":	84,
									"scores":	[-5.063577322526756]
								}, {
									"case":	85,
									"scores":	[-5.063577322526756]
								}, {
									"case":	86,
									"scores":	[-5.063577322526756]
								}, {
									"case":	87,
									"scores":	[-5.063577322526756]
								}, {
									"case":	88,
									"scores":	[-5.063577322526756]
								}, {
									"case":	89,
									"scores":	[-5.063577322526756]
								}, {
									"case":	90,
									"scores":	[-5.063577322526756]
								}, {
									"case":	91,
									"scores":	[-5.063577322526756]
								}, {
									"case":	92,
									"scores":	[-5.063577322526756]
								}, {
									"case":	93,
									"scores":	[-5.063577322526756]
								}, {
									"case":	94,
									"scores":	[-5.063577322526756]
								}, {
									"case":	95,
									"scores":	[-5.063577322526756]
								}, {
									"case":	96,
									"scores":	[-5.063577322526756]
								}, {
									"case":	97,
									"scores":	[-5.063577322526756]
								}, {
									"case":	98,
									"scores":	[-5.063577322526756]
								}, {
									"case":	99,
									"scores":	[-5.063577322526756]
								}, {
									"case":	100,
									"scores":	[-5.063577322526756]
								}, {
									"case":	101,
									"scores":	[-5.063577322526756]
								}, {
									"case":	102,
									"scores":	[-5.063577322526756]
								}, {
									"case":	103,
									"scores":	[-5.063577322526756]
								}, {
									"case":	104,
									"scores":	[-5.063577322526756]
								}, {
									"case":	105,
									"scores":	[-5.063577322526756]
								}, {
									"case":	106,
									"scores":	[-5.063577322526756]
								}, {
									"case":	107,
									"scores":	[-5.063577322526756]
								}, {
									"case":	108,
									"scores":	[-5.063577322526756]
								}, {
									"case":	109,
									"scores":	[-5.063577322526756]
								}, {
									"case":	110,
									"scores":	[-5.063577322526756]
								}, {
									"case":	111,
									"scores":	[-5.063577322526756]
								}, {
									"case":	112,
									"scores":	[-5.063577322526756]
								}, {
									"case":	113,
									"scores":	[-5.063577322526756]
								}, {
									"case":	114,
									"scores":	[-5.063577322526756]
								}, {
									"case":	115,
									"scores":	[-5.063577322526756]
								}, {
									"case":	116,
									"scores":	[-5.063577322526756]
								}, {
									"case":	117,
									"scores":	[-5.063577322526756]
								}, {
									"case":	118,
									"scores":	[-5.063577322526756]
								}, {
									"case":	119,
									"scores":	[-5.063577322526756]
								}, {
									"case":	120,
									"scores":	[-5.063577322526756]
								}, {
									"case":	121,
									"scores":	[-5.063577322526756]
								}, {
									"case":	122,
									"scores":	[-5.063577322526756]
								}, {
									"case":	123,
									"scores":	[-5.063577322526756]
								}, {
									"case":	124,
									"scores":	[-5.063577322526756]
								}, {
									"case":	125,
									"scores":	[-5.063577322526756]
								}, {
									"case":	126,
									"scores":	[-5.063577322526756]
								}, {
									"case":	127,
									"scores":	[-5.063577322526756]
								}, {
									"case":	128,
									"scores":	[-5.063577322526756]
								}, {
									"case":	129,
									"scores":	[-5.063577322526756]
								}, {
									"case":	130,
									"scores":	[-5.063577322526756]
								}, {
									"case":	131,
									"scores":	[-5.063577322526756]
								}, {
									"case":	132,
									"scores":	[-5.063577322526756]
								}, {
									"case":	133,
									"scores":	[-5.063577322526756]
								}, {
									"case":	134,
									"scores":	[-5.063577322526756]
								}]
						}]
				}, {
					"line":	2112,
					"switches":	[{
							"switch":	24,
							"types":	[[], [], [], [], [164], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [], [], [], [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [], [], [], [], [], []],
							"begin_line":	2113,
							"begin_column":	2,
							"end_line":	2113,
							"end_column":	2,
							"patch_codes":	["memset(&object->current, 0, sizeof (*(&object->current)))", "memset(&object->dit_type, 0, sizeof (*(&object->dit_type)))", "memset(&object->inner, 0, sizeof (*(&object->inner)))", "memset(&object->inner.ce, 0, sizeof (*(&object->inner.ce)))", "memset(&object->inner.iterator, 0, sizeof (*(&object->inner.iterator)))", "memset(&object->inner.object, 0, sizeof (*(&object->inner.object)))", "memset(&object->inner.zobject, 0, sizeof (*(&object->inner.zobject)))", "memset(&object->std, 0, sizeof (*(&object->std)))", "memset(&object->u, 0, sizeof (*(&object->u)))", "memset(&object->u.append, 0, sizeof (*(&object->u.append)))", "memset(&object->u.caching, 0, sizeof (*(&object->u.caching)))", "memset(&object->u.limit, 0, sizeof (*(&object->u.limit)))", "memset(&object->u.regex, 0, sizeof (*(&object->u.regex)))", "memset(&object->u.regex.flags, 0, sizeof (*(&object->u.regex.flags)))", "memset(&object->u.regex.mode, 0, sizeof (*(&object->u.regex.mode)))", "memset(&object->u.regex.pce, 0, sizeof (*(&object->u.regex.pce)))", "memset(&object->u.regex.pce->compile_options, 0, sizeof (*(&object->u.regex.pce->compile_options)))", "memset(&object->u.regex.pce->extra, 0, sizeof (*(&object->u.regex.pce->extra)))", "memset(&object->u.regex.pce->locale, 0, sizeof (*(&object->u.regex.pce->locale)))", "memset(&object->u.regex.pce->preg_options, 0, sizeof (*(&object->u.regex.pce->preg_options)))", "memset(&object->u.regex.pce->re, 0, sizeof (*(&object->u.regex.pce->re)))", "memset(&object->u.regex.pce->refcount, 0, sizeof (*(&object->u.regex.pce->refcount)))", "memset(&object->u.regex.pce->tables, 0, sizeof (*(&object->u.regex.pce->tables)))", "memset(&object->u.regex.preg_flags, 0, sizeof (*(&object->u.regex.preg_flags)))", "memset(&object->u.regex.regex, 0, sizeof (*(&object->u.regex.regex)))", "memset(&object->u.regex.use_flags, 0, sizeof (*(&object->u.regex.use_flags)))", "memset(object, 0, sizeof (*(object)))", "memset(object->inner.ce, 0, sizeof (*(object->inner.ce)))", "memset(object->inner.iterator, 0, sizeof (*(object->inner.iterator)))", "memset(object->inner.object, 0, sizeof (*(object->inner.object)))", "memset(object->inner.zobject, 0, sizeof (*(object->inner.zobject)))", "memset(object->u.regex.pce, 0, sizeof (*(object->u.regex.pce)))", "memset(object->u.regex.pce->extra, 0, sizeof (*(object->u.regex.pce->extra)))", "memset(object->u.regex.pce->locale, 0, sizeof (*(object->u.regex.pce->locale)))", "memset(object->u.regex.pce->re, 0, sizeof (*(object->u.regex.pce->re)))", "memset(object->u.regex.pce->tables, 0, sizeof (*(object->u.regex.pce->tables)))", "memset(object->u.regex.regex, 0, sizeof (*(object->u.regex.regex)))", "(object)->current.pos++", "(object)->u.append.iterator->funcs->dtor(object->u.append.iterator)", "(object)->u.regex.pce->refcount++", "(object)->u.regex.pce->refcount--", "_array_init(((object)->u.caching.zcache), 0)", "_efree(((object)))", "_efree(((object)->current.str_key))", "_efree(((object)->u.regex.regex))", "_zval_copy_ctor(((object)->u.caching.zstr))", "_zval_ptr_dtor((&(object)->current.data))", "_zval_ptr_dtor((&(object)->inner.zobject))", "_zval_ptr_dtor((&(object)->u.append.zarrayit))", "_zval_ptr_dtor((&(object)->u.caching.zcache))", "_zval_ptr_dtor((&(object)->u.caching.zchildren))", "_zval_ptr_dtor((&(object)->u.caching.zstr))", "memset((object), 0, sizeof(spl_dual_it_object))", "object->u.append.iterator->funcs->dtor((object)->u.append.iterator)", "spl_append_it_fetch((object))", "spl_append_it_next((object))", "spl_append_it_next_iterator((object))", "spl_caching_it_next((object))", "spl_caching_it_rewind((object))", "spl_dual_it_fetch((object), 0)", "spl_dual_it_fetch((object), 1)", "spl_dual_it_free((object))", "spl_dual_it_next((object), 0)", "spl_dual_it_next((object), 1)", "spl_dual_it_require((object))", "spl_dual_it_rewind((object))", "zend_call_method(&(object)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_object_std_dtor(&(object)->std)", "zval_addref_p((object)->current.data)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((object))", "_efree((object->u.regex.regex))", "_zval_ptr_dtor((&object->inner.zobject))", "_zval_ptr_dtor((&object->u.append.zarrayit))", "_zval_ptr_dtor((&object->u.caching.zcache))", "exit(1)", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "object->u.append.iterator->funcs->dtor(object->u.append.iterator)", "object->u.caching.zcache = ((void *)0)", "object->u.regex.pce->refcount--", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_dtor(&object->std)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "if (__is_neg(\"\", \"L2113\", 16, &(object), sizeof (object), &(object->u.regex.pce->refcount), sizeof (object->u.regex.pce->refcount), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object), &(object->u.regex.pce->re), sizeof (object->u.regex.pce->re), &(object->u.regex.pce->extra), sizeof (object->u.regex.pce->extra), &(object->u.regex.pce->preg_options), sizeof (object->u.regex.pce->preg_options), &(object->u.regex.pce->locale), sizeof (object->u.regex.pce->locale), &(object->u.regex.pce->tables), sizeof (object->u.regex.pce->tables), &(object->u.regex.pce->compile_options), sizeof (object->u.regex.pce->compile_options), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	2,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	3,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	4,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	5,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	6,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	7,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	8,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	9,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	10,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	11,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	12,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	13,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	14,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	15,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	16,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	17,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	18,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	19,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	20,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	21,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	22,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	23,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	24,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	25,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	26,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	27,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	28,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	29,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	30,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	31,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	32,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	33,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	34,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	35,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	36,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	37,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	38,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	39,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	40,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	41,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	42,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	43,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	44,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	45,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	46,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	47,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	48,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	49,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	50,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	51,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	52,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	53,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	54,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	55,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	56,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	57,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	58,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	59,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	60,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	61,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	62,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	63,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	64,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	65,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	66,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	67,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	68,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	69,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	70,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	71,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	72,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	73,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	74,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	75,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	76,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	77,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	78,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	79,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	80,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	81,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	82,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	83,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	84,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	85,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	86,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	87,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	88,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	89,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	90,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	91,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	92,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	93,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	94,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	95,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	96,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	97,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	98,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	99,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	100,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	101,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	102,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	103,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	104,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	105,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	106,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	107,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	108,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	109,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	110,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	111,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	112,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	113,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	114,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	115,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	116,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	117,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	118,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	119,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	120,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	121,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	122,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	123,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	124,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	125,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	126,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	127,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	128,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	129,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	130,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	131,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	132,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	133,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	134,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	135,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	136,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	137,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	138,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	139,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	140,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	141,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	142,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	143,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	144,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	145,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	146,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	147,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	148,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	149,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	150,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	151,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	152,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	153,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	154,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	155,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	156,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	157,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	158,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	159,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	160,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	161,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	162,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	163,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	164,
									"scores":	[-8.11995541835451, -7.7022003936545085, -8.93410159235451, -7.6277870046545084, -7.4168978876545086, -6.8507412306545081, -7.6629368014545083, -7.6629368014545083, -7.4168978876545086, -7.6277870046545084, -7.6277870046545084, -7.4168978876545086, -7.4168978876545086, -7.4168978876545086, -7.4168978876545086, -7.4168978876545086]
								}]
						}, {
							"switch":	25,
							"types":	[[], [], [1], [], [], [], [3, 4, 5], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	2113,
							"begin_column":	4,
							"end_line":	2113,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L2113\", 16, &(object), sizeof (object), &(object->u.regex.pce->refcount), sizeof (object->u.regex.pce->refcount), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object), &(object->u.regex.pce->re), sizeof (object->u.regex.pce->re), &(object->u.regex.pce->extra), sizeof (object->u.regex.pce->extra), &(object->u.regex.pce->preg_options), sizeof (object->u.regex.pce->preg_options), &(object->u.regex.pce->locale), sizeof (object->u.regex.pce->locale), &(object->u.regex.pce->tables), sizeof (object->u.regex.pce->tables), &(object->u.regex.pce->compile_options), sizeof (object->u.regex.pce->compile_options), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags)))\n    object->u.regex.pce->refcount--;\n", "{\n}\n", "(&_object)->u.regex.pce->refcount--", "(&object)->u.regex.pce->refcount--", "(object)->u.regex.pce->refcount--"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.7345612876545085, -6.2205014146545086, -7.25940609765451, -6.8634119976545085, -6.3941519976545083, -6.6329179876545084, -7.15204009765451, -7.15204009765451, -6.3941519976545083, -6.8634119976545085, -6.8634119976545085, -6.3941519976545083, -6.3941519976545083, -6.3941519976545083, -6.3941519976545083, -6.3941519976545083]
								}, {
									"case":	2,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	3,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	4,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	5,
									"scores":	[-5.3262125176545085]
								}]
						}]
				}, {
					"line":	2111,
					"switches":	[{
							"switch":	22,
							"types":	[[], [], [], [], [153], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], [], [], [], [], [], []],
							"begin_line":	2112,
							"begin_column":	1,
							"end_line":	2112,
							"end_column":	1,
							"patch_codes":	["memset(&object->current, 0, sizeof (*(&object->current)))", "memset(&object->dit_type, 0, sizeof (*(&object->dit_type)))", "memset(&object->inner, 0, sizeof (*(&object->inner)))", "memset(&object->inner.ce, 0, sizeof (*(&object->inner.ce)))", "memset(&object->inner.iterator, 0, sizeof (*(&object->inner.iterator)))", "memset(&object->inner.object, 0, sizeof (*(&object->inner.object)))", "memset(&object->inner.zobject, 0, sizeof (*(&object->inner.zobject)))", "memset(&object->std, 0, sizeof (*(&object->std)))", "memset(&object->u, 0, sizeof (*(&object->u)))", "memset(&object->u.append, 0, sizeof (*(&object->u.append)))", "memset(&object->u.caching, 0, sizeof (*(&object->u.caching)))", "memset(&object->u.limit, 0, sizeof (*(&object->u.limit)))", "memset(&object->u.regex, 0, sizeof (*(&object->u.regex)))", "memset(&object->u.regex.flags, 0, sizeof (*(&object->u.regex.flags)))", "memset(&object->u.regex.mode, 0, sizeof (*(&object->u.regex.mode)))", "memset(&object->u.regex.pce, 0, sizeof (*(&object->u.regex.pce)))", "memset(&object->u.regex.preg_flags, 0, sizeof (*(&object->u.regex.preg_flags)))", "memset(&object->u.regex.regex, 0, sizeof (*(&object->u.regex.regex)))", "memset(&object->u.regex.use_flags, 0, sizeof (*(&object->u.regex.use_flags)))", "memset(object, 0, sizeof (*(object)))", "memset(object->inner.ce, 0, sizeof (*(object->inner.ce)))", "memset(object->inner.iterator, 0, sizeof (*(object->inner.iterator)))", "memset(object->inner.object, 0, sizeof (*(object->inner.object)))", "memset(object->inner.zobject, 0, sizeof (*(object->inner.zobject)))", "memset(object->u.regex.pce, 0, sizeof (*(object->u.regex.pce)))", "memset(object->u.regex.regex, 0, sizeof (*(object->u.regex.regex)))", "(object)->current.pos++", "(object)->u.append.iterator->funcs->dtor(object->u.append.iterator)", "(object)->u.regex.pce->refcount++", "(object)->u.regex.pce->refcount--", "_array_init(((object)->u.caching.zcache), 0)", "_efree(((object)))", "_efree(((object)->current.str_key))", "_efree(((object)->u.regex.regex))", "_zval_copy_ctor(((object)->u.caching.zstr))", "_zval_ptr_dtor((&(object)->current.data))", "_zval_ptr_dtor((&(object)->inner.zobject))", "_zval_ptr_dtor((&(object)->u.append.zarrayit))", "_zval_ptr_dtor((&(object)->u.caching.zcache))", "_zval_ptr_dtor((&(object)->u.caching.zchildren))", "_zval_ptr_dtor((&(object)->u.caching.zstr))", "memset((object), 0, sizeof(spl_dual_it_object))", "object->u.append.iterator->funcs->dtor((object)->u.append.iterator)", "spl_append_it_fetch((object))", "spl_append_it_next((object))", "spl_append_it_next_iterator((object))", "spl_caching_it_next((object))", "spl_caching_it_rewind((object))", "spl_dual_it_fetch((object), 0)", "spl_dual_it_fetch((object), 1)", "spl_dual_it_free((object))", "spl_dual_it_next((object), 0)", "spl_dual_it_next((object), 1)", "spl_dual_it_require((object))", "spl_dual_it_rewind((object))", "zend_call_method(&(object)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_object_std_dtor(&(object)->std)", "zval_addref_p((object)->current.data)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((object))", "_efree((object->u.regex.regex))", "_zval_ptr_dtor((&object->inner.zobject))", "_zval_ptr_dtor((&object->u.append.zarrayit))", "_zval_ptr_dtor((&object->u.caching.zcache))", "exit(1)", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "object->u.append.iterator->funcs->dtor(object->u.append.iterator)", "object->u.caching.zcache = ((void *)0)", "object->u.regex.pce->refcount--", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_dtor(&object->std)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "if (__is_neg(\"\", \"L2112\", 9, &(object), sizeof (object), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.346415224972028]
								}, {
									"case":	2,
									"scores":	[-5.346415224972028]
								}, {
									"case":	3,
									"scores":	[-5.346415224972028]
								}, {
									"case":	4,
									"scores":	[-5.346415224972028]
								}, {
									"case":	5,
									"scores":	[-5.346415224972028]
								}, {
									"case":	6,
									"scores":	[-5.346415224972028]
								}, {
									"case":	7,
									"scores":	[-5.346415224972028]
								}, {
									"case":	8,
									"scores":	[-5.346415224972028]
								}, {
									"case":	9,
									"scores":	[-5.346415224972028]
								}, {
									"case":	10,
									"scores":	[-5.346415224972028]
								}, {
									"case":	11,
									"scores":	[-5.346415224972028]
								}, {
									"case":	12,
									"scores":	[-5.346415224972028]
								}, {
									"case":	13,
									"scores":	[-5.346415224972028]
								}, {
									"case":	14,
									"scores":	[-5.346415224972028]
								}, {
									"case":	15,
									"scores":	[-5.346415224972028]
								}, {
									"case":	16,
									"scores":	[-5.346415224972028]
								}, {
									"case":	17,
									"scores":	[-5.346415224972028]
								}, {
									"case":	18,
									"scores":	[-5.346415224972028]
								}, {
									"case":	19,
									"scores":	[-5.346415224972028]
								}, {
									"case":	20,
									"scores":	[-5.346415224972028]
								}, {
									"case":	21,
									"scores":	[-5.346415224972028]
								}, {
									"case":	22,
									"scores":	[-5.346415224972028]
								}, {
									"case":	23,
									"scores":	[-5.346415224972028]
								}, {
									"case":	24,
									"scores":	[-5.346415224972028]
								}, {
									"case":	25,
									"scores":	[-5.346415224972028]
								}, {
									"case":	26,
									"scores":	[-5.346415224972028]
								}, {
									"case":	27,
									"scores":	[-5.346415224972028]
								}, {
									"case":	28,
									"scores":	[-5.346415224972028]
								}, {
									"case":	29,
									"scores":	[-5.346415224972028]
								}, {
									"case":	30,
									"scores":	[-5.346415224972028]
								}, {
									"case":	31,
									"scores":	[-5.346415224972028]
								}, {
									"case":	32,
									"scores":	[-5.346415224972028]
								}, {
									"case":	33,
									"scores":	[-5.346415224972028]
								}, {
									"case":	34,
									"scores":	[-5.346415224972028]
								}, {
									"case":	35,
									"scores":	[-5.346415224972028]
								}, {
									"case":	36,
									"scores":	[-5.346415224972028]
								}, {
									"case":	37,
									"scores":	[-5.346415224972028]
								}, {
									"case":	38,
									"scores":	[-5.346415224972028]
								}, {
									"case":	39,
									"scores":	[-5.346415224972028]
								}, {
									"case":	40,
									"scores":	[-5.346415224972028]
								}, {
									"case":	41,
									"scores":	[-5.346415224972028]
								}, {
									"case":	42,
									"scores":	[-5.346415224972028]
								}, {
									"case":	43,
									"scores":	[-5.346415224972028]
								}, {
									"case":	44,
									"scores":	[-5.346415224972028]
								}, {
									"case":	45,
									"scores":	[-5.346415224972028]
								}, {
									"case":	46,
									"scores":	[-5.346415224972028]
								}, {
									"case":	47,
									"scores":	[-5.346415224972028]
								}, {
									"case":	48,
									"scores":	[-5.346415224972028]
								}, {
									"case":	49,
									"scores":	[-5.346415224972028]
								}, {
									"case":	50,
									"scores":	[-5.346415224972028]
								}, {
									"case":	51,
									"scores":	[-5.346415224972028]
								}, {
									"case":	52,
									"scores":	[-5.346415224972028]
								}, {
									"case":	53,
									"scores":	[-5.346415224972028]
								}, {
									"case":	54,
									"scores":	[-5.346415224972028]
								}, {
									"case":	55,
									"scores":	[-5.346415224972028]
								}, {
									"case":	56,
									"scores":	[-5.346415224972028]
								}, {
									"case":	57,
									"scores":	[-5.346415224972028]
								}, {
									"case":	58,
									"scores":	[-5.346415224972028]
								}, {
									"case":	59,
									"scores":	[-5.346415224972028]
								}, {
									"case":	60,
									"scores":	[-5.346415224972028]
								}, {
									"case":	61,
									"scores":	[-5.346415224972028]
								}, {
									"case":	62,
									"scores":	[-5.346415224972028]
								}, {
									"case":	63,
									"scores":	[-5.346415224972028]
								}, {
									"case":	64,
									"scores":	[-5.346415224972028]
								}, {
									"case":	65,
									"scores":	[-5.346415224972028]
								}, {
									"case":	66,
									"scores":	[-5.346415224972028]
								}, {
									"case":	67,
									"scores":	[-5.346415224972028]
								}, {
									"case":	68,
									"scores":	[-5.346415224972028]
								}, {
									"case":	69,
									"scores":	[-5.346415224972028]
								}, {
									"case":	70,
									"scores":	[-5.346415224972028]
								}, {
									"case":	71,
									"scores":	[-5.346415224972028]
								}, {
									"case":	72,
									"scores":	[-5.346415224972028]
								}, {
									"case":	73,
									"scores":	[-5.346415224972028]
								}, {
									"case":	74,
									"scores":	[-5.346415224972028]
								}, {
									"case":	75,
									"scores":	[-5.346415224972028]
								}, {
									"case":	76,
									"scores":	[-5.346415224972028]
								}, {
									"case":	77,
									"scores":	[-5.346415224972028]
								}, {
									"case":	78,
									"scores":	[-5.346415224972028]
								}, {
									"case":	79,
									"scores":	[-5.346415224972028]
								}, {
									"case":	80,
									"scores":	[-5.346415224972028]
								}, {
									"case":	81,
									"scores":	[-5.346415224972028]
								}, {
									"case":	82,
									"scores":	[-5.346415224972028]
								}, {
									"case":	83,
									"scores":	[-5.346415224972028]
								}, {
									"case":	84,
									"scores":	[-5.346415224972028]
								}, {
									"case":	85,
									"scores":	[-5.346415224972028]
								}, {
									"case":	86,
									"scores":	[-5.346415224972028]
								}, {
									"case":	87,
									"scores":	[-5.346415224972028]
								}, {
									"case":	88,
									"scores":	[-5.346415224972028]
								}, {
									"case":	89,
									"scores":	[-5.346415224972028]
								}, {
									"case":	90,
									"scores":	[-5.346415224972028]
								}, {
									"case":	91,
									"scores":	[-5.346415224972028]
								}, {
									"case":	92,
									"scores":	[-5.346415224972028]
								}, {
									"case":	93,
									"scores":	[-5.346415224972028]
								}, {
									"case":	94,
									"scores":	[-5.346415224972028]
								}, {
									"case":	95,
									"scores":	[-5.346415224972028]
								}, {
									"case":	96,
									"scores":	[-5.346415224972028]
								}, {
									"case":	97,
									"scores":	[-5.346415224972028]
								}, {
									"case":	98,
									"scores":	[-5.346415224972028]
								}, {
									"case":	99,
									"scores":	[-5.346415224972028]
								}, {
									"case":	100,
									"scores":	[-5.346415224972028]
								}, {
									"case":	101,
									"scores":	[-5.346415224972028]
								}, {
									"case":	102,
									"scores":	[-5.346415224972028]
								}, {
									"case":	103,
									"scores":	[-5.346415224972028]
								}, {
									"case":	104,
									"scores":	[-5.346415224972028]
								}, {
									"case":	105,
									"scores":	[-5.346415224972028]
								}, {
									"case":	106,
									"scores":	[-5.346415224972028]
								}, {
									"case":	107,
									"scores":	[-5.346415224972028]
								}, {
									"case":	108,
									"scores":	[-5.346415224972028]
								}, {
									"case":	109,
									"scores":	[-5.346415224972028]
								}, {
									"case":	110,
									"scores":	[-5.346415224972028]
								}, {
									"case":	111,
									"scores":	[-5.346415224972028]
								}, {
									"case":	112,
									"scores":	[-5.346415224972028]
								}, {
									"case":	113,
									"scores":	[-5.346415224972028]
								}, {
									"case":	114,
									"scores":	[-5.346415224972028]
								}, {
									"case":	115,
									"scores":	[-5.346415224972028]
								}, {
									"case":	116,
									"scores":	[-5.346415224972028]
								}, {
									"case":	117,
									"scores":	[-5.346415224972028]
								}, {
									"case":	118,
									"scores":	[-5.346415224972028]
								}, {
									"case":	119,
									"scores":	[-5.346415224972028]
								}, {
									"case":	120,
									"scores":	[-5.346415224972028]
								}, {
									"case":	121,
									"scores":	[-5.346415224972028]
								}, {
									"case":	122,
									"scores":	[-5.346415224972028]
								}, {
									"case":	123,
									"scores":	[-5.346415224972028]
								}, {
									"case":	124,
									"scores":	[-5.346415224972028]
								}, {
									"case":	125,
									"scores":	[-5.346415224972028]
								}, {
									"case":	126,
									"scores":	[-5.346415224972028]
								}, {
									"case":	127,
									"scores":	[-5.346415224972028]
								}, {
									"case":	128,
									"scores":	[-5.346415224972028]
								}, {
									"case":	129,
									"scores":	[-5.346415224972028]
								}, {
									"case":	130,
									"scores":	[-5.346415224972028]
								}, {
									"case":	131,
									"scores":	[-5.346415224972028]
								}, {
									"case":	132,
									"scores":	[-5.346415224972028]
								}, {
									"case":	133,
									"scores":	[-5.346415224972028]
								}, {
									"case":	134,
									"scores":	[-5.346415224972028]
								}, {
									"case":	135,
									"scores":	[-5.346415224972028]
								}, {
									"case":	136,
									"scores":	[-5.346415224972028]
								}, {
									"case":	137,
									"scores":	[-5.346415224972028]
								}, {
									"case":	138,
									"scores":	[-5.346415224972028]
								}, {
									"case":	139,
									"scores":	[-5.346415224972028]
								}, {
									"case":	140,
									"scores":	[-5.346415224972028]
								}, {
									"case":	141,
									"scores":	[-5.346415224972028]
								}, {
									"case":	142,
									"scores":	[-5.346415224972028]
								}, {
									"case":	143,
									"scores":	[-5.346415224972028]
								}, {
									"case":	144,
									"scores":	[-5.346415224972028]
								}, {
									"case":	145,
									"scores":	[-5.346415224972028]
								}, {
									"case":	146,
									"scores":	[-5.346415224972028]
								}, {
									"case":	147,
									"scores":	[-5.346415224972028]
								}, {
									"case":	148,
									"scores":	[-5.346415224972028]
								}, {
									"case":	149,
									"scores":	[-5.346415224972028]
								}, {
									"case":	150,
									"scores":	[-5.346415224972028]
								}, {
									"case":	151,
									"scores":	[-5.346415224972028]
								}, {
									"case":	152,
									"scores":	[-5.346415224972028]
								}, {
									"case":	153,
									"scores":	[-10.112784125672029, -10.649198299672028, -9.13199459497203, -9.4885663649720264, -8.56583793797203, -9.13199459497203, -9.13199459497203, -9.13199459497203, -9.13199459497203]
								}]
						}, {
							"switch":	23,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	2112,
							"begin_column":	3,
							"end_line":	2114,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L2112\", 9, &(object), sizeof (object), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags))) {\n    object->u.regex.pce->refcount--;\n}\n", "if ((object->u.regex.pce) || __is_neg(\"\", \"L2112\", 9, &(object), sizeof (object), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags))) {\n    object->u.regex.pce->refcount--;\n}\n", "if ((object->u.regex.pce) && !__is_neg(\"\", \"L2112\", 9, &(object), sizeof (object), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags))) {\n    object->u.regex.pce->refcount--;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5707359813281458, -5.0101347434281456, -4.144880643428146, -3.9338808524281466, -4.3836466334281461, -4.144880643428146, -4.144880643428146, -4.144880643428146, -4.144880643428146]
								}, {
									"case":	2,
									"scores":	[-4.0552197583281462, -4.4946185204281459, -3.6293644204281463, -3.418364629428146, -3.8681304104281464, -3.6293644204281463, -3.6293644204281463, -3.6293644204281463, -3.6293644204281463]
								}, {
									"case":	3,
									"scores":	[-4.0552197583281462, -4.4946185204281459, -3.6293644204281463, -3.418364629428146, -3.8681304104281464, -3.6293644204281463, -3.6293644204281463, -3.6293644204281463, -3.6293644204281463]
								}]
						}, {
							"switch":	26,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2112,
							"begin_column":	3,
							"end_line":	2114,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L2112\", 9, &(object), sizeof (object), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags)))\n    if (object->u.regex.pce) {\n        object->u.regex.pce->refcount--;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.09796343287203, -8.53736219497203, -7.6721080949720282, -7.4611083039720283, -7.9108740849720283, -7.6721080949720282, -7.6721080949720282, -7.6721080949720282, -7.6721080949720282]
								}]
						}]
				}, {
					"line":	2115,
					"switches":	[{
							"switch":	29,
							"types":	[[], [], [], [], [153], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], [], [], [], [], [], []],
							"begin_line":	2116,
							"begin_column":	2,
							"end_line":	2116,
							"end_column":	2,
							"patch_codes":	["memset(&object->current, 0, sizeof (*(&object->current)))", "memset(&object->dit_type, 0, sizeof (*(&object->dit_type)))", "memset(&object->inner, 0, sizeof (*(&object->inner)))", "memset(&object->inner.ce, 0, sizeof (*(&object->inner.ce)))", "memset(&object->inner.iterator, 0, sizeof (*(&object->inner.iterator)))", "memset(&object->inner.object, 0, sizeof (*(&object->inner.object)))", "memset(&object->inner.zobject, 0, sizeof (*(&object->inner.zobject)))", "memset(&object->std, 0, sizeof (*(&object->std)))", "memset(&object->u, 0, sizeof (*(&object->u)))", "memset(&object->u.append, 0, sizeof (*(&object->u.append)))", "memset(&object->u.caching, 0, sizeof (*(&object->u.caching)))", "memset(&object->u.limit, 0, sizeof (*(&object->u.limit)))", "memset(&object->u.regex, 0, sizeof (*(&object->u.regex)))", "memset(&object->u.regex.flags, 0, sizeof (*(&object->u.regex.flags)))", "memset(&object->u.regex.mode, 0, sizeof (*(&object->u.regex.mode)))", "memset(&object->u.regex.pce, 0, sizeof (*(&object->u.regex.pce)))", "memset(&object->u.regex.preg_flags, 0, sizeof (*(&object->u.regex.preg_flags)))", "memset(&object->u.regex.regex, 0, sizeof (*(&object->u.regex.regex)))", "memset(&object->u.regex.use_flags, 0, sizeof (*(&object->u.regex.use_flags)))", "memset(object, 0, sizeof (*(object)))", "memset(object->inner.ce, 0, sizeof (*(object->inner.ce)))", "memset(object->inner.iterator, 0, sizeof (*(object->inner.iterator)))", "memset(object->inner.object, 0, sizeof (*(object->inner.object)))", "memset(object->inner.zobject, 0, sizeof (*(object->inner.zobject)))", "memset(object->u.regex.pce, 0, sizeof (*(object->u.regex.pce)))", "memset(object->u.regex.regex, 0, sizeof (*(object->u.regex.regex)))", "(object)->current.pos++", "(object)->u.append.iterator->funcs->dtor(object->u.append.iterator)", "(object)->u.regex.pce->refcount++", "(object)->u.regex.pce->refcount--", "_array_init(((object)->u.caching.zcache), 0)", "_efree(((object)))", "_efree(((object)->current.str_key))", "_efree(((object)->u.regex.regex))", "_zval_copy_ctor(((object)->u.caching.zstr))", "_zval_ptr_dtor((&(object)->current.data))", "_zval_ptr_dtor((&(object)->inner.zobject))", "_zval_ptr_dtor((&(object)->u.append.zarrayit))", "_zval_ptr_dtor((&(object)->u.caching.zcache))", "_zval_ptr_dtor((&(object)->u.caching.zchildren))", "_zval_ptr_dtor((&(object)->u.caching.zstr))", "memset((object), 0, sizeof(spl_dual_it_object))", "object->u.append.iterator->funcs->dtor((object)->u.append.iterator)", "spl_append_it_fetch((object))", "spl_append_it_next((object))", "spl_append_it_next_iterator((object))", "spl_caching_it_next((object))", "spl_caching_it_rewind((object))", "spl_dual_it_fetch((object), 0)", "spl_dual_it_fetch((object), 1)", "spl_dual_it_free((object))", "spl_dual_it_next((object), 0)", "spl_dual_it_next((object), 1)", "spl_dual_it_require((object))", "spl_dual_it_rewind((object))", "zend_call_method(&(object)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_object_std_dtor(&(object)->std)", "zval_addref_p((object)->current.data)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((object))", "_efree((object->u.regex.regex))", "_zval_ptr_dtor((&object->inner.zobject))", "_zval_ptr_dtor((&object->u.append.zarrayit))", "_zval_ptr_dtor((&object->u.caching.zcache))", "exit(1)", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "object->u.append.iterator->funcs->dtor(object->u.append.iterator)", "object->u.caching.zcache = ((void *)0)", "object->u.regex.pce->refcount--", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_dtor(&object->std)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "if (__is_neg(\"\", \"L2116\", 9, &(object), sizeof (object), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.28580710301947]
								}, {
									"case":	2,
									"scores":	[-5.28580710301947]
								}, {
									"case":	3,
									"scores":	[-5.28580710301947]
								}, {
									"case":	4,
									"scores":	[-5.28580710301947]
								}, {
									"case":	5,
									"scores":	[-5.28580710301947]
								}, {
									"case":	6,
									"scores":	[-5.28580710301947]
								}, {
									"case":	7,
									"scores":	[-5.28580710301947]
								}, {
									"case":	8,
									"scores":	[-5.28580710301947]
								}, {
									"case":	9,
									"scores":	[-5.28580710301947]
								}, {
									"case":	10,
									"scores":	[-5.28580710301947]
								}, {
									"case":	11,
									"scores":	[-5.28580710301947]
								}, {
									"case":	12,
									"scores":	[-5.28580710301947]
								}, {
									"case":	13,
									"scores":	[-5.28580710301947]
								}, {
									"case":	14,
									"scores":	[-5.28580710301947]
								}, {
									"case":	15,
									"scores":	[-5.28580710301947]
								}, {
									"case":	16,
									"scores":	[-5.28580710301947]
								}, {
									"case":	17,
									"scores":	[-5.28580710301947]
								}, {
									"case":	18,
									"scores":	[-5.28580710301947]
								}, {
									"case":	19,
									"scores":	[-5.28580710301947]
								}, {
									"case":	20,
									"scores":	[-5.28580710301947]
								}, {
									"case":	21,
									"scores":	[-5.28580710301947]
								}, {
									"case":	22,
									"scores":	[-5.28580710301947]
								}, {
									"case":	23,
									"scores":	[-5.28580710301947]
								}, {
									"case":	24,
									"scores":	[-5.28580710301947]
								}, {
									"case":	25,
									"scores":	[-5.28580710301947]
								}, {
									"case":	26,
									"scores":	[-5.28580710301947]
								}, {
									"case":	27,
									"scores":	[-5.28580710301947]
								}, {
									"case":	28,
									"scores":	[-5.28580710301947]
								}, {
									"case":	29,
									"scores":	[-5.28580710301947]
								}, {
									"case":	30,
									"scores":	[-5.28580710301947]
								}, {
									"case":	31,
									"scores":	[-5.28580710301947]
								}, {
									"case":	32,
									"scores":	[-5.28580710301947]
								}, {
									"case":	33,
									"scores":	[-5.28580710301947]
								}, {
									"case":	34,
									"scores":	[-5.28580710301947]
								}, {
									"case":	35,
									"scores":	[-5.28580710301947]
								}, {
									"case":	36,
									"scores":	[-5.28580710301947]
								}, {
									"case":	37,
									"scores":	[-5.28580710301947]
								}, {
									"case":	38,
									"scores":	[-5.28580710301947]
								}, {
									"case":	39,
									"scores":	[-5.28580710301947]
								}, {
									"case":	40,
									"scores":	[-5.28580710301947]
								}, {
									"case":	41,
									"scores":	[-5.28580710301947]
								}, {
									"case":	42,
									"scores":	[-5.28580710301947]
								}, {
									"case":	43,
									"scores":	[-5.28580710301947]
								}, {
									"case":	44,
									"scores":	[-5.28580710301947]
								}, {
									"case":	45,
									"scores":	[-5.28580710301947]
								}, {
									"case":	46,
									"scores":	[-5.28580710301947]
								}, {
									"case":	47,
									"scores":	[-5.28580710301947]
								}, {
									"case":	48,
									"scores":	[-5.28580710301947]
								}, {
									"case":	49,
									"scores":	[-5.28580710301947]
								}, {
									"case":	50,
									"scores":	[-5.28580710301947]
								}, {
									"case":	51,
									"scores":	[-5.28580710301947]
								}, {
									"case":	52,
									"scores":	[-5.28580710301947]
								}, {
									"case":	53,
									"scores":	[-5.28580710301947]
								}, {
									"case":	54,
									"scores":	[-5.28580710301947]
								}, {
									"case":	55,
									"scores":	[-5.28580710301947]
								}, {
									"case":	56,
									"scores":	[-5.28580710301947]
								}, {
									"case":	57,
									"scores":	[-5.28580710301947]
								}, {
									"case":	58,
									"scores":	[-5.28580710301947]
								}, {
									"case":	59,
									"scores":	[-5.28580710301947]
								}, {
									"case":	60,
									"scores":	[-5.28580710301947]
								}, {
									"case":	61,
									"scores":	[-5.28580710301947]
								}, {
									"case":	62,
									"scores":	[-5.28580710301947]
								}, {
									"case":	63,
									"scores":	[-5.28580710301947]
								}, {
									"case":	64,
									"scores":	[-5.28580710301947]
								}, {
									"case":	65,
									"scores":	[-5.28580710301947]
								}, {
									"case":	66,
									"scores":	[-5.28580710301947]
								}, {
									"case":	67,
									"scores":	[-5.28580710301947]
								}, {
									"case":	68,
									"scores":	[-5.28580710301947]
								}, {
									"case":	69,
									"scores":	[-5.28580710301947]
								}, {
									"case":	70,
									"scores":	[-5.28580710301947]
								}, {
									"case":	71,
									"scores":	[-5.28580710301947]
								}, {
									"case":	72,
									"scores":	[-5.28580710301947]
								}, {
									"case":	73,
									"scores":	[-5.28580710301947]
								}, {
									"case":	74,
									"scores":	[-5.28580710301947]
								}, {
									"case":	75,
									"scores":	[-5.28580710301947]
								}, {
									"case":	76,
									"scores":	[-5.28580710301947]
								}, {
									"case":	77,
									"scores":	[-5.28580710301947]
								}, {
									"case":	78,
									"scores":	[-5.28580710301947]
								}, {
									"case":	79,
									"scores":	[-5.28580710301947]
								}, {
									"case":	80,
									"scores":	[-5.28580710301947]
								}, {
									"case":	81,
									"scores":	[-5.28580710301947]
								}, {
									"case":	82,
									"scores":	[-5.28580710301947]
								}, {
									"case":	83,
									"scores":	[-5.28580710301947]
								}, {
									"case":	84,
									"scores":	[-5.28580710301947]
								}, {
									"case":	85,
									"scores":	[-5.28580710301947]
								}, {
									"case":	86,
									"scores":	[-5.28580710301947]
								}, {
									"case":	87,
									"scores":	[-5.28580710301947]
								}, {
									"case":	88,
									"scores":	[-5.28580710301947]
								}, {
									"case":	89,
									"scores":	[-5.28580710301947]
								}, {
									"case":	90,
									"scores":	[-5.28580710301947]
								}, {
									"case":	91,
									"scores":	[-5.28580710301947]
								}, {
									"case":	92,
									"scores":	[-5.28580710301947]
								}, {
									"case":	93,
									"scores":	[-5.28580710301947]
								}, {
									"case":	94,
									"scores":	[-5.28580710301947]
								}, {
									"case":	95,
									"scores":	[-5.28580710301947]
								}, {
									"case":	96,
									"scores":	[-5.28580710301947]
								}, {
									"case":	97,
									"scores":	[-5.28580710301947]
								}, {
									"case":	98,
									"scores":	[-5.28580710301947]
								}, {
									"case":	99,
									"scores":	[-5.28580710301947]
								}, {
									"case":	100,
									"scores":	[-5.28580710301947]
								}, {
									"case":	101,
									"scores":	[-5.28580710301947]
								}, {
									"case":	102,
									"scores":	[-5.28580710301947]
								}, {
									"case":	103,
									"scores":	[-5.28580710301947]
								}, {
									"case":	104,
									"scores":	[-5.28580710301947]
								}, {
									"case":	105,
									"scores":	[-5.28580710301947]
								}, {
									"case":	106,
									"scores":	[-5.28580710301947]
								}, {
									"case":	107,
									"scores":	[-5.28580710301947]
								}, {
									"case":	108,
									"scores":	[-5.28580710301947]
								}, {
									"case":	109,
									"scores":	[-5.28580710301947]
								}, {
									"case":	110,
									"scores":	[-5.28580710301947]
								}, {
									"case":	111,
									"scores":	[-5.28580710301947]
								}, {
									"case":	112,
									"scores":	[-5.28580710301947]
								}, {
									"case":	113,
									"scores":	[-5.28580710301947]
								}, {
									"case":	114,
									"scores":	[-5.28580710301947]
								}, {
									"case":	115,
									"scores":	[-5.28580710301947]
								}, {
									"case":	116,
									"scores":	[-5.28580710301947]
								}, {
									"case":	117,
									"scores":	[-5.28580710301947]
								}, {
									"case":	118,
									"scores":	[-5.28580710301947]
								}, {
									"case":	119,
									"scores":	[-5.28580710301947]
								}, {
									"case":	120,
									"scores":	[-5.28580710301947]
								}, {
									"case":	121,
									"scores":	[-5.28580710301947]
								}, {
									"case":	122,
									"scores":	[-5.28580710301947]
								}, {
									"case":	123,
									"scores":	[-5.28580710301947]
								}, {
									"case":	124,
									"scores":	[-5.28580710301947]
								}, {
									"case":	125,
									"scores":	[-5.28580710301947]
								}, {
									"case":	126,
									"scores":	[-5.28580710301947]
								}, {
									"case":	127,
									"scores":	[-5.28580710301947]
								}, {
									"case":	128,
									"scores":	[-5.28580710301947]
								}, {
									"case":	129,
									"scores":	[-5.28580710301947]
								}, {
									"case":	130,
									"scores":	[-5.28580710301947]
								}, {
									"case":	131,
									"scores":	[-5.28580710301947]
								}, {
									"case":	132,
									"scores":	[-5.28580710301947]
								}, {
									"case":	133,
									"scores":	[-5.28580710301947]
								}, {
									"case":	134,
									"scores":	[-5.28580710301947]
								}, {
									"case":	135,
									"scores":	[-5.28580710301947]
								}, {
									"case":	136,
									"scores":	[-5.28580710301947]
								}, {
									"case":	137,
									"scores":	[-5.28580710301947]
								}, {
									"case":	138,
									"scores":	[-5.28580710301947]
								}, {
									"case":	139,
									"scores":	[-5.28580710301947]
								}, {
									"case":	140,
									"scores":	[-5.28580710301947]
								}, {
									"case":	141,
									"scores":	[-5.28580710301947]
								}, {
									"case":	142,
									"scores":	[-5.28580710301947]
								}, {
									"case":	143,
									"scores":	[-5.28580710301947]
								}, {
									"case":	144,
									"scores":	[-5.28580710301947]
								}, {
									"case":	145,
									"scores":	[-5.28580710301947]
								}, {
									"case":	146,
									"scores":	[-5.28580710301947]
								}, {
									"case":	147,
									"scores":	[-5.28580710301947]
								}, {
									"case":	148,
									"scores":	[-5.28580710301947]
								}, {
									"case":	149,
									"scores":	[-5.28580710301947]
								}, {
									"case":	150,
									"scores":	[-5.28580710301947]
								}, {
									"case":	151,
									"scores":	[-5.28580710301947]
								}, {
									"case":	152,
									"scores":	[-5.28580710301947]
								}, {
									"case":	153,
									"scores":	[-7.87107424311947, -6.65877148241947, -7.54922924821947, -7.30319033441947, -6.73703367741947, -7.30319033441947, -7.30319033441947, -7.30319033441947, -7.30319033441947]
								}]
						}, {
							"switch":	30,
							"types":	[[], [], [1], [], [], [], [29, 30, 31], [], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [16]],
							"begin_line":	2116,
							"begin_column":	4,
							"end_line":	2116,
							"end_column":	31,
							"patch_codes":	["if (!__is_neg(\"\", \"L2116\", 9, &(object), sizeof (object), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags)))\n    _efree((object->u.regex.regex));\n", "__zend_realloc((object->u.regex.regex), 0)", "bzero((object->u.regex.regex), 0)", "dlsym((object->u.regex.regex), 0)", "explicit_bzero((object->u.regex.regex), 0)", "getentropy((object->u.regex.regex), 0)", "php_write((object->u.regex.regex), 0)", "realloc((object->u.regex.regex), 0)", "timer_gettime((object->u.regex.regex), 0)", "zend_add_to_list((object->u.regex.regex), 0)", "zend_add_to_list((object->u.regex.regex), _object)", "zend_init_list((object->u.regex.regex), 0)", "zend_init_list((object->u.regex.regex), _object)", "zend_list_insert((object->u.regex.regex), 0)", "zend_list_insert((object->u.regex.regex), le_index_ptr)", "{\n}\n", "_zend_mem_block_size((object->u.regex.regex))", "brk((object->u.regex.regex))", "dlclose((object->u.regex.regex))", "free((object->u.regex.regex))", "list_entry_destructor((object->u.regex.regex))", "plist_entry_destructor((object->u.regex.regex))", "spl_RecursiveIteratorIterator_free_storage((object->u.regex.regex))", "spl_dual_it_free_storage((object->u.regex.regex))", "zend_vm_stack_free((object->u.regex.regex))", "zend_vm_stack_free_int((object->u.regex.regex))", "zend_vm_stack_push((object->u.regex.regex))", "zend_vm_stack_push_nocheck((object->u.regex.regex))", "_efree(((&_object)->u.regex.regex))", "_efree(((&object)->u.regex.regex))", "_efree(((object)->u.regex.regex))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.96423887301947, -5.99575728301947, -6.99782068301947, -6.23993258301947, -6.47869857301947, -6.23993258301947, -6.23993258301947, -6.23993258301947, -6.23993258301947]
								}, {
									"case":	2,
									"scores":	[-5.28580710301947]
								}, {
									"case":	3,
									"scores":	[-5.28580710301947]
								}, {
									"case":	4,
									"scores":	[-5.28580710301947]
								}, {
									"case":	5,
									"scores":	[-5.28580710301947]
								}, {
									"case":	6,
									"scores":	[-5.28580710301947]
								}, {
									"case":	7,
									"scores":	[-5.28580710301947]
								}, {
									"case":	8,
									"scores":	[-5.28580710301947]
								}, {
									"case":	9,
									"scores":	[-5.28580710301947]
								}, {
									"case":	10,
									"scores":	[-5.28580710301947]
								}, {
									"case":	11,
									"scores":	[-5.28580710301947]
								}, {
									"case":	12,
									"scores":	[-5.28580710301947]
								}, {
									"case":	13,
									"scores":	[-5.28580710301947]
								}, {
									"case":	14,
									"scores":	[-5.28580710301947]
								}, {
									"case":	15,
									"scores":	[-5.28580710301947]
								}, {
									"case":	16,
									"scores":	[-5.28580710301947]
								}, {
									"case":	17,
									"scores":	[-5.28580710301947]
								}, {
									"case":	18,
									"scores":	[-5.28580710301947]
								}, {
									"case":	19,
									"scores":	[-5.28580710301947]
								}, {
									"case":	20,
									"scores":	[-5.28580710301947]
								}, {
									"case":	21,
									"scores":	[-5.28580710301947]
								}, {
									"case":	22,
									"scores":	[-5.28580710301947]
								}, {
									"case":	23,
									"scores":	[-5.28580710301947]
								}, {
									"case":	24,
									"scores":	[-5.28580710301947]
								}, {
									"case":	25,
									"scores":	[-5.28580710301947]
								}, {
									"case":	26,
									"scores":	[-5.28580710301947]
								}, {
									"case":	27,
									"scores":	[-5.28580710301947]
								}, {
									"case":	28,
									"scores":	[-5.28580710301947]
								}, {
									"case":	29,
									"scores":	[-5.28580710301947]
								}, {
									"case":	30,
									"scores":	[-5.28580710301947]
								}, {
									"case":	31,
									"scores":	[-5.28580710301947]
								}]
						}]
				}, {
					"line":	2114,
					"switches":	[{
							"switch":	27,
							"types":	[[], [], [], [], [153], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], [], [], [], [], [], []],
							"begin_line":	2115,
							"begin_column":	1,
							"end_line":	2115,
							"end_column":	1,
							"patch_codes":	["memset(&object->current, 0, sizeof (*(&object->current)))", "memset(&object->dit_type, 0, sizeof (*(&object->dit_type)))", "memset(&object->inner, 0, sizeof (*(&object->inner)))", "memset(&object->inner.ce, 0, sizeof (*(&object->inner.ce)))", "memset(&object->inner.iterator, 0, sizeof (*(&object->inner.iterator)))", "memset(&object->inner.object, 0, sizeof (*(&object->inner.object)))", "memset(&object->inner.zobject, 0, sizeof (*(&object->inner.zobject)))", "memset(&object->std, 0, sizeof (*(&object->std)))", "memset(&object->u, 0, sizeof (*(&object->u)))", "memset(&object->u.append, 0, sizeof (*(&object->u.append)))", "memset(&object->u.caching, 0, sizeof (*(&object->u.caching)))", "memset(&object->u.limit, 0, sizeof (*(&object->u.limit)))", "memset(&object->u.regex, 0, sizeof (*(&object->u.regex)))", "memset(&object->u.regex.flags, 0, sizeof (*(&object->u.regex.flags)))", "memset(&object->u.regex.mode, 0, sizeof (*(&object->u.regex.mode)))", "memset(&object->u.regex.pce, 0, sizeof (*(&object->u.regex.pce)))", "memset(&object->u.regex.preg_flags, 0, sizeof (*(&object->u.regex.preg_flags)))", "memset(&object->u.regex.regex, 0, sizeof (*(&object->u.regex.regex)))", "memset(&object->u.regex.use_flags, 0, sizeof (*(&object->u.regex.use_flags)))", "memset(object, 0, sizeof (*(object)))", "memset(object->inner.ce, 0, sizeof (*(object->inner.ce)))", "memset(object->inner.iterator, 0, sizeof (*(object->inner.iterator)))", "memset(object->inner.object, 0, sizeof (*(object->inner.object)))", "memset(object->inner.zobject, 0, sizeof (*(object->inner.zobject)))", "memset(object->u.regex.pce, 0, sizeof (*(object->u.regex.pce)))", "memset(object->u.regex.regex, 0, sizeof (*(object->u.regex.regex)))", "(object)->current.pos++", "(object)->u.append.iterator->funcs->dtor(object->u.append.iterator)", "(object)->u.regex.pce->refcount++", "(object)->u.regex.pce->refcount--", "_array_init(((object)->u.caching.zcache), 0)", "_efree(((object)))", "_efree(((object)->current.str_key))", "_efree(((object)->u.regex.regex))", "_zval_copy_ctor(((object)->u.caching.zstr))", "_zval_ptr_dtor((&(object)->current.data))", "_zval_ptr_dtor((&(object)->inner.zobject))", "_zval_ptr_dtor((&(object)->u.append.zarrayit))", "_zval_ptr_dtor((&(object)->u.caching.zcache))", "_zval_ptr_dtor((&(object)->u.caching.zchildren))", "_zval_ptr_dtor((&(object)->u.caching.zstr))", "memset((object), 0, sizeof(spl_dual_it_object))", "object->u.append.iterator->funcs->dtor((object)->u.append.iterator)", "spl_append_it_fetch((object))", "spl_append_it_next((object))", "spl_append_it_next_iterator((object))", "spl_caching_it_next((object))", "spl_caching_it_rewind((object))", "spl_dual_it_fetch((object), 0)", "spl_dual_it_fetch((object), 1)", "spl_dual_it_free((object))", "spl_dual_it_next((object), 0)", "spl_dual_it_next((object), 1)", "spl_dual_it_require((object))", "spl_dual_it_rewind((object))", "zend_call_method(&(object)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_object_std_dtor(&(object)->std)", "zval_addref_p((object)->current.data)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((object))", "_efree((object->u.regex.regex))", "_zval_ptr_dtor((&object->inner.zobject))", "_zval_ptr_dtor((&object->u.append.zarrayit))", "_zval_ptr_dtor((&object->u.caching.zcache))", "exit(1)", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "object->u.append.iterator->funcs->dtor(object->u.append.iterator)", "object->u.caching.zcache = ((void *)0)", "object->u.regex.pce->refcount--", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_dtor(&object->std)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")", "if (__is_neg(\"\", \"L2115\", 9, &(object), sizeof (object), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.30600981033699]
								}, {
									"case":	2,
									"scores":	[-5.30600981033699]
								}, {
									"case":	3,
									"scores":	[-5.30600981033699]
								}, {
									"case":	4,
									"scores":	[-5.30600981033699]
								}, {
									"case":	5,
									"scores":	[-5.30600981033699]
								}, {
									"case":	6,
									"scores":	[-5.30600981033699]
								}, {
									"case":	7,
									"scores":	[-5.30600981033699]
								}, {
									"case":	8,
									"scores":	[-5.30600981033699]
								}, {
									"case":	9,
									"scores":	[-5.30600981033699]
								}, {
									"case":	10,
									"scores":	[-5.30600981033699]
								}, {
									"case":	11,
									"scores":	[-5.30600981033699]
								}, {
									"case":	12,
									"scores":	[-5.30600981033699]
								}, {
									"case":	13,
									"scores":	[-5.30600981033699]
								}, {
									"case":	14,
									"scores":	[-5.30600981033699]
								}, {
									"case":	15,
									"scores":	[-5.30600981033699]
								}, {
									"case":	16,
									"scores":	[-5.30600981033699]
								}, {
									"case":	17,
									"scores":	[-5.30600981033699]
								}, {
									"case":	18,
									"scores":	[-5.30600981033699]
								}, {
									"case":	19,
									"scores":	[-5.30600981033699]
								}, {
									"case":	20,
									"scores":	[-5.30600981033699]
								}, {
									"case":	21,
									"scores":	[-5.30600981033699]
								}, {
									"case":	22,
									"scores":	[-5.30600981033699]
								}, {
									"case":	23,
									"scores":	[-5.30600981033699]
								}, {
									"case":	24,
									"scores":	[-5.30600981033699]
								}, {
									"case":	25,
									"scores":	[-5.30600981033699]
								}, {
									"case":	26,
									"scores":	[-5.30600981033699]
								}, {
									"case":	27,
									"scores":	[-5.30600981033699]
								}, {
									"case":	28,
									"scores":	[-5.30600981033699]
								}, {
									"case":	29,
									"scores":	[-5.30600981033699]
								}, {
									"case":	30,
									"scores":	[-5.30600981033699]
								}, {
									"case":	31,
									"scores":	[-5.30600981033699]
								}, {
									"case":	32,
									"scores":	[-5.30600981033699]
								}, {
									"case":	33,
									"scores":	[-5.30600981033699]
								}, {
									"case":	34,
									"scores":	[-5.30600981033699]
								}, {
									"case":	35,
									"scores":	[-5.30600981033699]
								}, {
									"case":	36,
									"scores":	[-5.30600981033699]
								}, {
									"case":	37,
									"scores":	[-5.30600981033699]
								}, {
									"case":	38,
									"scores":	[-5.30600981033699]
								}, {
									"case":	39,
									"scores":	[-5.30600981033699]
								}, {
									"case":	40,
									"scores":	[-5.30600981033699]
								}, {
									"case":	41,
									"scores":	[-5.30600981033699]
								}, {
									"case":	42,
									"scores":	[-5.30600981033699]
								}, {
									"case":	43,
									"scores":	[-5.30600981033699]
								}, {
									"case":	44,
									"scores":	[-5.30600981033699]
								}, {
									"case":	45,
									"scores":	[-5.30600981033699]
								}, {
									"case":	46,
									"scores":	[-5.30600981033699]
								}, {
									"case":	47,
									"scores":	[-5.30600981033699]
								}, {
									"case":	48,
									"scores":	[-5.30600981033699]
								}, {
									"case":	49,
									"scores":	[-5.30600981033699]
								}, {
									"case":	50,
									"scores":	[-5.30600981033699]
								}, {
									"case":	51,
									"scores":	[-5.30600981033699]
								}, {
									"case":	52,
									"scores":	[-5.30600981033699]
								}, {
									"case":	53,
									"scores":	[-5.30600981033699]
								}, {
									"case":	54,
									"scores":	[-5.30600981033699]
								}, {
									"case":	55,
									"scores":	[-5.30600981033699]
								}, {
									"case":	56,
									"scores":	[-5.30600981033699]
								}, {
									"case":	57,
									"scores":	[-5.30600981033699]
								}, {
									"case":	58,
									"scores":	[-5.30600981033699]
								}, {
									"case":	59,
									"scores":	[-5.30600981033699]
								}, {
									"case":	60,
									"scores":	[-5.30600981033699]
								}, {
									"case":	61,
									"scores":	[-5.30600981033699]
								}, {
									"case":	62,
									"scores":	[-5.30600981033699]
								}, {
									"case":	63,
									"scores":	[-5.30600981033699]
								}, {
									"case":	64,
									"scores":	[-5.30600981033699]
								}, {
									"case":	65,
									"scores":	[-5.30600981033699]
								}, {
									"case":	66,
									"scores":	[-5.30600981033699]
								}, {
									"case":	67,
									"scores":	[-5.30600981033699]
								}, {
									"case":	68,
									"scores":	[-5.30600981033699]
								}, {
									"case":	69,
									"scores":	[-5.30600981033699]
								}, {
									"case":	70,
									"scores":	[-5.30600981033699]
								}, {
									"case":	71,
									"scores":	[-5.30600981033699]
								}, {
									"case":	72,
									"scores":	[-5.30600981033699]
								}, {
									"case":	73,
									"scores":	[-5.30600981033699]
								}, {
									"case":	74,
									"scores":	[-5.30600981033699]
								}, {
									"case":	75,
									"scores":	[-5.30600981033699]
								}, {
									"case":	76,
									"scores":	[-5.30600981033699]
								}, {
									"case":	77,
									"scores":	[-5.30600981033699]
								}, {
									"case":	78,
									"scores":	[-5.30600981033699]
								}, {
									"case":	79,
									"scores":	[-5.30600981033699]
								}, {
									"case":	80,
									"scores":	[-5.30600981033699]
								}, {
									"case":	81,
									"scores":	[-5.30600981033699]
								}, {
									"case":	82,
									"scores":	[-5.30600981033699]
								}, {
									"case":	83,
									"scores":	[-5.30600981033699]
								}, {
									"case":	84,
									"scores":	[-5.30600981033699]
								}, {
									"case":	85,
									"scores":	[-5.30600981033699]
								}, {
									"case":	86,
									"scores":	[-5.30600981033699]
								}, {
									"case":	87,
									"scores":	[-5.30600981033699]
								}, {
									"case":	88,
									"scores":	[-5.30600981033699]
								}, {
									"case":	89,
									"scores":	[-5.30600981033699]
								}, {
									"case":	90,
									"scores":	[-5.30600981033699]
								}, {
									"case":	91,
									"scores":	[-5.30600981033699]
								}, {
									"case":	92,
									"scores":	[-5.30600981033699]
								}, {
									"case":	93,
									"scores":	[-5.30600981033699]
								}, {
									"case":	94,
									"scores":	[-5.30600981033699]
								}, {
									"case":	95,
									"scores":	[-5.30600981033699]
								}, {
									"case":	96,
									"scores":	[-5.30600981033699]
								}, {
									"case":	97,
									"scores":	[-5.30600981033699]
								}, {
									"case":	98,
									"scores":	[-5.30600981033699]
								}, {
									"case":	99,
									"scores":	[-5.30600981033699]
								}, {
									"case":	100,
									"scores":	[-5.30600981033699]
								}, {
									"case":	101,
									"scores":	[-5.30600981033699]
								}, {
									"case":	102,
									"scores":	[-5.30600981033699]
								}, {
									"case":	103,
									"scores":	[-5.30600981033699]
								}, {
									"case":	104,
									"scores":	[-5.30600981033699]
								}, {
									"case":	105,
									"scores":	[-5.30600981033699]
								}, {
									"case":	106,
									"scores":	[-5.30600981033699]
								}, {
									"case":	107,
									"scores":	[-5.30600981033699]
								}, {
									"case":	108,
									"scores":	[-5.30600981033699]
								}, {
									"case":	109,
									"scores":	[-5.30600981033699]
								}, {
									"case":	110,
									"scores":	[-5.30600981033699]
								}, {
									"case":	111,
									"scores":	[-5.30600981033699]
								}, {
									"case":	112,
									"scores":	[-5.30600981033699]
								}, {
									"case":	113,
									"scores":	[-5.30600981033699]
								}, {
									"case":	114,
									"scores":	[-5.30600981033699]
								}, {
									"case":	115,
									"scores":	[-5.30600981033699]
								}, {
									"case":	116,
									"scores":	[-5.30600981033699]
								}, {
									"case":	117,
									"scores":	[-5.30600981033699]
								}, {
									"case":	118,
									"scores":	[-5.30600981033699]
								}, {
									"case":	119,
									"scores":	[-5.30600981033699]
								}, {
									"case":	120,
									"scores":	[-5.30600981033699]
								}, {
									"case":	121,
									"scores":	[-5.30600981033699]
								}, {
									"case":	122,
									"scores":	[-5.30600981033699]
								}, {
									"case":	123,
									"scores":	[-5.30600981033699]
								}, {
									"case":	124,
									"scores":	[-5.30600981033699]
								}, {
									"case":	125,
									"scores":	[-5.30600981033699]
								}, {
									"case":	126,
									"scores":	[-5.30600981033699]
								}, {
									"case":	127,
									"scores":	[-5.30600981033699]
								}, {
									"case":	128,
									"scores":	[-5.30600981033699]
								}, {
									"case":	129,
									"scores":	[-5.30600981033699]
								}, {
									"case":	130,
									"scores":	[-5.30600981033699]
								}, {
									"case":	131,
									"scores":	[-5.30600981033699]
								}, {
									"case":	132,
									"scores":	[-5.30600981033699]
								}, {
									"case":	133,
									"scores":	[-5.30600981033699]
								}, {
									"case":	134,
									"scores":	[-5.30600981033699]
								}, {
									"case":	135,
									"scores":	[-5.30600981033699]
								}, {
									"case":	136,
									"scores":	[-5.30600981033699]
								}, {
									"case":	137,
									"scores":	[-5.30600981033699]
								}, {
									"case":	138,
									"scores":	[-5.30600981033699]
								}, {
									"case":	139,
									"scores":	[-5.30600981033699]
								}, {
									"case":	140,
									"scores":	[-5.30600981033699]
								}, {
									"case":	141,
									"scores":	[-5.30600981033699]
								}, {
									"case":	142,
									"scores":	[-5.30600981033699]
								}, {
									"case":	143,
									"scores":	[-5.30600981033699]
								}, {
									"case":	144,
									"scores":	[-5.30600981033699]
								}, {
									"case":	145,
									"scores":	[-5.30600981033699]
								}, {
									"case":	146,
									"scores":	[-5.30600981033699]
								}, {
									"case":	147,
									"scores":	[-5.30600981033699]
								}, {
									"case":	148,
									"scores":	[-5.30600981033699]
								}, {
									"case":	149,
									"scores":	[-5.30600981033699]
								}, {
									"case":	150,
									"scores":	[-5.30600981033699]
								}, {
									"case":	151,
									"scores":	[-5.30600981033699]
								}, {
									"case":	152,
									"scores":	[-5.30600981033699]
								}, {
									"case":	153,
									"scores":	[-10.695538789036991, -8.94797232833699, -10.37369379413699, -9.59239118033699, -9.02623452333699, -9.59239118033699, -9.59239118033699, -9.59239118033699, -9.59239118033699]
								}]
						}, {
							"switch":	28,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	2115,
							"begin_column":	3,
							"end_line":	2117,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L2115\", 9, &(object), sizeof (object), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags))) {\n    _efree((object->u.regex.regex));\n}\n", "if ((object->u.regex.regex) || __is_neg(\"\", \"L2115\", 9, &(object), sizeof (object), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags))) {\n    _efree((object->u.regex.regex));\n}\n", "if ((object->u.regex.regex) && !__is_neg(\"\", \"L2115\", 9, &(object), sizeof (object), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags))) {\n    _efree((object->u.regex.regex));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.1961808359281454, -2.9859117554281456, -4.2297626459281457, -3.2300870554281458, -3.4688530454281459, -3.2300870554281458, -3.2300870554281458, -3.2300870554281458, -3.2300870554281458]
								}, {
									"case":	2,
									"scores":	[-3.476967218928146, -3.2666981384281462, -4.5105490289281462, -3.5108734384281459, -3.7496394284281456, -3.5108734384281459, -3.5108734384281459, -3.5108734384281459, -3.5108734384281459]
								}, {
									"case":	3,
									"scores":	[-3.476967218928146, -3.2666981384281462, -4.5105490289281462, -3.5108734384281459, -3.7496394284281456, -3.5108734384281459, -3.5108734384281459, -3.5108734384281459, -3.5108734384281459]
								}]
						}, {
							"switch":	31,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	2115,
							"begin_column":	3,
							"end_line":	2117,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L2115\", 9, &(object), sizeof (object), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags)))\n    if (object->u.regex.regex) {\n        _efree((object->u.regex.regex));\n    }\n", "if (!__is_neg(\"\", \"L2115\", 9, &(object), sizeof (object), &(object->u.regex.regex), sizeof (object->u.regex.regex), &(object->u.regex.pce), sizeof (object->u.regex.pce), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object), &(object->u.regex.use_flags), sizeof (object->u.regex.use_flags), &(object->u.regex.flags), sizeof (object->u.regex.flags), &(object->u.regex.mode), sizeof (object->u.regex.mode), &(object->u.regex.preg_flags), sizeof (object->u.regex.preg_flags)) && (object->u.regex.regex)) {\n    _efree((object->u.regex.regex));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.84727007083699, -7.63700099033699, -8.88085188083699, -7.88117629033699, -8.11994228033699, -7.88117629033699, -7.88117629033699, -7.88117629033699, -7.88117629033699]
								}, {
									"case":	2,
									"scores":	[-6.29967722383699, -6.08940814333699, -7.3332590338369883, -6.33358344333699, -6.5723494333369885, -6.33358344333699, -6.33358344333699, -6.33358344333699, -6.33358344333699]
								}]
						}]
				}, {
					"line":	2110,
					"switches":	[{
							"switch":	20,
							"types":	[[], [], [], [], [], [], [], [], [], [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [], [], [], [], [], []],
							"begin_line":	2111,
							"begin_column":	0,
							"end_line":	2111,
							"end_column":	0,
							"patch_codes":	["(object)->current.pos++", "(object)->u.append.iterator->funcs->dtor(object->u.append.iterator)", "(object)->u.regex.pce->refcount++", "(object)->u.regex.pce->refcount--", "_array_init(((object)->u.caching.zcache), 0)", "_efree(((object)))", "_efree(((object)->current.str_key))", "_efree(((object)->u.regex.regex))", "_zval_copy_ctor(((object)->u.caching.zstr))", "_zval_ptr_dtor((&(object)->current.data))", "_zval_ptr_dtor((&(object)->inner.zobject))", "_zval_ptr_dtor((&(object)->u.append.zarrayit))", "_zval_ptr_dtor((&(object)->u.caching.zcache))", "_zval_ptr_dtor((&(object)->u.caching.zchildren))", "_zval_ptr_dtor((&(object)->u.caching.zstr))", "memset((object), 0, sizeof(spl_dual_it_object))", "object->u.append.iterator->funcs->dtor((object)->u.append.iterator)", "spl_append_it_fetch((object))", "spl_append_it_next((object))", "spl_append_it_next_iterator((object))", "spl_caching_it_next((object))", "spl_caching_it_rewind((object))", "spl_dual_it_fetch((object), 0)", "spl_dual_it_fetch((object), 1)", "spl_dual_it_free((object))", "spl_dual_it_next((object), 0)", "spl_dual_it_next((object), 1)", "spl_dual_it_require((object))", "spl_dual_it_rewind((object))", "zend_call_method(&(object)->u.append.zarrayit, spl_ce_ArrayIterator, &spl_ce_ArrayIterator->constructor, \"__construct\", sizeof (\"__construct\") - 1, ((void *)0), 0, ((void *)0), ((void *)0))", "zend_object_std_dtor(&(object)->std)", "zval_addref_p((object)->current.data)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((object))", "_efree((object->u.regex.regex))", "_zval_ptr_dtor((&object->inner.zobject))", "_zval_ptr_dtor((&object->u.append.zarrayit))", "_zval_ptr_dtor((&object->u.caching.zcache))", "exit(1)", "memcpy(&spl_handlers_dual_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memcpy(&spl_handlers_rec_it_it, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "object->u.append.iterator->funcs->dtor(object->u.append.iterator)", "object->u.caching.zcache = ((void *)0)", "object->u.regex.pce->refcount--", "php_error_docref0(((void *)0), (1 << 0L), \"The inner constructor wasn't initialized with an iterator instance\")", "spl_ce_RecursiveIteratorIterator->get_iterator = spl_recursive_it_get_iterator", "spl_ce_RecursiveIteratorIterator->iterator_funcs.funcs = &spl_recursive_it_iterator_funcs", "spl_handlers_dual_it.clone_obj = ((void *)0)", "spl_handlers_dual_it.get_method = spl_dual_it_get_method", "spl_handlers_rec_it_it.clone_obj = ((void *)0)", "spl_handlers_rec_it_it.get_method = spl_recursive_it_get_method", "spl_register_interface(&spl_ce_Countable, \"Countable\", spl_funcs_Countable)", "spl_register_interface(&spl_ce_OuterIterator, \"OuterIterator\", spl_funcs_OuterIterator)", "spl_register_interface(&spl_ce_RecursiveIterator, \"RecursiveIterator\", spl_funcs_RecursiveIterator)", "spl_register_interface(&spl_ce_SeekableIterator, \"SeekableIterator\", spl_funcs_SeekableIterator)", "spl_register_property(spl_ce_RegexIterator, \"replacement\", sizeof (\"replacement\") - 1, 0)", "spl_register_std_class(&spl_ce_EmptyIterator, \"EmptyIterator\", ((void *)0), spl_funcs_EmptyIterator)", "spl_register_std_class(&spl_ce_IteratorIterator, \"IteratorIterator\", spl_dual_it_new, spl_funcs_IteratorIterator)", "spl_register_std_class(&spl_ce_RecursiveIteratorIterator, \"RecursiveIteratorIterator\", spl_RecursiveIteratorIterator_new, spl_funcs_RecursiveIteratorIterator)", "spl_register_sub_class(&spl_ce_AppendIterator, spl_ce_IteratorIterator, \"AppendIterator\", spl_dual_it_new, spl_funcs_AppendIterator)", "spl_register_sub_class(&spl_ce_CachingIterator, spl_ce_IteratorIterator, \"CachingIterator\", spl_dual_it_new, spl_funcs_CachingIterator)", "spl_register_sub_class(&spl_ce_FilterIterator, spl_ce_IteratorIterator, \"FilterIterator\", spl_dual_it_new, spl_funcs_FilterIterator)", "spl_register_sub_class(&spl_ce_InfiniteIterator, spl_ce_IteratorIterator, \"InfiniteIterator\", spl_dual_it_new, spl_funcs_InfiniteIterator)", "spl_register_sub_class(&spl_ce_LimitIterator, spl_ce_IteratorIterator, \"LimitIterator\", spl_dual_it_new, spl_funcs_LimitIterator)", "spl_register_sub_class(&spl_ce_NoRewindIterator, spl_ce_IteratorIterator, \"NoRewindIterator\", spl_dual_it_new, spl_funcs_NoRewindIterator)", "spl_register_sub_class(&spl_ce_ParentIterator, spl_ce_RecursiveFilterIterator, \"ParentIterator\", spl_dual_it_new, spl_funcs_ParentIterator)", "spl_register_sub_class(&spl_ce_RecursiveCachingIterator, spl_ce_CachingIterator, \"RecursiveCachingIterator\", spl_dual_it_new, spl_funcs_RecursiveCachingIterator)", "spl_register_sub_class(&spl_ce_RecursiveFilterIterator, spl_ce_FilterIterator, \"RecursiveFilterIterator\", spl_dual_it_new, spl_funcs_RecursiveFilterIterator)", "spl_register_sub_class(&spl_ce_RecursiveRegexIterator, spl_ce_RegexIterator, \"RecursiveRegexIterator\", spl_dual_it_new, spl_funcs_RecursiveRegexIterator)", "spl_register_sub_class(&spl_ce_RecursiveTreeIterator, spl_ce_RecursiveIteratorIterator, \"RecursiveTreeIterator\", spl_RecursiveTreeIterator_new, spl_funcs_RecursiveTreeIterator)", "spl_register_sub_class(&spl_ce_RegexIterator, spl_ce_FilterIterator, \"RegexIterator\", spl_dual_it_new, spl_funcs_RegexIterator)", "zend_class_implements(spl_ce_CachingIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_CachingIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_EmptyIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_IteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_OuterIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveCachingIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveFilterIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_RecursiveIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, spl_ce_OuterIterator)", "zend_class_implements(spl_ce_RecursiveIteratorIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_RecursiveRegexIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SeekableIterator, 1, zend_ce_iterator)", "zend_clear_exception()", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CALL_TOSTRING\", sizeof (\"CALL_TOSTRING\") - 1, (long)CIT_CALL_TOSTRING)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"FULL_CACHE\", sizeof (\"FULL_CACHE\") - 1, (long)CIT_FULL_CACHE)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_CURRENT\", sizeof (\"TOSTRING_USE_CURRENT\") - 1, (long)CIT_TOSTRING_USE_CURRENT)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_INNER\", sizeof (\"TOSTRING_USE_INNER\") - 1, (long)CIT_TOSTRING_USE_INNER)", "zend_declare_class_constant_long(spl_ce_CachingIterator, \"TOSTRING_USE_KEY\", sizeof (\"TOSTRING_USE_KEY\") - 1, (long)CIT_TOSTRING_USE_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CATCH_GET_CHILD\", sizeof (\"CATCH_GET_CHILD\") - 1, (long)CIT_CATCH_GET_CHILD)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"CHILD_FIRST\", sizeof (\"CHILD_FIRST\") - 1, (long)RIT_CHILD_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"LEAVES_ONLY\", sizeof (\"LEAVES_ONLY\") - 1, (long)RIT_LEAVES_ONLY)", "zend_declare_class_constant_long(spl_ce_RecursiveIteratorIterator, \"SELF_FIRST\", sizeof (\"SELF_FIRST\") - 1, (long)RIT_SELF_FIRST)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_CURRENT\", sizeof (\"BYPASS_CURRENT\") - 1, (long)RTIT_BYPASS_CURRENT)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"BYPASS_KEY\", sizeof (\"BYPASS_KEY\") - 1, (long)RTIT_BYPASS_KEY)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_HAS_NEXT\", sizeof (\"PREFIX_END_HAS_NEXT\") - 1, (long)3)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_END_LAST\", sizeof (\"PREFIX_END_LAST\") - 1, (long)4)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_LEFT\", sizeof (\"PREFIX_LEFT\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_HAS_NEXT\", sizeof (\"PREFIX_MID_HAS_NEXT\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_MID_LAST\", sizeof (\"PREFIX_MID_LAST\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_RecursiveTreeIterator, \"PREFIX_RIGHT\", sizeof (\"PREFIX_RIGHT\") - 1, (long)5)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"ALL_MATCHES\", sizeof (\"ALL_MATCHES\") - 1, (long)REGIT_MODE_ALL_MATCHES)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"GET_MATCH\", sizeof (\"GET_MATCH\") - 1, (long)REGIT_MODE_GET_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"MATCH\", sizeof (\"MATCH\") - 1, (long)REGIT_MODE_MATCH)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"REPLACE\", sizeof (\"REPLACE\") - 1, (long)REGIT_MODE_REPLACE)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"SPLIT\", sizeof (\"SPLIT\") - 1, (long)REGIT_MODE_SPLIT)", "zend_declare_class_constant_long(spl_ce_RegexIterator, \"USE_KEY\", sizeof (\"USE_KEY\") - 1, (long)REGIT_USE_KEY)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_dtor(&object->std)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the key of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Accessing the value of an EmptyIterator\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"An instance of RecursiveIterator or IteratorAggregate creating it is required\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_CURRENT\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Flags must contain only one of CALL_TOSTRING, TOSTRING_USE_KEY, TOSTRING_USE_CURRENT, TOSTRING_USE_INNER\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag CALL_TO_STRING is not possible\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Unsetting flag TOSTRING_USE_INNER is not possible\", 0)", "zend_throw_exception(spl_ce_LogicException, \"Class to downcast to not found or not base class or does not implement Traversable\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter count must either be -1 or a value greater than or equal 0\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter max_depth must be >= -1\", 0)", "zend_throw_exception(spl_ce_OutOfRangeException, \"Parameter offset must be >= 0\", 0)", "zend_throw_exception(spl_ce_UnexpectedValueException, \"Objects returned by RecursiveIterator::getChildren() must implement RecursiveIterator\", 0)", "zend_throw_exception_ex(spl_ce_BadMethodCallException, 0, \"Classes derived from %s must call %s::__construct()\", (spl_ce_AppendIterator)->name, (spl_ce_AppendIterator)->name)", "zend_throw_exception_ex(spl_ce_OutOfRangeException, 0, \"Use RecursiveTreeIterator::PREFIX_* constant\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.346415224972028]
								}, {
									"case":	2,
									"scores":	[-5.346415224972028]
								}, {
									"case":	3,
									"scores":	[-5.346415224972028]
								}, {
									"case":	4,
									"scores":	[-5.346415224972028]
								}, {
									"case":	5,
									"scores":	[-5.346415224972028]
								}, {
									"case":	6,
									"scores":	[-5.346415224972028]
								}, {
									"case":	7,
									"scores":	[-5.346415224972028]
								}, {
									"case":	8,
									"scores":	[-5.346415224972028]
								}, {
									"case":	9,
									"scores":	[-5.346415224972028]
								}, {
									"case":	10,
									"scores":	[-5.346415224972028]
								}, {
									"case":	11,
									"scores":	[-5.346415224972028]
								}, {
									"case":	12,
									"scores":	[-5.346415224972028]
								}, {
									"case":	13,
									"scores":	[-5.346415224972028]
								}, {
									"case":	14,
									"scores":	[-5.346415224972028]
								}, {
									"case":	15,
									"scores":	[-5.346415224972028]
								}, {
									"case":	16,
									"scores":	[-5.346415224972028]
								}, {
									"case":	17,
									"scores":	[-5.346415224972028]
								}, {
									"case":	18,
									"scores":	[-5.346415224972028]
								}, {
									"case":	19,
									"scores":	[-5.346415224972028]
								}, {
									"case":	20,
									"scores":	[-5.346415224972028]
								}, {
									"case":	21,
									"scores":	[-5.346415224972028]
								}, {
									"case":	22,
									"scores":	[-5.346415224972028]
								}, {
									"case":	23,
									"scores":	[-5.346415224972028]
								}, {
									"case":	24,
									"scores":	[-5.346415224972028]
								}, {
									"case":	25,
									"scores":	[-5.346415224972028]
								}, {
									"case":	26,
									"scores":	[-5.346415224972028]
								}, {
									"case":	27,
									"scores":	[-5.346415224972028]
								}, {
									"case":	28,
									"scores":	[-5.346415224972028]
								}, {
									"case":	29,
									"scores":	[-5.346415224972028]
								}, {
									"case":	30,
									"scores":	[-5.346415224972028]
								}, {
									"case":	31,
									"scores":	[-5.346415224972028]
								}, {
									"case":	32,
									"scores":	[-5.346415224972028]
								}, {
									"case":	33,
									"scores":	[-5.346415224972028]
								}, {
									"case":	34,
									"scores":	[-5.346415224972028]
								}, {
									"case":	35,
									"scores":	[-5.346415224972028]
								}, {
									"case":	36,
									"scores":	[-5.346415224972028]
								}, {
									"case":	37,
									"scores":	[-5.346415224972028]
								}, {
									"case":	38,
									"scores":	[-5.346415224972028]
								}, {
									"case":	39,
									"scores":	[-5.346415224972028]
								}, {
									"case":	40,
									"scores":	[-5.346415224972028]
								}, {
									"case":	41,
									"scores":	[-5.346415224972028]
								}, {
									"case":	42,
									"scores":	[-5.346415224972028]
								}, {
									"case":	43,
									"scores":	[-5.346415224972028]
								}, {
									"case":	44,
									"scores":	[-5.346415224972028]
								}, {
									"case":	45,
									"scores":	[-5.346415224972028]
								}, {
									"case":	46,
									"scores":	[-5.346415224972028]
								}, {
									"case":	47,
									"scores":	[-5.346415224972028]
								}, {
									"case":	48,
									"scores":	[-5.346415224972028]
								}, {
									"case":	49,
									"scores":	[-5.346415224972028]
								}, {
									"case":	50,
									"scores":	[-5.346415224972028]
								}, {
									"case":	51,
									"scores":	[-5.346415224972028]
								}, {
									"case":	52,
									"scores":	[-5.346415224972028]
								}, {
									"case":	53,
									"scores":	[-5.346415224972028]
								}, {
									"case":	54,
									"scores":	[-5.346415224972028]
								}, {
									"case":	55,
									"scores":	[-5.346415224972028]
								}, {
									"case":	56,
									"scores":	[-5.346415224972028]
								}, {
									"case":	57,
									"scores":	[-5.346415224972028]
								}, {
									"case":	58,
									"scores":	[-5.346415224972028]
								}, {
									"case":	59,
									"scores":	[-5.346415224972028]
								}, {
									"case":	60,
									"scores":	[-5.346415224972028]
								}, {
									"case":	61,
									"scores":	[-5.346415224972028]
								}, {
									"case":	62,
									"scores":	[-5.346415224972028]
								}, {
									"case":	63,
									"scores":	[-5.346415224972028]
								}, {
									"case":	64,
									"scores":	[-5.346415224972028]
								}, {
									"case":	65,
									"scores":	[-5.346415224972028]
								}, {
									"case":	66,
									"scores":	[-5.346415224972028]
								}, {
									"case":	67,
									"scores":	[-5.346415224972028]
								}, {
									"case":	68,
									"scores":	[-5.346415224972028]
								}, {
									"case":	69,
									"scores":	[-5.346415224972028]
								}, {
									"case":	70,
									"scores":	[-5.346415224972028]
								}, {
									"case":	71,
									"scores":	[-5.346415224972028]
								}, {
									"case":	72,
									"scores":	[-5.346415224972028]
								}, {
									"case":	73,
									"scores":	[-5.346415224972028]
								}, {
									"case":	74,
									"scores":	[-5.346415224972028]
								}, {
									"case":	75,
									"scores":	[-5.346415224972028]
								}, {
									"case":	76,
									"scores":	[-5.346415224972028]
								}, {
									"case":	77,
									"scores":	[-5.346415224972028]
								}, {
									"case":	78,
									"scores":	[-5.346415224972028]
								}, {
									"case":	79,
									"scores":	[-5.346415224972028]
								}, {
									"case":	80,
									"scores":	[-5.346415224972028]
								}, {
									"case":	81,
									"scores":	[-5.346415224972028]
								}, {
									"case":	82,
									"scores":	[-5.346415224972028]
								}, {
									"case":	83,
									"scores":	[-5.346415224972028]
								}, {
									"case":	84,
									"scores":	[-5.346415224972028]
								}, {
									"case":	85,
									"scores":	[-5.346415224972028]
								}, {
									"case":	86,
									"scores":	[-5.346415224972028]
								}, {
									"case":	87,
									"scores":	[-5.346415224972028]
								}, {
									"case":	88,
									"scores":	[-5.346415224972028]
								}, {
									"case":	89,
									"scores":	[-5.346415224972028]
								}, {
									"case":	90,
									"scores":	[-5.346415224972028]
								}, {
									"case":	91,
									"scores":	[-5.346415224972028]
								}, {
									"case":	92,
									"scores":	[-5.346415224972028]
								}, {
									"case":	93,
									"scores":	[-5.346415224972028]
								}, {
									"case":	94,
									"scores":	[-5.346415224972028]
								}, {
									"case":	95,
									"scores":	[-5.346415224972028]
								}, {
									"case":	96,
									"scores":	[-5.346415224972028]
								}, {
									"case":	97,
									"scores":	[-5.346415224972028]
								}, {
									"case":	98,
									"scores":	[-5.346415224972028]
								}, {
									"case":	99,
									"scores":	[-5.346415224972028]
								}, {
									"case":	100,
									"scores":	[-5.346415224972028]
								}, {
									"case":	101,
									"scores":	[-5.346415224972028]
								}, {
									"case":	102,
									"scores":	[-5.346415224972028]
								}, {
									"case":	103,
									"scores":	[-5.346415224972028]
								}, {
									"case":	104,
									"scores":	[-5.346415224972028]
								}, {
									"case":	105,
									"scores":	[-5.346415224972028]
								}, {
									"case":	106,
									"scores":	[-5.346415224972028]
								}, {
									"case":	107,
									"scores":	[-5.346415224972028]
								}, {
									"case":	108,
									"scores":	[-5.346415224972028]
								}, {
									"case":	109,
									"scores":	[-5.346415224972028]
								}, {
									"case":	110,
									"scores":	[-5.346415224972028]
								}, {
									"case":	111,
									"scores":	[-5.346415224972028]
								}, {
									"case":	112,
									"scores":	[-5.346415224972028]
								}, {
									"case":	113,
									"scores":	[-5.346415224972028]
								}, {
									"case":	114,
									"scores":	[-5.346415224972028]
								}, {
									"case":	115,
									"scores":	[-5.346415224972028]
								}, {
									"case":	116,
									"scores":	[-5.346415224972028]
								}, {
									"case":	117,
									"scores":	[-5.346415224972028]
								}, {
									"case":	118,
									"scores":	[-5.346415224972028]
								}, {
									"case":	119,
									"scores":	[-5.346415224972028]
								}, {
									"case":	120,
									"scores":	[-5.346415224972028]
								}, {
									"case":	121,
									"scores":	[-5.346415224972028]
								}, {
									"case":	122,
									"scores":	[-5.346415224972028]
								}, {
									"case":	123,
									"scores":	[-5.346415224972028]
								}, {
									"case":	124,
									"scores":	[-5.346415224972028]
								}, {
									"case":	125,
									"scores":	[-5.346415224972028]
								}, {
									"case":	126,
									"scores":	[-5.346415224972028]
								}]
						}, {
							"switch":	21,
							"types":	[[3], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [2]],
							"begin_line":	2111,
							"begin_column":	2,
							"end_line":	2118,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L2111\", 3, &(object), sizeof (object), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object))) {\n    if (object->u.regex.pce) {\n        object->u.regex.pce->refcount--;\n    }\n    if (object->u.regex.regex) {\n        _efree((object->u.regex.regex));\n    }\n}\n", "if (object->dit_type == DIT_RegexIterator) {\n    if (object->u.regex.pce) {\n        object->u.regex.pce->refcount--;\n    }\n    if (object->u.regex.regex) {\n        _efree((object->u.regex.regex));\n    }\n}\n", "if ((object->dit_type == DIT_RegexIterator || object->dit_type == DIT_RecursiveRegexIterator) && !__is_neg(\"\", \"L2111\", 3, &(object), sizeof (object), &(object->dit_type), sizeof (object->dit_type), &(_object), sizeof (_object))) {\n    if (object->u.regex.pce) {\n        object->u.regex.pce->refcount--;\n    }\n    if (object->u.regex.regex) {\n        _efree((object->u.regex.regex));\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9658126658281461, -1.2052649984281452, -3.9547768284281464]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.9772371558281461, -1.2166894884281461, -3.9662013184281459]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	1,
			"case":	1,
			"size":	61
		}, {
			"switch":	1,
			"case":	3,
			"size":	61
		}, {
			"switch":	2,
			"case":	265,
			"size":	58
		}, {
			"switch":	3,
			"case":	1,
			"size":	58
		}, {
			"switch":	3,
			"case":	2,
			"size":	58
		}, {
			"switch":	3,
			"case":	14,
			"size":	58
		}, {
			"switch":	4,
			"case":	329,
			"size":	88
		}, {
			"switch":	5,
			"case":	1,
			"size":	88
		}, {
			"switch":	5,
			"case":	2,
			"size":	88
		}, {
			"switch":	5,
			"case":	3,
			"size":	88
		}, {
			"switch":	6,
			"case":	391,
			"size":	71
		}, {
			"switch":	7,
			"case":	1,
			"size":	71
		}, {
			"switch":	8,
			"case":	391,
			"size":	41
		}, {
			"switch":	9,
			"case":	1,
			"size":	41
		}, {
			"switch":	10,
			"case":	1,
			"size":	88
		}, {
			"switch":	10,
			"case":	2,
			"size":	88
		}, {
			"switch":	11,
			"case":	1,
			"size":	58
		}, {
			"switch":	11,
			"case":	2,
			"size":	58
		}, {
			"switch":	12,
			"case":	816,
			"size":	35
		}, {
			"switch":	13,
			"case":	1,
			"size":	35
		}, {
			"switch":	13,
			"case":	2,
			"size":	35
		}, {
			"switch":	13,
			"case":	3,
			"size":	35
		}, {
			"switch":	14,
			"case":	1,
			"size":	35
		}, {
			"switch":	14,
			"case":	2,
			"size":	35
		}, {
			"switch":	15,
			"case":	816,
			"size":	35
		}, {
			"switch":	16,
			"case":	1,
			"size":	35
		}, {
			"switch":	17,
			"case":	815,
			"size":	35
		}, {
			"switch":	18,
			"case":	147,
			"size":	113
		}, {
			"switch":	19,
			"case":	1,
			"size":	113
		}, {
			"switch":	21,
			"case":	1,
			"size":	3
		}, {
			"switch":	21,
			"case":	3,
			"size":	3
		}, {
			"switch":	22,
			"case":	153,
			"size":	9
		}, {
			"switch":	23,
			"case":	1,
			"size":	9
		}, {
			"switch":	23,
			"case":	2,
			"size":	9
		}, {
			"switch":	23,
			"case":	3,
			"size":	9
		}, {
			"switch":	24,
			"case":	164,
			"size":	16
		}, {
			"switch":	25,
			"case":	1,
			"size":	16
		}, {
			"switch":	26,
			"case":	1,
			"size":	9
		}, {
			"switch":	27,
			"case":	153,
			"size":	9
		}, {
			"switch":	28,
			"case":	1,
			"size":	9
		}, {
			"switch":	28,
			"case":	2,
			"size":	9
		}, {
			"switch":	28,
			"case":	3,
			"size":	9
		}, {
			"switch":	29,
			"case":	153,
			"size":	9
		}, {
			"switch":	30,
			"case":	1,
			"size":	9
		}, {
			"switch":	31,
			"case":	1,
			"size":	9
		}, {
			"switch":	31,
			"case":	2,
			"size":	9
		}],
	"func_locations":	[{
			"file":	"ext/spl/spl_iterators.c",
			"functions":	[{
					"function":	"__cmsg_nxthdr",
					"begin":	308,
					"end":	324
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"__zend_calloc",
					"begin":	103,
					"end":	108
				}, {
					"function":	"__zend_malloc",
					"begin":	93,
					"end":	101
				}, {
					"function":	"__zend_realloc",
					"begin":	110,
					"end":	118
				}, {
					"function":	"_zval_copy_ctor",
					"begin":	40,
					"end":	46
				}, {
					"function":	"_zval_dtor",
					"begin":	30,
					"end":	36
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"gc_remove_from_buffer",
					"begin":	187,
					"end":	194
				}, {
					"function":	"gc_zval_check_possible_root",
					"begin":	180,
					"end":	185
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"i_zend_is_true",
					"begin":	101,
					"end":	156
				}, {
					"function":	"i_zval_ptr_dtor",
					"begin":	80,
					"end":	99
				}, {
					"function":	"is_numeric_string",
					"begin":	102,
					"end":	224
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"php_set_error_handling",
					"begin":	292,
					"end":	295
				}, {
					"function":	"php_std_error_handling",
					"begin":	296,
					"end":	296
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"safe_free_zval_ptr_rel",
					"begin":	62,
					"end":	69
				}, {
					"function":	"smart_str_print_long",
					"begin":	153,
					"end":	157
				}, {
					"function":	"smart_str_print_unsigned",
					"begin":	159,
					"end":	163
				}, {
					"function":	"spl_RecursiveIteratorIterator_dtor",
					"begin":	849,
					"end":	866
				}, {
					"function":	"spl_RecursiveIteratorIterator_free_storage",
					"begin":	870,
					"end":	883
				}, {
					"function":	"spl_RecursiveIteratorIterator_new",
					"begin":	914,
					"end":	917
				}, {
					"function":	"spl_RecursiveIteratorIterator_new_ex",
					"begin":	887,
					"end":	910
				}, {
					"function":	"spl_RecursiveTreeIterator_new",
					"begin":	921,
					"end":	924
				}, {
					"function":	"spl_append_it_fetch",
					"begin":	3117,
					"end":	3126
				}, {
					"function":	"spl_append_it_next",
					"begin":	3128,
					"end":	3134
				}, {
					"function":	"spl_append_it_next_iterator",
					"begin":	3087,
					"end":	3115
				}, {
					"function":	"spl_caching_it_has_next",
					"begin":	2384,
					"end":	2387
				}, {
					"function":	"spl_caching_it_next",
					"begin":	2389,
					"end":	2472
				}, {
					"function":	"spl_caching_it_rewind",
					"begin":	2474,
					"end":	2479
				}, {
					"function":	"spl_caching_it_valid",
					"begin":	2379,
					"end":	2382
				}, {
					"function":	"spl_cit_check_flags",
					"begin":	1332,
					"end":	1342
				}, {
					"function":	"spl_dual_it_construct",
					"begin":	1344,
					"end":	1498
				}, {
					"function":	"spl_dual_it_dtor",
					"begin":	2071,
					"end":	2083
				}, {
					"function":	"spl_dual_it_fetch",
					"begin":	1579,
					"end":	1599
				}, {
					"function":	"spl_dual_it_free",
					"begin":	1536,
					"end":	1559
				}, {
					"function":	"spl_dual_it_free_storage",
					"begin":	2087,
					"end":	2124
				}, {
					"function":	"spl_dual_it_get_method",
					"begin":	1257,
					"end":	1274
				}, {
					"function":	"spl_dual_it_new",
					"begin":	2128,
					"end":	2143
				}, {
					"function":	"spl_dual_it_next",
					"begin":	1601,
					"end":	1610
				}, {
					"function":	"spl_dual_it_require",
					"begin":	1529,
					"end":	1534
				}, {
					"function":	"spl_dual_it_rewind",
					"begin":	1561,
					"end":	1568
				}, {
					"function":	"spl_dual_it_valid",
					"begin":	1570,
					"end":	1577
				}, {
					"function":	"spl_filesystem_iterator_to_object",
					"begin":	113,
					"end":	116
				}, {
					"function":	"spl_filesystem_object_to_iterator",
					"begin":	108,
					"end":	111
				}, {
					"function":	"spl_filter_it_fetch",
					"begin":	1719,
					"end":	1738
				}, {
					"function":	"spl_filter_it_next",
					"begin":	1746,
					"end":	1750
				}, {
					"function":	"spl_filter_it_rewind",
					"begin":	1740,
					"end":	1744
				}, {
					"function":	"spl_instantiate_arg_ex1",
					"begin":	33,
					"end":	39
				}, {
					"function":	"spl_instantiate_arg_ex2",
					"begin":	43,
					"end":	49
				}, {
					"function":	"spl_iterator_apply",
					"begin":	3268,
					"end":	3304
				}, {
					"function":	"spl_iterator_count_apply",
					"begin":	3381,
					"end":	3385
				}, {
					"function":	"spl_iterator_func_apply",
					"begin":	3413,
					"end":	3428
				}, {
					"function":	"spl_iterator_to_array_apply",
					"begin":	3307,
					"end":	3342
				}, {
					"function":	"spl_iterator_to_values_apply",
					"begin":	3345,
					"end":	3359
				}, {
					"function":	"spl_limit_it_seek",
					"begin":	2238,
					"end":	2276
				}, {
					"function":	"spl_limit_it_valid",
					"begin":	2228,
					"end":	2236
				}, {
					"function":	"spl_recursive_it_dtor",
					"begin":	129,
					"end":	145
				}, {
					"function":	"spl_recursive_it_get_current_data",
					"begin":	173,
					"end":	179
				}, {
					"function":	"spl_recursive_it_get_current_key",
					"begin":	181,
					"end":	192
				}, {
					"function":	"spl_recursive_it_get_iterator",
					"begin":	396,
					"end":	412
				}, {
					"function":	"spl_recursive_it_get_method",
					"begin":	824,
					"end":	846
				}, {
					"function":	"spl_recursive_it_it_construct",
					"begin":	423,
					"end":	552
				}, {
					"function":	"spl_recursive_it_move_forward",
					"begin":	386,
					"end":	389
				}, {
					"function":	"spl_recursive_it_move_forward_ex",
					"begin":	194,
					"end":	359
				}, {
					"function":	"spl_recursive_it_rewind",
					"begin":	391,
					"end":	394
				}, {
					"function":	"spl_recursive_it_rewind_ex",
					"begin":	361,
					"end":	384
				}, {
					"function":	"spl_recursive_it_valid",
					"begin":	166,
					"end":	171
				}, {
					"function":	"spl_recursive_it_valid_ex",
					"begin":	147,
					"end":	164
				}, {
					"function":	"spl_recursive_tree_iterator_get_entry",
					"begin":	998,
					"end":	1017
				}, {
					"function":	"spl_recursive_tree_iterator_get_postfix",
					"begin":	1019,
					"end":	1022
				}, {
					"function":	"spl_recursive_tree_iterator_get_prefix",
					"begin":	963,
					"end":	996
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"zend_arg_types_stack_2_pop",
					"begin":	355,
					"end":	363
				}, {
					"function":	"zend_arg_types_stack_3_pop",
					"begin":	365,
					"end":	374
				}, {
					"function":	"zend_dval_to_lval",
					"begin":	77,
					"end":	83
				}, {
					"function":	"zend_inline_hash_func",
					"begin":	261,
					"end":	288
				}, {
					"function":	"zend_memnstr",
					"begin":	226,
					"end":	257
				}, {
					"function":	"zend_memrchr",
					"begin":	259,
					"end":	274
				}, {
					"function":	"zend_objects_store_del_ref_by_handle",
					"begin":	71,
					"end":	73
				}, {
					"function":	"zend_ptr_stack_2_pop",
					"begin":	93,
					"end":	98
				}, {
					"function":	"zend_ptr_stack_2_push",
					"begin":	72,
					"end":	83
				}, {
					"function":	"zend_ptr_stack_3_pop",
					"begin":	85,
					"end":	91
				}, {
					"function":	"zend_ptr_stack_3_push",
					"begin":	58,
					"end":	70
				}, {
					"function":	"zend_ptr_stack_pop",
					"begin":	108,
					"end":	112
				}, {
					"function":	"zend_ptr_stack_push",
					"begin":	100,
					"end":	106
				}, {
					"function":	"zend_symtable_del",
					"begin":	355,
					"end":	359
				}, {
					"function":	"zend_symtable_exists",
					"begin":	369,
					"end":	373
				}, {
					"function":	"zend_symtable_find",
					"begin":	362,
					"end":	366
				}, {
					"function":	"zend_symtable_update",
					"begin":	348,
					"end":	352
				}, {
					"function":	"zend_symtable_update_current_key_ex",
					"begin":	375,
					"end":	379
				}, {
					"function":	"zend_vm_stack_alloc",
					"begin":	243,
					"end":	270
				}, {
					"function":	"zend_vm_stack_clear_multiple",
					"begin":	331,
					"end":	342
				}, {
					"function":	"zend_vm_stack_destroy",
					"begin":	197,
					"end":	206
				}, {
					"function":	"zend_vm_stack_extend",
					"begin":	208,
					"end":	213
				}, {
					"function":	"zend_vm_stack_free",
					"begin":	284,
					"end":	300
				}, {
					"function":	"zend_vm_stack_free_int",
					"begin":	272,
					"end":	282
				}, {
					"function":	"zend_vm_stack_get_arg",
					"begin":	344,
					"end":	353
				}, {
					"function":	"zend_vm_stack_init",
					"begin":	192,
					"end":	195
				}, {
					"function":	"zend_vm_stack_new_page",
					"begin":	183,
					"end":	190
				}, {
					"function":	"zend_vm_stack_pop",
					"begin":	231,
					"end":	241
				}, {
					"function":	"zend_vm_stack_push",
					"begin":	220,
					"end":	224
				}, {
					"function":	"zend_vm_stack_push_args",
					"begin":	302,
					"end":	329
				}, {
					"function":	"zend_vm_stack_push_nocheck",
					"begin":	226,
					"end":	229
				}, {
					"function":	"zend_vm_stack_top",
					"begin":	215,
					"end":	218
				}, {
					"function":	"zif_iterator_apply",
					"begin":	3433,
					"end":	3450
				}, {
					"function":	"zif_iterator_count",
					"begin":	3390,
					"end":	3402
				}, {
					"function":	"zif_iterator_to_array",
					"begin":	3364,
					"end":	3379
				}, {
					"function":	"zim_spl_AppendIterator___construct",
					"begin":	3138,
					"end":	3141
				}, {
					"function":	"zim_spl_AppendIterator_append",
					"begin":	3145,
					"end":	3168
				}, {
					"function":	"zim_spl_AppendIterator_getArrayIterator",
					"begin":	3236,
					"end":	3248
				}, {
					"function":	"zim_spl_AppendIterator_getIteratorIndex",
					"begin":	3220,
					"end":	3232
				}, {
					"function":	"zim_spl_AppendIterator_next",
					"begin":	3205,
					"end":	3216
				}, {
					"function":	"zim_spl_AppendIterator_rewind",
					"begin":	3172,
					"end":	3186
				}, {
					"function":	"zim_spl_AppendIterator_valid",
					"begin":	3190,
					"end":	3201
				}, {
					"function":	"zim_spl_CachingIterator___construct",
					"begin":	2483,
					"end":	2486
				}, {
					"function":	"zim_spl_CachingIterator___toString",
					"begin":	2550,
					"end":	2578
				}, {
					"function":	"zim_spl_CachingIterator_count",
					"begin":	2752,
					"end":	2768
				}, {
					"function":	"zim_spl_CachingIterator_getCache",
					"begin":	2682,
					"end":	2698
				}, {
					"function":	"zim_spl_CachingIterator_getFlags",
					"begin":	2703,
					"end":	2714
				}, {
					"function":	"zim_spl_CachingIterator_hasNext",
					"begin":	2535,
					"end":	2546
				}, {
					"function":	"zim_spl_CachingIterator_next",
					"begin":	2520,
					"end":	2531
				}, {
					"function":	"zim_spl_CachingIterator_offsetExists",
					"begin":	2659,
					"end":	2677
				}, {
					"function":	"zim_spl_CachingIterator_offsetGet",
					"begin":	2607,
					"end":	2631
				}, {
					"function":	"zim_spl_CachingIterator_offsetSet",
					"begin":	2582,
					"end":	2602
				}, {
					"function":	"zim_spl_CachingIterator_offsetUnset",
					"begin":	2636,
					"end":	2654
				}, {
					"function":	"zim_spl_CachingIterator_rewind",
					"begin":	2490,
					"end":	2501
				}, {
					"function":	"zim_spl_CachingIterator_setFlags",
					"begin":	2719,
					"end":	2747
				}, {
					"function":	"zim_spl_CachingIterator_valid",
					"begin":	2505,
					"end":	2516
				}, {
					"function":	"zim_spl_EmptyIterator_current",
					"begin":	3061,
					"end":	3067
				}, {
					"function":	"zim_spl_EmptyIterator_key",
					"begin":	3051,
					"end":	3057
				}, {
					"function":	"zim_spl_EmptyIterator_next",
					"begin":	3071,
					"end":	3076
				}, {
					"function":	"zim_spl_EmptyIterator_rewind",
					"begin":	3032,
					"end":	3037
				}, {
					"function":	"zim_spl_EmptyIterator_valid",
					"begin":	3041,
					"end":	3047
				}, {
					"function":	"zim_spl_FilterIterator___construct",
					"begin":	1502,
					"end":	1505
				}, {
					"function":	"zim_spl_FilterIterator_next",
					"begin":	1768,
					"end":	1778
				}, {
					"function":	"zim_spl_FilterIterator_rewind",
					"begin":	1754,
					"end":	1764
				}, {
					"function":	"zim_spl_InfiniteIterator___construct",
					"begin":	2996,
					"end":	2999
				}, {
					"function":	"zim_spl_InfiniteIterator_next",
					"begin":	3003,
					"end":	3022
				}, {
					"function":	"zim_spl_IteratorIterator___construct",
					"begin":	2865,
					"end":	2868
				}, {
					"function":	"zim_spl_LimitIterator___construct",
					"begin":	2280,
					"end":	2283
				}, {
					"function":	"zim_spl_LimitIterator_getPosition",
					"begin":	2340,
					"end":	2345
				}, {
					"function":	"zim_spl_LimitIterator_next",
					"begin":	2310,
					"end":	2320
				}, {
					"function":	"zim_spl_LimitIterator_rewind",
					"begin":	2287,
					"end":	2294
				}, {
					"function":	"zim_spl_LimitIterator_seek",
					"begin":	2324,
					"end":	2336
				}, {
					"function":	"zim_spl_LimitIterator_valid",
					"begin":	2298,
					"end":	2306
				}, {
					"function":	"zim_spl_NoRewindIterator___construct",
					"begin":	2887,
					"end":	2890
				}, {
					"function":	"zim_spl_NoRewindIterator_current",
					"begin":	2949,
					"end":	2963
				}, {
					"function":	"zim_spl_NoRewindIterator_key",
					"begin":	2918,
					"end":	2945
				}, {
					"function":	"zim_spl_NoRewindIterator_next",
					"begin":	2967,
					"end":	2977
				}, {
					"function":	"zim_spl_NoRewindIterator_rewind",
					"begin":	2894,
					"end":	2900
				}, {
					"function":	"zim_spl_NoRewindIterator_valid",
					"begin":	2904,
					"end":	2914
				}, {
					"function":	"zim_spl_ParentIterator___construct",
					"begin":	1832,
					"end":	1835
				}, {
					"function":	"zim_spl_RecursiveCachingIterator___construct",
					"begin":	2812,
					"end":	2815
				}, {
					"function":	"zim_spl_RecursiveCachingIterator_getChildren",
					"begin":	2834,
					"end":	2849
				}, {
					"function":	"zim_spl_RecursiveCachingIterator_hasChildren",
					"begin":	2819,
					"end":	2830
				}, {
					"function":	"zim_spl_RecursiveFilterIterator___construct",
					"begin":	1782,
					"end":	1785
				}, {
					"function":	"zim_spl_RecursiveFilterIterator_getChildren",
					"begin":	1810,
					"end":	1828
				}, {
					"function":	"zim_spl_RecursiveFilterIterator_hasChildren",
					"begin":	1789,
					"end":	1806
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator___construct",
					"begin":	556,
					"end":	559
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_beginChildren",
					"begin":	762,
					"end":	768
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_beginIteration",
					"begin":	694,
					"end":	700
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_callGetChildren",
					"begin":	739,
					"end":	758
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_callHasChildren",
					"begin":	714,
					"end":	735
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_current",
					"begin":	620,
					"end":	634
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_endChildren",
					"begin":	772,
					"end":	778
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_endIteration",
					"begin":	704,
					"end":	710
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_getDepth",
					"begin":	651,
					"end":	660
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_getInnerIterator",
					"begin":	680,
					"end":	690
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_getMaxDepth",
					"begin":	809,
					"end":	822
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_getSubIterator",
					"begin":	664,
					"end":	676
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_key",
					"begin":	589,
					"end":	616
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_next",
					"begin":	638,
					"end":	647
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_nextElement",
					"begin":	782,
					"end":	788
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_rewind",
					"begin":	563,
					"end":	572
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_setMaxDepth",
					"begin":	792,
					"end":	805
				}, {
					"function":	"zim_spl_RecursiveIteratorIterator_valid",
					"begin":	576,
					"end":	585
				}, {
					"function":	"zim_spl_RecursiveRegexIterator___construct",
					"begin":	2038,
					"end":	2041
				}, {
					"function":	"zim_spl_RecursiveRegexIterator_getChildren",
					"begin":	2045,
					"end":	2066
				}, {
					"function":	"zim_spl_RecursiveTreeIterator___construct",
					"begin":	1026,
					"end":	1029
				}, {
					"function":	"zim_spl_RecursiveTreeIterator_current",
					"begin":	1092,
					"end":	1136
				}, {
					"function":	"zim_spl_RecursiveTreeIterator_getEntry",
					"begin":	1066,
					"end":	1075
				}, {
					"function":	"zim_spl_RecursiveTreeIterator_getPostfix",
					"begin":	1079,
					"end":	1088
				}, {
					"function":	"zim_spl_RecursiveTreeIterator_getPrefix",
					"begin":	1054,
					"end":	1062
				}, {
					"function":	"zim_spl_RecursiveTreeIterator_key",
					"begin":	1140,
					"end":	1206
				}, {
					"function":	"zim_spl_RecursiveTreeIterator_setPrefixPart",
					"begin":	1033,
					"end":	1050
				}, {
					"function":	"zim_spl_RegexIterator___construct",
					"begin":	1840,
					"end":	1843
				}, {
					"function":	"zim_spl_RegexIterator_accept",
					"begin":	1847,
					"end":	1943
				}, {
					"function":	"zim_spl_RegexIterator_getFlags",
					"begin":	1979,
					"end":	1988
				}, {
					"function":	"zim_spl_RegexIterator_getMode",
					"begin":	1947,
					"end":	1956
				}, {
					"function":	"zim_spl_RegexIterator_getPregFlags",
					"begin":	2006,
					"end":	2019
				}, {
					"function":	"zim_spl_RegexIterator_setFlags",
					"begin":	1992,
					"end":	2002
				}, {
					"function":	"zim_spl_RegexIterator_setMode",
					"begin":	1960,
					"end":	1975
				}, {
					"function":	"zim_spl_RegexIterator_setPregFlags",
					"begin":	2023,
					"end":	2034
				}, {
					"function":	"zim_spl_dual_it_current",
					"begin":	1684,
					"end":	1699
				}, {
					"function":	"zim_spl_dual_it_getInnerIterator",
					"begin":	1512,
					"end":	1527
				}, {
					"function":	"zim_spl_dual_it_key",
					"begin":	1656,
					"end":	1674
				}, {
					"function":	"zim_spl_dual_it_next",
					"begin":	1705,
					"end":	1717
				}, {
					"function":	"zim_spl_dual_it_rewind",
					"begin":	1616,
					"end":	1628
				}, {
					"function":	"zim_spl_dual_it_valid",
					"begin":	1635,
					"end":	1646
				}, {
					"function":	"zm_startup_spl_iterators",
					"begin":	3465,
					"end":	3562
				}, {
					"function":	"zval_addref_p",
					"begin":	386,
					"end":	388
				}, {
					"function":	"zval_delref_p",
					"begin":	390,
					"end":	392
				}, {
					"function":	"zval_isref_p",
					"begin":	394,
					"end":	396
				}, {
					"function":	"zval_refcount_p",
					"begin":	378,
					"end":	380
				}, {
					"function":	"zval_set_isref_p",
					"begin":	398,
					"end":	400
				}, {
					"function":	"zval_set_isref_to_p",
					"begin":	406,
					"end":	408
				}, {
					"function":	"zval_set_refcount_p",
					"begin":	382,
					"end":	384
				}, {
					"function":	"zval_unset_isref_p",
					"begin":	402,
					"end":	404
				}]
		}]
}
