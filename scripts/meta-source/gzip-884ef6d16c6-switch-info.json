{
	"switch_num":	32,
	"case_num":	[409, 409, 7, 409, 408, 5, 2, 553, 553, 1, 247, 3, 268, 14, 268, 78, 268, 131, 268, 75, 268, 6, 2, 268, 3, 2, 2, 247, 21, 2, 247, 1],
	"switch_cluster":	[[2, 6, 9, 13, 17, 19, 21, 22, 25, 26, 29, 31], [5, 11, 15, 24, 28], [0, 1, 3, 4, 7, 8, 10, 12, 14, 16, 18, 20, 23, 27, 30], []],
	"priority":	[{
			"file":	"bits.c",
			"line":	110,
			"primary_score":	999994,
			"second_score":	12251
		}, {
			"file":	"bits.c",
			"line":	111,
			"primary_score":	999994,
			"second_score":	12250
		}, {
			"file":	"bits.c",
			"line":	112,
			"primary_score":	999994,
			"second_score":	12249
		}, {
			"file":	"bits.c",
			"line":	120,
			"primary_score":	999994,
			"second_score":	12248
		}, {
			"file":	"bits.c",
			"line":	121,
			"primary_score":	999994,
			"second_score":	12247
		}, {
			"file":	"bits.c",
			"line":	142,
			"primary_score":	999994,
			"second_score":	108
		}, {
			"file":	"bits.c",
			"line":	143,
			"primary_score":	999994,
			"second_score":	119
		}, {
			"file":	"bits.c",
			"line":	144,
			"primary_score":	999994,
			"second_score":	118
		}, {
			"file":	"bits.c",
			"line":	145,
			"primary_score":	999994,
			"second_score":	113
		}, {
			"file":	"bits.c",
			"line":	146,
			"primary_score":	999994,
			"second_score":	112
		}, {
			"file":	"bits.c",
			"line":	148,
			"primary_score":	999994,
			"second_score":	107
		}, {
			"file":	"bits.c",
			"line":	149,
			"primary_score":	999994,
			"second_score":	106
		}, {
			"file":	"bits.c",
			"line":	162,
			"primary_score":	999994,
			"second_score":	247
		}, {
			"file":	"bits.c",
			"line":	163,
			"primary_score":	999994,
			"second_score":	246
		}, {
			"file":	"bits.c",
			"line":	164,
			"primary_score":	999994,
			"second_score":	241
		}, {
			"file":	"bits.c",
			"line":	165,
			"primary_score":	999994,
			"second_score":	240
		}, {
			"file":	"bits.c",
			"line":	167,
			"primary_score":	999994,
			"second_score":	239
		}, {
			"file":	"bits.c",
			"line":	175,
			"primary_score":	999994,
			"second_score":	90
		}, {
			"file":	"bits.c",
			"line":	176,
			"primary_score":	999995,
			"second_score":	89
		}, {
			"file":	"bits.c",
			"line":	180,
			"primary_score":	999994,
			"second_score":	84
		}, {
			"file":	"bits.c",
			"line":	181,
			"primary_score":	999994,
			"second_score":	83
		}, {
			"file":	"deflate.c",
			"line":	297,
			"primary_score":	999994,
			"second_score":	4052
		}, {
			"file":	"deflate.c",
			"line":	299,
			"primary_score":	999994,
			"second_score":	4051
		}, {
			"file":	"deflate.c",
			"line":	300,
			"primary_score":	999994,
			"second_score":	4050
		}, {
			"file":	"deflate.c",
			"line":	306,
			"primary_score":	999994,
			"second_score":	4049
		}, {
			"file":	"deflate.c",
			"line":	312,
			"primary_score":	999994,
			"second_score":	4048
		}, {
			"file":	"deflate.c",
			"line":	313,
			"primary_score":	999994,
			"second_score":	4047
		}, {
			"file":	"deflate.c",
			"line":	315,
			"primary_score":	999994,
			"second_score":	4046
		}, {
			"file":	"deflate.c",
			"line":	317,
			"primary_score":	999994,
			"second_score":	4045
		}, {
			"file":	"deflate.c",
			"line":	318,
			"primary_score":	999994,
			"second_score":	4044
		}, {
			"file":	"deflate.c",
			"line":	320,
			"primary_score":	999994,
			"second_score":	4043
		}, {
			"file":	"deflate.c",
			"line":	325,
			"primary_score":	999994,
			"second_score":	4042
		}, {
			"file":	"deflate.c",
			"line":	326,
			"primary_score":	999994,
			"second_score":	4041
		}, {
			"file":	"deflate.c",
			"line":	331,
			"primary_score":	999994,
			"second_score":	4040
		}, {
			"file":	"deflate.c",
			"line":	334,
			"primary_score":	999994,
			"second_score":	4013
		}, {
			"file":	"deflate.c",
			"line":	338,
			"primary_score":	999994,
			"second_score":	4012
		}, {
			"file":	"deflate.c",
			"line":	342,
			"primary_score":	999994,
			"second_score":	4011
		}, {
			"file":	"deflate.c",
			"line":	344,
			"primary_score":	999994,
			"second_score":	3995
		}, {
			"file":	"deflate.c",
			"line":	345,
			"primary_score":	999994,
			"second_score":	3994
		}, {
			"file":	"deflate.c",
			"line":	525,
			"primary_score":	999994,
			"second_score":	4010
		}, {
			"file":	"deflate.c",
			"line":	526,
			"primary_score":	999994,
			"second_score":	4009
		}, {
			"file":	"deflate.c",
			"line":	532,
			"primary_score":	999994,
			"second_score":	4008
		}, {
			"file":	"deflate.c",
			"line":	537,
			"primary_score":	999994,
			"second_score":	4007
		}, {
			"file":	"deflate.c",
			"line":	563,
			"primary_score":	999994,
			"second_score":	4006
		}, {
			"file":	"deflate.c",
			"line":	564,
			"primary_score":	999994,
			"second_score":	4005
		}, {
			"file":	"deflate.c",
			"line":	565,
			"primary_score":	999994,
			"second_score":	3997
		}, {
			"file":	"deflate.c",
			"line":	566,
			"primary_score":	999994,
			"second_score":	3996
		}, {
			"file":	"deflate.c",
			"line":	671,
			"primary_score":	999994,
			"second_score":	3982
		}, {
			"file":	"deflate.c",
			"line":	672,
			"primary_score":	999994,
			"second_score":	3981
		}, {
			"file":	"deflate.c",
			"line":	673,
			"primary_score":	999994,
			"second_score":	3980
		}, {
			"file":	"deflate.c",
			"line":	674,
			"primary_score":	999994,
			"second_score":	3979
		}, {
			"file":	"deflate.c",
			"line":	675,
			"primary_score":	999994,
			"second_score":	3978
		}, {
			"file":	"deflate.c",
			"line":	677,
			"primary_score":	999994,
			"second_score":	3977
		}, {
			"file":	"deflate.c",
			"line":	680,
			"primary_score":	999994,
			"second_score":	3976
		}, {
			"file":	"deflate.c",
			"line":	684,
			"primary_score":	999994,
			"second_score":	3850
		}, {
			"file":	"deflate.c",
			"line":	688,
			"primary_score":	999994,
			"second_score":	3849
		}, {
			"file":	"deflate.c",
			"line":	689,
			"primary_score":	999994,
			"second_score":	3848
		}, {
			"file":	"deflate.c",
			"line":	691,
			"primary_score":	999994,
			"second_score":	3847
		}, {
			"file":	"deflate.c",
			"line":	713,
			"primary_score":	999994,
			"second_score":	3846
		}, {
			"file":	"deflate.c",
			"line":	738,
			"primary_score":	999994,
			"second_score":	3845
		}, {
			"file":	"deflate.c",
			"line":	743,
			"primary_score":	999995,
			"second_score":	3844
		}, {
			"file":	"deflate.c",
			"line":	744,
			"primary_score":	999995,
			"second_score":	3843
		}, {
			"file":	"deflate.c",
			"line":	747,
			"primary_score":	999995,
			"second_score":	3835
		}, {
			"file":	"deflate.c",
			"line":	748,
			"primary_score":	999995,
			"second_score":	3834
		}, {
			"file":	"deflate.c",
			"line":	753,
			"primary_score":	999994,
			"second_score":	3969
		}, {
			"file":	"deflate.c",
			"line":	754,
			"primary_score":	999994,
			"second_score":	3968
		}, {
			"file":	"deflate.c",
			"line":	755,
			"primary_score":	999994,
			"second_score":	3967
		}, {
			"file":	"deflate.c",
			"line":	757,
			"primary_score":	999994,
			"second_score":	3833
		}, {
			"file":	"deflate.c",
			"line":	764,
			"primary_score":	999994,
			"second_score":	3832
		}, {
			"file":	"deflate.c",
			"line":	766,
			"primary_score":	999995,
			"second_score":	3830
		}, {
			"file":	"deflate.c",
			"line":	768,
			"primary_score":	999994,
			"second_score":	3820
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	58,
			"primary_score":	999992,
			"second_score":	6
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	59,
			"primary_score":	999992,
			"second_score":	5
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	60,
			"primary_score":	999992,
			"second_score":	4
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	70,
			"primary_score":	999992,
			"second_score":	3
		}, {
			"file":	"gnulib/lib/close-stream.c",
			"line":	77,
			"primary_score":	999992,
			"second_score":	2
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	81,
			"primary_score":	999992,
			"second_score":	25
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	86,
			"primary_score":	999992,
			"second_score":	24
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	93,
			"primary_score":	999992,
			"second_score":	21
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	95,
			"primary_score":	999992,
			"second_score":	15
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	107,
			"primary_score":	999992,
			"second_score":	14
		}, {
			"file":	"gnulib/lib/closein.c",
			"line":	109,
			"primary_score":	999992,
			"second_score":	1
		}, {
			"file":	"gnulib/lib/closeout.c",
			"line":	109,
			"primary_score":	999992,
			"second_score":	13
		}, {
			"file":	"gnulib/lib/closeout.c",
			"line":	122,
			"primary_score":	999992,
			"second_score":	7
		}, {
			"file":	"gnulib/lib/fd-safer.c",
			"line":	39,
			"primary_score":	999993,
			"second_score":	8254
		}, {
			"file":	"gnulib/lib/fd-safer.c",
			"line":	48,
			"primary_score":	999993,
			"second_score":	8253
		}, {
			"file":	"gnulib/lib/fflush.c",
			"line":	138,
			"primary_score":	1000000,
			"second_score":	8281
		}, {
			"file":	"gnulib/lib/fflush.c",
			"line":	139,
			"primary_score":	1000000,
			"second_score":	8280
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	38,
			"primary_score":	999998,
			"second_score":	8443
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	39,
			"primary_score":	999998,
			"second_score":	8442
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	40,
			"primary_score":	999998,
			"second_score":	8441
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	41,
			"primary_score":	999998,
			"second_score":	8440
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	42,
			"primary_score":	999998,
			"second_score":	8439
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	44,
			"primary_score":	999998,
			"second_score":	8438
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	45,
			"primary_score":	999998,
			"second_score":	8437
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	46,
			"primary_score":	999998,
			"second_score":	8289
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	47,
			"primary_score":	999998,
			"second_score":	8288
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	49,
			"primary_score":	999998,
			"second_score":	8287
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	55,
			"primary_score":	999998,
			"second_score":	8286
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	66,
			"primary_score":	999998,
			"second_score":	8285
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	69,
			"primary_score":	999998,
			"second_score":	8284
		}, {
			"file":	"gnulib/lib/fprintf.c",
			"line":	76,
			"primary_score":	999998,
			"second_score":	8283
		}, {
			"file":	"gnulib/lib/freadahead.c",
			"line":	29,
			"primary_score":	999992,
			"second_score":	23
		}, {
			"file":	"gnulib/lib/freadahead.c",
			"line":	31,
			"primary_score":	999992,
			"second_score":	22
		}, {
			"file":	"gnulib/lib/ignore-value.h",
			"line":	35,
			"primary_score":	999997,
			"second_score":	53
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	31,
			"primary_score":	999993,
			"second_score":	8261
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	33,
			"primary_score":	999993,
			"second_score":	8260
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	35,
			"primary_score":	999997,
			"second_score":	8259
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	36,
			"primary_score":	999997,
			"second_score":	8258
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	40,
			"primary_score":	999997,
			"second_score":	8257
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	42,
			"primary_score":	999997,
			"second_score":	8256
		}, {
			"file":	"gnulib/lib/open-safer.c",
			"line":	45,
			"primary_score":	999993,
			"second_score":	8255
		}, {
			"file":	"gnulib/lib/stat-time.h",
			"line":	107,
			"primary_score":	999997,
			"second_score":	87
		}, {
			"file":	"gnulib/lib/stat-time.h",
			"line":	135,
			"primary_score":	999994,
			"second_score":	12309
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	87,
			"primary_score":	999997,
			"second_score":	73
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	88,
			"primary_score":	999997,
			"second_score":	72
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	89,
			"primary_score":	999997,
			"second_score":	71
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	90,
			"primary_score":	999997,
			"second_score":	70
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	104,
			"primary_score":	999997,
			"second_score":	69
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	112,
			"primary_score":	999997,
			"second_score":	68
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	120,
			"primary_score":	999997,
			"second_score":	67
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	169,
			"primary_score":	999997,
			"second_score":	81
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	170,
			"primary_score":	999997,
			"second_score":	80
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	171,
			"primary_score":	999997,
			"second_score":	79
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	172,
			"primary_score":	999997,
			"second_score":	78
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	174,
			"primary_score":	999997,
			"second_score":	77
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	176,
			"primary_score":	999997,
			"second_score":	76
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	177,
			"primary_score":	999997,
			"second_score":	75
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	178,
			"primary_score":	999997,
			"second_score":	74
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	180,
			"primary_score":	999997,
			"second_score":	66
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	186,
			"primary_score":	999997,
			"second_score":	65
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	220,
			"primary_score":	999997,
			"second_score":	64
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	222,
			"primary_score":	999997,
			"second_score":	63
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	232,
			"primary_score":	999997,
			"second_score":	62
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	245,
			"primary_score":	999997,
			"second_score":	61
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	267,
			"primary_score":	999997,
			"second_score":	60
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	269,
			"primary_score":	999997,
			"second_score":	59
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	272,
			"primary_score":	999997,
			"second_score":	58
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	275,
			"primary_score":	999997,
			"second_score":	57
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	277,
			"primary_score":	999997,
			"second_score":	56
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	278,
			"primary_score":	999997,
			"second_score":	55
		}, {
			"file":	"gnulib/lib/utimens.c",
			"line":	386,
			"primary_score":	999997,
			"second_score":	82
		}, {
			"file":	"gnulib/lib/yesno.c",
			"line":	34,
			"primary_score":	1000000,
			"second_score":	8278
		}, {
			"file":	"gnulib/lib/yesno.c",
			"line":	53,
			"primary_score":	1000000,
			"second_score":	8277
		}, {
			"file":	"gnulib/lib/yesno.c",
			"line":	54,
			"primary_score":	1000000,
			"second_score":	8275
		}, {
			"file":	"gnulib/lib/yesno.c",
			"line":	55,
			"primary_score":	1000000,
			"second_score":	8274
		}, {
			"file":	"gnulib/lib/yesno.c",
			"line":	59,
			"primary_score":	1000000,
			"second_score":	8272
		}, {
			"file":	"gzip.c",
			"line":	410,
			"primary_score":	999992,
			"second_score":	12398
		}, {
			"file":	"gzip.c",
			"line":	411,
			"primary_score":	999992,
			"second_score":	12397
		}, {
			"file":	"gzip.c",
			"line":	413,
			"primary_score":	999992,
			"second_score":	12396
		}, {
			"file":	"gzip.c",
			"line":	415,
			"primary_score":	999992,
			"second_score":	12395
		}, {
			"file":	"gzip.c",
			"line":	416,
			"primary_score":	999992,
			"second_score":	12390
		}, {
			"file":	"gzip.c",
			"line":	418,
			"primary_score":	999992,
			"second_score":	12389
		}, {
			"file":	"gzip.c",
			"line":	421,
			"primary_score":	999992,
			"second_score":	12388
		}, {
			"file":	"gzip.c",
			"line":	425,
			"primary_score":	999992,
			"second_score":	12387
		}, {
			"file":	"gzip.c",
			"line":	426,
			"primary_score":	999992,
			"second_score":	12377
		}, {
			"file":	"gzip.c",
			"line":	447,
			"primary_score":	999992,
			"second_score":	12376
		}, {
			"file":	"gzip.c",
			"line":	448,
			"primary_score":	999992,
			"second_score":	12375
		}, {
			"file":	"gzip.c",
			"line":	450,
			"primary_score":	999992,
			"second_score":	12374
		}, {
			"file":	"gzip.c",
			"line":	452,
			"primary_score":	999992,
			"second_score":	9084
		}, {
			"file":	"gzip.c",
			"line":	468,
			"primary_score":	999992,
			"second_score":	9085
		}, {
			"file":	"gzip.c",
			"line":	486,
			"primary_score":	1000000,
			"second_score":	9087
		}, {
			"file":	"gzip.c",
			"line":	503,
			"primary_score":	1000000,
			"second_score":	9083
		}, {
			"file":	"gzip.c",
			"line":	504,
			"primary_score":	1000000,
			"second_score":	9082
		}, {
			"file":	"gzip.c",
			"line":	534,
			"primary_score":	999992,
			"second_score":	12373
		}, {
			"file":	"gzip.c",
			"line":	535,
			"primary_score":	999992,
			"second_score":	12371
		}, {
			"file":	"gzip.c",
			"line":	537,
			"primary_score":	999992,
			"second_score":	12369
		}, {
			"file":	"gzip.c",
			"line":	541,
			"primary_score":	999992,
			"second_score":	12368
		}, {
			"file":	"gzip.c",
			"line":	546,
			"primary_score":	1000000,
			"second_score":	8265
		}, {
			"file":	"gzip.c",
			"line":	551,
			"primary_score":	999992,
			"second_score":	12366
		}, {
			"file":	"gzip.c",
			"line":	554,
			"primary_score":	999992,
			"second_score":	12365
		}, {
			"file":	"gzip.c",
			"line":	555,
			"primary_score":	999992,
			"second_score":	12364
		}, {
			"file":	"gzip.c",
			"line":	556,
			"primary_score":	999992,
			"second_score":	12363
		}, {
			"file":	"gzip.c",
			"line":	557,
			"primary_score":	999992,
			"second_score":	12362
		}, {
			"file":	"gzip.c",
			"line":	559,
			"primary_score":	999992,
			"second_score":	12361
		}, {
			"file":	"gzip.c",
			"line":	565,
			"primary_score":	999992,
			"second_score":	12360
		}, {
			"file":	"gzip.c",
			"line":	566,
			"primary_score":	999992,
			"second_score":	12359
		}, {
			"file":	"gzip.c",
			"line":	569,
			"primary_score":	999992,
			"second_score":	12324
		}, {
			"file":	"gzip.c",
			"line":	570,
			"primary_score":	999993,
			"second_score":	9031
		}, {
			"file":	"gzip.c",
			"line":	573,
			"primary_score":	999993,
			"second_score":	9030
		}, {
			"file":	"gzip.c",
			"line":	574,
			"primary_score":	999993,
			"second_score":	9029
		}, {
			"file":	"gzip.c",
			"line":	577,
			"primary_score":	999995,
			"second_score":	12323
		}, {
			"file":	"gzip.c",
			"line":	579,
			"primary_score":	999993,
			"second_score":	40
		}, {
			"file":	"gzip.c",
			"line":	582,
			"primary_score":	999993,
			"second_score":	39
		}, {
			"file":	"gzip.c",
			"line":	590,
			"primary_score":	999993,
			"second_score":	101
		}, {
			"file":	"gzip.c",
			"line":	591,
			"primary_score":	999993,
			"second_score":	43
		}, {
			"file":	"gzip.c",
			"line":	593,
			"primary_score":	999994,
			"second_score":	100
		}, {
			"file":	"gzip.c",
			"line":	595,
			"primary_score":	999995,
			"second_score":	99
		}, {
			"file":	"gzip.c",
			"line":	596,
			"primary_score":	999995,
			"second_score":	98
		}, {
			"file":	"gzip.c",
			"line":	610,
			"primary_score":	999995,
			"second_score":	12322
		}, {
			"file":	"gzip.c",
			"line":	633,
			"primary_score":	999995,
			"second_score":	12321
		}, {
			"file":	"gzip.c",
			"line":	634,
			"primary_score":	999995,
			"second_score":	12320
		}, {
			"file":	"gzip.c",
			"line":	636,
			"primary_score":	999995,
			"second_score":	12319
		}, {
			"file":	"gzip.c",
			"line":	637,
			"primary_score":	999995,
			"second_score":	12318
		}, {
			"file":	"gzip.c",
			"line":	639,
			"primary_score":	999995,
			"second_score":	12317
		}, {
			"file":	"gzip.c",
			"line":	640,
			"primary_score":	999995,
			"second_score":	12316
		}, {
			"file":	"gzip.c",
			"line":	643,
			"primary_score":	999995,
			"second_score":	12315
		}, {
			"file":	"gzip.c",
			"line":	648,
			"primary_score":	999995,
			"second_score":	12313
		}, {
			"file":	"gzip.c",
			"line":	649,
			"primary_score":	999995,
			"second_score":	12312
		}, {
			"file":	"gzip.c",
			"line":	650,
			"primary_score":	999995,
			"second_score":	12311
		}, {
			"file":	"gzip.c",
			"line":	651,
			"primary_score":	999995,
			"second_score":	12310
		}, {
			"file":	"gzip.c",
			"line":	653,
			"primary_score":	999995,
			"second_score":	12308
		}, {
			"file":	"gzip.c",
			"line":	654,
			"primary_score":	999995,
			"second_score":	12304
		}, {
			"file":	"gzip.c",
			"line":	655,
			"primary_score":	999995,
			"second_score":	12303
		}, {
			"file":	"gzip.c",
			"line":	656,
			"primary_score":	999995,
			"second_score":	12302
		}, {
			"file":	"gzip.c",
			"line":	658,
			"primary_score":	999995,
			"second_score":	12301
		}, {
			"file":	"gzip.c",
			"line":	664,
			"primary_score":	999995,
			"second_score":	12300
		}, {
			"file":	"gzip.c",
			"line":	671,
			"primary_score":	999995,
			"second_score":	12299
		}, {
			"file":	"gzip.c",
			"line":	672,
			"primary_score":	999995,
			"second_score":	12298
		}, {
			"file":	"gzip.c",
			"line":	674,
			"primary_score":	999995,
			"second_score":	45
		}, {
			"file":	"gzip.c",
			"line":	675,
			"primary_score":	999995,
			"second_score":	42
		}, {
			"file":	"gzip.c",
			"line":	682,
			"primary_score":	999995,
			"second_score":	41
		}, {
			"file":	"gzip.c",
			"line":	705,
			"primary_score":	999993,
			"second_score":	9028
		}, {
			"file":	"gzip.c",
			"line":	713,
			"primary_score":	999993,
			"second_score":	9021
		}, {
			"file":	"gzip.c",
			"line":	714,
			"primary_score":	999993,
			"second_score":	8994
		}, {
			"file":	"gzip.c",
			"line":	718,
			"primary_score":	999993,
			"second_score":	8993
		}, {
			"file":	"gzip.c",
			"line":	732,
			"primary_score":	999993,
			"second_score":	8992
		}, {
			"file":	"gzip.c",
			"line":	734,
			"primary_score":	999997,
			"second_score":	8991
		}, {
			"file":	"gzip.c",
			"line":	742,
			"primary_score":	999997,
			"second_score":	8990
		}, {
			"file":	"gzip.c",
			"line":	749,
			"primary_score":	999997,
			"second_score":	8989
		}, {
			"file":	"gzip.c",
			"line":	757,
			"primary_score":	999997,
			"second_score":	8988
		}, {
			"file":	"gzip.c",
			"line":	759,
			"primary_score":	999997,
			"second_score":	8987
		}, {
			"file":	"gzip.c",
			"line":	767,
			"primary_score":	999997,
			"second_score":	8986
		}, {
			"file":	"gzip.c",
			"line":	779,
			"primary_score":	999993,
			"second_score":	8985
		}, {
			"file":	"gzip.c",
			"line":	780,
			"primary_score":	999993,
			"second_score":	8984
		}, {
			"file":	"gzip.c",
			"line":	781,
			"primary_score":	999993,
			"second_score":	8983
		}, {
			"file":	"gzip.c",
			"line":	787,
			"primary_score":	999993,
			"second_score":	8982
		}, {
			"file":	"gzip.c",
			"line":	790,
			"primary_score":	999997,
			"second_score":	8981
		}, {
			"file":	"gzip.c",
			"line":	795,
			"primary_score":	999993,
			"second_score":	8934
		}, {
			"file":	"gzip.c",
			"line":	796,
			"primary_score":	999993,
			"second_score":	8930
		}, {
			"file":	"gzip.c",
			"line":	798,
			"primary_score":	999993,
			"second_score":	8929
		}, {
			"file":	"gzip.c",
			"line":	799,
			"primary_score":	999993,
			"second_score":	8928
		}, {
			"file":	"gzip.c",
			"line":	800,
			"primary_score":	999993,
			"second_score":	8871
		}, {
			"file":	"gzip.c",
			"line":	805,
			"primary_score":	999993,
			"second_score":	8870
		}, {
			"file":	"gzip.c",
			"line":	816,
			"primary_score":	999993,
			"second_score":	8869
		}, {
			"file":	"gzip.c",
			"line":	820,
			"primary_score":	999997,
			"second_score":	8868
		}, {
			"file":	"gzip.c",
			"line":	822,
			"primary_score":	999997,
			"second_score":	8246
		}, {
			"file":	"gzip.c",
			"line":	828,
			"primary_score":	999993,
			"second_score":	8245
		}, {
			"file":	"gzip.c",
			"line":	830,
			"primary_score":	999993,
			"second_score":	8243
		}, {
			"file":	"gzip.c",
			"line":	836,
			"primary_score":	999993,
			"second_score":	8242
		}, {
			"file":	"gzip.c",
			"line":	837,
			"primary_score":	999993,
			"second_score":	8241
		}, {
			"file":	"gzip.c",
			"line":	842,
			"primary_score":	999994,
			"second_score":	102
		}, {
			"file":	"gzip.c",
			"line":	843,
			"primary_score":	999995,
			"second_score":	97
		}, {
			"file":	"gzip.c",
			"line":	850,
			"primary_score":	999994,
			"second_score":	96
		}, {
			"file":	"gzip.c",
			"line":	853,
			"primary_score":	999994,
			"second_score":	95
		}, {
			"file":	"gzip.c",
			"line":	855,
			"primary_score":	999997,
			"second_score":	94
		}, {
			"file":	"gzip.c",
			"line":	856,
			"primary_score":	999997,
			"second_score":	93
		}, {
			"file":	"gzip.c",
			"line":	858,
			"primary_score":	999997,
			"second_score":	92
		}, {
			"file":	"gzip.c",
			"line":	859,
			"primary_score":	999997,
			"second_score":	50
		}, {
			"file":	"gzip.c",
			"line":	862,
			"primary_score":	999997,
			"second_score":	49
		}, {
			"file":	"gzip.c",
			"line":	863,
			"primary_score":	999997,
			"second_score":	48
		}, {
			"file":	"gzip.c",
			"line":	864,
			"primary_score":	999997,
			"second_score":	47
		}, {
			"file":	"gzip.c",
			"line":	865,
			"primary_score":	999997,
			"second_score":	44
		}, {
			"file":	"gzip.c",
			"line":	867,
			"primary_score":	999997,
			"second_score":	43
		}, {
			"file":	"gzip.c",
			"line":	878,
			"primary_score":	999994,
			"second_score":	42
		}, {
			"file":	"gzip.c",
			"line":	885,
			"primary_score":	999994,
			"second_score":	41
		}, {
			"file":	"gzip.c",
			"line":	911,
			"primary_score":	999997,
			"second_score":	8867
		}, {
			"file":	"gzip.c",
			"line":	912,
			"primary_score":	999997,
			"second_score":	8866
		}, {
			"file":	"gzip.c",
			"line":	915,
			"primary_score":	999997,
			"second_score":	8865
		}, {
			"file":	"gzip.c",
			"line":	917,
			"primary_score":	999997,
			"second_score":	8265
		}, {
			"file":	"gzip.c",
			"line":	918,
			"primary_score":	999997,
			"second_score":	8264
		}, {
			"file":	"gzip.c",
			"line":	920,
			"primary_score":	999997,
			"second_score":	8263
		}, {
			"file":	"gzip.c",
			"line":	921,
			"primary_score":	999997,
			"second_score":	8262
		}, {
			"file":	"gzip.c",
			"line":	922,
			"primary_score":	999997,
			"second_score":	8252
		}, {
			"file":	"gzip.c",
			"line":	923,
			"primary_score":	999997,
			"second_score":	8251
		}, {
			"file":	"gzip.c",
			"line":	925,
			"primary_score":	999997,
			"second_score":	8250
		}, {
			"file":	"gzip.c",
			"line":	926,
			"primary_score":	999997,
			"second_score":	8249
		}, {
			"file":	"gzip.c",
			"line":	928,
			"primary_score":	1000000,
			"second_score":	8848
		}, {
			"file":	"gzip.c",
			"line":	943,
			"primary_score":	1000000,
			"second_score":	8266
		}, {
			"file":	"gzip.c",
			"line":	952,
			"primary_score":	999997,
			"second_score":	8248
		}, {
			"file":	"gzip.c",
			"line":	959,
			"primary_score":	999997,
			"second_score":	8247
		}, {
			"file":	"gzip.c",
			"line":	977,
			"primary_score":	999997,
			"second_score":	8977
		}, {
			"file":	"gzip.c",
			"line":	978,
			"primary_score":	999997,
			"second_score":	8976
		}, {
			"file":	"gzip.c",
			"line":	979,
			"primary_score":	999997,
			"second_score":	8975
		}, {
			"file":	"gzip.c",
			"line":	985,
			"primary_score":	999997,
			"second_score":	8974
		}, {
			"file":	"gzip.c",
			"line":	987,
			"primary_score":	999997,
			"second_score":	8973
		}, {
			"file":	"gzip.c",
			"line":	988,
			"primary_score":	999997,
			"second_score":	8972
		}, {
			"file":	"gzip.c",
			"line":	997,
			"primary_score":	999997,
			"second_score":	8965
		}, {
			"file":	"gzip.c",
			"line":	998,
			"primary_score":	999997,
			"second_score":	8964
		}, {
			"file":	"gzip.c",
			"line":	999,
			"primary_score":	999997,
			"second_score":	8963
		}, {
			"file":	"gzip.c",
			"line":	1003,
			"primary_score":	999997,
			"second_score":	8962
		}, {
			"file":	"gzip.c",
			"line":	1004,
			"primary_score":	999997,
			"second_score":	8954
		}, {
			"file":	"gzip.c",
			"line":	1005,
			"primary_score":	999997,
			"second_score":	8953
		}, {
			"file":	"gzip.c",
			"line":	1006,
			"primary_score":	999997,
			"second_score":	8952
		}, {
			"file":	"gzip.c",
			"line":	1007,
			"primary_score":	999997,
			"second_score":	8951
		}, {
			"file":	"gzip.c",
			"line":	1008,
			"primary_score":	999998,
			"second_score":	8950
		}, {
			"file":	"gzip.c",
			"line":	1009,
			"primary_score":	999998,
			"second_score":	8948
		}, {
			"file":	"gzip.c",
			"line":	1023,
			"primary_score":	999993,
			"second_score":	9009
		}, {
			"file":	"gzip.c",
			"line":	1026,
			"primary_score":	999993,
			"second_score":	9008
		}, {
			"file":	"gzip.c",
			"line":	1028,
			"primary_score":	999997,
			"second_score":	9007
		}, {
			"file":	"gzip.c",
			"line":	1029,
			"primary_score":	999997,
			"second_score":	9006
		}, {
			"file":	"gzip.c",
			"line":	1044,
			"primary_score":	999993,
			"second_score":	9005
		}, {
			"file":	"gzip.c",
			"line":	1045,
			"primary_score":	999993,
			"second_score":	8999
		}, {
			"file":	"gzip.c",
			"line":	1052,
			"primary_score":	999993,
			"second_score":	8997
		}, {
			"file":	"gzip.c",
			"line":	1068,
			"primary_score":	999993,
			"second_score":	9020
		}, {
			"file":	"gzip.c",
			"line":	1069,
			"primary_score":	999993,
			"second_score":	9019
		}, {
			"file":	"gzip.c",
			"line":	1070,
			"primary_score":	999993,
			"second_score":	9018
		}, {
			"file":	"gzip.c",
			"line":	1071,
			"primary_score":	999993,
			"second_score":	9017
		}, {
			"file":	"gzip.c",
			"line":	1072,
			"primary_score":	999993,
			"second_score":	9016
		}, {
			"file":	"gzip.c",
			"line":	1076,
			"primary_score":	999993,
			"second_score":	9015
		}, {
			"file":	"gzip.c",
			"line":	1077,
			"primary_score":	999993,
			"second_score":	9014
		}, {
			"file":	"gzip.c",
			"line":	1080,
			"primary_score":	999993,
			"second_score":	9013
		}, {
			"file":	"gzip.c",
			"line":	1082,
			"primary_score":	999993,
			"second_score":	9012
		}, {
			"file":	"gzip.c",
			"line":	1085,
			"primary_score":	999993,
			"second_score":	9011
		}, {
			"file":	"gzip.c",
			"line":	1088,
			"primary_score":	999993,
			"second_score":	9010
		}, {
			"file":	"gzip.c",
			"line":	1089,
			"primary_score":	999993,
			"second_score":	8996
		}, {
			"file":	"gzip.c",
			"line":	1090,
			"primary_score":	999993,
			"second_score":	8995
		}, {
			"file":	"gzip.c",
			"line":	1167,
			"primary_score":	999997,
			"second_score":	8980
		}, {
			"file":	"gzip.c",
			"line":	1169,
			"primary_score":	999997,
			"second_score":	8979
		}, {
			"file":	"gzip.c",
			"line":	1171,
			"primary_score":	999997,
			"second_score":	8978
		}, {
			"file":	"gzip.c",
			"line":	1173,
			"primary_score":	999997,
			"second_score":	8947
		}, {
			"file":	"gzip.c",
			"line":	1174,
			"primary_score":	999998,
			"second_score":	8946
		}, {
			"file":	"gzip.c",
			"line":	1188,
			"primary_score":	999998,
			"second_score":	8945
		}, {
			"file":	"gzip.c",
			"line":	1189,
			"primary_score":	999998,
			"second_score":	8941
		}, {
			"file":	"gzip.c",
			"line":	1192,
			"primary_score":	999998,
			"second_score":	8936
		}, {
			"file":	"gzip.c",
			"line":	1235,
			"primary_score":	999997,
			"second_score":	8935
		}, {
			"file":	"gzip.c",
			"line":	1257,
			"primary_score":	999992,
			"second_score":	8927
		}, {
			"file":	"gzip.c",
			"line":	1258,
			"primary_score":	999992,
			"second_score":	8926
		}, {
			"file":	"gzip.c",
			"line":	1259,
			"primary_score":	999992,
			"second_score":	8925
		}, {
			"file":	"gzip.c",
			"line":	1260,
			"primary_score":	999992,
			"second_score":	8924
		}, {
			"file":	"gzip.c",
			"line":	1261,
			"primary_score":	999992,
			"second_score":	8923
		}, {
			"file":	"gzip.c",
			"line":	1266,
			"primary_score":	999992,
			"second_score":	8922
		}, {
			"file":	"gzip.c",
			"line":	1273,
			"primary_score":	999994,
			"second_score":	8921
		}, {
			"file":	"gzip.c",
			"line":	1274,
			"primary_score":	999994,
			"second_score":	8902
		}, {
			"file":	"gzip.c",
			"line":	1275,
			"primary_score":	999994,
			"second_score":	8901
		}, {
			"file":	"gzip.c",
			"line":	1276,
			"primary_score":	999994,
			"second_score":	8900
		}, {
			"file":	"gzip.c",
			"line":	1277,
			"primary_score":	999994,
			"second_score":	8899
		}, {
			"file":	"gzip.c",
			"line":	1283,
			"primary_score":	999992,
			"second_score":	8898
		}, {
			"file":	"gzip.c",
			"line":	1284,
			"primary_score":	999992,
			"second_score":	8897
		}, {
			"file":	"gzip.c",
			"line":	1285,
			"primary_score":	999992,
			"second_score":	8896
		}, {
			"file":	"gzip.c",
			"line":	1286,
			"primary_score":	999992,
			"second_score":	8895
		}, {
			"file":	"gzip.c",
			"line":	1289,
			"primary_score":	999992,
			"second_score":	8894
		}, {
			"file":	"gzip.c",
			"line":	1292,
			"primary_score":	999993,
			"second_score":	8893
		}, {
			"file":	"gzip.c",
			"line":	1293,
			"primary_score":	999993,
			"second_score":	8892
		}, {
			"file":	"gzip.c",
			"line":	1300,
			"primary_score":	999993,
			"second_score":	8891
		}, {
			"file":	"gzip.c",
			"line":	1301,
			"primary_score":	999993,
			"second_score":	8890
		}, {
			"file":	"gzip.c",
			"line":	1303,
			"primary_score":	999993,
			"second_score":	8889
		}, {
			"file":	"gzip.c",
			"line":	1310,
			"primary_score":	999993,
			"second_score":	8888
		}, {
			"file":	"gzip.c",
			"line":	1317,
			"primary_score":	999993,
			"second_score":	8887
		}, {
			"file":	"gzip.c",
			"line":	1324,
			"primary_score":	999993,
			"second_score":	8886
		}, {
			"file":	"gzip.c",
			"line":	1325,
			"primary_score":	999993,
			"second_score":	8885
		}, {
			"file":	"gzip.c",
			"line":	1326,
			"primary_score":	999993,
			"second_score":	8884
		}, {
			"file":	"gzip.c",
			"line":	1327,
			"primary_score":	999993,
			"second_score":	8883
		}, {
			"file":	"gzip.c",
			"line":	1328,
			"primary_score":	999993,
			"second_score":	8882
		}, {
			"file":	"gzip.c",
			"line":	1334,
			"primary_score":	999993,
			"second_score":	8881
		}, {
			"file":	"gzip.c",
			"line":	1335,
			"primary_score":	999993,
			"second_score":	8880
		}, {
			"file":	"gzip.c",
			"line":	1337,
			"primary_score":	999993,
			"second_score":	8879
		}, {
			"file":	"gzip.c",
			"line":	1345,
			"primary_score":	999993,
			"second_score":	8878
		}, {
			"file":	"gzip.c",
			"line":	1356,
			"primary_score":	999993,
			"second_score":	8877
		}, {
			"file":	"gzip.c",
			"line":	1383,
			"primary_score":	999993,
			"second_score":	8876
		}, {
			"file":	"gzip.c",
			"line":	1386,
			"primary_score":	999993,
			"second_score":	8875
		}, {
			"file":	"gzip.c",
			"line":	1387,
			"primary_score":	999993,
			"second_score":	8874
		}, {
			"file":	"gzip.c",
			"line":	1426,
			"primary_score":	999992,
			"second_score":	8873
		}, {
			"file":	"gzip.c",
			"line":	1634,
			"primary_score":	1000000,
			"second_score":	8847
		}, {
			"file":	"gzip.c",
			"line":	1635,
			"primary_score":	1000000,
			"second_score":	8846
		}, {
			"file":	"gzip.c",
			"line":	1636,
			"primary_score":	1000000,
			"second_score":	8845
		}, {
			"file":	"gzip.c",
			"line":	1637,
			"primary_score":	1000000,
			"second_score":	8445
		}, {
			"file":	"gzip.c",
			"line":	1638,
			"primary_score":	1000000,
			"second_score":	8444
		}, {
			"file":	"gzip.c",
			"line":	1639,
			"primary_score":	1000000,
			"second_score":	8282
		}, {
			"file":	"gzip.c",
			"line":	1640,
			"primary_score":	1000000,
			"second_score":	8279
		}, {
			"file":	"gzip.c",
			"line":	1642,
			"primary_score":	1000000,
			"second_score":	8271
		}, {
			"file":	"gzip.c",
			"line":	1648,
			"primary_score":	1000000,
			"second_score":	8270
		}, {
			"file":	"gzip.c",
			"line":	1652,
			"primary_score":	1000000,
			"second_score":	8267
		}, {
			"file":	"gzip.c",
			"line":	1663,
			"primary_score":	999997,
			"second_score":	91
		}, {
			"file":	"gzip.c",
			"line":	1664,
			"primary_score":	999997,
			"second_score":	90
		}, {
			"file":	"gzip.c",
			"line":	1667,
			"primary_score":	999997,
			"second_score":	89
		}, {
			"file":	"gzip.c",
			"line":	1668,
			"primary_score":	999997,
			"second_score":	88
		}, {
			"file":	"gzip.c",
			"line":	1669,
			"primary_score":	999997,
			"second_score":	86
		}, {
			"file":	"gzip.c",
			"line":	1671,
			"primary_score":	999997,
			"second_score":	84
		}, {
			"file":	"gzip.c",
			"line":	1681,
			"primary_score":	999997,
			"second_score":	83
		}, {
			"file":	"gzip.c",
			"line":	1696,
			"primary_score":	999997,
			"second_score":	54
		}, {
			"file":	"gzip.c",
			"line":	1704,
			"primary_score":	999997,
			"second_score":	52
		}, {
			"file":	"gzip.c",
			"line":	1708,
			"primary_score":	999997,
			"second_score":	51
		}, {
			"file":	"gzip.c",
			"line":	1793,
			"primary_score":	999992,
			"second_score":	12358
		}, {
			"file":	"gzip.c",
			"line":	1794,
			"primary_score":	999992,
			"second_score":	12357
		}, {
			"file":	"gzip.c",
			"line":	1797,
			"primary_score":	999992,
			"second_score":	12356
		}, {
			"file":	"gzip.c",
			"line":	1799,
			"primary_score":	999992,
			"second_score":	12355
		}, {
			"file":	"gzip.c",
			"line":	1800,
			"primary_score":	999992,
			"second_score":	12354
		}, {
			"file":	"gzip.c",
			"line":	1802,
			"primary_score":	999992,
			"second_score":	12339
		}, {
			"file":	"gzip.c",
			"line":	1803,
			"primary_score":	999992,
			"second_score":	12338
		}, {
			"file":	"gzip.c",
			"line":	1804,
			"primary_score":	999992,
			"second_score":	12340
		}, {
			"file":	"gzip.c",
			"line":	1807,
			"primary_score":	999992,
			"second_score":	12337
		}, {
			"file":	"gzip.c",
			"line":	1808,
			"primary_score":	999992,
			"second_score":	12336
		}, {
			"file":	"gzip.c",
			"line":	1809,
			"primary_score":	999992,
			"second_score":	12335
		}, {
			"file":	"gzip.c",
			"line":	1811,
			"primary_score":	999992,
			"second_score":	12334
		}, {
			"file":	"gzip.c",
			"line":	1814,
			"primary_score":	999992,
			"second_score":	12326
		}, {
			"file":	"gzip.c",
			"line":	1815,
			"primary_score":	999992,
			"second_score":	12332
		}, {
			"file":	"gzip.c",
			"line":	1816,
			"primary_score":	999992,
			"second_score":	12325
		}, {
			"file":	"gzip.c",
			"line":	1836,
			"primary_score":	999992,
			"second_score":	38
		}, {
			"file":	"gzip.c",
			"line":	1838,
			"primary_score":	999992,
			"second_score":	37
		}, {
			"file":	"gzip.c",
			"line":	1839,
			"primary_score":	999992,
			"second_score":	36
		}, {
			"file":	"gzip.c",
			"line":	1840,
			"primary_score":	999992,
			"second_score":	35
		}, {
			"file":	"gzip.c",
			"line":	1841,
			"primary_score":	999992,
			"second_score":	34
		}, {
			"file":	"gzip.c",
			"line":	1842,
			"primary_score":	999992,
			"second_score":	33
		}, {
			"file":	"gzip.c",
			"line":	1843,
			"primary_score":	999992,
			"second_score":	32
		}, {
			"file":	"gzip.c",
			"line":	1844,
			"primary_score":	999992,
			"second_score":	31
		}, {
			"file":	"gzip.c",
			"line":	1845,
			"primary_score":	999992,
			"second_score":	30
		}, {
			"file":	"gzip.c",
			"line":	1846,
			"primary_score":	999992,
			"second_score":	29
		}, {
			"file":	"gzip.c",
			"line":	1847,
			"primary_score":	999992,
			"second_score":	28
		}, {
			"file":	"gzip.c",
			"line":	1849,
			"primary_score":	999992,
			"second_score":	27
		}, {
			"file":	"gzip.c",
			"line":	1854,
			"primary_score":	999992,
			"second_score":	26
		}, {
			"file":	"inflate.c",
			"line":	300,
			"primary_score":	999993,
			"second_score":	1248
		}, {
			"file":	"inflate.c",
			"line":	301,
			"primary_score":	999993,
			"second_score":	1247
		}, {
			"file":	"inflate.c",
			"line":	302,
			"primary_score":	999993,
			"second_score":	1246
		}, {
			"file":	"inflate.c",
			"line":	303,
			"primary_score":	999993,
			"second_score":	1245
		}, {
			"file":	"inflate.c",
			"line":	304,
			"primary_score":	999993,
			"second_score":	1244
		}, {
			"file":	"inflate.c",
			"line":	305,
			"primary_score":	999993,
			"second_score":	1243
		}, {
			"file":	"inflate.c",
			"line":	306,
			"primary_score":	999993,
			"second_score":	1242
		}, {
			"file":	"inflate.c",
			"line":	307,
			"primary_score":	999993,
			"second_score":	1241
		}, {
			"file":	"inflate.c",
			"line":	308,
			"primary_score":	999993,
			"second_score":	1240
		}, {
			"file":	"inflate.c",
			"line":	309,
			"primary_score":	999993,
			"second_score":	1239
		}, {
			"file":	"inflate.c",
			"line":	310,
			"primary_score":	999993,
			"second_score":	1238
		}, {
			"file":	"inflate.c",
			"line":	311,
			"primary_score":	999993,
			"second_score":	1237
		}, {
			"file":	"inflate.c",
			"line":	312,
			"primary_score":	999993,
			"second_score":	1236
		}, {
			"file":	"inflate.c",
			"line":	313,
			"primary_score":	999993,
			"second_score":	1235
		}, {
			"file":	"inflate.c",
			"line":	314,
			"primary_score":	999993,
			"second_score":	1234
		}, {
			"file":	"inflate.c",
			"line":	315,
			"primary_score":	999993,
			"second_score":	1233
		}, {
			"file":	"inflate.c",
			"line":	316,
			"primary_score":	999993,
			"second_score":	1232
		}, {
			"file":	"inflate.c",
			"line":	317,
			"primary_score":	999993,
			"second_score":	1231
		}, {
			"file":	"inflate.c",
			"line":	318,
			"primary_score":	999993,
			"second_score":	1230
		}, {
			"file":	"inflate.c",
			"line":	322,
			"primary_score":	999993,
			"second_score":	1229
		}, {
			"file":	"inflate.c",
			"line":	323,
			"primary_score":	999993,
			"second_score":	1228
		}, {
			"file":	"inflate.c",
			"line":	324,
			"primary_score":	999993,
			"second_score":	1226
		}, {
			"file":	"inflate.c",
			"line":	326,
			"primary_score":	999993,
			"second_score":	1138
		}, {
			"file":	"inflate.c",
			"line":	327,
			"primary_score":	999993,
			"second_score":	1137
		}, {
			"file":	"inflate.c",
			"line":	328,
			"primary_score":	999993,
			"second_score":	1136
		}, {
			"file":	"inflate.c",
			"line":	330,
			"primary_score":	999993,
			"second_score":	1135
		}, {
			"file":	"inflate.c",
			"line":	348,
			"primary_score":	999993,
			"second_score":	1134
		}, {
			"file":	"inflate.c",
			"line":	349,
			"primary_score":	999993,
			"second_score":	1133
		}, {
			"file":	"inflate.c",
			"line":	351,
			"primary_score":	999993,
			"second_score":	1132
		}, {
			"file":	"inflate.c",
			"line":	352,
			"primary_score":	999993,
			"second_score":	1131
		}, {
			"file":	"inflate.c",
			"line":	353,
			"primary_score":	999993,
			"second_score":	1130
		}, {
			"file":	"inflate.c",
			"line":	355,
			"primary_score":	999993,
			"second_score":	1129
		}, {
			"file":	"inflate.c",
			"line":	357,
			"primary_score":	999993,
			"second_score":	1128
		}, {
			"file":	"inflate.c",
			"line":	358,
			"primary_score":	999993,
			"second_score":	1127
		}, {
			"file":	"inflate.c",
			"line":	359,
			"primary_score":	999993,
			"second_score":	1126
		}, {
			"file":	"inflate.c",
			"line":	361,
			"primary_score":	999993,
			"second_score":	1125
		}, {
			"file":	"inflate.c",
			"line":	365,
			"primary_score":	999993,
			"second_score":	1124
		}, {
			"file":	"inflate.c",
			"line":	368,
			"primary_score":	999993,
			"second_score":	1123
		}, {
			"file":	"inflate.c",
			"line":	370,
			"primary_score":	999993,
			"second_score":	1122
		}, {
			"file":	"inflate.c",
			"line":	374,
			"primary_score":	999993,
			"second_score":	1121
		}, {
			"file":	"inflate.c",
			"line":	375,
			"primary_score":	999993,
			"second_score":	1120
		}, {
			"file":	"inflate.c",
			"line":	376,
			"primary_score":	999993,
			"second_score":	1118
		}, {
			"file":	"inflate.c",
			"line":	377,
			"primary_score":	999994,
			"second_score":	1114
		}, {
			"file":	"inflate.c",
			"line":	382,
			"primary_score":	999993,
			"second_score":	1113
		}, {
			"file":	"inflate.c",
			"line":	383,
			"primary_score":	999993,
			"second_score":	1111
		}, {
			"file":	"inflate.c",
			"line":	384,
			"primary_score":	999993,
			"second_score":	1052
		}, {
			"file":	"inflate.c",
			"line":	385,
			"primary_score":	999993,
			"second_score":	1051
		}, {
			"file":	"inflate.c",
			"line":	387,
			"primary_score":	999993,
			"second_score":	1050
		}, {
			"file":	"inflate.c",
			"line":	391,
			"primary_score":	999993,
			"second_score":	1049
		}, {
			"file":	"inflate.c",
			"line":	392,
			"primary_score":	999993,
			"second_score":	1048
		}, {
			"file":	"inflate.c",
			"line":	393,
			"primary_score":	999993,
			"second_score":	1047
		}, {
			"file":	"inflate.c",
			"line":	394,
			"primary_score":	999993,
			"second_score":	1046
		}, {
			"file":	"inflate.c",
			"line":	395,
			"primary_score":	999993,
			"second_score":	1045
		}, {
			"file":	"inflate.c",
			"line":	396,
			"primary_score":	999993,
			"second_score":	1044
		}, {
			"file":	"inflate.c",
			"line":	397,
			"primary_score":	999993,
			"second_score":	1043
		}, {
			"file":	"inflate.c",
			"line":	400,
			"primary_score":	999993,
			"second_score":	1042
		}, {
			"file":	"inflate.c",
			"line":	402,
			"primary_score":	999993,
			"second_score":	1041
		}, {
			"file":	"inflate.c",
			"line":	403,
			"primary_score":	999993,
			"second_score":	1040
		}, {
			"file":	"inflate.c",
			"line":	407,
			"primary_score":	999993,
			"second_score":	689
		}, {
			"file":	"inflate.c",
			"line":	409,
			"primary_score":	999993,
			"second_score":	1038
		}, {
			"file":	"inflate.c",
			"line":	410,
			"primary_score":	999993,
			"second_score":	1037
		}, {
			"file":	"inflate.c",
			"line":	413,
			"primary_score":	999993,
			"second_score":	1036
		}, {
			"file":	"inflate.c",
			"line":	414,
			"primary_score":	999993,
			"second_score":	1035
		}, {
			"file":	"inflate.c",
			"line":	416,
			"primary_score":	999994,
			"second_score":	6666
		}, {
			"file":	"inflate.c",
			"line":	417,
			"primary_score":	999994,
			"second_score":	6665
		}, {
			"file":	"inflate.c",
			"line":	418,
			"primary_score":	999994,
			"second_score":	6664
		}, {
			"file":	"inflate.c",
			"line":	426,
			"primary_score":	999993,
			"second_score":	1034
		}, {
			"file":	"inflate.c",
			"line":	429,
			"primary_score":	999993,
			"second_score":	1033
		}, {
			"file":	"inflate.c",
			"line":	436,
			"primary_score":	999993,
			"second_score":	1032
		}, {
			"file":	"inflate.c",
			"line":	437,
			"primary_score":	999993,
			"second_score":	1031
		}, {
			"file":	"inflate.c",
			"line":	438,
			"primary_score":	999993,
			"second_score":	1030
		}, {
			"file":	"inflate.c",
			"line":	439,
			"primary_score":	999993,
			"second_score":	1029
		}, {
			"file":	"inflate.c",
			"line":	442,
			"primary_score":	999993,
			"second_score":	1028
		}, {
			"file":	"inflate.c",
			"line":	444,
			"primary_score":	999996,
			"second_score":	1307
		}, {
			"file":	"inflate.c",
			"line":	445,
			"primary_score":	999996,
			"second_score":	1306
		}, {
			"file":	"inflate.c",
			"line":	446,
			"primary_score":	999996,
			"second_score":	1305
		}, {
			"file":	"inflate.c",
			"line":	447,
			"primary_score":	999996,
			"second_score":	1304
		}, {
			"file":	"inflate.c",
			"line":	448,
			"primary_score":	999996,
			"second_score":	1303
		}, {
			"file":	"inflate.c",
			"line":	449,
			"primary_score":	999996,
			"second_score":	1302
		}, {
			"file":	"inflate.c",
			"line":	454,
			"primary_score":	999993,
			"second_score":	688
		}, {
			"file":	"inflate.c",
			"line":	455,
			"primary_score":	999993,
			"second_score":	687
		}, {
			"file":	"inflate.c",
			"line":	456,
			"primary_score":	999995,
			"second_score":	686
		}, {
			"file":	"inflate.c",
			"line":	457,
			"primary_score":	999993,
			"second_score":	706
		}, {
			"file":	"inflate.c",
			"line":	459,
			"primary_score":	999993,
			"second_score":	1262
		}, {
			"file":	"inflate.c",
			"line":	460,
			"primary_score":	999993,
			"second_score":	1261
		}, {
			"file":	"inflate.c",
			"line":	461,
			"primary_score":	999993,
			"second_score":	1260
		}, {
			"file":	"inflate.c",
			"line":	465,
			"primary_score":	999994,
			"second_score":	705
		}, {
			"file":	"inflate.c",
			"line":	466,
			"primary_score":	999994,
			"second_score":	704
		}, {
			"file":	"inflate.c",
			"line":	470,
			"primary_score":	999993,
			"second_score":	685
		}, {
			"file":	"inflate.c",
			"line":	471,
			"primary_score":	999993,
			"second_score":	684
		}, {
			"file":	"inflate.c",
			"line":	475,
			"primary_score":	999993,
			"second_score":	683
		}, {
			"file":	"inflate.c",
			"line":	477,
			"primary_score":	999993,
			"second_score":	682
		}, {
			"file":	"inflate.c",
			"line":	480,
			"primary_score":	999993,
			"second_score":	681
		}, {
			"file":	"inflate.c",
			"line":	482,
			"primary_score":	999996,
			"second_score":	1254
		}, {
			"file":	"inflate.c",
			"line":	483,
			"primary_score":	999996,
			"second_score":	1253
		}, {
			"file":	"inflate.c",
			"line":	490,
			"primary_score":	999993,
			"second_score":	680
		}, {
			"file":	"inflate.c",
			"line":	501,
			"primary_score":	999993,
			"second_score":	169
		}, {
			"file":	"inflate.c",
			"line":	505,
			"primary_score":	999993,
			"second_score":	168
		}, {
			"file":	"inflate.c",
			"line":	506,
			"primary_score":	999993,
			"second_score":	167
		}, {
			"file":	"inflate.c",
			"line":	508,
			"primary_score":	999993,
			"second_score":	166
		}, {
			"file":	"inflate.c",
			"line":	509,
			"primary_score":	999993,
			"second_score":	165
		}, {
			"file":	"inflate.c",
			"line":	510,
			"primary_score":	999993,
			"second_score":	164
		}, {
			"file":	"inflate.c",
			"line":	512,
			"primary_score":	999993,
			"second_score":	163
		}, {
			"file":	"inflate.c",
			"line":	522,
			"primary_score":	999993,
			"second_score":	678
		}, {
			"file":	"inflate.c",
			"line":	523,
			"primary_score":	999993,
			"second_score":	677
		}, {
			"file":	"inflate.c",
			"line":	524,
			"primary_score":	999993,
			"second_score":	676
		}, {
			"file":	"inflate.c",
			"line":	525,
			"primary_score":	999993,
			"second_score":	675
		}, {
			"file":	"inflate.c",
			"line":	526,
			"primary_score":	999993,
			"second_score":	674
		}, {
			"file":	"inflate.c",
			"line":	527,
			"primary_score":	999993,
			"second_score":	673
		}, {
			"file":	"inflate.c",
			"line":	528,
			"primary_score":	999993,
			"second_score":	672
		}, {
			"file":	"inflate.c",
			"line":	532,
			"primary_score":	999993,
			"second_score":	671
		}, {
			"file":	"inflate.c",
			"line":	533,
			"primary_score":	999993,
			"second_score":	670
		}, {
			"file":	"inflate.c",
			"line":	534,
			"primary_score":	999993,
			"second_score":	669
		}, {
			"file":	"inflate.c",
			"line":	537,
			"primary_score":	999993,
			"second_score":	668
		}, {
			"file":	"inflate.c",
			"line":	538,
			"primary_score":	999993,
			"second_score":	667
		}, {
			"file":	"inflate.c",
			"line":	539,
			"primary_score":	999993,
			"second_score":	666
		}, {
			"file":	"inflate.c",
			"line":	541,
			"primary_score":	999994,
			"second_score":	503
		}, {
			"file":	"inflate.c",
			"line":	542,
			"primary_score":	999993,
			"second_score":	501
		}, {
			"file":	"inflate.c",
			"line":	543,
			"primary_score":	999995,
			"second_score":	520
		}, {
			"file":	"inflate.c",
			"line":	544,
			"primary_score":	999995,
			"second_score":	519
		}, {
			"file":	"inflate.c",
			"line":	546,
			"primary_score":	999996,
			"second_score":	518
		}, {
			"file":	"inflate.c",
			"line":	547,
			"primary_score":	999996,
			"second_score":	515
		}, {
			"file":	"inflate.c",
			"line":	548,
			"primary_score":	999996,
			"second_score":	514
		}, {
			"file":	"inflate.c",
			"line":	550,
			"primary_score":	999994,
			"second_score":	500
		}, {
			"file":	"inflate.c",
			"line":	551,
			"primary_score":	999994,
			"second_score":	497
		}, {
			"file":	"inflate.c",
			"line":	553,
			"primary_score":	999994,
			"second_score":	508
		}, {
			"file":	"inflate.c",
			"line":	554,
			"primary_score":	999994,
			"second_score":	507
		}, {
			"file":	"inflate.c",
			"line":	555,
			"primary_score":	999994,
			"second_score":	506
		}, {
			"file":	"inflate.c",
			"line":	564,
			"primary_score":	999994,
			"second_score":	496
		}, {
			"file":	"inflate.c",
			"line":	565,
			"primary_score":	999994,
			"second_score":	495
		}, {
			"file":	"inflate.c",
			"line":	616,
			"primary_score":	999994,
			"second_score":	494
		}, {
			"file":	"inflate.c",
			"line":	617,
			"primary_score":	999994,
			"second_score":	493
		}, {
			"file":	"inflate.c",
			"line":	618,
			"primary_score":	999994,
			"second_score":	492
		}, {
			"file":	"inflate.c",
			"line":	621,
			"primary_score":	999994,
			"second_score":	491
		}, {
			"file":	"inflate.c",
			"line":	684,
			"primary_score":	999996,
			"second_score":	8186
		}, {
			"file":	"inflate.c",
			"line":	685,
			"primary_score":	999996,
			"second_score":	8185
		}, {
			"file":	"inflate.c",
			"line":	686,
			"primary_score":	999996,
			"second_score":	8184
		}, {
			"file":	"inflate.c",
			"line":	687,
			"primary_score":	999996,
			"second_score":	8183
		}, {
			"file":	"inflate.c",
			"line":	688,
			"primary_score":	999996,
			"second_score":	8182
		}, {
			"file":	"inflate.c",
			"line":	689,
			"primary_score":	999996,
			"second_score":	8181
		}, {
			"file":	"inflate.c",
			"line":	693,
			"primary_score":	999996,
			"second_score":	8180
		}, {
			"file":	"inflate.c",
			"line":	695,
			"primary_score":	999996,
			"second_score":	8179
		}, {
			"file":	"inflate.c",
			"line":	697,
			"primary_score":	999996,
			"second_score":	8178
		}, {
			"file":	"inflate.c",
			"line":	699,
			"primary_score":	999996,
			"second_score":	8177
		}, {
			"file":	"inflate.c",
			"line":	701,
			"primary_score":	999996,
			"second_score":	8176
		}, {
			"file":	"inflate.c",
			"line":	702,
			"primary_score":	999996,
			"second_score":	8175
		}, {
			"file":	"inflate.c",
			"line":	707,
			"primary_score":	999996,
			"second_score":	1251
		}, {
			"file":	"inflate.c",
			"line":	709,
			"primary_score":	999996,
			"second_score":	1250
		}, {
			"file":	"inflate.c",
			"line":	710,
			"primary_score":	999996,
			"second_score":	1249
		}, {
			"file":	"inflate.c",
			"line":	718,
			"primary_score":	999996,
			"second_score":	679
		}, {
			"file":	"inflate.c",
			"line":	723,
			"primary_score":	999996,
			"second_score":	490
		}, {
			"file":	"inflate.c",
			"line":	724,
			"primary_score":	999996,
			"second_score":	170
		}, {
			"file":	"inflate.c",
			"line":	725,
			"primary_score":	999996,
			"second_score":	162
		}, {
			"file":	"inflate.c",
			"line":	903,
			"primary_score":	999993,
			"second_score":	8213
		}, {
			"file":	"inflate.c",
			"line":	904,
			"primary_score":	999993,
			"second_score":	8212
		}, {
			"file":	"inflate.c",
			"line":	905,
			"primary_score":	999993,
			"second_score":	8211
		}, {
			"file":	"inflate.c",
			"line":	906,
			"primary_score":	999993,
			"second_score":	8210
		}, {
			"file":	"inflate.c",
			"line":	910,
			"primary_score":	999993,
			"second_score":	8209
		}, {
			"file":	"inflate.c",
			"line":	911,
			"primary_score":	999993,
			"second_score":	8208
		}, {
			"file":	"inflate.c",
			"line":	912,
			"primary_score":	999993,
			"second_score":	8207
		}, {
			"file":	"inflate.c",
			"line":	916,
			"primary_score":	999993,
			"second_score":	8206
		}, {
			"file":	"inflate.c",
			"line":	917,
			"primary_score":	999993,
			"second_score":	8202
		}, {
			"file":	"inflate.c",
			"line":	918,
			"primary_score":	999993,
			"second_score":	8201
		}, {
			"file":	"inflate.c",
			"line":	922,
			"primary_score":	999993,
			"second_score":	8198
		}, {
			"file":	"inflate.c",
			"line":	923,
			"primary_score":	999993,
			"second_score":	8196
		}, {
			"file":	"inflate.c",
			"line":	924,
			"primary_score":	999993,
			"second_score":	8195
		}, {
			"file":	"inflate.c",
			"line":	928,
			"primary_score":	999993,
			"second_score":	8192
		}, {
			"file":	"inflate.c",
			"line":	929,
			"primary_score":	999993,
			"second_score":	8191
		}, {
			"file":	"inflate.c",
			"line":	933,
			"primary_score":	999993,
			"second_score":	8190
		}, {
			"file":	"inflate.c",
			"line":	935,
			"primary_score":	999996,
			"second_score":	8189
		}, {
			"file":	"inflate.c",
			"line":	937,
			"primary_score":	999996,
			"second_score":	8188
		}, {
			"file":	"inflate.c",
			"line":	938,
			"primary_score":	999996,
			"second_score":	8187
		}, {
			"file":	"inflate.c",
			"line":	950,
			"primary_score":	999993,
			"second_score":	8223
		}, {
			"file":	"inflate.c",
			"line":	951,
			"primary_score":	999993,
			"second_score":	8222
		}, {
			"file":	"inflate.c",
			"line":	952,
			"primary_score":	999993,
			"second_score":	8221
		}, {
			"file":	"inflate.c",
			"line":	956,
			"primary_score":	999993,
			"second_score":	8220
		}, {
			"file":	"inflate.c",
			"line":	957,
			"primary_score":	999993,
			"second_score":	8219
		}, {
			"file":	"inflate.c",
			"line":	958,
			"primary_score":	999993,
			"second_score":	8218
		}, {
			"file":	"inflate.c",
			"line":	962,
			"primary_score":	999993,
			"second_score":	8217
		}, {
			"file":	"inflate.c",
			"line":	963,
			"primary_score":	999993,
			"second_score":	8216
		}, {
			"file":	"inflate.c",
			"line":	964,
			"primary_score":	999993,
			"second_score":	8215
		}, {
			"file":	"inflate.c",
			"line":	965,
			"primary_score":	999993,
			"second_score":	8214
		}, {
			"file":	"inflate.c",
			"line":	967,
			"primary_score":	999994,
			"second_score":	161
		}, {
			"file":	"inflate.c",
			"line":	968,
			"primary_score":	999994,
			"second_score":	160
		}, {
			"file":	"inflate.c",
			"line":	974,
			"primary_score":	999994,
			"second_score":	159
		}, {
			"file":	"inflate.c",
			"line":	980,
			"primary_score":	999994,
			"second_score":	158
		}, {
			"file":	"inflate.c",
			"line":	984,
			"primary_score":	999994,
			"second_score":	131
		}, {
			"file":	"inflate.c",
			"line":	985,
			"primary_score":	999994,
			"second_score":	130
		}, {
			"file":	"lib/printf-args.c",
			"line":	41,
			"primary_score":	999998,
			"second_score":	8342
		}, {
			"file":	"lib/printf-args.c",
			"line":	42,
			"primary_score":	999998,
			"second_score":	8341
		}, {
			"file":	"lib/printf-args.c",
			"line":	44,
			"primary_score":	999998,
			"second_score":	8340
		}, {
			"file":	"lib/printf-args.c",
			"line":	104,
			"primary_score":	999998,
			"second_score":	8623
		}, {
			"file":	"lib/printf-args.c",
			"line":	106,
			"primary_score":	999998,
			"second_score":	8622
		}, {
			"file":	"lib/printf-args.c",
			"line":	189,
			"primary_score":	999998,
			"second_score":	8339
		}, {
			"file":	"lib/printf-parse.c",
			"line":	85,
			"primary_score":	999998,
			"second_score":	8433
		}, {
			"file":	"lib/printf-parse.c",
			"line":	86,
			"primary_score":	999998,
			"second_score":	8432
		}, {
			"file":	"lib/printf-parse.c",
			"line":	87,
			"primary_score":	999998,
			"second_score":	8431
		}, {
			"file":	"lib/printf-parse.c",
			"line":	88,
			"primary_score":	999998,
			"second_score":	8430
		}, {
			"file":	"lib/printf-parse.c",
			"line":	89,
			"primary_score":	999998,
			"second_score":	8429
		}, {
			"file":	"lib/printf-parse.c",
			"line":	90,
			"primary_score":	999998,
			"second_score":	8428
		}, {
			"file":	"lib/printf-parse.c",
			"line":	92,
			"primary_score":	999998,
			"second_score":	8427
		}, {
			"file":	"lib/printf-parse.c",
			"line":	93,
			"primary_score":	999998,
			"second_score":	8426
		}, {
			"file":	"lib/printf-parse.c",
			"line":	94,
			"primary_score":	999998,
			"second_score":	8425
		}, {
			"file":	"lib/printf-parse.c",
			"line":	95,
			"primary_score":	999998,
			"second_score":	8424
		}, {
			"file":	"lib/printf-parse.c",
			"line":	99,
			"primary_score":	999998,
			"second_score":	8423
		}, {
			"file":	"lib/printf-parse.c",
			"line":	100,
			"primary_score":	999998,
			"second_score":	8422
		}, {
			"file":	"lib/printf-parse.c",
			"line":	101,
			"primary_score":	999998,
			"second_score":	8421
		}, {
			"file":	"lib/printf-parse.c",
			"line":	135,
			"primary_score":	999998,
			"second_score":	8420
		}, {
			"file":	"lib/printf-parse.c",
			"line":	137,
			"primary_score":	999998,
			"second_score":	8349
		}, {
			"file":	"lib/printf-parse.c",
			"line":	138,
			"primary_score":	999998,
			"second_score":	8348
		}, {
			"file":	"lib/printf-parse.c",
			"line":	140,
			"primary_score":	999998,
			"second_score":	8737
		}, {
			"file":	"lib/printf-parse.c",
			"line":	141,
			"primary_score":	999998,
			"second_score":	8736
		}, {
			"file":	"lib/printf-parse.c",
			"line":	144,
			"primary_score":	999998,
			"second_score":	8735
		}, {
			"file":	"lib/printf-parse.c",
			"line":	145,
			"primary_score":	999998,
			"second_score":	8734
		}, {
			"file":	"lib/printf-parse.c",
			"line":	146,
			"primary_score":	999998,
			"second_score":	8733
		}, {
			"file":	"lib/printf-parse.c",
			"line":	147,
			"primary_score":	999998,
			"second_score":	8732
		}, {
			"file":	"lib/printf-parse.c",
			"line":	148,
			"primary_score":	999998,
			"second_score":	8731
		}, {
			"file":	"lib/printf-parse.c",
			"line":	149,
			"primary_score":	999998,
			"second_score":	8730
		}, {
			"file":	"lib/printf-parse.c",
			"line":	150,
			"primary_score":	999998,
			"second_score":	8729
		}, {
			"file":	"lib/printf-parse.c",
			"line":	151,
			"primary_score":	999998,
			"second_score":	8728
		}, {
			"file":	"lib/printf-parse.c",
			"line":	152,
			"primary_score":	999998,
			"second_score":	8727
		}, {
			"file":	"lib/printf-parse.c",
			"line":	155,
			"primary_score":	999998,
			"second_score":	8726
		}, {
			"file":	"lib/printf-parse.c",
			"line":	179,
			"primary_score":	999998,
			"second_score":	8725
		}, {
			"file":	"lib/printf-parse.c",
			"line":	181,
			"primary_score":	999998,
			"second_score":	8724
		}, {
			"file":	"lib/printf-parse.c",
			"line":	186,
			"primary_score":	999998,
			"second_score":	8723
		}, {
			"file":	"lib/printf-parse.c",
			"line":	191,
			"primary_score":	999998,
			"second_score":	8722
		}, {
			"file":	"lib/printf-parse.c",
			"line":	196,
			"primary_score":	999998,
			"second_score":	8721
		}, {
			"file":	"lib/printf-parse.c",
			"line":	201,
			"primary_score":	999998,
			"second_score":	8720
		}, {
			"file":	"lib/printf-parse.c",
			"line":	206,
			"primary_score":	999998,
			"second_score":	8719
		}, {
			"file":	"lib/printf-parse.c",
			"line":	212,
			"primary_score":	999998,
			"second_score":	8718
		}, {
			"file":	"lib/printf-parse.c",
			"line":	216,
			"primary_score":	999998,
			"second_score":	8717
		}, {
			"file":	"lib/printf-parse.c",
			"line":	256,
			"primary_score":	999998,
			"second_score":	8716
		}, {
			"file":	"lib/printf-parse.c",
			"line":	270,
			"primary_score":	999998,
			"second_score":	8715
		}, {
			"file":	"lib/printf-parse.c",
			"line":	328,
			"primary_score":	999998,
			"second_score":	8714
		}, {
			"file":	"lib/printf-parse.c",
			"line":	329,
			"primary_score":	999998,
			"second_score":	8713
		}, {
			"file":	"lib/printf-parse.c",
			"line":	332,
			"primary_score":	999998,
			"second_score":	8712
		}, {
			"file":	"lib/printf-parse.c",
			"line":	333,
			"primary_score":	999998,
			"second_score":	8711
		}, {
			"file":	"lib/printf-parse.c",
			"line":	335,
			"primary_score":	999998,
			"second_score":	8710
		}, {
			"file":	"lib/printf-parse.c",
			"line":	337,
			"primary_score":	999998,
			"second_score":	8709
		}, {
			"file":	"lib/printf-parse.c",
			"line":	342,
			"primary_score":	999998,
			"second_score":	8708
		}, {
			"file":	"lib/printf-parse.c",
			"line":	347,
			"primary_score":	999998,
			"second_score":	8707
		}, {
			"file":	"lib/printf-parse.c",
			"line":	352,
			"primary_score":	999998,
			"second_score":	8706
		}, {
			"file":	"lib/printf-parse.c",
			"line":	366,
			"primary_score":	999998,
			"second_score":	8705
		}, {
			"file":	"lib/printf-parse.c",
			"line":	383,
			"primary_score":	999998,
			"second_score":	8704
		}, {
			"file":	"lib/printf-parse.c",
			"line":	436,
			"primary_score":	999998,
			"second_score":	8703
		}, {
			"file":	"lib/printf-parse.c",
			"line":	440,
			"primary_score":	999998,
			"second_score":	8702
		}, {
			"file":	"lib/printf-parse.c",
			"line":	441,
			"primary_score":	999998,
			"second_score":	8701
		}, {
			"file":	"lib/printf-parse.c",
			"line":	510,
			"primary_score":	999998,
			"second_score":	8700
		}, {
			"file":	"lib/printf-parse.c",
			"line":	511,
			"primary_score":	999998,
			"second_score":	8699
		}, {
			"file":	"lib/printf-parse.c",
			"line":	559,
			"primary_score":	999998,
			"second_score":	8698
		}, {
			"file":	"lib/printf-parse.c",
			"line":	561,
			"primary_score":	999998,
			"second_score":	8697
		}, {
			"file":	"lib/printf-parse.c",
			"line":	562,
			"primary_score":	999998,
			"second_score":	8696
		}, {
			"file":	"lib/printf-parse.c",
			"line":	564,
			"primary_score":	999998,
			"second_score":	8695
		}, {
			"file":	"lib/printf-parse.c",
			"line":	565,
			"primary_score":	999998,
			"second_score":	8694
		}, {
			"file":	"lib/printf-parse.c",
			"line":	569,
			"primary_score":	999998,
			"second_score":	8767
		}, {
			"file":	"lib/printf-parse.c",
			"line":	571,
			"primary_score":	999998,
			"second_score":	8677
		}, {
			"file":	"lib/printf-parse.c",
			"line":	572,
			"primary_score":	999998,
			"second_score":	8676
		}, {
			"file":	"lib/printf-parse.c",
			"line":	575,
			"primary_score":	999998,
			"second_score":	8675
		}, {
			"file":	"lib/printf-parse.c",
			"line":	576,
			"primary_score":	999998,
			"second_score":	8674
		}, {
			"file":	"lib/printf-parse.c",
			"line":	578,
			"primary_score":	999998,
			"second_score":	8673
		}, {
			"file":	"lib/printf-parse.c",
			"line":	579,
			"primary_score":	999998,
			"second_score":	8672
		}, {
			"file":	"lib/printf-parse.c",
			"line":	581,
			"primary_score":	999998,
			"second_score":	8671
		}, {
			"file":	"lib/printf-parse.c",
			"line":	582,
			"primary_score":	999998,
			"second_score":	8670
		}, {
			"file":	"lib/printf-parse.c",
			"line":	583,
			"primary_score":	999998,
			"second_score":	8669
		}, {
			"file":	"lib/printf-parse.c",
			"line":	586,
			"primary_score":	999998,
			"second_score":	8668
		}, {
			"file":	"lib/printf-parse.c",
			"line":	587,
			"primary_score":	999998,
			"second_score":	8667
		}, {
			"file":	"lib/printf-parse.c",
			"line":	590,
			"primary_score":	999998,
			"second_score":	8666
		}, {
			"file":	"lib/printf-parse.c",
			"line":	601,
			"primary_score":	999998,
			"second_score":	8347
		}, {
			"file":	"lib/printf-parse.c",
			"line":	603,
			"primary_score":	999998,
			"second_score":	8346
		}, {
			"file":	"lib/printf-parse.c",
			"line":	604,
			"primary_score":	999998,
			"second_score":	8345
		}, {
			"file":	"lib/printf-parse.c",
			"line":	605,
			"primary_score":	999998,
			"second_score":	8344
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1483,
			"primary_score":	999998,
			"second_score":	8436
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1484,
			"primary_score":	999998,
			"second_score":	8435
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1486,
			"primary_score":	999998,
			"second_score":	8434
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1495,
			"primary_score":	999998,
			"second_score":	8343
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1502,
			"primary_score":	999998,
			"second_score":	8338
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1503,
			"primary_score":	999998,
			"second_score":	8337
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1504,
			"primary_score":	999998,
			"second_score":	8336
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1505,
			"primary_score":	999998,
			"second_score":	8335
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1506,
			"primary_score":	999998,
			"second_score":	8334
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1507,
			"primary_score":	999998,
			"second_score":	8333
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1508,
			"primary_score":	999998,
			"second_score":	8332
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1510,
			"primary_score":	999998,
			"second_score":	8331
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1511,
			"primary_score":	999998,
			"second_score":	8330
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1512,
			"primary_score":	999998,
			"second_score":	8329
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1516,
			"primary_score":	999998,
			"second_score":	8328
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1519,
			"primary_score":	999998,
			"second_score":	8320
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1521,
			"primary_score":	999998,
			"second_score":	8319
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1522,
			"primary_score":	999998,
			"second_score":	8318
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1536,
			"primary_score":	999998,
			"second_score":	8317
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1538,
			"primary_score":	999998,
			"second_score":	8316
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1539,
			"primary_score":	999998,
			"second_score":	8315
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1546,
			"primary_score":	999998,
			"second_score":	8314
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1576,
			"primary_score":	999998,
			"second_score":	8313
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1578,
			"primary_score":	999998,
			"second_score":	8312
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1580,
			"primary_score":	999998,
			"second_score":	8311
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1581,
			"primary_score":	999998,
			"second_score":	8310
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1583,
			"primary_score":	999998,
			"second_score":	8307
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1587,
			"primary_score":	999998,
			"second_score":	8305
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1589,
			"primary_score":	999998,
			"second_score":	8304
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1590,
			"primary_score":	999998,
			"second_score":	8303
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1599,
			"primary_score":	999998,
			"second_score":	8302
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1600,
			"primary_score":	999998,
			"second_score":	8301
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1603,
			"primary_score":	999998,
			"second_score":	8529
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1616,
			"primary_score":	999998,
			"second_score":	8528
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	1619,
			"primary_score":	999998,
			"second_score":	8527
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	3117,
			"primary_score":	999998,
			"second_score":	8526
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4304,
			"primary_score":	999998,
			"second_score":	8525
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4305,
			"primary_score":	999998,
			"second_score":	8524
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4326,
			"primary_score":	999998,
			"second_score":	8523
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4327,
			"primary_score":	999998,
			"second_score":	8522
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4328,
			"primary_score":	999998,
			"second_score":	8521
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4701,
			"primary_score":	999998,
			"second_score":	8520
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4702,
			"primary_score":	999998,
			"second_score":	8519
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4708,
			"primary_score":	999998,
			"second_score":	8518
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4711,
			"primary_score":	999998,
			"second_score":	8517
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4713,
			"primary_score":	999998,
			"second_score":	8516
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4715,
			"primary_score":	999998,
			"second_score":	8515
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4717,
			"primary_score":	999998,
			"second_score":	8514
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4719,
			"primary_score":	999998,
			"second_score":	8513
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4721,
			"primary_score":	999998,
			"second_score":	8512
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4723,
			"primary_score":	999998,
			"second_score":	8511
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4742,
			"primary_score":	999998,
			"second_score":	8510
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4744,
			"primary_score":	999998,
			"second_score":	8509
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4764,
			"primary_score":	999998,
			"second_score":	8508
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4800,
			"primary_score":	999998,
			"second_score":	8507
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4830,
			"primary_score":	999998,
			"second_score":	8506
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4837,
			"primary_score":	999998,
			"second_score":	8505
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4838,
			"primary_score":	999998,
			"second_score":	8504
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4844,
			"primary_score":	999998,
			"second_score":	8503
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4860,
			"primary_score":	999998,
			"second_score":	8502
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4862,
			"primary_score":	999998,
			"second_score":	8499
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4865,
			"primary_score":	999998,
			"second_score":	8498
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4868,
			"primary_score":	999998,
			"second_score":	8497
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4870,
			"primary_score":	999998,
			"second_score":	8496
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4873,
			"primary_score":	999998,
			"second_score":	8495
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4874,
			"primary_score":	999998,
			"second_score":	8494
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4877,
			"primary_score":	999998,
			"second_score":	8493
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4879,
			"primary_score":	999998,
			"second_score":	8492
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	4921,
			"primary_score":	999998,
			"second_score":	8491
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5013,
			"primary_score":	999998,
			"second_score":	8490
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5014,
			"primary_score":	999998,
			"second_score":	8489
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5016,
			"primary_score":	999998,
			"second_score":	8486
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5040,
			"primary_score":	999998,
			"second_score":	8485
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5055,
			"primary_score":	999998,
			"second_score":	8484
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5065,
			"primary_score":	999998,
			"second_score":	8483
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5078,
			"primary_score":	999998,
			"second_score":	8482
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5084,
			"primary_score":	999998,
			"second_score":	8481
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5101,
			"primary_score":	999998,
			"second_score":	8480
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5424,
			"primary_score":	999998,
			"second_score":	8479
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5425,
			"primary_score":	999998,
			"second_score":	8478
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5432,
			"primary_score":	999998,
			"second_score":	8300
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5433,
			"primary_score":	999998,
			"second_score":	8296
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5435,
			"primary_score":	999998,
			"second_score":	8295
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5445,
			"primary_score":	999998,
			"second_score":	8294
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5447,
			"primary_score":	999998,
			"second_score":	8456
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5448,
			"primary_score":	999998,
			"second_score":	8291
		}, {
			"file":	"lib/vasnprintf.c",
			"line":	5453,
			"primary_score":	999998,
			"second_score":	8290
		}, {
			"file":	"lib/xsize.h",
			"line":	60,
			"primary_score":	999998,
			"second_score":	8299
		}, {
			"file":	"lib/xsize.h",
			"line":	61,
			"primary_score":	999998,
			"second_score":	8298
		}, {
			"file":	"lib/xsize.h",
			"line":	81,
			"primary_score":	999998,
			"second_score":	8327
		}, {
			"file":	"trees.c",
			"line":	345,
			"primary_score":	999994,
			"second_score":	12245
		}, {
			"file":	"trees.c",
			"line":	346,
			"primary_score":	999994,
			"second_score":	12244
		}, {
			"file":	"trees.c",
			"line":	347,
			"primary_score":	999994,
			"second_score":	12243
		}, {
			"file":	"trees.c",
			"line":	348,
			"primary_score":	999994,
			"second_score":	12242
		}, {
			"file":	"trees.c",
			"line":	349,
			"primary_score":	999994,
			"second_score":	12241
		}, {
			"file":	"trees.c",
			"line":	351,
			"primary_score":	999994,
			"second_score":	12240
		}, {
			"file":	"trees.c",
			"line":	352,
			"primary_score":	999994,
			"second_score":	12239
		}, {
			"file":	"trees.c",
			"line":	353,
			"primary_score":	999994,
			"second_score":	12238
		}, {
			"file":	"trees.c",
			"line":	355,
			"primary_score":	999994,
			"second_score":	12237
		}, {
			"file":	"trees.c",
			"line":	358,
			"primary_score":	999994,
			"second_score":	12236
		}, {
			"file":	"trees.c",
			"line":	359,
			"primary_score":	999994,
			"second_score":	12235
		}, {
			"file":	"trees.c",
			"line":	360,
			"primary_score":	999994,
			"second_score":	11956
		}, {
			"file":	"trees.c",
			"line":	361,
			"primary_score":	999994,
			"second_score":	11955
		}, {
			"file":	"trees.c",
			"line":	362,
			"primary_score":	999994,
			"second_score":	11923
		}, {
			"file":	"trees.c",
			"line":	365,
			"primary_score":	999994,
			"second_score":	11922
		}, {
			"file":	"trees.c",
			"line":	370,
			"primary_score":	999994,
			"second_score":	11921
		}, {
			"file":	"trees.c",
			"line":	373,
			"primary_score":	999994,
			"second_score":	11920
		}, {
			"file":	"trees.c",
			"line":	374,
			"primary_score":	999994,
			"second_score":	11919
		}, {
			"file":	"trees.c",
			"line":	375,
			"primary_score":	999994,
			"second_score":	11696
		}, {
			"file":	"trees.c",
			"line":	376,
			"primary_score":	999994,
			"second_score":	11695
		}, {
			"file":	"trees.c",
			"line":	377,
			"primary_score":	999994,
			"second_score":	11631
		}, {
			"file":	"trees.c",
			"line":	380,
			"primary_score":	999994,
			"second_score":	11630
		}, {
			"file":	"trees.c",
			"line":	381,
			"primary_score":	999994,
			"second_score":	11629
		}, {
			"file":	"trees.c",
			"line":	382,
			"primary_score":	999994,
			"second_score":	11628
		}, {
			"file":	"trees.c",
			"line":	383,
			"primary_score":	999994,
			"second_score":	11411
		}, {
			"file":	"trees.c",
			"line":	384,
			"primary_score":	999994,
			"second_score":	11410
		}, {
			"file":	"trees.c",
			"line":	385,
			"primary_score":	999994,
			"second_score":	11346
		}, {
			"file":	"trees.c",
			"line":	388,
			"primary_score":	999994,
			"second_score":	11345
		}, {
			"file":	"trees.c",
			"line":	391,
			"primary_score":	999994,
			"second_score":	11344
		}, {
			"file":	"trees.c",
			"line":	392,
			"primary_score":	999994,
			"second_score":	11343
		}, {
			"file":	"trees.c",
			"line":	393,
			"primary_score":	999994,
			"second_score":	11342
		}, {
			"file":	"trees.c",
			"line":	394,
			"primary_score":	999994,
			"second_score":	11341
		}, {
			"file":	"trees.c",
			"line":	395,
			"primary_score":	999994,
			"second_score":	11340
		}, {
			"file":	"trees.c",
			"line":	396,
			"primary_score":	999994,
			"second_score":	11339
		}, {
			"file":	"trees.c",
			"line":	401,
			"primary_score":	999994,
			"second_score":	11338
		}, {
			"file":	"trees.c",
			"line":	404,
			"primary_score":	999994,
			"second_score":	4514
		}, {
			"file":	"trees.c",
			"line":	405,
			"primary_score":	999994,
			"second_score":	4078
		}, {
			"file":	"trees.c",
			"line":	406,
			"primary_score":	999994,
			"second_score":	4077
		}, {
			"file":	"trees.c",
			"line":	410,
			"primary_score":	999994,
			"second_score":	4063
		}, {
			"file":	"trees.c",
			"line":	418,
			"primary_score":	999994,
			"second_score":	102
		}, {
			"file":	"trees.c",
			"line":	421,
			"primary_score":	999994,
			"second_score":	101
		}, {
			"file":	"trees.c",
			"line":	422,
			"primary_score":	999994,
			"second_score":	100
		}, {
			"file":	"trees.c",
			"line":	423,
			"primary_score":	999994,
			"second_score":	99
		}, {
			"file":	"trees.c",
			"line":	425,
			"primary_score":	999994,
			"second_score":	98
		}, {
			"file":	"trees.c",
			"line":	426,
			"primary_score":	999994,
			"second_score":	97
		}, {
			"file":	"trees.c",
			"line":	427,
			"primary_score":	999994,
			"second_score":	96
		}, {
			"file":	"trees.c",
			"line":	428,
			"primary_score":	999994,
			"second_score":	95
		}, {
			"file":	"trees.c",
			"line":	464,
			"primary_score":	999994,
			"second_score":	435
		}, {
			"file":	"trees.c",
			"line":	465,
			"primary_score":	999994,
			"second_score":	434
		}, {
			"file":	"trees.c",
			"line":	466,
			"primary_score":	999994,
			"second_score":	433
		}, {
			"file":	"trees.c",
			"line":	468,
			"primary_score":	999995,
			"second_score":	487
		}, {
			"file":	"trees.c",
			"line":	471,
			"primary_score":	999994,
			"second_score":	472
		}, {
			"file":	"trees.c",
			"line":	474,
			"primary_score":	999994,
			"second_score":	456
		}, {
			"file":	"trees.c",
			"line":	477,
			"primary_score":	999994,
			"second_score":	454
		}, {
			"file":	"trees.c",
			"line":	479,
			"primary_score":	999994,
			"second_score":	432
		}, {
			"file":	"trees.c",
			"line":	495,
			"primary_score":	999994,
			"second_score":	429
		}, {
			"file":	"trees.c",
			"line":	496,
			"primary_score":	999994,
			"second_score":	428
		}, {
			"file":	"trees.c",
			"line":	497,
			"primary_score":	999994,
			"second_score":	427
		}, {
			"file":	"trees.c",
			"line":	498,
			"primary_score":	999994,
			"second_score":	426
		}, {
			"file":	"trees.c",
			"line":	499,
			"primary_score":	999994,
			"second_score":	425
		}, {
			"file":	"trees.c",
			"line":	500,
			"primary_score":	999994,
			"second_score":	424
		}, {
			"file":	"trees.c",
			"line":	501,
			"primary_score":	999994,
			"second_score":	423
		}, {
			"file":	"trees.c",
			"line":	502,
			"primary_score":	999994,
			"second_score":	422
		}, {
			"file":	"trees.c",
			"line":	503,
			"primary_score":	999994,
			"second_score":	421
		}, {
			"file":	"trees.c",
			"line":	504,
			"primary_score":	999994,
			"second_score":	420
		}, {
			"file":	"trees.c",
			"line":	505,
			"primary_score":	999994,
			"second_score":	419
		}, {
			"file":	"trees.c",
			"line":	506,
			"primary_score":	999994,
			"second_score":	418
		}, {
			"file":	"trees.c",
			"line":	508,
			"primary_score":	999994,
			"second_score":	417
		}, {
			"file":	"trees.c",
			"line":	513,
			"primary_score":	999994,
			"second_score":	416
		}, {
			"file":	"trees.c",
			"line":	515,
			"primary_score":	999994,
			"second_score":	415
		}, {
			"file":	"trees.c",
			"line":	516,
			"primary_score":	999994,
			"second_score":	366
		}, {
			"file":	"trees.c",
			"line":	517,
			"primary_score":	999994,
			"second_score":	365
		}, {
			"file":	"trees.c",
			"line":	518,
			"primary_score":	999994,
			"second_score":	364
		}, {
			"file":	"trees.c",
			"line":	519,
			"primary_score":	999994,
			"second_score":	363
		}, {
			"file":	"trees.c",
			"line":	522,
			"primary_score":	999995,
			"second_score":	391
		}, {
			"file":	"trees.c",
			"line":	524,
			"primary_score":	999994,
			"second_score":	361
		}, {
			"file":	"trees.c",
			"line":	525,
			"primary_score":	999994,
			"second_score":	360
		}, {
			"file":	"trees.c",
			"line":	526,
			"primary_score":	999994,
			"second_score":	359
		}, {
			"file":	"trees.c",
			"line":	527,
			"primary_score":	999994,
			"second_score":	357
		}, {
			"file":	"trees.c",
			"line":	528,
			"primary_score":	999994,
			"second_score":	356
		}, {
			"file":	"trees.c",
			"line":	529,
			"primary_score":	999994,
			"second_score":	1776
		}, {
			"file":	"trees.c",
			"line":	531,
			"primary_score":	999994,
			"second_score":	354
		}, {
			"file":	"trees.c",
			"line":	581,
			"primary_score":	999994,
			"second_score":	351
		}, {
			"file":	"trees.c",
			"line":	582,
			"primary_score":	999994,
			"second_score":	350
		}, {
			"file":	"trees.c",
			"line":	583,
			"primary_score":	999994,
			"second_score":	349
		}, {
			"file":	"trees.c",
			"line":	584,
			"primary_score":	999994,
			"second_score":	348
		}, {
			"file":	"trees.c",
			"line":	589,
			"primary_score":	999994,
			"second_score":	347
		}, {
			"file":	"trees.c",
			"line":	590,
			"primary_score":	999994,
			"second_score":	332
		}, {
			"file":	"trees.c",
			"line":	596,
			"primary_score":	999994,
			"second_score":	331
		}, {
			"file":	"trees.c",
			"line":	597,
			"primary_score":	999994,
			"second_score":	330
		}, {
			"file":	"trees.c",
			"line":	599,
			"primary_score":	999994,
			"second_score":	329
		}, {
			"file":	"trees.c",
			"line":	600,
			"primary_score":	999994,
			"second_score":	250
		}, {
			"file":	"trees.c",
			"line":	601,
			"primary_score":	999994,
			"second_score":	262
		}, {
			"file":	"trees.c",
			"line":	603,
			"primary_score":	999994,
			"second_score":	248
		}, {
			"file":	"trees.c",
			"line":	606,
			"primary_score":	999994,
			"second_score":	238
		}, {
			"file":	"trees.c",
			"line":	621,
			"primary_score":	999994,
			"second_score":	583
		}, {
			"file":	"trees.c",
			"line":	622,
			"primary_score":	999994,
			"second_score":	582
		}, {
			"file":	"trees.c",
			"line":	623,
			"primary_score":	999994,
			"second_score":	581
		}, {
			"file":	"trees.c",
			"line":	624,
			"primary_score":	999994,
			"second_score":	580
		}, {
			"file":	"trees.c",
			"line":	625,
			"primary_score":	999994,
			"second_score":	579
		}, {
			"file":	"trees.c",
			"line":	626,
			"primary_score":	999994,
			"second_score":	578
		}, {
			"file":	"trees.c",
			"line":	632,
			"primary_score":	999994,
			"second_score":	577
		}, {
			"file":	"trees.c",
			"line":	634,
			"primary_score":	999994,
			"second_score":	576
		}, {
			"file":	"trees.c",
			"line":	635,
			"primary_score":	999994,
			"second_score":	536
		}, {
			"file":	"trees.c",
			"line":	636,
			"primary_score":	999994,
			"second_score":	535
		}, {
			"file":	"trees.c",
			"line":	637,
			"primary_score":	999994,
			"second_score":	534
		}, {
			"file":	"trees.c",
			"line":	639,
			"primary_score":	999994,
			"second_score":	540
		}, {
			"file":	"trees.c",
			"line":	648,
			"primary_score":	999994,
			"second_score":	533
		}, {
			"file":	"trees.c",
			"line":	649,
			"primary_score":	999994,
			"second_score":	1855
		}, {
			"file":	"trees.c",
			"line":	650,
			"primary_score":	999994,
			"second_score":	1854
		}, {
			"file":	"trees.c",
			"line":	651,
			"primary_score":	999994,
			"second_score":	1853
		}, {
			"file":	"trees.c",
			"line":	652,
			"primary_score":	999994,
			"second_score":	1852
		}, {
			"file":	"trees.c",
			"line":	655,
			"primary_score":	999994,
			"second_score":	532
		}, {
			"file":	"trees.c",
			"line":	660,
			"primary_score":	999994,
			"second_score":	531
		}, {
			"file":	"trees.c",
			"line":	665,
			"primary_score":	999994,
			"second_score":	514
		}, {
			"file":	"trees.c",
			"line":	666,
			"primary_score":	999994,
			"second_score":	452
		}, {
			"file":	"trees.c",
			"line":	667,
			"primary_score":	999994,
			"second_score":	443
		}, {
			"file":	"trees.c",
			"line":	669,
			"primary_score":	999994,
			"second_score":	442
		}, {
			"file":	"trees.c",
			"line":	670,
			"primary_score":	999994,
			"second_score":	441
		}, {
			"file":	"trees.c",
			"line":	673,
			"primary_score":	999994,
			"second_score":	440
		}, {
			"file":	"trees.c",
			"line":	674,
			"primary_score":	999994,
			"second_score":	439
		}, {
			"file":	"trees.c",
			"line":	675,
			"primary_score":	999994,
			"second_score":	438
		}, {
			"file":	"trees.c",
			"line":	683,
			"primary_score":	999994,
			"second_score":	437
		}, {
			"file":	"trees.c",
			"line":	684,
			"primary_score":	999994,
			"second_score":	436
		}, {
			"file":	"trees.c",
			"line":	688,
			"primary_score":	999994,
			"second_score":	431
		}, {
			"file":	"trees.c",
			"line":	693,
			"primary_score":	999994,
			"second_score":	430
		}, {
			"file":	"trees.c",
			"line":	696,
			"primary_score":	999994,
			"second_score":	352
		}, {
			"file":	"trees.c",
			"line":	709,
			"primary_score":	999994,
			"second_score":	608
		}, {
			"file":	"trees.c",
			"line":	710,
			"primary_score":	999994,
			"second_score":	607
		}, {
			"file":	"trees.c",
			"line":	711,
			"primary_score":	999994,
			"second_score":	606
		}, {
			"file":	"trees.c",
			"line":	712,
			"primary_score":	999994,
			"second_score":	605
		}, {
			"file":	"trees.c",
			"line":	713,
			"primary_score":	999994,
			"second_score":	604
		}, {
			"file":	"trees.c",
			"line":	714,
			"primary_score":	999994,
			"second_score":	603
		}, {
			"file":	"trees.c",
			"line":	715,
			"primary_score":	999994,
			"second_score":	602
		}, {
			"file":	"trees.c",
			"line":	717,
			"primary_score":	999994,
			"second_score":	1719
		}, {
			"file":	"trees.c",
			"line":	718,
			"primary_score":	999994,
			"second_score":	600
		}, {
			"file":	"trees.c",
			"line":	720,
			"primary_score":	999994,
			"second_score":	599
		}, {
			"file":	"trees.c",
			"line":	721,
			"primary_score":	999994,
			"second_score":	594
		}, {
			"file":	"trees.c",
			"line":	722,
			"primary_score":	999994,
			"second_score":	592
		}, {
			"file":	"trees.c",
			"line":	723,
			"primary_score":	999994,
			"second_score":	595
		}, {
			"file":	"trees.c",
			"line":	724,
			"primary_score":	999994,
			"second_score":	591
		}, {
			"file":	"trees.c",
			"line":	725,
			"primary_score":	999994,
			"second_score":	590
		}, {
			"file":	"trees.c",
			"line":	726,
			"primary_score":	999994,
			"second_score":	627
		}, {
			"file":	"trees.c",
			"line":	729,
			"primary_score":	999994,
			"second_score":	626
		}, {
			"file":	"trees.c",
			"line":	730,
			"primary_score":	999996,
			"second_score":	1178
		}, {
			"file":	"trees.c",
			"line":	732,
			"primary_score":	999994,
			"second_score":	625
		}, {
			"file":	"trees.c",
			"line":	734,
			"primary_score":	999994,
			"second_score":	589
		}, {
			"file":	"trees.c",
			"line":	735,
			"primary_score":	999994,
			"second_score":	587
		}, {
			"file":	"trees.c",
			"line":	736,
			"primary_score":	999994,
			"second_score":	1164
		}, {
			"file":	"trees.c",
			"line":	737,
			"primary_score":	999994,
			"second_score":	586
		}, {
			"file":	"trees.c",
			"line":	740,
			"primary_score":	999994,
			"second_score":	585
		}, {
			"file":	"trees.c",
			"line":	801,
			"primary_score":	999994,
			"second_score":	1729
		}, {
			"file":	"trees.c",
			"line":	804,
			"primary_score":	999994,
			"second_score":	1728
		}, {
			"file":	"trees.c",
			"line":	805,
			"primary_score":	999994,
			"second_score":	609
		}, {
			"file":	"trees.c",
			"line":	808,
			"primary_score":	999994,
			"second_score":	584
		}, {
			"file":	"trees.c",
			"line":	817,
			"primary_score":	999994,
			"second_score":	237
		}, {
			"file":	"trees.c",
			"line":	818,
			"primary_score":	999994,
			"second_score":	235
		}, {
			"file":	"trees.c",
			"line":	821,
			"primary_score":	999994,
			"second_score":	233
		}, {
			"file":	"trees.c",
			"line":	822,
			"primary_score":	999994,
			"second_score":	232
		}, {
			"file":	"trees.c",
			"line":	824,
			"primary_score":	999994,
			"second_score":	231
		}, {
			"file":	"trees.c",
			"line":	864,
			"primary_score":	999994,
			"second_score":	3819
		}, {
			"file":	"trees.c",
			"line":	865,
			"primary_score":	999994,
			"second_score":	3818
		}, {
			"file":	"trees.c",
			"line":	867,
			"primary_score":	999994,
			"second_score":	3817
		}, {
			"file":	"trees.c",
			"line":	870,
			"primary_score":	999994,
			"second_score":	3816
		}, {
			"file":	"trees.c",
			"line":	873,
			"primary_score":	999994,
			"second_score":	3815
		}, {
			"file":	"trees.c",
			"line":	874,
			"primary_score":	999994,
			"second_score":	1932
		}, {
			"file":	"trees.c",
			"line":	876,
			"primary_score":	999994,
			"second_score":	1931
		}, {
			"file":	"trees.c",
			"line":	877,
			"primary_score":	999994,
			"second_score":	1731
		}, {
			"file":	"trees.c",
			"line":	885,
			"primary_score":	999994,
			"second_score":	1730
		}, {
			"file":	"trees.c",
			"line":	888,
			"primary_score":	999994,
			"second_score":	230
		}, {
			"file":	"trees.c",
			"line":	889,
			"primary_score":	999994,
			"second_score":	229
		}, {
			"file":	"trees.c",
			"line":	890,
			"primary_score":	999994,
			"second_score":	228
		}, {
			"file":	"trees.c",
			"line":	894,
			"primary_score":	999994,
			"second_score":	227
		}, {
			"file":	"trees.c",
			"line":	896,
			"primary_score":	999995,
			"second_score":	225
		}, {
			"file":	"trees.c",
			"line":	905,
			"primary_score":	999994,
			"second_score":	224
		}, {
			"file":	"trees.c",
			"line":	918,
			"primary_score":	999994,
			"second_score":	223
		}, {
			"file":	"trees.c",
			"line":	936,
			"primary_score":	999994,
			"second_score":	222
		}, {
			"file":	"trees.c",
			"line":	938,
			"primary_score":	999995,
			"second_score":	221
		}, {
			"file":	"trees.c",
			"line":	939,
			"primary_score":	999995,
			"second_score":	217
		}, {
			"file":	"trees.c",
			"line":	940,
			"primary_score":	999995,
			"second_score":	105
		}, {
			"file":	"trees.c",
			"line":	947,
			"primary_score":	999994,
			"second_score":	104
		}, {
			"file":	"trees.c",
			"line":	948,
			"primary_score":	999994,
			"second_score":	103
		}, {
			"file":	"trees.c",
			"line":	950,
			"primary_score":	999994,
			"second_score":	93
		}, {
			"file":	"trees.c",
			"line":	951,
			"primary_score":	999994,
			"second_score":	92
		}, {
			"file":	"trees.c",
			"line":	952,
			"primary_score":	999994,
			"second_score":	91
		}, {
			"file":	"trees.c",
			"line":	953,
			"primary_score":	999994,
			"second_score":	82
		}, {
			"file":	"trees.c",
			"line":	956,
			"primary_score":	999994,
			"second_score":	81
		}, {
			"file":	"trees.c",
			"line":	967,
			"primary_score":	999994,
			"second_score":	3829
		}, {
			"file":	"trees.c",
			"line":	968,
			"primary_score":	999994,
			"second_score":	3828
		}, {
			"file":	"trees.c",
			"line":	970,
			"primary_score":	999994,
			"second_score":	3827
		}, {
			"file":	"trees.c",
			"line":	984,
			"primary_score":	999994,
			"second_score":	3826
		}, {
			"file":	"trees.c",
			"line":	987,
			"primary_score":	999994,
			"second_score":	3825
		}, {
			"file":	"trees.c",
			"line":	988,
			"primary_score":	999998,
			"second_score":	3824
		}, {
			"file":	"trees.c",
			"line":	989,
			"primary_score":	999998,
			"second_score":	3823
		}, {
			"file":	"trees.c",
			"line":	992,
			"primary_score":	999994,
			"second_score":	3822
		}, {
			"file":	"trees.c",
			"line":	1006,
			"primary_score":	999994,
			"second_score":	3821
		}, {
			"file":	"trees.c",
			"line":	1020,
			"primary_score":	999994,
			"second_score":	216
		}, {
			"file":	"trees.c",
			"line":	1021,
			"primary_score":	999994,
			"second_score":	215
		}, {
			"file":	"trees.c",
			"line":	1022,
			"primary_score":	999994,
			"second_score":	214
		}, {
			"file":	"trees.c",
			"line":	1023,
			"primary_score":	999994,
			"second_score":	213
		}, {
			"file":	"trees.c",
			"line":	1024,
			"primary_score":	999994,
			"second_score":	212
		}, {
			"file":	"trees.c",
			"line":	1025,
			"primary_score":	999994,
			"second_score":	211
		}, {
			"file":	"trees.c",
			"line":	1026,
			"primary_score":	999994,
			"second_score":	210
		}, {
			"file":	"trees.c",
			"line":	1027,
			"primary_score":	999994,
			"second_score":	209
		}, {
			"file":	"trees.c",
			"line":	1029,
			"primary_score":	999994,
			"second_score":	208
		}, {
			"file":	"trees.c",
			"line":	1030,
			"primary_score":	999994,
			"second_score":	205
		}, {
			"file":	"trees.c",
			"line":	1031,
			"primary_score":	999994,
			"second_score":	123
		}, {
			"file":	"trees.c",
			"line":	1032,
			"primary_score":	999994,
			"second_score":	122
		}, {
			"file":	"trees.c",
			"line":	1033,
			"primary_score":	999994,
			"second_score":	121
		}, {
			"file":	"trees.c",
			"line":	1034,
			"primary_score":	999994,
			"second_score":	111
		}, {
			"file":	"trees.c",
			"line":	1056,
			"primary_score":	999994,
			"second_score":	110
		}, {
			"file":	"trees.c",
			"line":	1059,
			"primary_score":	999994,
			"second_score":	109
		}, {
			"file":	"unzip.c",
			"line":	115,
			"primary_score":	999993,
			"second_score":	8240
		}, {
			"file":	"unzip.c",
			"line":	116,
			"primary_score":	999993,
			"second_score":	8239
		}, {
			"file":	"unzip.c",
			"line":	117,
			"primary_score":	999993,
			"second_score":	8238
		}, {
			"file":	"unzip.c",
			"line":	118,
			"primary_score":	999993,
			"second_score":	8237
		}, {
			"file":	"unzip.c",
			"line":	119,
			"primary_score":	999993,
			"second_score":	8236
		}, {
			"file":	"unzip.c",
			"line":	121,
			"primary_score":	999993,
			"second_score":	8235
		}, {
			"file":	"unzip.c",
			"line":	122,
			"primary_score":	999993,
			"second_score":	8234
		}, {
			"file":	"unzip.c",
			"line":	124,
			"primary_score":	999993,
			"second_score":	8233
		}, {
			"file":	"unzip.c",
			"line":	126,
			"primary_score":	999993,
			"second_score":	8226
		}, {
			"file":	"unzip.c",
			"line":	132,
			"primary_score":	999993,
			"second_score":	8225
		}, {
			"file":	"unzip.c",
			"line":	134,
			"primary_score":	999993,
			"second_score":	8224
		}, {
			"file":	"unzip.c",
			"line":	136,
			"primary_score":	999993,
			"second_score":	129
		}, {
			"file":	"unzip.c",
			"line":	138,
			"primary_score":	999993,
			"second_score":	128
		}, {
			"file":	"unzip.c",
			"line":	161,
			"primary_score":	999994,
			"second_score":	127
		}, {
			"file":	"unzip.c",
			"line":	165,
			"primary_score":	999994,
			"second_score":	126
		}, {
			"file":	"unzip.c",
			"line":	166,
			"primary_score":	999994,
			"second_score":	118
		}, {
			"file":	"unzip.c",
			"line":	168,
			"primary_score":	999994,
			"second_score":	117
		}, {
			"file":	"unzip.c",
			"line":	169,
			"primary_score":	999994,
			"second_score":	116
		}, {
			"file":	"unzip.c",
			"line":	185,
			"primary_score":	999994,
			"second_score":	115
		}, {
			"file":	"unzip.c",
			"line":	190,
			"primary_score":	999994,
			"second_score":	107
		}, {
			"file":	"unzip.c",
			"line":	197,
			"primary_score":	999994,
			"second_score":	106
		}, {
			"file":	"unzip.c",
			"line":	210,
			"primary_score":	999994,
			"second_score":	105
		}, {
			"file":	"unzip.c",
			"line":	211,
			"primary_score":	999994,
			"second_score":	104
		}, {
			"file":	"util.c",
			"line":	78,
			"primary_score":	999993,
			"second_score":	4031
		}, {
			"file":	"util.c",
			"line":	80,
			"primary_score":	999993,
			"second_score":	4030
		}, {
			"file":	"util.c",
			"line":	82,
			"primary_score":	999993,
			"second_score":	4029
		}, {
			"file":	"util.c",
			"line":	83,
			"primary_score":	999993,
			"second_score":	12255
		}, {
			"file":	"util.c",
			"line":	85,
			"primary_score":	999994,
			"second_score":	4028
		}, {
			"file":	"util.c",
			"line":	86,
			"primary_score":	999994,
			"second_score":	4027
		}, {
			"file":	"util.c",
			"line":	87,
			"primary_score":	999994,
			"second_score":	4018
		}, {
			"file":	"util.c",
			"line":	90,
			"primary_score":	999993,
			"second_score":	4017
		}, {
			"file":	"util.c",
			"line":	91,
			"primary_score":	999993,
			"second_score":	4016
		}, {
			"file":	"util.c",
			"line":	99,
			"primary_score":	999992,
			"second_score":	12307
		}, {
			"file":	"util.c",
			"line":	100,
			"primary_score":	999992,
			"second_score":	12306
		}, {
			"file":	"util.c",
			"line":	101,
			"primary_score":	999992,
			"second_score":	12305
		}, {
			"file":	"util.c",
			"line":	110,
			"primary_score":	999992,
			"second_score":	8920
		}, {
			"file":	"util.c",
			"line":	113,
			"primary_score":	999992,
			"second_score":	8919
		}, {
			"file":	"util.c",
			"line":	114,
			"primary_score":	999992,
			"second_score":	8918
		}, {
			"file":	"util.c",
			"line":	115,
			"primary_score":	999992,
			"second_score":	8911
		}, {
			"file":	"util.c",
			"line":	116,
			"primary_score":	999992,
			"second_score":	8908
		}, {
			"file":	"util.c",
			"line":	117,
			"primary_score":	999992,
			"second_score":	8913
		}, {
			"file":	"util.c",
			"line":	121,
			"primary_score":	999992,
			"second_score":	8912
		}, {
			"file":	"util.c",
			"line":	124,
			"primary_score":	999992,
			"second_score":	8906
		}, {
			"file":	"util.c",
			"line":	130,
			"primary_score":	999992,
			"second_score":	8905
		}, {
			"file":	"util.c",
			"line":	131,
			"primary_score":	999992,
			"second_score":	8904
		}, {
			"file":	"util.c",
			"line":	132,
			"primary_score":	999992,
			"second_score":	8903
		}, {
			"file":	"util.c",
			"line":	143,
			"primary_score":	999992,
			"second_score":	8910
		}, {
			"file":	"util.c",
			"line":	145,
			"primary_score":	999992,
			"second_score":	8909
		}, {
			"file":	"util.c",
			"line":	155,
			"primary_score":	999993,
			"second_score":	135
		}, {
			"file":	"util.c",
			"line":	157,
			"primary_score":	999993,
			"second_score":	134
		}, {
			"file":	"util.c",
			"line":	166,
			"primary_score":	999994,
			"second_score":	54
		}, {
			"file":	"util.c",
			"line":	168,
			"primary_score":	999994,
			"second_score":	53
		}, {
			"file":	"util.c",
			"line":	169,
			"primary_score":	999994,
			"second_score":	48
		}, {
			"file":	"util.c",
			"line":	170,
			"primary_score":	999994,
			"second_score":	47
		}, {
			"file":	"util.c",
			"line":	179,
			"primary_score":	999994,
			"second_score":	157
		}, {
			"file":	"util.c",
			"line":	180,
			"primary_score":	999994,
			"second_score":	156
		}, {
			"file":	"util.c",
			"line":	182,
			"primary_score":	999994,
			"second_score":	139
		}, {
			"file":	"util.c",
			"line":	183,
			"primary_score":	999994,
			"second_score":	138
		}, {
			"file":	"util.c",
			"line":	185,
			"primary_score":	999994,
			"second_score":	133
		}, {
			"file":	"util.c",
			"line":	186,
			"primary_score":	999994,
			"second_score":	132
		}, {
			"file":	"util.c",
			"line":	198,
			"primary_score":	999993,
			"second_score":	137
		}, {
			"file":	"util.c",
			"line":	200,
			"primary_score":	999993,
			"second_score":	136
		}, {
			"file":	"util.c",
			"line":	215,
			"primary_score":	999997,
			"second_score":	8944
		}, {
			"file":	"util.c",
			"line":	216,
			"primary_score":	999997,
			"second_score":	8943
		}, {
			"file":	"util.c",
			"line":	217,
			"primary_score":	999999,
			"second_score":	8959
		}, {
			"file":	"util.c",
			"line":	218,
			"primary_score":	999997,
			"second_score":	8942
		}, {
			"file":	"util.c",
			"line":	230,
			"primary_score":	999992,
			"second_score":	12394
		}, {
			"file":	"util.c",
			"line":	232,
			"primary_score":	999992,
			"second_score":	12393
		}, {
			"file":	"util.c",
			"line":	242,
			"primary_score":	999992,
			"second_score":	12392
		}, {
			"file":	"util.c",
			"line":	243,
			"primary_score":	999992,
			"second_score":	12391
		}, {
			"file":	"util.c",
			"line":	252,
			"primary_score":	999997,
			"second_score":	46
		}, {
			"file":	"util.c",
			"line":	268,
			"primary_score":	999997,
			"second_score":	45
		}, {
			"file":	"util.c",
			"line":	302,
			"primary_score":	999992,
			"second_score":	12386
		}, {
			"file":	"util.c",
			"line":	303,
			"primary_score":	999992,
			"second_score":	12385
		}, {
			"file":	"util.c",
			"line":	304,
			"primary_score":	999992,
			"second_score":	12384
		}, {
			"file":	"util.c",
			"line":	305,
			"primary_score":	999992,
			"second_score":	12383
		}, {
			"file":	"util.c",
			"line":	306,
			"primary_score":	999992,
			"second_score":	12382
		}, {
			"file":	"util.c",
			"line":	307,
			"primary_score":	999992,
			"second_score":	12381
		}, {
			"file":	"util.c",
			"line":	309,
			"primary_score":	999992,
			"second_score":	12380
		}, {
			"file":	"util.c",
			"line":	310,
			"primary_score":	999992,
			"second_score":	12379
		}, {
			"file":	"zip.c",
			"line":	41,
			"primary_score":	999994,
			"second_score":	12297
		}, {
			"file":	"zip.c",
			"line":	42,
			"primary_score":	999994,
			"second_score":	12296
		}, {
			"file":	"zip.c",
			"line":	43,
			"primary_score":	999994,
			"second_score":	12295
		}, {
			"file":	"zip.c",
			"line":	44,
			"primary_score":	999994,
			"second_score":	12294
		}, {
			"file":	"zip.c",
			"line":	46,
			"primary_score":	999994,
			"second_score":	12293
		}, {
			"file":	"zip.c",
			"line":	47,
			"primary_score":	999994,
			"second_score":	12292
		}, {
			"file":	"zip.c",
			"line":	48,
			"primary_score":	999994,
			"second_score":	12291
		}, {
			"file":	"zip.c",
			"line":	52,
			"primary_score":	999994,
			"second_score":	12290
		}, {
			"file":	"zip.c",
			"line":	53,
			"primary_score":	999994,
			"second_score":	12289
		}, {
			"file":	"zip.c",
			"line":	54,
			"primary_score":	999994,
			"second_score":	12285
		}, {
			"file":	"zip.c",
			"line":	55,
			"primary_score":	999994,
			"second_score":	12281
		}, {
			"file":	"zip.c",
			"line":	57,
			"primary_score":	999994,
			"second_score":	12277
		}, {
			"file":	"zip.c",
			"line":	60,
			"primary_score":	999994,
			"second_score":	12276
		}, {
			"file":	"zip.c",
			"line":	61,
			"primary_score":	999994,
			"second_score":	12272
		}, {
			"file":	"zip.c",
			"line":	64,
			"primary_score":	999994,
			"second_score":	12271
		}, {
			"file":	"zip.c",
			"line":	67,
			"primary_score":	999994,
			"second_score":	12259
		}, {
			"file":	"zip.c",
			"line":	69,
			"primary_score":	999994,
			"second_score":	12252
		}, {
			"file":	"zip.c",
			"line":	70,
			"primary_score":	999994,
			"second_score":	12246
		}, {
			"file":	"zip.c",
			"line":	71,
			"primary_score":	999994,
			"second_score":	4053
		}, {
			"file":	"zip.c",
			"line":	73,
			"primary_score":	999994,
			"second_score":	3993
		}, {
			"file":	"zip.c",
			"line":	74,
			"primary_score":	999994,
			"second_score":	3989
		}, {
			"file":	"zip.c",
			"line":	76,
			"primary_score":	999994,
			"second_score":	3985
		}, {
			"file":	"zip.c",
			"line":	82,
			"primary_score":	999994,
			"second_score":	3984
		}, {
			"file":	"zip.c",
			"line":	84,
			"primary_score":	999994,
			"second_score":	3983
		}, {
			"file":	"zip.c",
			"line":	97,
			"primary_score":	999994,
			"second_score":	80
		}, {
			"file":	"zip.c",
			"line":	98,
			"primary_score":	999994,
			"second_score":	68
		}, {
			"file":	"zip.c",
			"line":	99,
			"primary_score":	999994,
			"second_score":	56
		}, {
			"file":	"zip.c",
			"line":	101,
			"primary_score":	999994,
			"second_score":	55
		}, {
			"file":	"zip.c",
			"line":	102,
			"primary_score":	999994,
			"second_score":	46
		}, {
			"file":	"zip.c",
			"line":	115,
			"primary_score":	999994,
			"second_score":	4004
		}, {
			"file":	"zip.c",
			"line":	117,
			"primary_score":	999994,
			"second_score":	4003
		}, {
			"file":	"zip.c",
			"line":	119,
			"primary_score":	999994,
			"second_score":	4002
		}, {
			"file":	"zip.c",
			"line":	120,
			"primary_score":	999994,
			"second_score":	3999
		}, {
			"file":	"zip.c",
			"line":	121,
			"primary_score":	999994,
			"second_score":	4033
		}, {
			"file":	"zip.c",
			"line":	126,
			"primary_score":	999994,
			"second_score":	4032
		}, {
			"file":	"zip.c",
			"line":	127,
			"primary_score":	999994,
			"second_score":	4015
		}, {
			"file":	"zip.c",
			"line":	128,
			"primary_score":	999994,
			"second_score":	4014
		}],
	"mutation_info":	[{
			"file":	"gzip.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"gzip.c",
			"lines":	[{
					"line":	486,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [403, 404, 405, 406, 407, 408, 409], [], [], [], [], [303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [], [], [], []],
							"begin_line":	487,
							"begin_column":	37,
							"end_line":	487,
							"end_column":	37,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (4 < proglen && (strcmp((program_name + proglen - 4), (\".exe\")) == 0))\n    program_name[proglen - 4] = '\\x00';\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (env != ((void *)0))\n    args = argv;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list && !quiet && file_count > 1) {\n    do_list(-1, -1);\n}\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "args = (argv)", "args = argv && !(1 << 5)", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (13)", "bytes_in = (30)", "bytes_in = (4)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (13)", "bytes_out = (30)", "bytes_out = (4)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "env = add_envopt(&argc && !(1 << 5), &argv, \"GZIP\")", "env = add_envopt(&argc, &(argv), \"GZIP\")", "env = add_envopt(&argc, &argv && !(1 << 5), \"GZIP\")", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (13)", "exit_code = (30)", "exit_code = (4)", "exit_code = (argc)", "exit_code = (file_count)", "exit_code = (optc)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (13)", "exiting_signal = (30)", "exiting_signal = (4)", "exiting_signal = (argc)", "exiting_signal = (file_count)", "exiting_signal = (optc)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "file_count = (-1)", "file_count = (0)", "file_count = (1)", "file_count = (13)", "file_count = (30)", "file_count = (4)", "file_count = (argc)", "file_count = (file_count)", "file_count = (optc)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (13)", "foreground = (30)", "foreground = (4)", "foreground = (argc)", "foreground = (file_count)", "foreground = (optc)", "free((argv))", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (13)", "header_bytes = (30)", "header_bytes = (4)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (13)", "ifd = (30)", "ifd = (4)", "ifd = (argc)", "ifd = (file_count)", "ifd = (optc)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (13)", "ifile_size = (30)", "ifile_size = (4)", "inptr && !(1 << 5)--", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (13)", "inptr = (30)", "inptr = (4)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (13)", "last_member = (30)", "last_member = (4)", "last_member = (argc)", "last_member = (file_count)", "last_member = (optc)", "list = (-1)", "list = (0)", "list = (1)", "list = (13)", "list = (30)", "list = (4)", "list = (argc)", "list = (file_count)", "list = (optc)", "method = (-1)", "method = (0)", "method = (1)", "method = (13)", "method = (30)", "method = (4)", "method = (argc)", "method = (file_count)", "method = (optc)", "method = get_method(ifd && !(1 << 5))", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (13)", "no_name = (30)", "no_name = (4)", "no_name = (argc)", "no_name = (file_count)", "no_name = (optc)", "no_name = decompress && !(1 << 5)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (13)", "no_time = (30)", "no_time = (4)", "no_time = (argc)", "no_time = (file_count)", "no_time = (optc)", "no_time = decompress && !(1 << 5)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (13)", "ofd = (30)", "ofd = (4)", "ofd = (argc)", "ofd = (file_count)", "ofd = (optc)", "part_nb && !(1 << 5)++", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (13)", "part_nb = (30)", "part_nb = (4)", "part_nb = (argc)", "part_nb = (file_count)", "part_nb = (optc)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "proglen = (-1)", "proglen = (0)", "proglen = (1)", "proglen = (13)", "proglen = (30)", "proglen = (4)", "proglen = (proglen)", "proglen = strlen(program_name && !(1 << 5))", "program_name = gzip_base_name((argv)[0])", "program_name = gzip_base_name(argv && !(1 << 5)[0])", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (13)", "quiet = (30)", "quiet = (4)", "quiet = (argc)", "quiet = (file_count)", "quiet = (optc)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (13)", "remove_ofname_fd = (30)", "remove_ofname_fd = (4)", "remove_ofname_fd = (argc)", "remove_ofname_fd = (file_count)", "remove_ofname_fd = (optc)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (13)", "save_orig_name = (30)", "save_orig_name = (4)", "save_orig_name = (argc)", "save_orig_name = (file_count)", "save_orig_name = (optc)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (13)", "time_stamp.tv_nsec = (30)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (13)", "time_stamp.tv_sec = (30)", "time_stamp.tv_sec = (4)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (13)", "to_stdout = (30)", "to_stdout = (4)", "to_stdout = (argc)", "to_stdout = (file_count)", "to_stdout = (optc)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (13)", "total_in = (30)", "total_in = (4)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (13)", "total_out = (30)", "total_out = (4)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (13)", "verbose = (30)", "verbose = (4)", "verbose = (argc)", "verbose = (file_count)", "verbose = (optc)", "xunlink(ofname && !(1 << 5))", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (13)", "z_len = (30)", "z_len = (4)", "z_len = (proglen)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "args = argv", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "proglen = strlen(program_name)", "program_name = gzip_base_name(argv[0])", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L487\", 36, &(presume_input_tty), sizeof (presume_input_tty), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(list), sizeof (list), &(force), sizeof (force), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(ascii), sizeof (ascii), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    break;\n", "if (__is_neg(\"\", \"L487\", 36, &(presume_input_tty), sizeof (presume_input_tty), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(list), sizeof (list), &(force), sizeof (force), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(ascii), sizeof (ascii), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return -1;\n", "if (__is_neg(\"\", \"L487\", 36, &(presume_input_tty), sizeof (presume_input_tty), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(list), sizeof (list), &(force), sizeof (force), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(ascii), sizeof (ascii), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 0;\n", "if (__is_neg(\"\", \"L487\", 36, &(presume_input_tty), sizeof (presume_input_tty), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(list), sizeof (list), &(force), sizeof (force), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(ascii), sizeof (ascii), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 13;\n", "if (__is_neg(\"\", \"L487\", 36, &(presume_input_tty), sizeof (presume_input_tty), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(list), sizeof (list), &(force), sizeof (force), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(ascii), sizeof (ascii), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 1;\n", "if (__is_neg(\"\", \"L487\", 36, &(presume_input_tty), sizeof (presume_input_tty), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(list), sizeof (list), &(force), sizeof (force), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(ascii), sizeof (ascii), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 30;\n", "if (__is_neg(\"\", \"L487\", 36, &(presume_input_tty), sizeof (presume_input_tty), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(list), sizeof (list), &(force), sizeof (force), &(z_len), sizeof (z_len), &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(test), sizeof (test), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(ascii), sizeof (ascii), &(optc), sizeof (optc), &(argc), sizeof (argc), &(argv), sizeof (argv), &(level), sizeof (level), &(level), sizeof (level), &(file_count), sizeof (file_count), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen), &(work), sizeof (work), &(do_lzw), sizeof (do_lzw), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 4;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	2,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	3,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	4,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	5,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	6,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	7,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	8,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	9,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	10,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	11,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	12,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	13,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	14,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	15,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	16,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	17,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	18,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	19,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	20,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	21,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	22,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	23,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	24,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	25,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	26,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	27,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	28,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	29,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	30,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	31,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	32,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	33,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	34,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	35,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	36,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	37,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	38,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	39,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	40,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	41,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	42,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	43,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	44,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	45,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	46,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	47,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	48,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	49,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	50,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	51,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	52,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	53,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	54,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	55,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	56,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	57,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	58,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	59,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	60,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	61,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	62,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	63,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	64,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	65,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	66,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	67,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	68,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	69,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	70,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	71,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	72,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	73,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	74,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	75,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	76,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	77,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	78,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	79,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	80,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	81,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	82,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	83,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	84,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	85,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	86,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	87,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	88,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	89,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	90,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	91,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	92,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	93,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	94,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	95,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	96,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	97,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	98,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	99,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	100,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	101,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	102,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	103,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	104,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	105,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	106,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	107,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	108,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	109,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	110,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	111,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	112,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	113,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	114,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	115,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	116,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	117,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	118,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	119,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	120,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	121,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	122,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	123,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	124,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	125,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	126,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	127,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	128,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	129,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	130,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	131,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	132,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	133,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	134,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	135,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	136,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	137,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	138,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	139,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	140,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	141,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	142,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	143,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	144,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	145,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	146,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	147,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	148,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	149,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	150,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	151,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	152,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	153,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	154,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	155,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	156,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	157,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	158,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	159,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	160,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	161,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	162,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	163,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	164,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	165,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	166,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	167,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	168,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	169,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	170,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	171,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	172,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	173,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	174,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	175,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	176,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	177,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	178,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	179,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	180,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	181,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	182,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	183,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	184,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	185,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	186,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	187,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	188,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	189,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	190,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	191,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	192,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	193,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	194,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	195,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	196,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	197,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	198,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	199,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	200,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	201,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	202,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	203,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	204,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	205,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	206,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	207,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	208,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	209,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	210,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	211,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	212,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	213,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	214,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	215,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	216,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	217,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	218,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	219,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	220,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	221,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	222,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	223,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	224,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	225,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	226,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	227,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	228,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	229,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	230,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	231,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	232,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	233,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	234,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	235,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	236,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	237,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	238,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	239,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	240,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	241,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	242,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	243,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	244,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	245,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	246,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	247,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	248,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	249,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	250,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	251,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	252,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	253,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	254,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	255,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	256,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	257,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	258,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	259,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	260,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	261,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	262,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	263,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	264,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	265,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	266,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	267,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	268,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	269,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	270,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	271,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	272,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	273,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	274,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	275,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	276,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	277,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	278,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	279,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	280,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	281,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	282,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	283,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	284,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	285,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	286,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	287,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	288,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	289,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	290,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	291,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	292,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	293,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	294,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	295,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	296,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	297,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	298,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	299,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	300,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	301,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	302,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	303,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	304,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	305,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	306,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	307,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	308,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	309,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	310,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	311,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	312,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	313,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	314,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	315,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	316,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	317,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	318,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	319,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	320,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	321,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	322,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	323,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	324,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	325,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	326,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	327,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	328,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	329,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	330,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	331,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	332,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	333,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	334,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	335,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	336,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	337,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	338,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	339,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	340,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	341,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	342,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	343,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	344,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	345,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	346,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	347,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	348,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	349,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	350,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	351,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	352,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	353,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	354,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	355,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	356,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	357,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	358,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	359,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	360,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	361,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	362,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	363,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	364,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	365,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	366,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	367,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	368,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	369,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	370,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	371,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	372,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	373,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	374,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	375,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	376,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	377,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	378,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	379,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	380,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	381,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	382,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	383,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	384,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	385,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	386,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	387,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	388,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	389,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	390,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	391,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	392,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	393,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	394,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	395,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	396,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	397,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	398,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	399,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	400,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	401,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	402,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	403,
									"scores":	[-4.470831993413575, -6.531275403657574, -6.5293963246575739, -3.6503754934135744, -4.5700267324135746, -6.531275403657574, -6.5293963246575739, -6.0111984934135752, -6.0111984934135752, -6.0111984934135752, -6.0111984934135752, -6.0111984934135752, -6.0111984934135752, -5.3761224934135745, -6.017900193413575, -6.0111984934135752, -6.0111984934135752, -6.017900193413575, -6.017900193413575, -6.0111984934135752, -6.0111984934135752, -6.0111984934135752, -5.5023392634135746, -5.7934254634135751, -5.8001271634135749, -6.0111984934135752, -6.0111984934135752, -5.5023392634135746, -6.017900193413575, -6.017900193413575, -4.8672632634135748, -6.0111984934135752, -6.0111984934135752, -6.0111984934135752, -6.0111984934135752, -6.0111984934135752]
								}, {
									"case":	404,
									"scores":	[-7.1764819934135744, -9.2369254036575743, -9.2350463246575742, -6.3560254934135738, -7.275676732413574, -9.2369254036575743, -9.2350463246575742, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.081772493413574, -8.7235501934135744, -8.7168484934135755, -8.7168484934135755, -8.7235501934135744, -8.7235501934135744, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.2079892634135732, -8.4990754634135754, -8.5057771634135744, -8.7168484934135755, -8.7168484934135755, -8.2079892634135732, -8.7235501934135744, -8.7235501934135744, -7.5729132634135743, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755]
								}, {
									"case":	405,
									"scores":	[-5.1580359934135744, -7.2184794036575743, -7.2166003246575743, -4.3375794934135747, -5.257230732413575, -7.2184794036575743, -7.2166003246575743, -6.6984024934135746, -6.6984024934135746, -6.6984024934135746, -6.6984024934135746, -6.6984024934135746, -6.6984024934135746, -6.0633264934135749, -6.7051041934135753, -6.6984024934135746, -6.6984024934135746, -6.7051041934135753, -6.7051041934135753, -6.6984024934135746, -6.6984024934135746, -6.6984024934135746, -6.1895432634135741, -6.4806294634135746, -6.4873311634135753, -6.6984024934135746, -6.6984024934135746, -6.1895432634135741, -6.7051041934135753, -6.7051041934135753, -5.5544672634135743, -6.6984024934135746, -6.6984024934135746, -6.6984024934135746, -6.6984024934135746, -6.6984024934135746]
								}, {
									"case":	406,
									"scores":	[-7.1764819934135744, -9.2369254036575743, -9.2350463246575742, -6.3560254934135738, -7.275676732413574, -9.2369254036575743, -9.2350463246575742, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.081772493413574, -8.7235501934135744, -8.7168484934135755, -8.7168484934135755, -8.7235501934135744, -8.7235501934135744, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.2079892634135732, -8.4990754634135754, -8.5057771634135744, -8.7168484934135755, -8.7168484934135755, -8.2079892634135732, -8.7235501934135744, -8.7235501934135744, -7.5729132634135743, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755]
								}, {
									"case":	407,
									"scores":	[-7.1764819934135744, -9.2369254036575743, -9.2350463246575742, -6.3560254934135738, -7.275676732413574, -9.2369254036575743, -9.2350463246575742, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.081772493413574, -8.7235501934135744, -8.7168484934135755, -8.7168484934135755, -8.7235501934135744, -8.7235501934135744, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.2079892634135732, -8.4990754634135754, -8.5057771634135744, -8.7168484934135755, -8.7168484934135755, -8.2079892634135732, -8.7235501934135744, -8.7235501934135744, -7.5729132634135743, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755]
								}, {
									"case":	408,
									"scores":	[-7.1764819934135744, -9.2369254036575743, -9.2350463246575742, -6.3560254934135738, -7.275676732413574, -9.2369254036575743, -9.2350463246575742, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.081772493413574, -8.7235501934135744, -8.7168484934135755, -8.7168484934135755, -8.7235501934135744, -8.7235501934135744, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.2079892634135732, -8.4990754634135754, -8.5057771634135744, -8.7168484934135755, -8.7168484934135755, -8.2079892634135732, -8.7235501934135744, -8.7235501934135744, -7.5729132634135743, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755]
								}, {
									"case":	409,
									"scores":	[-7.1764819934135744, -9.2369254036575743, -9.2350463246575742, -6.3560254934135738, -7.275676732413574, -9.2369254036575743, -9.2350463246575742, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.081772493413574, -8.7235501934135744, -8.7168484934135755, -8.7168484934135755, -8.7235501934135744, -8.7235501934135744, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.2079892634135732, -8.4990754634135754, -8.5057771634135744, -8.7168484934135755, -8.7168484934135755, -8.2079892634135732, -8.7235501934135744, -8.7235501934135744, -7.5729132634135743, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755, -8.7168484934135755]
								}]
						}]
				}, {
					"line":	503,
					"switches":	[{
							"switch":	1,
							"types":	[[], [], [], [], [403, 404, 405, 406, 407, 408, 409], [], [], [], [], [303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [], [], [], []],
							"begin_line":	504,
							"begin_column":	11,
							"end_line":	504,
							"end_column":	11,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (4 < proglen && (strcmp((program_name + proglen - 4), (\".exe\")) == 0))\n    program_name[proglen - 4] = '\\x00';\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (env != ((void *)0))\n    args = argv;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list && !quiet && file_count > 1) {\n    do_list(-1, -1);\n}\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "args = (argv)", "args = argv && !(1 << 5)", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (13)", "bytes_in = (30)", "bytes_in = (4)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (13)", "bytes_out = (30)", "bytes_out = (4)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "env = add_envopt(&argc && !(1 << 5), &argv, \"GZIP\")", "env = add_envopt(&argc, &(argv), \"GZIP\")", "env = add_envopt(&argc, &argv && !(1 << 5), \"GZIP\")", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (13)", "exit_code = (30)", "exit_code = (4)", "exit_code = (argc)", "exit_code = (file_count)", "exit_code = (optc)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (13)", "exiting_signal = (30)", "exiting_signal = (4)", "exiting_signal = (argc)", "exiting_signal = (file_count)", "exiting_signal = (optc)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "file_count = (-1)", "file_count = (0)", "file_count = (1)", "file_count = (13)", "file_count = (30)", "file_count = (4)", "file_count = (argc)", "file_count = (file_count)", "file_count = (optc)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (13)", "foreground = (30)", "foreground = (4)", "foreground = (argc)", "foreground = (file_count)", "foreground = (optc)", "free((argv))", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (13)", "header_bytes = (30)", "header_bytes = (4)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (13)", "ifd = (30)", "ifd = (4)", "ifd = (argc)", "ifd = (file_count)", "ifd = (optc)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (13)", "ifile_size = (30)", "ifile_size = (4)", "inptr && !(1 << 5)--", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (13)", "inptr = (30)", "inptr = (4)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (13)", "last_member = (30)", "last_member = (4)", "last_member = (argc)", "last_member = (file_count)", "last_member = (optc)", "list = (-1)", "list = (0)", "list = (1)", "list = (13)", "list = (30)", "list = (4)", "list = (argc)", "list = (file_count)", "list = (optc)", "method = (-1)", "method = (0)", "method = (1)", "method = (13)", "method = (30)", "method = (4)", "method = (argc)", "method = (file_count)", "method = (optc)", "method = get_method(ifd && !(1 << 5))", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (13)", "no_name = (30)", "no_name = (4)", "no_name = (argc)", "no_name = (file_count)", "no_name = (optc)", "no_name = decompress && !(1 << 5)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (13)", "no_time = (30)", "no_time = (4)", "no_time = (argc)", "no_time = (file_count)", "no_time = (optc)", "no_time = decompress && !(1 << 5)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (13)", "ofd = (30)", "ofd = (4)", "ofd = (argc)", "ofd = (file_count)", "ofd = (optc)", "part_nb && !(1 << 5)++", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (13)", "part_nb = (30)", "part_nb = (4)", "part_nb = (argc)", "part_nb = (file_count)", "part_nb = (optc)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "proglen = (-1)", "proglen = (0)", "proglen = (1)", "proglen = (13)", "proglen = (30)", "proglen = (4)", "proglen = (proglen)", "proglen = strlen(program_name && !(1 << 5))", "program_name = gzip_base_name((argv)[0])", "program_name = gzip_base_name(argv && !(1 << 5)[0])", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (13)", "quiet = (30)", "quiet = (4)", "quiet = (argc)", "quiet = (file_count)", "quiet = (optc)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (13)", "remove_ofname_fd = (30)", "remove_ofname_fd = (4)", "remove_ofname_fd = (argc)", "remove_ofname_fd = (file_count)", "remove_ofname_fd = (optc)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (13)", "save_orig_name = (30)", "save_orig_name = (4)", "save_orig_name = (argc)", "save_orig_name = (file_count)", "save_orig_name = (optc)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (13)", "time_stamp.tv_nsec = (30)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (13)", "time_stamp.tv_sec = (30)", "time_stamp.tv_sec = (4)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (13)", "to_stdout = (30)", "to_stdout = (4)", "to_stdout = (argc)", "to_stdout = (file_count)", "to_stdout = (optc)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (13)", "total_in = (30)", "total_in = (4)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (13)", "total_out = (30)", "total_out = (4)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (13)", "verbose = (30)", "verbose = (4)", "verbose = (argc)", "verbose = (file_count)", "verbose = (optc)", "xunlink(ofname && !(1 << 5))", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (13)", "z_len = (30)", "z_len = (4)", "z_len = (proglen)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "args = argv", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "proglen = strlen(program_name)", "program_name = gzip_base_name(argv[0])", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L504\", 36, &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(list), sizeof (list), &(force), sizeof (force), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(ascii), sizeof (ascii), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(env), sizeof (env), &(args), sizeof (args), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(proglen), sizeof (proglen)))\n    break;\n", "if (__is_neg(\"\", \"L504\", 36, &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(list), sizeof (list), &(force), sizeof (force), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(ascii), sizeof (ascii), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(env), sizeof (env), &(args), sizeof (args), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(proglen), sizeof (proglen)))\n    return -1;\n", "if (__is_neg(\"\", \"L504\", 36, &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(list), sizeof (list), &(force), sizeof (force), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(ascii), sizeof (ascii), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(env), sizeof (env), &(args), sizeof (args), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(proglen), sizeof (proglen)))\n    return 0;\n", "if (__is_neg(\"\", \"L504\", 36, &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(list), sizeof (list), &(force), sizeof (force), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(ascii), sizeof (ascii), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(env), sizeof (env), &(args), sizeof (args), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(proglen), sizeof (proglen)))\n    return 13;\n", "if (__is_neg(\"\", \"L504\", 36, &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(list), sizeof (list), &(force), sizeof (force), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(ascii), sizeof (ascii), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(env), sizeof (env), &(args), sizeof (args), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(proglen), sizeof (proglen)))\n    return 1;\n", "if (__is_neg(\"\", \"L504\", 36, &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(list), sizeof (list), &(force), sizeof (force), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(ascii), sizeof (ascii), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(env), sizeof (env), &(args), sizeof (args), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(proglen), sizeof (proglen)))\n    return 30;\n", "if (__is_neg(\"\", \"L504\", 36, &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(list), sizeof (list), &(force), sizeof (force), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(ascii), sizeof (ascii), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(env), sizeof (env), &(args), sizeof (args), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(proglen), sizeof (proglen)))\n    return 4;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2,
									"scores":	[-4.336279859096055]
								}, {
									"case":	3,
									"scores":	[-4.336279859096055]
								}, {
									"case":	4,
									"scores":	[-4.336279859096055]
								}, {
									"case":	5,
									"scores":	[-4.336279859096055]
								}, {
									"case":	6,
									"scores":	[-4.336279859096055]
								}, {
									"case":	7,
									"scores":	[-4.336279859096055]
								}, {
									"case":	8,
									"scores":	[-4.336279859096055]
								}, {
									"case":	9,
									"scores":	[-4.336279859096055]
								}, {
									"case":	10,
									"scores":	[-4.336279859096055]
								}, {
									"case":	11,
									"scores":	[-4.336279859096055]
								}, {
									"case":	12,
									"scores":	[-4.336279859096055]
								}, {
									"case":	13,
									"scores":	[-4.336279859096055]
								}, {
									"case":	14,
									"scores":	[-4.336279859096055]
								}, {
									"case":	15,
									"scores":	[-4.336279859096055]
								}, {
									"case":	16,
									"scores":	[-4.336279859096055]
								}, {
									"case":	17,
									"scores":	[-4.336279859096055]
								}, {
									"case":	18,
									"scores":	[-4.336279859096055]
								}, {
									"case":	19,
									"scores":	[-4.336279859096055]
								}, {
									"case":	20,
									"scores":	[-4.336279859096055]
								}, {
									"case":	21,
									"scores":	[-4.336279859096055]
								}, {
									"case":	22,
									"scores":	[-4.336279859096055]
								}, {
									"case":	23,
									"scores":	[-4.336279859096055]
								}, {
									"case":	24,
									"scores":	[-4.336279859096055]
								}, {
									"case":	25,
									"scores":	[-4.336279859096055]
								}, {
									"case":	26,
									"scores":	[-4.336279859096055]
								}, {
									"case":	27,
									"scores":	[-4.336279859096055]
								}, {
									"case":	28,
									"scores":	[-4.336279859096055]
								}, {
									"case":	29,
									"scores":	[-4.336279859096055]
								}, {
									"case":	30,
									"scores":	[-4.336279859096055]
								}, {
									"case":	31,
									"scores":	[-4.336279859096055]
								}, {
									"case":	32,
									"scores":	[-4.336279859096055]
								}, {
									"case":	33,
									"scores":	[-4.336279859096055]
								}, {
									"case":	34,
									"scores":	[-4.336279859096055]
								}, {
									"case":	35,
									"scores":	[-4.336279859096055]
								}, {
									"case":	36,
									"scores":	[-4.336279859096055]
								}, {
									"case":	37,
									"scores":	[-4.336279859096055]
								}, {
									"case":	38,
									"scores":	[-4.336279859096055]
								}, {
									"case":	39,
									"scores":	[-4.336279859096055]
								}, {
									"case":	40,
									"scores":	[-4.336279859096055]
								}, {
									"case":	41,
									"scores":	[-4.336279859096055]
								}, {
									"case":	42,
									"scores":	[-4.336279859096055]
								}, {
									"case":	43,
									"scores":	[-4.336279859096055]
								}, {
									"case":	44,
									"scores":	[-4.336279859096055]
								}, {
									"case":	45,
									"scores":	[-4.336279859096055]
								}, {
									"case":	46,
									"scores":	[-4.336279859096055]
								}, {
									"case":	47,
									"scores":	[-4.336279859096055]
								}, {
									"case":	48,
									"scores":	[-4.336279859096055]
								}, {
									"case":	49,
									"scores":	[-4.336279859096055]
								}, {
									"case":	50,
									"scores":	[-4.336279859096055]
								}, {
									"case":	51,
									"scores":	[-4.336279859096055]
								}, {
									"case":	52,
									"scores":	[-4.336279859096055]
								}, {
									"case":	53,
									"scores":	[-4.336279859096055]
								}, {
									"case":	54,
									"scores":	[-4.336279859096055]
								}, {
									"case":	55,
									"scores":	[-4.336279859096055]
								}, {
									"case":	56,
									"scores":	[-4.336279859096055]
								}, {
									"case":	57,
									"scores":	[-4.336279859096055]
								}, {
									"case":	58,
									"scores":	[-4.336279859096055]
								}, {
									"case":	59,
									"scores":	[-4.336279859096055]
								}, {
									"case":	60,
									"scores":	[-4.336279859096055]
								}, {
									"case":	61,
									"scores":	[-4.336279859096055]
								}, {
									"case":	62,
									"scores":	[-4.336279859096055]
								}, {
									"case":	63,
									"scores":	[-4.336279859096055]
								}, {
									"case":	64,
									"scores":	[-4.336279859096055]
								}, {
									"case":	65,
									"scores":	[-4.336279859096055]
								}, {
									"case":	66,
									"scores":	[-4.336279859096055]
								}, {
									"case":	67,
									"scores":	[-4.336279859096055]
								}, {
									"case":	68,
									"scores":	[-4.336279859096055]
								}, {
									"case":	69,
									"scores":	[-4.336279859096055]
								}, {
									"case":	70,
									"scores":	[-4.336279859096055]
								}, {
									"case":	71,
									"scores":	[-4.336279859096055]
								}, {
									"case":	72,
									"scores":	[-4.336279859096055]
								}, {
									"case":	73,
									"scores":	[-4.336279859096055]
								}, {
									"case":	74,
									"scores":	[-4.336279859096055]
								}, {
									"case":	75,
									"scores":	[-4.336279859096055]
								}, {
									"case":	76,
									"scores":	[-4.336279859096055]
								}, {
									"case":	77,
									"scores":	[-4.336279859096055]
								}, {
									"case":	78,
									"scores":	[-4.336279859096055]
								}, {
									"case":	79,
									"scores":	[-4.336279859096055]
								}, {
									"case":	80,
									"scores":	[-4.336279859096055]
								}, {
									"case":	81,
									"scores":	[-4.336279859096055]
								}, {
									"case":	82,
									"scores":	[-4.336279859096055]
								}, {
									"case":	83,
									"scores":	[-4.336279859096055]
								}, {
									"case":	84,
									"scores":	[-4.336279859096055]
								}, {
									"case":	85,
									"scores":	[-4.336279859096055]
								}, {
									"case":	86,
									"scores":	[-4.336279859096055]
								}, {
									"case":	87,
									"scores":	[-4.336279859096055]
								}, {
									"case":	88,
									"scores":	[-4.336279859096055]
								}, {
									"case":	89,
									"scores":	[-4.336279859096055]
								}, {
									"case":	90,
									"scores":	[-4.336279859096055]
								}, {
									"case":	91,
									"scores":	[-4.336279859096055]
								}, {
									"case":	92,
									"scores":	[-4.336279859096055]
								}, {
									"case":	93,
									"scores":	[-4.336279859096055]
								}, {
									"case":	94,
									"scores":	[-4.336279859096055]
								}, {
									"case":	95,
									"scores":	[-4.336279859096055]
								}, {
									"case":	96,
									"scores":	[-4.336279859096055]
								}, {
									"case":	97,
									"scores":	[-4.336279859096055]
								}, {
									"case":	98,
									"scores":	[-4.336279859096055]
								}, {
									"case":	99,
									"scores":	[-4.336279859096055]
								}, {
									"case":	100,
									"scores":	[-4.336279859096055]
								}, {
									"case":	101,
									"scores":	[-4.336279859096055]
								}, {
									"case":	102,
									"scores":	[-4.336279859096055]
								}, {
									"case":	103,
									"scores":	[-4.336279859096055]
								}, {
									"case":	104,
									"scores":	[-4.336279859096055]
								}, {
									"case":	105,
									"scores":	[-4.336279859096055]
								}, {
									"case":	106,
									"scores":	[-4.336279859096055]
								}, {
									"case":	107,
									"scores":	[-4.336279859096055]
								}, {
									"case":	108,
									"scores":	[-4.336279859096055]
								}, {
									"case":	109,
									"scores":	[-4.336279859096055]
								}, {
									"case":	110,
									"scores":	[-4.336279859096055]
								}, {
									"case":	111,
									"scores":	[-4.336279859096055]
								}, {
									"case":	112,
									"scores":	[-4.336279859096055]
								}, {
									"case":	113,
									"scores":	[-4.336279859096055]
								}, {
									"case":	114,
									"scores":	[-4.336279859096055]
								}, {
									"case":	115,
									"scores":	[-4.336279859096055]
								}, {
									"case":	116,
									"scores":	[-4.336279859096055]
								}, {
									"case":	117,
									"scores":	[-4.336279859096055]
								}, {
									"case":	118,
									"scores":	[-4.336279859096055]
								}, {
									"case":	119,
									"scores":	[-4.336279859096055]
								}, {
									"case":	120,
									"scores":	[-4.336279859096055]
								}, {
									"case":	121,
									"scores":	[-4.336279859096055]
								}, {
									"case":	122,
									"scores":	[-4.336279859096055]
								}, {
									"case":	123,
									"scores":	[-4.336279859096055]
								}, {
									"case":	124,
									"scores":	[-4.336279859096055]
								}, {
									"case":	125,
									"scores":	[-4.336279859096055]
								}, {
									"case":	126,
									"scores":	[-4.336279859096055]
								}, {
									"case":	127,
									"scores":	[-4.336279859096055]
								}, {
									"case":	128,
									"scores":	[-4.336279859096055]
								}, {
									"case":	129,
									"scores":	[-4.336279859096055]
								}, {
									"case":	130,
									"scores":	[-4.336279859096055]
								}, {
									"case":	131,
									"scores":	[-4.336279859096055]
								}, {
									"case":	132,
									"scores":	[-4.336279859096055]
								}, {
									"case":	133,
									"scores":	[-4.336279859096055]
								}, {
									"case":	134,
									"scores":	[-4.336279859096055]
								}, {
									"case":	135,
									"scores":	[-4.336279859096055]
								}, {
									"case":	136,
									"scores":	[-4.336279859096055]
								}, {
									"case":	137,
									"scores":	[-4.336279859096055]
								}, {
									"case":	138,
									"scores":	[-4.336279859096055]
								}, {
									"case":	139,
									"scores":	[-4.336279859096055]
								}, {
									"case":	140,
									"scores":	[-4.336279859096055]
								}, {
									"case":	141,
									"scores":	[-4.336279859096055]
								}, {
									"case":	142,
									"scores":	[-4.336279859096055]
								}, {
									"case":	143,
									"scores":	[-4.336279859096055]
								}, {
									"case":	144,
									"scores":	[-4.336279859096055]
								}, {
									"case":	145,
									"scores":	[-4.336279859096055]
								}, {
									"case":	146,
									"scores":	[-4.336279859096055]
								}, {
									"case":	147,
									"scores":	[-4.336279859096055]
								}, {
									"case":	148,
									"scores":	[-4.336279859096055]
								}, {
									"case":	149,
									"scores":	[-4.336279859096055]
								}, {
									"case":	150,
									"scores":	[-4.336279859096055]
								}, {
									"case":	151,
									"scores":	[-4.336279859096055]
								}, {
									"case":	152,
									"scores":	[-4.336279859096055]
								}, {
									"case":	153,
									"scores":	[-4.336279859096055]
								}, {
									"case":	154,
									"scores":	[-4.336279859096055]
								}, {
									"case":	155,
									"scores":	[-4.336279859096055]
								}, {
									"case":	156,
									"scores":	[-4.336279859096055]
								}, {
									"case":	157,
									"scores":	[-4.336279859096055]
								}, {
									"case":	158,
									"scores":	[-4.336279859096055]
								}, {
									"case":	159,
									"scores":	[-4.336279859096055]
								}, {
									"case":	160,
									"scores":	[-4.336279859096055]
								}, {
									"case":	161,
									"scores":	[-4.336279859096055]
								}, {
									"case":	162,
									"scores":	[-4.336279859096055]
								}, {
									"case":	163,
									"scores":	[-4.336279859096055]
								}, {
									"case":	164,
									"scores":	[-4.336279859096055]
								}, {
									"case":	165,
									"scores":	[-4.336279859096055]
								}, {
									"case":	166,
									"scores":	[-4.336279859096055]
								}, {
									"case":	167,
									"scores":	[-4.336279859096055]
								}, {
									"case":	168,
									"scores":	[-4.336279859096055]
								}, {
									"case":	169,
									"scores":	[-4.336279859096055]
								}, {
									"case":	170,
									"scores":	[-4.336279859096055]
								}, {
									"case":	171,
									"scores":	[-4.336279859096055]
								}, {
									"case":	172,
									"scores":	[-4.336279859096055]
								}, {
									"case":	173,
									"scores":	[-4.336279859096055]
								}, {
									"case":	174,
									"scores":	[-4.336279859096055]
								}, {
									"case":	175,
									"scores":	[-4.336279859096055]
								}, {
									"case":	176,
									"scores":	[-4.336279859096055]
								}, {
									"case":	177,
									"scores":	[-4.336279859096055]
								}, {
									"case":	178,
									"scores":	[-4.336279859096055]
								}, {
									"case":	179,
									"scores":	[-4.336279859096055]
								}, {
									"case":	180,
									"scores":	[-4.336279859096055]
								}, {
									"case":	181,
									"scores":	[-4.336279859096055]
								}, {
									"case":	182,
									"scores":	[-4.336279859096055]
								}, {
									"case":	183,
									"scores":	[-4.336279859096055]
								}, {
									"case":	184,
									"scores":	[-4.336279859096055]
								}, {
									"case":	185,
									"scores":	[-4.336279859096055]
								}, {
									"case":	186,
									"scores":	[-4.336279859096055]
								}, {
									"case":	187,
									"scores":	[-4.336279859096055]
								}, {
									"case":	188,
									"scores":	[-4.336279859096055]
								}, {
									"case":	189,
									"scores":	[-4.336279859096055]
								}, {
									"case":	190,
									"scores":	[-4.336279859096055]
								}, {
									"case":	191,
									"scores":	[-4.336279859096055]
								}, {
									"case":	192,
									"scores":	[-4.336279859096055]
								}, {
									"case":	193,
									"scores":	[-4.336279859096055]
								}, {
									"case":	194,
									"scores":	[-4.336279859096055]
								}, {
									"case":	195,
									"scores":	[-4.336279859096055]
								}, {
									"case":	196,
									"scores":	[-4.336279859096055]
								}, {
									"case":	197,
									"scores":	[-4.336279859096055]
								}, {
									"case":	198,
									"scores":	[-4.336279859096055]
								}, {
									"case":	199,
									"scores":	[-4.336279859096055]
								}, {
									"case":	200,
									"scores":	[-4.336279859096055]
								}, {
									"case":	201,
									"scores":	[-4.336279859096055]
								}, {
									"case":	202,
									"scores":	[-4.336279859096055]
								}, {
									"case":	203,
									"scores":	[-4.336279859096055]
								}, {
									"case":	204,
									"scores":	[-4.336279859096055]
								}, {
									"case":	205,
									"scores":	[-4.336279859096055]
								}, {
									"case":	206,
									"scores":	[-4.336279859096055]
								}, {
									"case":	207,
									"scores":	[-4.336279859096055]
								}, {
									"case":	208,
									"scores":	[-4.336279859096055]
								}, {
									"case":	209,
									"scores":	[-4.336279859096055]
								}, {
									"case":	210,
									"scores":	[-4.336279859096055]
								}, {
									"case":	211,
									"scores":	[-4.336279859096055]
								}, {
									"case":	212,
									"scores":	[-4.336279859096055]
								}, {
									"case":	213,
									"scores":	[-4.336279859096055]
								}, {
									"case":	214,
									"scores":	[-4.336279859096055]
								}, {
									"case":	215,
									"scores":	[-4.336279859096055]
								}, {
									"case":	216,
									"scores":	[-4.336279859096055]
								}, {
									"case":	217,
									"scores":	[-4.336279859096055]
								}, {
									"case":	218,
									"scores":	[-4.336279859096055]
								}, {
									"case":	219,
									"scores":	[-4.336279859096055]
								}, {
									"case":	220,
									"scores":	[-4.336279859096055]
								}, {
									"case":	221,
									"scores":	[-4.336279859096055]
								}, {
									"case":	222,
									"scores":	[-4.336279859096055]
								}, {
									"case":	223,
									"scores":	[-4.336279859096055]
								}, {
									"case":	224,
									"scores":	[-4.336279859096055]
								}, {
									"case":	225,
									"scores":	[-4.336279859096055]
								}, {
									"case":	226,
									"scores":	[-4.336279859096055]
								}, {
									"case":	227,
									"scores":	[-4.336279859096055]
								}, {
									"case":	228,
									"scores":	[-4.336279859096055]
								}, {
									"case":	229,
									"scores":	[-4.336279859096055]
								}, {
									"case":	230,
									"scores":	[-4.336279859096055]
								}, {
									"case":	231,
									"scores":	[-4.336279859096055]
								}, {
									"case":	232,
									"scores":	[-4.336279859096055]
								}, {
									"case":	233,
									"scores":	[-4.336279859096055]
								}, {
									"case":	234,
									"scores":	[-4.336279859096055]
								}, {
									"case":	235,
									"scores":	[-4.336279859096055]
								}, {
									"case":	236,
									"scores":	[-4.336279859096055]
								}, {
									"case":	237,
									"scores":	[-4.336279859096055]
								}, {
									"case":	238,
									"scores":	[-4.336279859096055]
								}, {
									"case":	239,
									"scores":	[-4.336279859096055]
								}, {
									"case":	240,
									"scores":	[-4.336279859096055]
								}, {
									"case":	241,
									"scores":	[-4.336279859096055]
								}, {
									"case":	242,
									"scores":	[-4.336279859096055]
								}, {
									"case":	243,
									"scores":	[-4.336279859096055]
								}, {
									"case":	244,
									"scores":	[-4.336279859096055]
								}, {
									"case":	245,
									"scores":	[-4.336279859096055]
								}, {
									"case":	246,
									"scores":	[-4.336279859096055]
								}, {
									"case":	247,
									"scores":	[-4.336279859096055]
								}, {
									"case":	248,
									"scores":	[-4.336279859096055]
								}, {
									"case":	249,
									"scores":	[-4.336279859096055]
								}, {
									"case":	250,
									"scores":	[-4.336279859096055]
								}, {
									"case":	251,
									"scores":	[-4.336279859096055]
								}, {
									"case":	252,
									"scores":	[-4.336279859096055]
								}, {
									"case":	253,
									"scores":	[-4.336279859096055]
								}, {
									"case":	254,
									"scores":	[-4.336279859096055]
								}, {
									"case":	255,
									"scores":	[-4.336279859096055]
								}, {
									"case":	256,
									"scores":	[-4.336279859096055]
								}, {
									"case":	257,
									"scores":	[-4.336279859096055]
								}, {
									"case":	258,
									"scores":	[-4.336279859096055]
								}, {
									"case":	259,
									"scores":	[-4.336279859096055]
								}, {
									"case":	260,
									"scores":	[-4.336279859096055]
								}, {
									"case":	261,
									"scores":	[-4.336279859096055]
								}, {
									"case":	262,
									"scores":	[-4.336279859096055]
								}, {
									"case":	263,
									"scores":	[-4.336279859096055]
								}, {
									"case":	264,
									"scores":	[-4.336279859096055]
								}, {
									"case":	265,
									"scores":	[-4.336279859096055]
								}, {
									"case":	266,
									"scores":	[-4.336279859096055]
								}, {
									"case":	267,
									"scores":	[-4.336279859096055]
								}, {
									"case":	268,
									"scores":	[-4.336279859096055]
								}, {
									"case":	269,
									"scores":	[-4.336279859096055]
								}, {
									"case":	270,
									"scores":	[-4.336279859096055]
								}, {
									"case":	271,
									"scores":	[-4.336279859096055]
								}, {
									"case":	272,
									"scores":	[-4.336279859096055]
								}, {
									"case":	273,
									"scores":	[-4.336279859096055]
								}, {
									"case":	274,
									"scores":	[-4.336279859096055]
								}, {
									"case":	275,
									"scores":	[-4.336279859096055]
								}, {
									"case":	276,
									"scores":	[-4.336279859096055]
								}, {
									"case":	277,
									"scores":	[-4.336279859096055]
								}, {
									"case":	278,
									"scores":	[-4.336279859096055]
								}, {
									"case":	279,
									"scores":	[-4.336279859096055]
								}, {
									"case":	280,
									"scores":	[-4.336279859096055]
								}, {
									"case":	281,
									"scores":	[-4.336279859096055]
								}, {
									"case":	282,
									"scores":	[-4.336279859096055]
								}, {
									"case":	283,
									"scores":	[-4.336279859096055]
								}, {
									"case":	284,
									"scores":	[-4.336279859096055]
								}, {
									"case":	285,
									"scores":	[-4.336279859096055]
								}, {
									"case":	286,
									"scores":	[-4.336279859096055]
								}, {
									"case":	287,
									"scores":	[-4.336279859096055]
								}, {
									"case":	288,
									"scores":	[-4.336279859096055]
								}, {
									"case":	289,
									"scores":	[-4.336279859096055]
								}, {
									"case":	290,
									"scores":	[-4.336279859096055]
								}, {
									"case":	291,
									"scores":	[-4.336279859096055]
								}, {
									"case":	292,
									"scores":	[-4.336279859096055]
								}, {
									"case":	293,
									"scores":	[-4.336279859096055]
								}, {
									"case":	294,
									"scores":	[-4.336279859096055]
								}, {
									"case":	295,
									"scores":	[-4.336279859096055]
								}, {
									"case":	296,
									"scores":	[-4.336279859096055]
								}, {
									"case":	297,
									"scores":	[-4.336279859096055]
								}, {
									"case":	298,
									"scores":	[-4.336279859096055]
								}, {
									"case":	299,
									"scores":	[-4.336279859096055]
								}, {
									"case":	300,
									"scores":	[-4.336279859096055]
								}, {
									"case":	301,
									"scores":	[-4.336279859096055]
								}, {
									"case":	302,
									"scores":	[-4.336279859096055]
								}, {
									"case":	303,
									"scores":	[-4.336279859096055]
								}, {
									"case":	304,
									"scores":	[-4.336279859096055]
								}, {
									"case":	305,
									"scores":	[-4.336279859096055]
								}, {
									"case":	306,
									"scores":	[-4.336279859096055]
								}, {
									"case":	307,
									"scores":	[-4.336279859096055]
								}, {
									"case":	308,
									"scores":	[-4.336279859096055]
								}, {
									"case":	309,
									"scores":	[-4.336279859096055]
								}, {
									"case":	310,
									"scores":	[-4.336279859096055]
								}, {
									"case":	311,
									"scores":	[-4.336279859096055]
								}, {
									"case":	312,
									"scores":	[-4.336279859096055]
								}, {
									"case":	313,
									"scores":	[-4.336279859096055]
								}, {
									"case":	314,
									"scores":	[-4.336279859096055]
								}, {
									"case":	315,
									"scores":	[-4.336279859096055]
								}, {
									"case":	316,
									"scores":	[-4.336279859096055]
								}, {
									"case":	317,
									"scores":	[-4.336279859096055]
								}, {
									"case":	318,
									"scores":	[-4.336279859096055]
								}, {
									"case":	319,
									"scores":	[-4.336279859096055]
								}, {
									"case":	320,
									"scores":	[-4.336279859096055]
								}, {
									"case":	321,
									"scores":	[-4.336279859096055]
								}, {
									"case":	322,
									"scores":	[-4.336279859096055]
								}, {
									"case":	323,
									"scores":	[-4.336279859096055]
								}, {
									"case":	324,
									"scores":	[-4.336279859096055]
								}, {
									"case":	325,
									"scores":	[-4.336279859096055]
								}, {
									"case":	326,
									"scores":	[-4.336279859096055]
								}, {
									"case":	327,
									"scores":	[-4.336279859096055]
								}, {
									"case":	328,
									"scores":	[-4.336279859096055]
								}, {
									"case":	329,
									"scores":	[-4.336279859096055]
								}, {
									"case":	330,
									"scores":	[-4.336279859096055]
								}, {
									"case":	331,
									"scores":	[-4.336279859096055]
								}, {
									"case":	332,
									"scores":	[-4.336279859096055]
								}, {
									"case":	333,
									"scores":	[-4.336279859096055]
								}, {
									"case":	334,
									"scores":	[-4.336279859096055]
								}, {
									"case":	335,
									"scores":	[-4.336279859096055]
								}, {
									"case":	336,
									"scores":	[-4.336279859096055]
								}, {
									"case":	337,
									"scores":	[-4.336279859096055]
								}, {
									"case":	338,
									"scores":	[-4.336279859096055]
								}, {
									"case":	339,
									"scores":	[-4.336279859096055]
								}, {
									"case":	340,
									"scores":	[-4.336279859096055]
								}, {
									"case":	341,
									"scores":	[-4.336279859096055]
								}, {
									"case":	342,
									"scores":	[-4.336279859096055]
								}, {
									"case":	343,
									"scores":	[-4.336279859096055]
								}, {
									"case":	344,
									"scores":	[-4.336279859096055]
								}, {
									"case":	345,
									"scores":	[-4.336279859096055]
								}, {
									"case":	346,
									"scores":	[-4.336279859096055]
								}, {
									"case":	347,
									"scores":	[-4.336279859096055]
								}, {
									"case":	348,
									"scores":	[-4.336279859096055]
								}, {
									"case":	349,
									"scores":	[-4.336279859096055]
								}, {
									"case":	350,
									"scores":	[-4.336279859096055]
								}, {
									"case":	351,
									"scores":	[-4.336279859096055]
								}, {
									"case":	352,
									"scores":	[-4.336279859096055]
								}, {
									"case":	353,
									"scores":	[-4.336279859096055]
								}, {
									"case":	354,
									"scores":	[-4.336279859096055]
								}, {
									"case":	355,
									"scores":	[-4.336279859096055]
								}, {
									"case":	356,
									"scores":	[-4.336279859096055]
								}, {
									"case":	357,
									"scores":	[-4.336279859096055]
								}, {
									"case":	358,
									"scores":	[-4.336279859096055]
								}, {
									"case":	359,
									"scores":	[-4.336279859096055]
								}, {
									"case":	360,
									"scores":	[-4.336279859096055]
								}, {
									"case":	361,
									"scores":	[-4.336279859096055]
								}, {
									"case":	362,
									"scores":	[-4.336279859096055]
								}, {
									"case":	363,
									"scores":	[-4.336279859096055]
								}, {
									"case":	364,
									"scores":	[-4.336279859096055]
								}, {
									"case":	365,
									"scores":	[-4.336279859096055]
								}, {
									"case":	366,
									"scores":	[-4.336279859096055]
								}, {
									"case":	367,
									"scores":	[-4.336279859096055]
								}, {
									"case":	368,
									"scores":	[-4.336279859096055]
								}, {
									"case":	369,
									"scores":	[-4.336279859096055]
								}, {
									"case":	370,
									"scores":	[-4.336279859096055]
								}, {
									"case":	371,
									"scores":	[-4.336279859096055]
								}, {
									"case":	372,
									"scores":	[-4.336279859096055]
								}, {
									"case":	373,
									"scores":	[-4.336279859096055]
								}, {
									"case":	374,
									"scores":	[-4.336279859096055]
								}, {
									"case":	375,
									"scores":	[-4.336279859096055]
								}, {
									"case":	376,
									"scores":	[-4.336279859096055]
								}, {
									"case":	377,
									"scores":	[-4.336279859096055]
								}, {
									"case":	378,
									"scores":	[-4.336279859096055]
								}, {
									"case":	379,
									"scores":	[-4.336279859096055]
								}, {
									"case":	380,
									"scores":	[-4.336279859096055]
								}, {
									"case":	381,
									"scores":	[-4.336279859096055]
								}, {
									"case":	382,
									"scores":	[-4.336279859096055]
								}, {
									"case":	383,
									"scores":	[-4.336279859096055]
								}, {
									"case":	384,
									"scores":	[-4.336279859096055]
								}, {
									"case":	385,
									"scores":	[-4.336279859096055]
								}, {
									"case":	386,
									"scores":	[-4.336279859096055]
								}, {
									"case":	387,
									"scores":	[-4.336279859096055]
								}, {
									"case":	388,
									"scores":	[-4.336279859096055]
								}, {
									"case":	389,
									"scores":	[-4.336279859096055]
								}, {
									"case":	390,
									"scores":	[-4.336279859096055]
								}, {
									"case":	391,
									"scores":	[-4.336279859096055]
								}, {
									"case":	392,
									"scores":	[-4.336279859096055]
								}, {
									"case":	393,
									"scores":	[-4.336279859096055]
								}, {
									"case":	394,
									"scores":	[-4.336279859096055]
								}, {
									"case":	395,
									"scores":	[-4.336279859096055]
								}, {
									"case":	396,
									"scores":	[-4.336279859096055]
								}, {
									"case":	397,
									"scores":	[-4.336279859096055]
								}, {
									"case":	398,
									"scores":	[-4.336279859096055]
								}, {
									"case":	399,
									"scores":	[-4.336279859096055]
								}, {
									"case":	400,
									"scores":	[-4.336279859096055]
								}, {
									"case":	401,
									"scores":	[-4.336279859096055]
								}, {
									"case":	402,
									"scores":	[-4.336279859096055]
								}, {
									"case":	403,
									"scores":	[-5.7849241400960549, -2.7006498090960553, -6.2073061560960552, -6.2147466403400546, -6.2147466403400546, -6.2073061560960552, -6.2073061560960552, -5.696548809096055, -5.696548809096055, -5.696548809096055, -5.696548809096055, -4.1561823090960557, -5.7032505090960548, -5.7032505090960548, -5.696548809096055, -5.696548809096055, -5.696548809096055, -5.1876895790960553, -5.696548809096055, -5.696548809096055, -5.696548809096055, -5.696548809096055, -5.478775779096055, -5.1876895790960553, -5.696548809096055, -5.696548809096055, -5.696548809096055, -5.696548809096055, -5.696548809096055, -5.4854774790960548, -5.696548809096055, -5.7032505090960548, -5.7032505090960548, -5.696548809096055, -5.696548809096055, -4.5526135790960547]
								}, {
									"case":	404,
									"scores":	[-8.4905741400960544, -5.4062998090960548, -8.920396640340055, -8.9129561560960546, -8.9129561560960546, -8.9129561560960546, -8.920396640340055, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -6.8618323090960551, -8.4089005090960551, -8.4089005090960551, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -7.8933395790960548, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.1844257790960544, -7.8933395790960548, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.1911274790960551, -8.4021988090960562, -8.4089005090960551, -8.4089005090960551, -8.4021988090960562, -8.4021988090960562, -7.2582635790960541]
								}, {
									"case":	405,
									"scores":	[-6.4721281400960553, -3.3878538090960553, -6.8945101560960556, -6.901950640340055, -6.901950640340055, -6.8945101560960556, -6.8945101560960556, -6.3837528090960554, -6.3837528090960554, -6.3837528090960554, -6.3837528090960554, -4.8433863090960552, -6.3904545090960552, -6.3904545090960552, -6.3837528090960554, -6.3837528090960554, -6.3837528090960554, -5.8748935790960548, -6.3837528090960554, -6.3837528090960554, -6.3837528090960554, -6.3837528090960554, -6.1659797790960553, -5.8748935790960548, -6.3837528090960554, -6.3837528090960554, -6.3837528090960554, -6.3837528090960554, -6.3837528090960554, -6.1726814790960551, -6.3837528090960554, -6.3904545090960552, -6.3904545090960552, -6.3837528090960554, -6.3837528090960554, -5.2398175790960551]
								}, {
									"case":	406,
									"scores":	[-8.4905741400960544, -5.4062998090960548, -8.9129561560960546, -8.920396640340055, -8.920396640340055, -8.9129561560960546, -8.9129561560960546, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -6.8618323090960551, -8.4089005090960551, -8.4089005090960551, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -7.8933395790960548, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.1844257790960544, -7.8933395790960548, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.1911274790960551, -8.4021988090960562, -8.4089005090960551, -8.4089005090960551, -8.4021988090960562, -8.4021988090960562, -7.2582635790960541]
								}, {
									"case":	407,
									"scores":	[-8.4905741400960544, -5.4062998090960548, -8.9129561560960546, -8.920396640340055, -8.920396640340055, -8.9129561560960546, -8.9129561560960546, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -6.8618323090960551, -8.4089005090960551, -8.4089005090960551, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -7.8933395790960548, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.1844257790960544, -7.8933395790960548, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.1911274790960551, -8.4021988090960562, -8.4089005090960551, -8.4089005090960551, -8.4021988090960562, -8.4021988090960562, -7.2582635790960541]
								}, {
									"case":	408,
									"scores":	[-8.4905741400960544, -5.4062998090960548, -8.9129561560960546, -8.920396640340055, -8.920396640340055, -8.9129561560960546, -8.9129561560960546, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -6.8618323090960551, -8.4089005090960551, -8.4089005090960551, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -7.8933395790960548, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.1844257790960544, -7.8933395790960548, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.1911274790960551, -8.4021988090960562, -8.4089005090960551, -8.4089005090960551, -8.4021988090960562, -8.4021988090960562, -7.2582635790960541]
								}, {
									"case":	409,
									"scores":	[-8.4905741400960544, -5.4062998090960548, -8.9129561560960546, -8.920396640340055, -8.920396640340055, -8.9129561560960546, -8.9129561560960546, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -6.8618323090960551, -8.4089005090960551, -8.4089005090960551, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -7.8933395790960548, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.1844257790960544, -7.8933395790960548, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.4021988090960562, -8.1911274790960551, -8.4021988090960562, -8.4089005090960551, -8.4089005090960551, -8.4021988090960562, -8.4021988090960562, -7.2582635790960541]
								}]
						}, {
							"switch":	2,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	504,
							"begin_column":	13,
							"end_line":	504,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L504\", 36, &(z_suffix), sizeof (z_suffix), &(z_len), sizeof (z_len), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(list), sizeof (list), &(force), sizeof (force), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(ascii), sizeof (ascii), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(env), sizeof (env), &(args), sizeof (args), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(proglen), sizeof (proglen)))\n    z_suffix = optarg;\n", "{\n}\n", "z_suffix = (&argc)", "z_suffix = (&argv)", "z_suffix = (&file_count)", "z_suffix = (&optc)", "z_suffix = (&proglen)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.460589759096055, -3.9059443790960549, -5.1106772310960551, -5.1177407830960551, -5.1177407830960551, -5.1106772310960551, -5.1106772310960551, -5.0781115590960546, -5.0781115590960546, -5.0781115590960546, -5.0781115590960546, -5.4575266640960551, -5.4269007590960552, -5.4269007590960552, -5.0781115590960546, -5.0781115590960546, -5.0781115590960546, -4.5270905790960549, -5.0781115590960546, -5.0781115590960546, -5.0781115590960546, -5.0781115590960546, -4.8377098790960549, -4.5270905790960549, -5.0781115590960546, -5.0781115590960546, -5.0781115590960546, -5.0781115590960546, -5.0781115590960546, -5.1864990790960555, -5.0781115590960546, -5.4269007590960552, -5.4269007590960552, -5.0781115590960546, -5.0781115590960546, -4.167522294096055]
								}, {
									"case":	2,
									"scores":	[-4.336279859096055]
								}, {
									"case":	3,
									"scores":	[-4.336279859096055]
								}, {
									"case":	4,
									"scores":	[-4.336279859096055]
								}, {
									"case":	5,
									"scores":	[-4.336279859096055]
								}, {
									"case":	6,
									"scores":	[-4.336279859096055]
								}, {
									"case":	7,
									"scores":	[-4.336279859096055]
								}]
						}]
				}, {
					"line":	504,
					"switches":	[{
							"switch":	3,
							"types":	[[], [], [], [], [403, 404, 405, 406, 407, 408, 409], [], [], [], [], [303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [], [], [], []],
							"begin_line":	505,
							"begin_column":	11,
							"end_line":	505,
							"end_column":	11,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (4 < proglen && (strcmp((program_name + proglen - 4), (\".exe\")) == 0))\n    program_name[proglen - 4] = '\\x00';\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (env != ((void *)0))\n    args = argv;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list && !quiet && file_count > 1) {\n    do_list(-1, -1);\n}\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "args = (argv)", "args = argv && !(1 << 5)", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (13)", "bytes_in = (30)", "bytes_in = (4)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (13)", "bytes_out = (30)", "bytes_out = (4)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "env = add_envopt(&argc && !(1 << 5), &argv, \"GZIP\")", "env = add_envopt(&argc, &(argv), \"GZIP\")", "env = add_envopt(&argc, &argv && !(1 << 5), \"GZIP\")", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (13)", "exit_code = (30)", "exit_code = (4)", "exit_code = (argc)", "exit_code = (file_count)", "exit_code = (optc)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (13)", "exiting_signal = (30)", "exiting_signal = (4)", "exiting_signal = (argc)", "exiting_signal = (file_count)", "exiting_signal = (optc)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "file_count = (-1)", "file_count = (0)", "file_count = (1)", "file_count = (13)", "file_count = (30)", "file_count = (4)", "file_count = (argc)", "file_count = (file_count)", "file_count = (optc)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (13)", "foreground = (30)", "foreground = (4)", "foreground = (argc)", "foreground = (file_count)", "foreground = (optc)", "free((argv))", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (13)", "header_bytes = (30)", "header_bytes = (4)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (13)", "ifd = (30)", "ifd = (4)", "ifd = (argc)", "ifd = (file_count)", "ifd = (optc)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (13)", "ifile_size = (30)", "ifile_size = (4)", "inptr && !(1 << 5)--", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (13)", "inptr = (30)", "inptr = (4)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (13)", "last_member = (30)", "last_member = (4)", "last_member = (argc)", "last_member = (file_count)", "last_member = (optc)", "list = (-1)", "list = (0)", "list = (1)", "list = (13)", "list = (30)", "list = (4)", "list = (argc)", "list = (file_count)", "list = (optc)", "method = (-1)", "method = (0)", "method = (1)", "method = (13)", "method = (30)", "method = (4)", "method = (argc)", "method = (file_count)", "method = (optc)", "method = get_method(ifd && !(1 << 5))", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (13)", "no_name = (30)", "no_name = (4)", "no_name = (argc)", "no_name = (file_count)", "no_name = (optc)", "no_name = decompress && !(1 << 5)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (13)", "no_time = (30)", "no_time = (4)", "no_time = (argc)", "no_time = (file_count)", "no_time = (optc)", "no_time = decompress && !(1 << 5)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (13)", "ofd = (30)", "ofd = (4)", "ofd = (argc)", "ofd = (file_count)", "ofd = (optc)", "part_nb && !(1 << 5)++", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (13)", "part_nb = (30)", "part_nb = (4)", "part_nb = (argc)", "part_nb = (file_count)", "part_nb = (optc)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "proglen = (-1)", "proglen = (0)", "proglen = (1)", "proglen = (13)", "proglen = (30)", "proglen = (4)", "proglen = (proglen)", "proglen = strlen(program_name && !(1 << 5))", "program_name = gzip_base_name((argv)[0])", "program_name = gzip_base_name(argv && !(1 << 5)[0])", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (13)", "quiet = (30)", "quiet = (4)", "quiet = (argc)", "quiet = (file_count)", "quiet = (optc)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (13)", "remove_ofname_fd = (30)", "remove_ofname_fd = (4)", "remove_ofname_fd = (argc)", "remove_ofname_fd = (file_count)", "remove_ofname_fd = (optc)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (13)", "save_orig_name = (30)", "save_orig_name = (4)", "save_orig_name = (argc)", "save_orig_name = (file_count)", "save_orig_name = (optc)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (13)", "time_stamp.tv_nsec = (30)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (13)", "time_stamp.tv_sec = (30)", "time_stamp.tv_sec = (4)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (13)", "to_stdout = (30)", "to_stdout = (4)", "to_stdout = (argc)", "to_stdout = (file_count)", "to_stdout = (optc)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (13)", "total_in = (30)", "total_in = (4)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (13)", "total_out = (30)", "total_out = (4)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (13)", "verbose = (30)", "verbose = (4)", "verbose = (argc)", "verbose = (file_count)", "verbose = (optc)", "xunlink(ofname && !(1 << 5))", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (13)", "z_len = (30)", "z_len = (4)", "z_len = (proglen)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "args = argv", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "proglen = strlen(program_name)", "program_name = gzip_base_name(argv[0])", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L505\", 36, &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(z_len), sizeof (z_len), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(list), sizeof (list), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(force), sizeof (force), &(ascii), sizeof (ascii), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    break;\n", "if (__is_neg(\"\", \"L505\", 36, &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(z_len), sizeof (z_len), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(list), sizeof (list), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(force), sizeof (force), &(ascii), sizeof (ascii), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return -1;\n", "if (__is_neg(\"\", \"L505\", 36, &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(z_len), sizeof (z_len), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(list), sizeof (list), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(force), sizeof (force), &(ascii), sizeof (ascii), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 0;\n", "if (__is_neg(\"\", \"L505\", 36, &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(z_len), sizeof (z_len), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(list), sizeof (list), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(force), sizeof (force), &(ascii), sizeof (ascii), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 13;\n", "if (__is_neg(\"\", \"L505\", 36, &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(z_len), sizeof (z_len), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(list), sizeof (list), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(force), sizeof (force), &(ascii), sizeof (ascii), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 1;\n", "if (__is_neg(\"\", \"L505\", 36, &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(z_len), sizeof (z_len), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(list), sizeof (list), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(force), sizeof (force), &(ascii), sizeof (ascii), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 30;\n", "if (__is_neg(\"\", \"L505\", 36, &(z_suffix), sizeof (z_suffix), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(decompress), sizeof (decompress), &(test), sizeof (test), &(z_len), sizeof (z_len), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(verbose), sizeof (verbose), &(quiet), sizeof (quiet), &(recursive), sizeof (recursive), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(list), sizeof (list), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(force), sizeof (force), &(ascii), sizeof (ascii), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(argv), sizeof (argv), &(exiting_signal), sizeof (exiting_signal), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 4;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	2,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	3,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	4,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	5,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	6,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	7,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	8,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	9,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	10,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	11,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	12,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	13,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	14,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	15,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	16,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	17,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	18,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	19,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	20,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	21,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	22,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	23,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	24,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	25,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	26,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	27,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	28,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	29,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	30,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	31,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	32,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	33,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	34,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	35,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	36,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	37,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	38,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	39,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	40,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	41,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	42,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	43,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	44,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	45,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	46,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	47,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	48,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	49,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	50,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	51,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	52,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	53,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	54,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	55,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	56,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	57,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	58,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	59,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	60,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	61,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	62,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	63,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	64,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	65,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	66,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	67,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	68,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	69,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	70,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	71,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	72,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	73,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	74,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	75,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	76,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	77,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	78,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	79,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	80,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	81,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	82,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	83,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	84,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	85,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	86,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	87,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	88,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	89,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	90,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	91,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	92,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	93,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	94,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	95,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	96,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	97,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	98,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	99,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	100,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	101,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	102,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	103,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	104,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	105,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	106,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	107,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	108,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	109,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	110,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	111,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	112,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	113,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	114,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	115,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	116,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	117,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	118,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	119,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	120,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	121,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	122,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	123,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	124,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	125,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	126,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	127,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	128,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	129,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	130,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	131,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	132,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	133,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	134,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	135,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	136,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	137,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	138,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	139,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	140,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	141,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	142,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	143,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	144,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	145,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	146,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	147,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	148,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	149,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	150,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	151,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	152,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	153,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	154,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	155,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	156,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	157,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	158,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	159,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	160,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	161,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	162,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	163,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	164,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	165,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	166,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	167,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	168,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	169,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	170,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	171,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	172,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	173,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	174,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	175,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	176,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	177,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	178,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	179,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	180,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	181,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	182,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	183,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	184,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	185,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	186,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	187,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	188,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	189,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	190,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	191,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	192,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	193,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	194,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	195,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	196,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	197,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	198,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	199,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	200,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	201,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	202,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	203,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	204,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	205,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	206,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	207,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	208,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	209,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	210,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	211,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	212,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	213,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	214,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	215,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	216,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	217,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	218,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	219,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	220,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	221,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	222,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	223,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	224,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	225,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	226,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	227,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	228,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	229,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	230,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	231,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	232,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	233,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	234,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	235,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	236,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	237,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	238,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	239,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	240,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	241,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	242,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	243,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	244,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	245,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	246,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	247,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	248,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	249,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	250,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	251,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	252,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	253,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	254,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	255,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	256,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	257,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	258,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	259,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	260,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	261,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	262,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	263,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	264,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	265,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	266,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	267,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	268,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	269,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	270,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	271,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	272,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	273,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	274,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	275,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	276,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	277,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	278,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	279,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	280,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	281,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	282,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	283,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	284,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	285,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	286,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	287,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	288,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	289,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	290,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	291,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	292,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	293,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	294,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	295,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	296,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	297,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	298,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	299,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	300,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	301,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	302,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	303,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	304,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	305,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	306,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	307,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	308,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	309,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	310,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	311,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	312,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	313,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	314,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	315,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	316,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	317,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	318,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	319,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	320,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	321,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	322,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	323,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	324,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	325,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	326,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	327,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	328,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	329,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	330,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	331,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	332,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	333,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	334,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	335,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	336,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	337,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	338,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	339,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	340,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	341,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	342,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	343,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	344,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	345,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	346,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	347,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	348,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	349,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	350,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	351,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	352,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	353,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	354,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	355,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	356,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	357,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	358,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	359,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	360,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	361,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	362,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	363,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	364,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	365,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	366,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	367,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	368,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	369,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	370,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	371,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	372,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	373,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	374,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	375,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	376,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	377,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	378,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	379,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	380,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	381,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	382,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	383,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	384,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	385,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	386,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	387,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	388,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	389,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	390,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	391,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	392,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	393,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	394,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	395,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	396,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	397,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	398,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	399,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	400,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	401,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	402,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	403,
									"scores":	[-3.6166717787785352, -6.4815504257785355, -6.4889909100225349, -6.4889909100225349, -6.4815504257785355, -6.4815504257785355, -2.9748940787785356, -5.9409179567785362, -5.9707930787785362, -5.9409179567785362, -5.9707930787785362, -5.9707930787785362, -5.977494778778536, -5.977494778778536, -5.9707930787785362, -5.4619338487785356, -5.9707930787785362, -5.9707930787785362, -5.9707930787785362, -5.9707930787785362, -5.9707930787785362, -5.7530200487785361, -5.4619338487785356, -5.9707930787785362, -5.9707930787785362, -5.9707930787785362, -5.9707930787785362, -5.9707930787785362, -5.9707930787785362, -5.7597217487785359, -5.9707930787785362, -5.9707930787785362, -5.9707930787785362, -5.977494778778536, -5.977494778778536, -4.8268578487785359]
								}, {
									"case":	404,
									"scores":	[-6.3223217787785355, -9.1872004257785349, -9.1946409100225353, -9.1946409100225353, -9.1872004257785349, -9.1872004257785349, -5.6805440787785351, -8.6465679567785365, -8.6764430787785365, -8.6465679567785365, -8.6764430787785365, -8.6764430787785365, -8.6831447787785354, -8.6831447787785354, -8.6764430787785365, -8.1675838487785342, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.4586700487785365, -8.1675838487785342, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.4653717487785354, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6831447787785354, -8.6831447787785354, -7.5325078487785353]
								}, {
									"case":	405,
									"scores":	[-4.3038757787785356, -7.1687544257785358, -7.1761949100225353, -7.1761949100225353, -7.1687544257785358, -7.1687544257785358, -3.6620980787785355, -6.6281219567785357, -6.6579970787785356, -6.6281219567785357, -6.6579970787785356, -6.6579970787785356, -6.6646987787785363, -6.6646987787785363, -6.6579970787785356, -6.1491378487785351, -6.6579970787785356, -6.6579970787785356, -6.6579970787785356, -6.6579970787785356, -6.6579970787785356, -6.4402240487785356, -6.1491378487785351, -6.6579970787785356, -6.6579970787785356, -6.6579970787785356, -6.6579970787785356, -6.6579970787785356, -6.6579970787785356, -6.4469257487785363, -6.6579970787785356, -6.6579970787785356, -6.6579970787785356, -6.6646987787785363, -6.6646987787785363, -5.5140618487785353]
								}, {
									"case":	406,
									"scores":	[-6.3223217787785355, -9.1872004257785349, -9.1946409100225353, -9.1946409100225353, -9.1872004257785349, -9.1872004257785349, -5.6805440787785351, -8.6465679567785365, -8.6764430787785365, -8.6465679567785365, -8.6764430787785365, -8.6764430787785365, -8.6831447787785354, -8.6831447787785354, -8.6764430787785365, -8.1675838487785342, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.4586700487785365, -8.1675838487785342, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.4653717487785354, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6831447787785354, -8.6831447787785354, -7.5325078487785353]
								}, {
									"case":	407,
									"scores":	[-6.3223217787785355, -9.1872004257785349, -9.1946409100225353, -9.1946409100225353, -9.1872004257785349, -9.1872004257785349, -5.6805440787785351, -8.6465679567785365, -8.6764430787785365, -8.6465679567785365, -8.6764430787785365, -8.6764430787785365, -8.6831447787785354, -8.6831447787785354, -8.6764430787785365, -8.1675838487785342, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.4586700487785365, -8.1675838487785342, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.4653717487785354, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6831447787785354, -8.6831447787785354, -7.5325078487785353]
								}, {
									"case":	408,
									"scores":	[-6.3223217787785355, -9.1872004257785349, -9.1946409100225353, -9.1946409100225353, -9.1872004257785349, -9.1872004257785349, -5.6805440787785351, -8.6465679567785365, -8.6764430787785365, -8.6465679567785365, -8.6764430787785365, -8.6764430787785365, -8.6831447787785354, -8.6831447787785354, -8.6764430787785365, -8.1675838487785342, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.4586700487785365, -8.1675838487785342, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.4653717487785354, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6831447787785354, -8.6831447787785354, -7.5325078487785353]
								}, {
									"case":	409,
									"scores":	[-6.3223217787785355, -9.1872004257785349, -9.1946409100225353, -9.1946409100225353, -9.1872004257785349, -9.1872004257785349, -5.6805440787785351, -8.6465679567785365, -8.6764430787785365, -8.6465679567785365, -8.6764430787785365, -8.6764430787785365, -8.6831447787785354, -8.6831447787785354, -8.6764430787785365, -8.1675838487785342, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.4586700487785365, -8.1675838487785342, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.4653717487785354, -8.6764430787785365, -8.6764430787785365, -8.6764430787785365, -8.6831447787785354, -8.6831447787785354, -7.5325078487785353]
								}]
						}]
				}, {
					"line":	546,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [403, 404, 405, 406, 407, 408], [], [], [], [], [303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [], [], [], []],
							"begin_line":	547,
							"begin_column":	3,
							"end_line":	547,
							"end_column":	3,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (4 < proglen && (strcmp((program_name + proglen - 4), (\".exe\")) == 0))\n    program_name[proglen - 4] = '\\x00';\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (env != ((void *)0))\n    args = argv;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list && !quiet && file_count > 1) {\n    do_list(-1, -1);\n}\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "args = (argv)", "args = argv && !(1 << 5)", "bytes_in = (-1)", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (13)", "bytes_in = (30)", "bytes_in = (4)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (-1)", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (13)", "bytes_out = (30)", "bytes_out = (4)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "env = add_envopt(&argc && !(1 << 5), &argv, \"GZIP\")", "env = add_envopt(&argc, &(argv), \"GZIP\")", "env = add_envopt(&argc, &argv && !(1 << 5), \"GZIP\")", "exit_code = (-1)", "exit_code = (0)", "exit_code = (1)", "exit_code = (13)", "exit_code = (30)", "exit_code = (4)", "exit_code = (argc)", "exit_code = (file_count)", "exit_code = (optc)", "exiting_signal = (-1)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (13)", "exiting_signal = (30)", "exiting_signal = (4)", "exiting_signal = (argc)", "exiting_signal = (file_count)", "exiting_signal = (optc)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "file_count = (-1)", "file_count = (0)", "file_count = (1)", "file_count = (13)", "file_count = (30)", "file_count = (4)", "file_count = (argc)", "file_count = (file_count)", "file_count = (optc)", "foreground = (-1)", "foreground = (0)", "foreground = (1)", "foreground = (13)", "foreground = (30)", "foreground = (4)", "foreground = (argc)", "foreground = (file_count)", "foreground = (optc)", "free((argv))", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (-1)", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (13)", "header_bytes = (30)", "header_bytes = (4)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (-1)", "ifd = (0)", "ifd = (1)", "ifd = (13)", "ifd = (30)", "ifd = (4)", "ifd = (argc)", "ifd = (file_count)", "ifd = (optc)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (-1)", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (13)", "ifile_size = (30)", "ifile_size = (4)", "inptr && !(1 << 5)--", "inptr = (-1)", "inptr = (0)", "inptr = (1)", "inptr = (13)", "inptr = (30)", "inptr = (4)", "last_member = (-1)", "last_member = (0)", "last_member = (1)", "last_member = (13)", "last_member = (30)", "last_member = (4)", "last_member = (argc)", "last_member = (file_count)", "last_member = (optc)", "list = (-1)", "list = (0)", "list = (1)", "list = (13)", "list = (30)", "list = (4)", "list = (argc)", "list = (file_count)", "list = (optc)", "method = (-1)", "method = (0)", "method = (1)", "method = (13)", "method = (30)", "method = (4)", "method = (argc)", "method = (file_count)", "method = (optc)", "method = get_method(ifd && !(1 << 5))", "no_name = (-1)", "no_name = (0)", "no_name = (1)", "no_name = (13)", "no_name = (30)", "no_name = (4)", "no_name = (argc)", "no_name = (file_count)", "no_name = (optc)", "no_name = decompress && !(1 << 5)", "no_time = (-1)", "no_time = (0)", "no_time = (1)", "no_time = (13)", "no_time = (30)", "no_time = (4)", "no_time = (argc)", "no_time = (file_count)", "no_time = (optc)", "no_time = decompress && !(1 << 5)", "ofd = (-1)", "ofd = (0)", "ofd = (1)", "ofd = (13)", "ofd = (30)", "ofd = (4)", "ofd = (argc)", "ofd = (file_count)", "ofd = (optc)", "part_nb && !(1 << 5)++", "part_nb = (-1)", "part_nb = (0)", "part_nb = (1)", "part_nb = (13)", "part_nb = (30)", "part_nb = (4)", "part_nb = (argc)", "part_nb = (file_count)", "part_nb = (optc)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "proglen = (-1)", "proglen = (0)", "proglen = (1)", "proglen = (13)", "proglen = (30)", "proglen = (4)", "proglen = (proglen)", "proglen = strlen(program_name && !(1 << 5))", "program_name = gzip_base_name((argv)[0])", "program_name = gzip_base_name(argv && !(1 << 5)[0])", "quiet = (-1)", "quiet = (0)", "quiet = (1)", "quiet = (13)", "quiet = (30)", "quiet = (4)", "quiet = (argc)", "quiet = (file_count)", "quiet = (optc)", "remove_ofname_fd = (-1)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (13)", "remove_ofname_fd = (30)", "remove_ofname_fd = (4)", "remove_ofname_fd = (argc)", "remove_ofname_fd = (file_count)", "remove_ofname_fd = (optc)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (-1)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (13)", "save_orig_name = (30)", "save_orig_name = (4)", "save_orig_name = (argc)", "save_orig_name = (file_count)", "save_orig_name = (optc)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (-1)", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (13)", "time_stamp.tv_nsec = (30)", "time_stamp.tv_nsec = (4)", "time_stamp.tv_sec = (-1)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (13)", "time_stamp.tv_sec = (30)", "time_stamp.tv_sec = (4)", "to_stdout = (-1)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (13)", "to_stdout = (30)", "to_stdout = (4)", "to_stdout = (argc)", "to_stdout = (file_count)", "to_stdout = (optc)", "total_in = (-1)", "total_in = (0)", "total_in = (1)", "total_in = (13)", "total_in = (30)", "total_in = (4)", "total_out = (-1)", "total_out = (0)", "total_out = (1)", "total_out = (13)", "total_out = (30)", "total_out = (4)", "verbose = (-1)", "verbose = (0)", "verbose = (1)", "verbose = (13)", "verbose = (30)", "verbose = (4)", "verbose = (argc)", "verbose = (file_count)", "verbose = (optc)", "xunlink(ofname && !(1 << 5))", "z_len = (-1)", "z_len = (0)", "z_len = (1)", "z_len = (13)", "z_len = (30)", "z_len = (4)", "z_len = (proglen)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "args = argv", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "proglen = strlen(program_name)", "program_name = gzip_base_name(argv[0])", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L547\", 36, &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(quiet), sizeof (quiet), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(exiting_signal), sizeof (exiting_signal), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(test), sizeof (test), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(presume_input_tty), sizeof (presume_input_tty), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return -1;\n", "if (__is_neg(\"\", \"L547\", 36, &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(quiet), sizeof (quiet), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(exiting_signal), sizeof (exiting_signal), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(test), sizeof (test), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(presume_input_tty), sizeof (presume_input_tty), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 0;\n", "if (__is_neg(\"\", \"L547\", 36, &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(quiet), sizeof (quiet), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(exiting_signal), sizeof (exiting_signal), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(test), sizeof (test), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(presume_input_tty), sizeof (presume_input_tty), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 13;\n", "if (__is_neg(\"\", \"L547\", 36, &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(quiet), sizeof (quiet), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(exiting_signal), sizeof (exiting_signal), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(test), sizeof (test), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(presume_input_tty), sizeof (presume_input_tty), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 1;\n", "if (__is_neg(\"\", \"L547\", 36, &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(quiet), sizeof (quiet), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(exiting_signal), sizeof (exiting_signal), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(test), sizeof (test), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(presume_input_tty), sizeof (presume_input_tty), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 30;\n", "if (__is_neg(\"\", \"L547\", 36, &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(quiet), sizeof (quiet), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(exiting_signal), sizeof (exiting_signal), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(test), sizeof (test), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(presume_input_tty), sizeof (presume_input_tty), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    return 4;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.912023005428146]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-3.912023005428146]
								}, {
									"case":	80,
									"scores":	[-3.912023005428146]
								}, {
									"case":	81,
									"scores":	[-3.912023005428146]
								}, {
									"case":	82,
									"scores":	[-3.912023005428146]
								}, {
									"case":	83,
									"scores":	[-3.912023005428146]
								}, {
									"case":	84,
									"scores":	[-3.912023005428146]
								}, {
									"case":	85,
									"scores":	[-3.912023005428146]
								}, {
									"case":	86,
									"scores":	[-3.912023005428146]
								}, {
									"case":	87,
									"scores":	[-3.912023005428146]
								}, {
									"case":	88,
									"scores":	[-3.912023005428146]
								}, {
									"case":	89,
									"scores":	[-3.912023005428146]
								}, {
									"case":	90,
									"scores":	[-3.912023005428146]
								}, {
									"case":	91,
									"scores":	[-3.912023005428146]
								}, {
									"case":	92,
									"scores":	[-3.912023005428146]
								}, {
									"case":	93,
									"scores":	[-3.912023005428146]
								}, {
									"case":	94,
									"scores":	[-3.912023005428146]
								}, {
									"case":	95,
									"scores":	[-3.912023005428146]
								}, {
									"case":	96,
									"scores":	[-3.912023005428146]
								}, {
									"case":	97,
									"scores":	[-3.912023005428146]
								}, {
									"case":	98,
									"scores":	[-3.912023005428146]
								}, {
									"case":	99,
									"scores":	[-3.912023005428146]
								}, {
									"case":	100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	110,
									"scores":	[-3.912023005428146]
								}, {
									"case":	111,
									"scores":	[-3.912023005428146]
								}, {
									"case":	112,
									"scores":	[-3.912023005428146]
								}, {
									"case":	113,
									"scores":	[-3.912023005428146]
								}, {
									"case":	114,
									"scores":	[-3.912023005428146]
								}, {
									"case":	115,
									"scores":	[-3.912023005428146]
								}, {
									"case":	116,
									"scores":	[-3.912023005428146]
								}, {
									"case":	117,
									"scores":	[-3.912023005428146]
								}, {
									"case":	118,
									"scores":	[-3.912023005428146]
								}, {
									"case":	119,
									"scores":	[-3.912023005428146]
								}, {
									"case":	120,
									"scores":	[-3.912023005428146]
								}, {
									"case":	121,
									"scores":	[-3.912023005428146]
								}, {
									"case":	122,
									"scores":	[-3.912023005428146]
								}, {
									"case":	123,
									"scores":	[-3.912023005428146]
								}, {
									"case":	124,
									"scores":	[-3.912023005428146]
								}, {
									"case":	125,
									"scores":	[-3.912023005428146]
								}, {
									"case":	126,
									"scores":	[-3.912023005428146]
								}, {
									"case":	127,
									"scores":	[-3.912023005428146]
								}, {
									"case":	128,
									"scores":	[-3.912023005428146]
								}, {
									"case":	129,
									"scores":	[-3.912023005428146]
								}, {
									"case":	130,
									"scores":	[-3.912023005428146]
								}, {
									"case":	131,
									"scores":	[-3.912023005428146]
								}, {
									"case":	132,
									"scores":	[-3.912023005428146]
								}, {
									"case":	133,
									"scores":	[-3.912023005428146]
								}, {
									"case":	134,
									"scores":	[-3.912023005428146]
								}, {
									"case":	135,
									"scores":	[-3.912023005428146]
								}, {
									"case":	136,
									"scores":	[-3.912023005428146]
								}, {
									"case":	137,
									"scores":	[-3.912023005428146]
								}, {
									"case":	138,
									"scores":	[-3.912023005428146]
								}, {
									"case":	139,
									"scores":	[-3.912023005428146]
								}, {
									"case":	140,
									"scores":	[-3.912023005428146]
								}, {
									"case":	141,
									"scores":	[-3.912023005428146]
								}, {
									"case":	142,
									"scores":	[-3.912023005428146]
								}, {
									"case":	143,
									"scores":	[-3.912023005428146]
								}, {
									"case":	144,
									"scores":	[-3.912023005428146]
								}, {
									"case":	145,
									"scores":	[-3.912023005428146]
								}, {
									"case":	146,
									"scores":	[-3.912023005428146]
								}, {
									"case":	147,
									"scores":	[-3.912023005428146]
								}, {
									"case":	148,
									"scores":	[-3.912023005428146]
								}, {
									"case":	149,
									"scores":	[-3.912023005428146]
								}, {
									"case":	150,
									"scores":	[-3.912023005428146]
								}, {
									"case":	151,
									"scores":	[-3.912023005428146]
								}, {
									"case":	152,
									"scores":	[-3.912023005428146]
								}, {
									"case":	153,
									"scores":	[-3.912023005428146]
								}, {
									"case":	154,
									"scores":	[-3.912023005428146]
								}, {
									"case":	155,
									"scores":	[-3.912023005428146]
								}, {
									"case":	156,
									"scores":	[-3.912023005428146]
								}, {
									"case":	157,
									"scores":	[-3.912023005428146]
								}, {
									"case":	158,
									"scores":	[-3.912023005428146]
								}, {
									"case":	159,
									"scores":	[-3.912023005428146]
								}, {
									"case":	160,
									"scores":	[-3.912023005428146]
								}, {
									"case":	161,
									"scores":	[-3.912023005428146]
								}, {
									"case":	162,
									"scores":	[-3.912023005428146]
								}, {
									"case":	163,
									"scores":	[-3.912023005428146]
								}, {
									"case":	164,
									"scores":	[-3.912023005428146]
								}, {
									"case":	165,
									"scores":	[-3.912023005428146]
								}, {
									"case":	166,
									"scores":	[-3.912023005428146]
								}, {
									"case":	167,
									"scores":	[-3.912023005428146]
								}, {
									"case":	168,
									"scores":	[-3.912023005428146]
								}, {
									"case":	169,
									"scores":	[-3.912023005428146]
								}, {
									"case":	170,
									"scores":	[-3.912023005428146]
								}, {
									"case":	171,
									"scores":	[-3.912023005428146]
								}, {
									"case":	172,
									"scores":	[-3.912023005428146]
								}, {
									"case":	173,
									"scores":	[-3.912023005428146]
								}, {
									"case":	174,
									"scores":	[-3.912023005428146]
								}, {
									"case":	175,
									"scores":	[-3.912023005428146]
								}, {
									"case":	176,
									"scores":	[-3.912023005428146]
								}, {
									"case":	177,
									"scores":	[-3.912023005428146]
								}, {
									"case":	178,
									"scores":	[-3.912023005428146]
								}, {
									"case":	179,
									"scores":	[-3.912023005428146]
								}, {
									"case":	180,
									"scores":	[-3.912023005428146]
								}, {
									"case":	181,
									"scores":	[-3.912023005428146]
								}, {
									"case":	182,
									"scores":	[-3.912023005428146]
								}, {
									"case":	183,
									"scores":	[-3.912023005428146]
								}, {
									"case":	184,
									"scores":	[-3.912023005428146]
								}, {
									"case":	185,
									"scores":	[-3.912023005428146]
								}, {
									"case":	186,
									"scores":	[-3.912023005428146]
								}, {
									"case":	187,
									"scores":	[-3.912023005428146]
								}, {
									"case":	188,
									"scores":	[-3.912023005428146]
								}, {
									"case":	189,
									"scores":	[-3.912023005428146]
								}, {
									"case":	190,
									"scores":	[-3.912023005428146]
								}, {
									"case":	191,
									"scores":	[-3.912023005428146]
								}, {
									"case":	192,
									"scores":	[-3.912023005428146]
								}, {
									"case":	193,
									"scores":	[-3.912023005428146]
								}, {
									"case":	194,
									"scores":	[-3.912023005428146]
								}, {
									"case":	195,
									"scores":	[-3.912023005428146]
								}, {
									"case":	196,
									"scores":	[-3.912023005428146]
								}, {
									"case":	197,
									"scores":	[-3.912023005428146]
								}, {
									"case":	198,
									"scores":	[-3.912023005428146]
								}, {
									"case":	199,
									"scores":	[-3.912023005428146]
								}, {
									"case":	200,
									"scores":	[-3.912023005428146]
								}, {
									"case":	201,
									"scores":	[-3.912023005428146]
								}, {
									"case":	202,
									"scores":	[-3.912023005428146]
								}, {
									"case":	203,
									"scores":	[-3.912023005428146]
								}, {
									"case":	204,
									"scores":	[-3.912023005428146]
								}, {
									"case":	205,
									"scores":	[-3.912023005428146]
								}, {
									"case":	206,
									"scores":	[-3.912023005428146]
								}, {
									"case":	207,
									"scores":	[-3.912023005428146]
								}, {
									"case":	208,
									"scores":	[-3.912023005428146]
								}, {
									"case":	209,
									"scores":	[-3.912023005428146]
								}, {
									"case":	210,
									"scores":	[-3.912023005428146]
								}, {
									"case":	211,
									"scores":	[-3.912023005428146]
								}, {
									"case":	212,
									"scores":	[-3.912023005428146]
								}, {
									"case":	213,
									"scores":	[-3.912023005428146]
								}, {
									"case":	214,
									"scores":	[-3.912023005428146]
								}, {
									"case":	215,
									"scores":	[-3.912023005428146]
								}, {
									"case":	216,
									"scores":	[-3.912023005428146]
								}, {
									"case":	217,
									"scores":	[-3.912023005428146]
								}, {
									"case":	218,
									"scores":	[-3.912023005428146]
								}, {
									"case":	219,
									"scores":	[-3.912023005428146]
								}, {
									"case":	220,
									"scores":	[-3.912023005428146]
								}, {
									"case":	221,
									"scores":	[-3.912023005428146]
								}, {
									"case":	222,
									"scores":	[-3.912023005428146]
								}, {
									"case":	223,
									"scores":	[-3.912023005428146]
								}, {
									"case":	224,
									"scores":	[-3.912023005428146]
								}, {
									"case":	225,
									"scores":	[-3.912023005428146]
								}, {
									"case":	226,
									"scores":	[-3.912023005428146]
								}, {
									"case":	227,
									"scores":	[-3.912023005428146]
								}, {
									"case":	228,
									"scores":	[-3.912023005428146]
								}, {
									"case":	229,
									"scores":	[-3.912023005428146]
								}, {
									"case":	230,
									"scores":	[-3.912023005428146]
								}, {
									"case":	231,
									"scores":	[-3.912023005428146]
								}, {
									"case":	232,
									"scores":	[-3.912023005428146]
								}, {
									"case":	233,
									"scores":	[-3.912023005428146]
								}, {
									"case":	234,
									"scores":	[-3.912023005428146]
								}, {
									"case":	235,
									"scores":	[-3.912023005428146]
								}, {
									"case":	236,
									"scores":	[-3.912023005428146]
								}, {
									"case":	237,
									"scores":	[-3.912023005428146]
								}, {
									"case":	238,
									"scores":	[-3.912023005428146]
								}, {
									"case":	239,
									"scores":	[-3.912023005428146]
								}, {
									"case":	240,
									"scores":	[-3.912023005428146]
								}, {
									"case":	241,
									"scores":	[-3.912023005428146]
								}, {
									"case":	242,
									"scores":	[-3.912023005428146]
								}, {
									"case":	243,
									"scores":	[-3.912023005428146]
								}, {
									"case":	244,
									"scores":	[-3.912023005428146]
								}, {
									"case":	245,
									"scores":	[-3.912023005428146]
								}, {
									"case":	246,
									"scores":	[-3.912023005428146]
								}, {
									"case":	247,
									"scores":	[-3.912023005428146]
								}, {
									"case":	248,
									"scores":	[-3.912023005428146]
								}, {
									"case":	249,
									"scores":	[-3.912023005428146]
								}, {
									"case":	250,
									"scores":	[-3.912023005428146]
								}, {
									"case":	251,
									"scores":	[-3.912023005428146]
								}, {
									"case":	252,
									"scores":	[-3.912023005428146]
								}, {
									"case":	253,
									"scores":	[-3.912023005428146]
								}, {
									"case":	254,
									"scores":	[-3.912023005428146]
								}, {
									"case":	255,
									"scores":	[-3.912023005428146]
								}, {
									"case":	256,
									"scores":	[-3.912023005428146]
								}, {
									"case":	257,
									"scores":	[-3.912023005428146]
								}, {
									"case":	258,
									"scores":	[-3.912023005428146]
								}, {
									"case":	259,
									"scores":	[-3.912023005428146]
								}, {
									"case":	260,
									"scores":	[-3.912023005428146]
								}, {
									"case":	261,
									"scores":	[-3.912023005428146]
								}, {
									"case":	262,
									"scores":	[-3.912023005428146]
								}, {
									"case":	263,
									"scores":	[-3.912023005428146]
								}, {
									"case":	264,
									"scores":	[-3.912023005428146]
								}, {
									"case":	265,
									"scores":	[-3.912023005428146]
								}, {
									"case":	266,
									"scores":	[-3.912023005428146]
								}, {
									"case":	267,
									"scores":	[-3.912023005428146]
								}, {
									"case":	268,
									"scores":	[-3.912023005428146]
								}, {
									"case":	269,
									"scores":	[-3.912023005428146]
								}, {
									"case":	270,
									"scores":	[-3.912023005428146]
								}, {
									"case":	271,
									"scores":	[-3.912023005428146]
								}, {
									"case":	272,
									"scores":	[-3.912023005428146]
								}, {
									"case":	273,
									"scores":	[-3.912023005428146]
								}, {
									"case":	274,
									"scores":	[-3.912023005428146]
								}, {
									"case":	275,
									"scores":	[-3.912023005428146]
								}, {
									"case":	276,
									"scores":	[-3.912023005428146]
								}, {
									"case":	277,
									"scores":	[-3.912023005428146]
								}, {
									"case":	278,
									"scores":	[-3.912023005428146]
								}, {
									"case":	279,
									"scores":	[-3.912023005428146]
								}, {
									"case":	280,
									"scores":	[-3.912023005428146]
								}, {
									"case":	281,
									"scores":	[-3.912023005428146]
								}, {
									"case":	282,
									"scores":	[-3.912023005428146]
								}, {
									"case":	283,
									"scores":	[-3.912023005428146]
								}, {
									"case":	284,
									"scores":	[-3.912023005428146]
								}, {
									"case":	285,
									"scores":	[-3.912023005428146]
								}, {
									"case":	286,
									"scores":	[-3.912023005428146]
								}, {
									"case":	287,
									"scores":	[-3.912023005428146]
								}, {
									"case":	288,
									"scores":	[-3.912023005428146]
								}, {
									"case":	289,
									"scores":	[-3.912023005428146]
								}, {
									"case":	290,
									"scores":	[-3.912023005428146]
								}, {
									"case":	291,
									"scores":	[-3.912023005428146]
								}, {
									"case":	292,
									"scores":	[-3.912023005428146]
								}, {
									"case":	293,
									"scores":	[-3.912023005428146]
								}, {
									"case":	294,
									"scores":	[-3.912023005428146]
								}, {
									"case":	295,
									"scores":	[-3.912023005428146]
								}, {
									"case":	296,
									"scores":	[-3.912023005428146]
								}, {
									"case":	297,
									"scores":	[-3.912023005428146]
								}, {
									"case":	298,
									"scores":	[-3.912023005428146]
								}, {
									"case":	299,
									"scores":	[-3.912023005428146]
								}, {
									"case":	300,
									"scores":	[-3.912023005428146]
								}, {
									"case":	301,
									"scores":	[-3.912023005428146]
								}, {
									"case":	302,
									"scores":	[-3.912023005428146]
								}, {
									"case":	303,
									"scores":	[-3.912023005428146]
								}, {
									"case":	304,
									"scores":	[-3.912023005428146]
								}, {
									"case":	305,
									"scores":	[-3.912023005428146]
								}, {
									"case":	306,
									"scores":	[-3.912023005428146]
								}, {
									"case":	307,
									"scores":	[-3.912023005428146]
								}, {
									"case":	308,
									"scores":	[-3.912023005428146]
								}, {
									"case":	309,
									"scores":	[-3.912023005428146]
								}, {
									"case":	310,
									"scores":	[-3.912023005428146]
								}, {
									"case":	311,
									"scores":	[-3.912023005428146]
								}, {
									"case":	312,
									"scores":	[-3.912023005428146]
								}, {
									"case":	313,
									"scores":	[-3.912023005428146]
								}, {
									"case":	314,
									"scores":	[-3.912023005428146]
								}, {
									"case":	315,
									"scores":	[-3.912023005428146]
								}, {
									"case":	316,
									"scores":	[-3.912023005428146]
								}, {
									"case":	317,
									"scores":	[-3.912023005428146]
								}, {
									"case":	318,
									"scores":	[-3.912023005428146]
								}, {
									"case":	319,
									"scores":	[-3.912023005428146]
								}, {
									"case":	320,
									"scores":	[-3.912023005428146]
								}, {
									"case":	321,
									"scores":	[-3.912023005428146]
								}, {
									"case":	322,
									"scores":	[-3.912023005428146]
								}, {
									"case":	323,
									"scores":	[-3.912023005428146]
								}, {
									"case":	324,
									"scores":	[-3.912023005428146]
								}, {
									"case":	325,
									"scores":	[-3.912023005428146]
								}, {
									"case":	326,
									"scores":	[-3.912023005428146]
								}, {
									"case":	327,
									"scores":	[-3.912023005428146]
								}, {
									"case":	328,
									"scores":	[-3.912023005428146]
								}, {
									"case":	329,
									"scores":	[-3.912023005428146]
								}, {
									"case":	330,
									"scores":	[-3.912023005428146]
								}, {
									"case":	331,
									"scores":	[-3.912023005428146]
								}, {
									"case":	332,
									"scores":	[-3.912023005428146]
								}, {
									"case":	333,
									"scores":	[-3.912023005428146]
								}, {
									"case":	334,
									"scores":	[-3.912023005428146]
								}, {
									"case":	335,
									"scores":	[-3.912023005428146]
								}, {
									"case":	336,
									"scores":	[-3.912023005428146]
								}, {
									"case":	337,
									"scores":	[-3.912023005428146]
								}, {
									"case":	338,
									"scores":	[-3.912023005428146]
								}, {
									"case":	339,
									"scores":	[-3.912023005428146]
								}, {
									"case":	340,
									"scores":	[-3.912023005428146]
								}, {
									"case":	341,
									"scores":	[-3.912023005428146]
								}, {
									"case":	342,
									"scores":	[-3.912023005428146]
								}, {
									"case":	343,
									"scores":	[-3.912023005428146]
								}, {
									"case":	344,
									"scores":	[-3.912023005428146]
								}, {
									"case":	345,
									"scores":	[-3.912023005428146]
								}, {
									"case":	346,
									"scores":	[-3.912023005428146]
								}, {
									"case":	347,
									"scores":	[-3.912023005428146]
								}, {
									"case":	348,
									"scores":	[-3.912023005428146]
								}, {
									"case":	349,
									"scores":	[-3.912023005428146]
								}, {
									"case":	350,
									"scores":	[-3.912023005428146]
								}, {
									"case":	351,
									"scores":	[-3.912023005428146]
								}, {
									"case":	352,
									"scores":	[-3.912023005428146]
								}, {
									"case":	353,
									"scores":	[-3.912023005428146]
								}, {
									"case":	354,
									"scores":	[-3.912023005428146]
								}, {
									"case":	355,
									"scores":	[-3.912023005428146]
								}, {
									"case":	356,
									"scores":	[-3.912023005428146]
								}, {
									"case":	357,
									"scores":	[-3.912023005428146]
								}, {
									"case":	358,
									"scores":	[-3.912023005428146]
								}, {
									"case":	359,
									"scores":	[-3.912023005428146]
								}, {
									"case":	360,
									"scores":	[-3.912023005428146]
								}, {
									"case":	361,
									"scores":	[-3.912023005428146]
								}, {
									"case":	362,
									"scores":	[-3.912023005428146]
								}, {
									"case":	363,
									"scores":	[-3.912023005428146]
								}, {
									"case":	364,
									"scores":	[-3.912023005428146]
								}, {
									"case":	365,
									"scores":	[-3.912023005428146]
								}, {
									"case":	366,
									"scores":	[-3.912023005428146]
								}, {
									"case":	367,
									"scores":	[-3.912023005428146]
								}, {
									"case":	368,
									"scores":	[-3.912023005428146]
								}, {
									"case":	369,
									"scores":	[-3.912023005428146]
								}, {
									"case":	370,
									"scores":	[-3.912023005428146]
								}, {
									"case":	371,
									"scores":	[-3.912023005428146]
								}, {
									"case":	372,
									"scores":	[-3.912023005428146]
								}, {
									"case":	373,
									"scores":	[-3.912023005428146]
								}, {
									"case":	374,
									"scores":	[-3.912023005428146]
								}, {
									"case":	375,
									"scores":	[-3.912023005428146]
								}, {
									"case":	376,
									"scores":	[-3.912023005428146]
								}, {
									"case":	377,
									"scores":	[-3.912023005428146]
								}, {
									"case":	378,
									"scores":	[-3.912023005428146]
								}, {
									"case":	379,
									"scores":	[-3.912023005428146]
								}, {
									"case":	380,
									"scores":	[-3.912023005428146]
								}, {
									"case":	381,
									"scores":	[-3.912023005428146]
								}, {
									"case":	382,
									"scores":	[-3.912023005428146]
								}, {
									"case":	383,
									"scores":	[-3.912023005428146]
								}, {
									"case":	384,
									"scores":	[-3.912023005428146]
								}, {
									"case":	385,
									"scores":	[-3.912023005428146]
								}, {
									"case":	386,
									"scores":	[-3.912023005428146]
								}, {
									"case":	387,
									"scores":	[-3.912023005428146]
								}, {
									"case":	388,
									"scores":	[-3.912023005428146]
								}, {
									"case":	389,
									"scores":	[-3.912023005428146]
								}, {
									"case":	390,
									"scores":	[-3.912023005428146]
								}, {
									"case":	391,
									"scores":	[-3.912023005428146]
								}, {
									"case":	392,
									"scores":	[-3.912023005428146]
								}, {
									"case":	393,
									"scores":	[-3.912023005428146]
								}, {
									"case":	394,
									"scores":	[-3.912023005428146]
								}, {
									"case":	395,
									"scores":	[-3.912023005428146]
								}, {
									"case":	396,
									"scores":	[-3.912023005428146]
								}, {
									"case":	397,
									"scores":	[-3.912023005428146]
								}, {
									"case":	398,
									"scores":	[-3.912023005428146]
								}, {
									"case":	399,
									"scores":	[-3.912023005428146]
								}, {
									"case":	400,
									"scores":	[-3.912023005428146]
								}, {
									"case":	401,
									"scores":	[-3.912023005428146]
								}, {
									"case":	402,
									"scores":	[-3.912023005428146]
								}, {
									"case":	403,
									"scores":	[-10.377396555428147, -9.8788605254281467, -9.7376425554281472, -9.7376425554281472, -9.3135669554281453, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -11.311278902428146, -10.665141641428148, -7.9308393254281455, -8.2681673554281456, -10.800521555428146, -10.800521555428146, -10.291662325428147, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.589450225428147, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.807223255428147, -10.807223255428147, -9.6565863254281457]
								}, {
									"case":	404,
									"scores":	[-8.3589505554281462, -7.8604145254281459, -7.7191965554281463, -7.7191965554281463, -7.2951209554281462, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -9.2928329024281471, -8.6466956414281473, -5.9123933254281464, -6.2497213554281466, -8.7820755554281469, -8.7820755554281469, -8.2732163254281463, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.57100422542815, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.7820755554281469, -8.78877725542815, -8.78877725542815, -7.6381403254281466]
								}, {
									"case":	405,
									"scores":	[-10.377396555428147, -9.8788605254281467, -9.7376425554281472, -9.7376425554281472, -9.3135669554281453, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -11.311278902428146, -10.665141641428148, -7.9308393254281455, -8.2681673554281456, -10.800521555428146, -10.800521555428146, -10.291662325428147, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.589450225428147, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.807223255428147, -10.807223255428147, -9.6565863254281457]
								}, {
									"case":	406,
									"scores":	[-10.377396555428147, -9.8788605254281467, -9.7376425554281472, -9.7376425554281472, -9.3135669554281453, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -11.311278902428146, -10.665141641428148, -7.9308393254281455, -8.2681673554281456, -10.800521555428146, -10.800521555428146, -10.291662325428147, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.589450225428147, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.807223255428147, -10.807223255428147, -9.6565863254281457]
								}, {
									"case":	407,
									"scores":	[-10.377396555428147, -9.8788605254281467, -9.7376425554281472, -9.7376425554281472, -9.3135669554281453, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -11.311278902428146, -10.665141641428148, -7.9308393254281455, -8.2681673554281456, -10.800521555428146, -10.800521555428146, -10.291662325428147, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.589450225428147, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.807223255428147, -10.807223255428147, -9.6565863254281457]
								}, {
									"case":	408,
									"scores":	[-10.377396555428147, -9.8788605254281467, -9.7376425554281472, -9.7376425554281472, -9.3135669554281453, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -11.311278902428146, -10.665141641428148, -7.9308393254281455, -8.2681673554281456, -10.800521555428146, -10.800521555428146, -10.291662325428147, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.589450225428147, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.800521555428146, -10.807223255428147, -10.807223255428147, -9.6565863254281457]
								}]
						}, {
							"switch":	5,
							"types":	[[5], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3, 4]],
							"begin_line":	547,
							"begin_column":	5,
							"end_line":	551,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L547\", 36, &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(quiet), sizeof (quiet), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(exiting_signal), sizeof (exiting_signal), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(test), sizeof (test), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(presume_input_tty), sizeof (presume_input_tty), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen))) {\n    rpl_fprintf(stderr, \"%s: incorrect suffix '%s'\\n\", program_name, z_suffix);\n    do_exit(1);\n}\n", "if (((z_len == 0 && !decompress) || z_len > 30) || __is_neg(\"\", \"L547\", 36, &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(quiet), sizeof (quiet), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(exiting_signal), sizeof (exiting_signal), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(test), sizeof (test), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(presume_input_tty), sizeof (presume_input_tty), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen))) {\n    rpl_fprintf(stderr, \"%s: incorrect suffix '%s'\\n\", program_name, z_suffix);\n    do_exit(1);\n}\n", "if ((z_len == 0 && !decompress)) {\n    rpl_fprintf(stderr, \"%s: incorrect suffix '%s'\\n\", program_name, z_suffix);\n    do_exit(1);\n}\n", "if (z_len == 0 || z_len > 30) {\n    rpl_fprintf(stderr, \"%s: incorrect suffix '%s'\\n\", program_name, z_suffix);\n    do_exit(1);\n}\n", "if (((z_len == 0 && !decompress) || z_len > 30) && !__is_neg(\"\", \"L547\", 36, &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(quiet), sizeof (quiet), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(exiting_signal), sizeof (exiting_signal), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(test), sizeof (test), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(presume_input_tty), sizeof (presume_input_tty), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen))) {\n    rpl_fprintf(stderr, \"%s: incorrect suffix '%s'\\n\", program_name, z_suffix);\n    do_exit(1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2090617794281453, -1.8332975944281458, -5.2819662284281463, -5.2819662284281463, -5.2419590794281454, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6798535514281454, -5.8313050994281461, -4.2499790044281456, -4.1649209844281456, -5.6135988794281459, -5.6135988794281459, -5.0625778994281454, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.7219863994281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.6135988794281459, -5.9623880794281465, -5.9623880794281465, -4.7030096144281455]
								}, {
									"case":	2,
									"scores":	[-4.7834716834281457, -1.407707498428147, -4.8563761324281458, -4.8563761324281458, -4.8163689834281458, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.2542634554281467, -5.4057150034281456, -3.8243889084281459, -3.7393308884281455, -5.1880087834281463, -5.1880087834281463, -4.6369878034281458, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.2963963034281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.536797983428146, -5.536797983428146, -4.2774195184281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-4.7834716834281457, -1.407707498428147, -4.8563761324281458, -4.8563761324281458, -4.8163689834281458, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.2542634554281467, -5.4057150034281456, -3.8243889084281459, -3.7393308884281455, -5.1880087834281463, -5.1880087834281463, -4.6369878034281458, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.2963963034281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.1880087834281463, -5.536797983428146, -5.536797983428146, -4.2774195184281458]
								}]
						}, {
							"switch":	6,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	547,
							"begin_column":	5,
							"end_line":	551,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L547\", 36, &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(quiet), sizeof (quiet), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(exiting_signal), sizeof (exiting_signal), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(test), sizeof (test), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(presume_input_tty), sizeof (presume_input_tty), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)))\n    if ((z_len == 0 && !decompress) || z_len > 30) {\n        rpl_fprintf(stderr, \"%s: incorrect suffix '%s'\\n\", program_name, z_suffix);\n        do_exit(1);\n    }\n", "if (!__is_neg(\"\", \"L547\", 36, &(decompress), sizeof (decompress), &(z_len), sizeof (z_len), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(z_suffix), sizeof (z_suffix), &(quiet), sizeof (quiet), &(ascii), sizeof (ascii), &(quiet), sizeof (quiet), &(do_lzw), sizeof (do_lzw), &(work), sizeof (work), &(argc), sizeof (argc), &(file_count), sizeof (file_count), &(no_name), sizeof (no_name), &(no_time), sizeof (no_time), &(exiting_signal), sizeof (exiting_signal), &(optc), sizeof (optc), &(level), sizeof (level), &(level), sizeof (level), &(test), sizeof (test), &(to_stdout), sizeof (to_stdout), &(to_stdout), sizeof (to_stdout), &(list), sizeof (list), &(test), sizeof (test), &(argv), sizeof (argv), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(verbose), sizeof (verbose), &(verbose), sizeof (verbose), &(recursive), sizeof (recursive), &(presume_input_tty), sizeof (presume_input_tty), &(force), sizeof (force), &(maxbits), sizeof (maxbits), &(maxbits), sizeof (maxbits), &(env), sizeof (env), &(args), sizeof (args), &(proglen), sizeof (proglen)) && ((z_len == 0 && !decompress) || z_len > 30)) {\n    rpl_fprintf(stderr, \"%s: incorrect suffix '%s'\\n\", program_name, z_suffix);\n    do_exit(1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3096073054281465, -2.9338431204281461, -6.3825117544281458, -6.3825117544281458, -6.3425046054281466, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7803990774281466, -6.9318506254281465, -5.3505245304281459, -5.265466510428146, -6.7141444054281463, -6.7141444054281463, -6.1631234254281466, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.8225319254281462, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -6.7141444054281463, -7.062933605428146, -7.062933605428146, -5.8035551404281467]
								}, {
									"case":	2,
									"scores":	[-5.9602137434281461, -2.5844495584281466, -6.0331181924281463, -6.0331181924281463, -5.9931110434281463, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.4310055154281462, -6.5824570634281461, -5.0011309684281464, -4.9160729484281465, -6.3647508434281459, -6.3647508434281459, -5.8137298634281462, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.4731383634281467, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.3647508434281459, -6.7135400434281465, -6.7135400434281465, -5.4541615784281463]
								}]
						}]
				}, {
					"line":	943,
					"switches":	[{
							"switch":	8,
							"types":	[[], [], [], [], [542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553], [], [], [], [], [439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], []],
							"begin_line":	944,
							"begin_column":	9,
							"end_line":	944,
							"end_column":	9,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (128)", "bytes_in = (17)", "bytes_in = (193)", "bytes_in = (2)", "bytes_in = (256)", "bytes_in = (36)", "bytes_in = (384)", "bytes_in = (64)", "bytes_in = (65)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (128)", "bytes_out = (17)", "bytes_out = (193)", "bytes_out = (2)", "bytes_out = (256)", "bytes_out = (36)", "bytes_out = (384)", "bytes_out = (64)", "bytes_out = (65)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "exit_code = (0)", "exit_code = (1)", "exit_code = (128)", "exit_code = (17)", "exit_code = (193)", "exit_code = (2)", "exit_code = (256)", "exit_code = (36)", "exit_code = (384)", "exit_code = (64)", "exit_code = (65)", "exit_code = (flags)", "exit_code = (name_shortened)", "exit_code = (open_errno)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (128)", "exiting_signal = (17)", "exiting_signal = (193)", "exiting_signal = (2)", "exiting_signal = (256)", "exiting_signal = (36)", "exiting_signal = (384)", "exiting_signal = (64)", "exiting_signal = (65)", "exiting_signal = (flags)", "exiting_signal = (name_shortened)", "exiting_signal = (open_errno)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "foreground = (0)", "foreground = (1)", "foreground = (128)", "foreground = (17)", "foreground = (193)", "foreground = (2)", "foreground = (256)", "foreground = (36)", "foreground = (384)", "foreground = (64)", "foreground = (65)", "foreground = (flags)", "foreground = (name_shortened)", "foreground = (open_errno)", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (128)", "header_bytes = (17)", "header_bytes = (193)", "header_bytes = (2)", "header_bytes = (256)", "header_bytes = (36)", "header_bytes = (384)", "header_bytes = (64)", "header_bytes = (65)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (0)", "ifd = (1)", "ifd = (128)", "ifd = (17)", "ifd = (193)", "ifd = (2)", "ifd = (256)", "ifd = (36)", "ifd = (384)", "ifd = (64)", "ifd = (65)", "ifd = (flags)", "ifd = (name_shortened)", "ifd = (open_errno)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (128)", "ifile_size = (17)", "ifile_size = (193)", "ifile_size = (2)", "ifile_size = (256)", "ifile_size = (36)", "ifile_size = (384)", "ifile_size = (64)", "ifile_size = (65)", "inptr && !(1 << 5)--", "inptr = (0)", "inptr = (1)", "inptr = (128)", "inptr = (17)", "inptr = (193)", "inptr = (2)", "inptr = (256)", "inptr = (36)", "inptr = (384)", "inptr = (64)", "inptr = (65)", "last_member = (0)", "last_member = (1)", "last_member = (128)", "last_member = (17)", "last_member = (193)", "last_member = (2)", "last_member = (256)", "last_member = (36)", "last_member = (384)", "last_member = (64)", "last_member = (65)", "last_member = (flags)", "last_member = (name_shortened)", "last_member = (open_errno)", "list = (0)", "list = (1)", "list = (128)", "list = (17)", "list = (193)", "list = (2)", "list = (256)", "list = (36)", "list = (384)", "list = (64)", "list = (65)", "list = (flags)", "list = (name_shortened)", "list = (open_errno)", "method = (0)", "method = (1)", "method = (128)", "method = (17)", "method = (193)", "method = (2)", "method = (256)", "method = (36)", "method = (384)", "method = (64)", "method = (65)", "method = (flags)", "method = (name_shortened)", "method = (open_errno)", "method = get_method(ifd && !(1 << 5))", "name_shortened = (0)", "name_shortened = (1)", "name_shortened = (128)", "name_shortened = (17)", "name_shortened = (193)", "name_shortened = (2)", "name_shortened = (256)", "name_shortened = (36)", "name_shortened = (384)", "name_shortened = (64)", "name_shortened = (65)", "name_shortened = (flags)", "name_shortened = (name_shortened)", "name_shortened = (open_errno)", "no_name = (0)", "no_name = (1)", "no_name = (128)", "no_name = (17)", "no_name = (193)", "no_name = (2)", "no_name = (256)", "no_name = (36)", "no_name = (384)", "no_name = (64)", "no_name = (65)", "no_name = (flags)", "no_name = (name_shortened)", "no_name = (open_errno)", "no_name = decompress && !(1 << 5)", "no_time = (0)", "no_time = (1)", "no_time = (128)", "no_time = (17)", "no_time = (193)", "no_time = (2)", "no_time = (256)", "no_time = (36)", "no_time = (384)", "no_time = (64)", "no_time = (65)", "no_time = (flags)", "no_time = (name_shortened)", "no_time = (open_errno)", "no_time = decompress && !(1 << 5)", "ofd = (0)", "ofd = (1)", "ofd = (128)", "ofd = (17)", "ofd = (193)", "ofd = (2)", "ofd = (256)", "ofd = (36)", "ofd = (384)", "ofd = (64)", "ofd = (65)", "ofd = (flags)", "ofd = (name_shortened)", "ofd = (open_errno)", "ofd = open_safer(ofname && !(1 << 5), flags, (256 | 128))", "ofd = open_safer(ofname, flags && !(1 << 5), (256 | 128))", "open_errno = (0)", "open_errno = (1)", "open_errno = (128)", "open_errno = (17)", "open_errno = (193)", "open_errno = (2)", "open_errno = (256)", "open_errno = (36)", "open_errno = (384)", "open_errno = (64)", "open_errno = (65)", "open_errno = (flags)", "open_errno = (name_shortened)", "open_errno = (open_errno)", "part_nb && !(1 << 5)++", "part_nb = (0)", "part_nb = (1)", "part_nb = (128)", "part_nb = (17)", "part_nb = (193)", "part_nb = (2)", "part_nb = (256)", "part_nb = (36)", "part_nb = (384)", "part_nb = (64)", "part_nb = (65)", "part_nb = (flags)", "part_nb = (name_shortened)", "part_nb = (open_errno)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "quiet = (0)", "quiet = (1)", "quiet = (128)", "quiet = (17)", "quiet = (193)", "quiet = (2)", "quiet = (256)", "quiet = (36)", "quiet = (384)", "quiet = (64)", "quiet = (65)", "quiet = (flags)", "quiet = (name_shortened)", "quiet = (open_errno)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (128)", "remove_ofname_fd = (17)", "remove_ofname_fd = (193)", "remove_ofname_fd = (2)", "remove_ofname_fd = (256)", "remove_ofname_fd = (36)", "remove_ofname_fd = (384)", "remove_ofname_fd = (64)", "remove_ofname_fd = (65)", "remove_ofname_fd = (flags)", "remove_ofname_fd = (name_shortened)", "remove_ofname_fd = (open_errno)", "remove_ofname_fd = open_safer(ofname && !(1 << 5), flags, (256 | 128))", "remove_ofname_fd = open_safer(ofname, flags && !(1 << 5), (256 | 128))", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (128)", "save_orig_name = (17)", "save_orig_name = (193)", "save_orig_name = (2)", "save_orig_name = (256)", "save_orig_name = (36)", "save_orig_name = (384)", "save_orig_name = (64)", "save_orig_name = (65)", "save_orig_name = (flags)", "save_orig_name = (name_shortened)", "save_orig_name = (open_errno)", "sigemptyset(&caught_signals && !(1 << 5))", "sigprocmask(0, &caught_signals && !(1 << 5), &oldset)", "sigprocmask(0, &caught_signals, &oldset && !(1 << 5))", "sigprocmask(2, &oldset && !(1 << 5), ((void *)0))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (128)", "time_stamp.tv_nsec = (17)", "time_stamp.tv_nsec = (193)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (256)", "time_stamp.tv_nsec = (36)", "time_stamp.tv_nsec = (384)", "time_stamp.tv_nsec = (64)", "time_stamp.tv_nsec = (65)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (128)", "time_stamp.tv_sec = (17)", "time_stamp.tv_sec = (193)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (256)", "time_stamp.tv_sec = (36)", "time_stamp.tv_sec = (384)", "time_stamp.tv_sec = (64)", "time_stamp.tv_sec = (65)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (128)", "to_stdout = (17)", "to_stdout = (193)", "to_stdout = (2)", "to_stdout = (256)", "to_stdout = (36)", "to_stdout = (384)", "to_stdout = (64)", "to_stdout = (65)", "to_stdout = (flags)", "to_stdout = (name_shortened)", "to_stdout = (open_errno)", "total_in = (0)", "total_in = (1)", "total_in = (128)", "total_in = (17)", "total_in = (193)", "total_in = (2)", "total_in = (256)", "total_in = (36)", "total_in = (384)", "total_in = (64)", "total_in = (65)", "total_out = (0)", "total_out = (1)", "total_out = (128)", "total_out = (17)", "total_out = (193)", "total_out = (2)", "total_out = (256)", "total_out = (36)", "total_out = (384)", "total_out = (64)", "total_out = (65)", "verbose = (0)", "verbose = (1)", "verbose = (128)", "verbose = (17)", "verbose = (193)", "verbose = (2)", "verbose = (256)", "verbose = (36)", "verbose = (384)", "verbose = (64)", "verbose = (65)", "verbose = (flags)", "verbose = (name_shortened)", "verbose = (open_errno)", "xunlink(ofname && !(1 << 5))", "z_len = (0)", "z_len = (1)", "z_len = (128)", "z_len = (17)", "z_len = (193)", "z_len = (2)", "z_len = (256)", "z_len = (36)", "z_len = (384)", "z_len = (64)", "z_len = (65)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "name_shortened = 1", "no_name = decompress", "no_time = decompress", "ofd = open_safer(ofname, flags, (256 | 128))", "open_errno = (*__errno_location())", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_ofname_fd = open_safer(ofname, flags, (256 | 128))", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    break;\n", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    return 0;\n", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    return 128;\n", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    return 17;\n", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    return 193;\n", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    return 1;\n", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    return 256;\n", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    return 2;\n", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    return 36;\n", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    return 384;\n", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    return 64;\n", "if (__is_neg(\"\", \"L944\", 16, &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(name_shortened), sizeof (name_shortened), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ascii), sizeof (ascii)))\n    return 65;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	2,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	3,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	4,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	5,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	6,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	7,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	8,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	9,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	10,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	11,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	12,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	13,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	14,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	15,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	16,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	17,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	18,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	19,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	20,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	21,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	22,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	23,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	24,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	25,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	26,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	27,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	28,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	29,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	30,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	31,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	32,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	33,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	34,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	35,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	36,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	37,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	38,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	39,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	40,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	41,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	42,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	43,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	44,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	45,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	46,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	47,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	48,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	49,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	50,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	51,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	52,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	53,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	54,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	55,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	56,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	57,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	58,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	59,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	60,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	61,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	62,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	63,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	64,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	65,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	66,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	67,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	68,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	69,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	70,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	71,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	72,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	73,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	74,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	75,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	76,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	77,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	78,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	79,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	80,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	81,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	82,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	83,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	84,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	85,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	86,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	87,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	88,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	89,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	90,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	91,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	92,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	93,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	94,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	95,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	96,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	97,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	98,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	99,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	100,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	101,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	102,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	103,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	104,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	105,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	106,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	107,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	108,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	109,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	110,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	111,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	112,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	113,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	114,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	115,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	116,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	117,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	118,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	119,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	120,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	121,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	122,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	123,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	124,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	125,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	126,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	127,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	128,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	129,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	130,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	131,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	132,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	133,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	134,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	135,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	136,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	137,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	138,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	139,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	140,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	141,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	142,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	143,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	144,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	145,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	146,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	147,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	148,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	149,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	150,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	151,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	152,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	153,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	154,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	155,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	156,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	157,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	158,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	159,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	160,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	161,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	162,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	163,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	164,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	165,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	166,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	167,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	168,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	169,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	170,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	171,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	172,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	173,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	174,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	175,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	176,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	177,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	178,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	179,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	180,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	181,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	182,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	183,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	184,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	185,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	186,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	187,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	188,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	189,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	190,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	191,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	192,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	193,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	194,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	195,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	196,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	197,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	198,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	199,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	200,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	201,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	202,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	203,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	204,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	205,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	206,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	207,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	208,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	209,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	210,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	211,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	212,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	213,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	214,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	215,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	216,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	217,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	218,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	219,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	220,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	221,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	222,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	223,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	224,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	225,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	226,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	227,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	228,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	229,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	230,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	231,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	232,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	233,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	234,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	235,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	236,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	237,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	238,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	239,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	240,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	241,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	242,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	243,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	244,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	245,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	246,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	247,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	248,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	249,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	250,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	251,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	252,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	253,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	254,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	255,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	256,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	257,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	258,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	259,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	260,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	261,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	262,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	263,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	264,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	265,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	266,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	267,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	268,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	269,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	270,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	271,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	272,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	273,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	274,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	275,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	276,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	277,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	278,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	279,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	280,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	281,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	282,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	283,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	284,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	285,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	286,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	287,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	288,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	289,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	290,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	291,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	292,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	293,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	294,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	295,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	296,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	297,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	298,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	299,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	300,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	301,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	302,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	303,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	304,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	305,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	306,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	307,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	308,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	309,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	310,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	311,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	312,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	313,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	314,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	315,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	316,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	317,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	318,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	319,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	320,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	321,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	322,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	323,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	324,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	325,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	326,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	327,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	328,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	329,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	330,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	331,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	332,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	333,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	334,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	335,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	336,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	337,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	338,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	339,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	340,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	341,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	342,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	343,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	344,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	345,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	346,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	347,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	348,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	349,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	350,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	351,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	352,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	353,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	354,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	355,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	356,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	357,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	358,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	359,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	360,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	361,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	362,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	363,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	364,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	365,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	366,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	367,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	368,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	369,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	370,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	371,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	372,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	373,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	374,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	375,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	376,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	377,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	378,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	379,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	380,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	381,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	382,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	383,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	384,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	385,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	386,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	387,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	388,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	389,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	390,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	391,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	392,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	393,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	394,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	395,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	396,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	397,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	398,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	399,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	400,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	401,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	402,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	403,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	404,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	405,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	406,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	407,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	408,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	409,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	410,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	411,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	412,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	413,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	414,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	415,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	416,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	417,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	418,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	419,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	420,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	421,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	422,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	423,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	424,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	425,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	426,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	427,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	428,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	429,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	430,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	431,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	432,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	433,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	434,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	435,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	436,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	437,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	438,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	439,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	440,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	441,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	442,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	443,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	444,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	445,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	446,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	447,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	448,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	449,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	450,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	451,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	452,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	453,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	454,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	455,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	456,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	457,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	458,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	459,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	460,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	461,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	462,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	463,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	464,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	465,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	466,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	467,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	468,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	469,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	470,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	471,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	472,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	473,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	474,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	475,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	476,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	477,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	478,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	479,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	480,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	481,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	482,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	483,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	484,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	485,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	486,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	487,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	488,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	489,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	490,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	491,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	492,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	493,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	494,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	495,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	496,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	497,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	498,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	499,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	500,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	501,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	502,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	503,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	504,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	505,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	506,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	507,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	508,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	509,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	510,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	511,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	512,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	513,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	514,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	515,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	516,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	517,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	518,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	519,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	520,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	521,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	522,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	523,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	524,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	525,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	526,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	527,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	528,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	529,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	530,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	531,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	532,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	533,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	534,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	535,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	536,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	537,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	538,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	539,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	540,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	541,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	542,
									"scores":	[-6.863328839745666, -6.863328839745666, -4.5228455097456655, -6.5720712397456662, -6.5787729397456651, -6.5720712397456662, -6.5720712397456662, -6.5720712397456662, -6.5787729397456651, -6.5720712397456662, -6.0632120097456657, -6.5720712397456662, -6.5720712397456662, -6.0632120097456657, -6.5720712397456662, -6.5720712397456662]
								}, {
									"case":	543,
									"scores":	[-7.5505328397456655, -7.5505328397456655, -5.2100495097456658, -7.2592752397456657, -7.2659769397456655, -7.2592752397456657, -7.2592752397456657, -7.2592752397456657, -7.2659769397456655, -7.2592752397456657, -6.7504160097456651, -7.2592752397456657, -7.2592752397456657, -6.7504160097456651, -7.2592752397456657, -7.2592752397456657]
								}, {
									"case":	544,
									"scores":	[-9.5689788397456663, -9.5689788397456663, -7.2284955097456649, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -9.2777212397456665, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665]
								}, {
									"case":	545,
									"scores":	[-9.5689788397456663, -9.5689788397456663, -7.2284955097456649, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -9.2777212397456665, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665]
								}, {
									"case":	546,
									"scores":	[-9.5689788397456663, -9.5689788397456663, -7.2284955097456649, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -9.2777212397456665, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665]
								}, {
									"case":	547,
									"scores":	[-9.5689788397456663, -9.5689788397456663, -7.2284955097456649, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -9.2777212397456665, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665]
								}, {
									"case":	548,
									"scores":	[-9.5689788397456663, -9.5689788397456663, -7.2284955097456649, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -9.2777212397456665, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665]
								}, {
									"case":	549,
									"scores":	[-9.5689788397456663, -9.5689788397456663, -7.2284955097456649, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -9.2777212397456665, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665]
								}, {
									"case":	550,
									"scores":	[-9.5689788397456663, -9.5689788397456663, -7.2284955097456649, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -9.2777212397456665, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665]
								}, {
									"case":	551,
									"scores":	[-9.5689788397456663, -9.5689788397456663, -7.2284955097456649, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -9.2777212397456665, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665]
								}, {
									"case":	552,
									"scores":	[-9.5689788397456663, -9.5689788397456663, -7.2284955097456649, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -9.2777212397456665, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665]
								}, {
									"case":	553,
									"scores":	[-9.5689788397456663, -9.5689788397456663, -7.2284955097456649, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -9.2777212397456665, -9.2777212397456665, -9.2844229397456655, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665, -8.768862009745666, -9.2777212397456665, -9.2777212397456665]
								}]
						}]
				}, {
					"line":	928,
					"switches":	[{
							"switch":	7,
							"types":	[[], [], [], [], [542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553], [], [], [], [], [439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], []],
							"begin_line":	929,
							"begin_column":	5,
							"end_line":	929,
							"end_column":	5,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (128)", "bytes_in = (17)", "bytes_in = (193)", "bytes_in = (2)", "bytes_in = (256)", "bytes_in = (36)", "bytes_in = (384)", "bytes_in = (64)", "bytes_in = (65)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (128)", "bytes_out = (17)", "bytes_out = (193)", "bytes_out = (2)", "bytes_out = (256)", "bytes_out = (36)", "bytes_out = (384)", "bytes_out = (64)", "bytes_out = (65)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "exit_code = (0)", "exit_code = (1)", "exit_code = (128)", "exit_code = (17)", "exit_code = (193)", "exit_code = (2)", "exit_code = (256)", "exit_code = (36)", "exit_code = (384)", "exit_code = (64)", "exit_code = (65)", "exit_code = (flags)", "exit_code = (name_shortened)", "exit_code = (open_errno)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (128)", "exiting_signal = (17)", "exiting_signal = (193)", "exiting_signal = (2)", "exiting_signal = (256)", "exiting_signal = (36)", "exiting_signal = (384)", "exiting_signal = (64)", "exiting_signal = (65)", "exiting_signal = (flags)", "exiting_signal = (name_shortened)", "exiting_signal = (open_errno)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "foreground = (0)", "foreground = (1)", "foreground = (128)", "foreground = (17)", "foreground = (193)", "foreground = (2)", "foreground = (256)", "foreground = (36)", "foreground = (384)", "foreground = (64)", "foreground = (65)", "foreground = (flags)", "foreground = (name_shortened)", "foreground = (open_errno)", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (128)", "header_bytes = (17)", "header_bytes = (193)", "header_bytes = (2)", "header_bytes = (256)", "header_bytes = (36)", "header_bytes = (384)", "header_bytes = (64)", "header_bytes = (65)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (0)", "ifd = (1)", "ifd = (128)", "ifd = (17)", "ifd = (193)", "ifd = (2)", "ifd = (256)", "ifd = (36)", "ifd = (384)", "ifd = (64)", "ifd = (65)", "ifd = (flags)", "ifd = (name_shortened)", "ifd = (open_errno)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (128)", "ifile_size = (17)", "ifile_size = (193)", "ifile_size = (2)", "ifile_size = (256)", "ifile_size = (36)", "ifile_size = (384)", "ifile_size = (64)", "ifile_size = (65)", "inptr && !(1 << 5)--", "inptr = (0)", "inptr = (1)", "inptr = (128)", "inptr = (17)", "inptr = (193)", "inptr = (2)", "inptr = (256)", "inptr = (36)", "inptr = (384)", "inptr = (64)", "inptr = (65)", "last_member = (0)", "last_member = (1)", "last_member = (128)", "last_member = (17)", "last_member = (193)", "last_member = (2)", "last_member = (256)", "last_member = (36)", "last_member = (384)", "last_member = (64)", "last_member = (65)", "last_member = (flags)", "last_member = (name_shortened)", "last_member = (open_errno)", "list = (0)", "list = (1)", "list = (128)", "list = (17)", "list = (193)", "list = (2)", "list = (256)", "list = (36)", "list = (384)", "list = (64)", "list = (65)", "list = (flags)", "list = (name_shortened)", "list = (open_errno)", "method = (0)", "method = (1)", "method = (128)", "method = (17)", "method = (193)", "method = (2)", "method = (256)", "method = (36)", "method = (384)", "method = (64)", "method = (65)", "method = (flags)", "method = (name_shortened)", "method = (open_errno)", "method = get_method(ifd && !(1 << 5))", "name_shortened = (0)", "name_shortened = (1)", "name_shortened = (128)", "name_shortened = (17)", "name_shortened = (193)", "name_shortened = (2)", "name_shortened = (256)", "name_shortened = (36)", "name_shortened = (384)", "name_shortened = (64)", "name_shortened = (65)", "name_shortened = (flags)", "name_shortened = (name_shortened)", "name_shortened = (open_errno)", "no_name = (0)", "no_name = (1)", "no_name = (128)", "no_name = (17)", "no_name = (193)", "no_name = (2)", "no_name = (256)", "no_name = (36)", "no_name = (384)", "no_name = (64)", "no_name = (65)", "no_name = (flags)", "no_name = (name_shortened)", "no_name = (open_errno)", "no_name = decompress && !(1 << 5)", "no_time = (0)", "no_time = (1)", "no_time = (128)", "no_time = (17)", "no_time = (193)", "no_time = (2)", "no_time = (256)", "no_time = (36)", "no_time = (384)", "no_time = (64)", "no_time = (65)", "no_time = (flags)", "no_time = (name_shortened)", "no_time = (open_errno)", "no_time = decompress && !(1 << 5)", "ofd = (0)", "ofd = (1)", "ofd = (128)", "ofd = (17)", "ofd = (193)", "ofd = (2)", "ofd = (256)", "ofd = (36)", "ofd = (384)", "ofd = (64)", "ofd = (65)", "ofd = (flags)", "ofd = (name_shortened)", "ofd = (open_errno)", "ofd = open_safer(ofname && !(1 << 5), flags, (256 | 128))", "ofd = open_safer(ofname, flags && !(1 << 5), (256 | 128))", "open_errno = (0)", "open_errno = (1)", "open_errno = (128)", "open_errno = (17)", "open_errno = (193)", "open_errno = (2)", "open_errno = (256)", "open_errno = (36)", "open_errno = (384)", "open_errno = (64)", "open_errno = (65)", "open_errno = (flags)", "open_errno = (name_shortened)", "open_errno = (open_errno)", "part_nb && !(1 << 5)++", "part_nb = (0)", "part_nb = (1)", "part_nb = (128)", "part_nb = (17)", "part_nb = (193)", "part_nb = (2)", "part_nb = (256)", "part_nb = (36)", "part_nb = (384)", "part_nb = (64)", "part_nb = (65)", "part_nb = (flags)", "part_nb = (name_shortened)", "part_nb = (open_errno)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "quiet = (0)", "quiet = (1)", "quiet = (128)", "quiet = (17)", "quiet = (193)", "quiet = (2)", "quiet = (256)", "quiet = (36)", "quiet = (384)", "quiet = (64)", "quiet = (65)", "quiet = (flags)", "quiet = (name_shortened)", "quiet = (open_errno)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (128)", "remove_ofname_fd = (17)", "remove_ofname_fd = (193)", "remove_ofname_fd = (2)", "remove_ofname_fd = (256)", "remove_ofname_fd = (36)", "remove_ofname_fd = (384)", "remove_ofname_fd = (64)", "remove_ofname_fd = (65)", "remove_ofname_fd = (flags)", "remove_ofname_fd = (name_shortened)", "remove_ofname_fd = (open_errno)", "remove_ofname_fd = open_safer(ofname && !(1 << 5), flags, (256 | 128))", "remove_ofname_fd = open_safer(ofname, flags && !(1 << 5), (256 | 128))", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (128)", "save_orig_name = (17)", "save_orig_name = (193)", "save_orig_name = (2)", "save_orig_name = (256)", "save_orig_name = (36)", "save_orig_name = (384)", "save_orig_name = (64)", "save_orig_name = (65)", "save_orig_name = (flags)", "save_orig_name = (name_shortened)", "save_orig_name = (open_errno)", "sigemptyset(&caught_signals && !(1 << 5))", "sigprocmask(0, &caught_signals && !(1 << 5), &oldset)", "sigprocmask(0, &caught_signals, &oldset && !(1 << 5))", "sigprocmask(2, &oldset && !(1 << 5), ((void *)0))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (128)", "time_stamp.tv_nsec = (17)", "time_stamp.tv_nsec = (193)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_nsec = (256)", "time_stamp.tv_nsec = (36)", "time_stamp.tv_nsec = (384)", "time_stamp.tv_nsec = (64)", "time_stamp.tv_nsec = (65)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (128)", "time_stamp.tv_sec = (17)", "time_stamp.tv_sec = (193)", "time_stamp.tv_sec = (2)", "time_stamp.tv_sec = (256)", "time_stamp.tv_sec = (36)", "time_stamp.tv_sec = (384)", "time_stamp.tv_sec = (64)", "time_stamp.tv_sec = (65)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (128)", "to_stdout = (17)", "to_stdout = (193)", "to_stdout = (2)", "to_stdout = (256)", "to_stdout = (36)", "to_stdout = (384)", "to_stdout = (64)", "to_stdout = (65)", "to_stdout = (flags)", "to_stdout = (name_shortened)", "to_stdout = (open_errno)", "total_in = (0)", "total_in = (1)", "total_in = (128)", "total_in = (17)", "total_in = (193)", "total_in = (2)", "total_in = (256)", "total_in = (36)", "total_in = (384)", "total_in = (64)", "total_in = (65)", "total_out = (0)", "total_out = (1)", "total_out = (128)", "total_out = (17)", "total_out = (193)", "total_out = (2)", "total_out = (256)", "total_out = (36)", "total_out = (384)", "total_out = (64)", "total_out = (65)", "verbose = (0)", "verbose = (1)", "verbose = (128)", "verbose = (17)", "verbose = (193)", "verbose = (2)", "verbose = (256)", "verbose = (36)", "verbose = (384)", "verbose = (64)", "verbose = (65)", "verbose = (flags)", "verbose = (name_shortened)", "verbose = (open_errno)", "xunlink(ofname && !(1 << 5))", "z_len = (0)", "z_len = (1)", "z_len = (128)", "z_len = (17)", "z_len = (193)", "z_len = (2)", "z_len = (256)", "z_len = (36)", "z_len = (384)", "z_len = (64)", "z_len = (65)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "name_shortened = 1", "no_name = decompress", "no_time = decompress", "ofd = open_safer(ofname, flags, (256 | 128))", "open_errno = (*__errno_location())", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_ofname_fd = open_safer(ofname, flags, (256 | 128))", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "sigprocmask(0, &caught_signals, &oldset)", "sigprocmask(2, &oldset, ((void *)0))", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    break;\n", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    return 0;\n", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    return 128;\n", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    return 17;\n", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    return 193;\n", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    return 1;\n", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    return 256;\n", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    return 2;\n", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    return 36;\n", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    return 384;\n", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    return 64;\n", "if (__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    return 65;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.295874444461016]
								}, {
									"case":	2,
									"scores":	[-4.295874444461016]
								}, {
									"case":	3,
									"scores":	[-4.295874444461016]
								}, {
									"case":	4,
									"scores":	[-4.295874444461016]
								}, {
									"case":	5,
									"scores":	[-4.295874444461016]
								}, {
									"case":	6,
									"scores":	[-4.295874444461016]
								}, {
									"case":	7,
									"scores":	[-4.295874444461016]
								}, {
									"case":	8,
									"scores":	[-4.295874444461016]
								}, {
									"case":	9,
									"scores":	[-4.295874444461016]
								}, {
									"case":	10,
									"scores":	[-4.295874444461016]
								}, {
									"case":	11,
									"scores":	[-4.295874444461016]
								}, {
									"case":	12,
									"scores":	[-4.295874444461016]
								}, {
									"case":	13,
									"scores":	[-4.295874444461016]
								}, {
									"case":	14,
									"scores":	[-4.295874444461016]
								}, {
									"case":	15,
									"scores":	[-4.295874444461016]
								}, {
									"case":	16,
									"scores":	[-4.295874444461016]
								}, {
									"case":	17,
									"scores":	[-4.295874444461016]
								}, {
									"case":	18,
									"scores":	[-4.295874444461016]
								}, {
									"case":	19,
									"scores":	[-4.295874444461016]
								}, {
									"case":	20,
									"scores":	[-4.295874444461016]
								}, {
									"case":	21,
									"scores":	[-4.295874444461016]
								}, {
									"case":	22,
									"scores":	[-4.295874444461016]
								}, {
									"case":	23,
									"scores":	[-4.295874444461016]
								}, {
									"case":	24,
									"scores":	[-4.295874444461016]
								}, {
									"case":	25,
									"scores":	[-4.295874444461016]
								}, {
									"case":	26,
									"scores":	[-4.295874444461016]
								}, {
									"case":	27,
									"scores":	[-4.295874444461016]
								}, {
									"case":	28,
									"scores":	[-4.295874444461016]
								}, {
									"case":	29,
									"scores":	[-4.295874444461016]
								}, {
									"case":	30,
									"scores":	[-4.295874444461016]
								}, {
									"case":	31,
									"scores":	[-4.295874444461016]
								}, {
									"case":	32,
									"scores":	[-4.295874444461016]
								}, {
									"case":	33,
									"scores":	[-4.295874444461016]
								}, {
									"case":	34,
									"scores":	[-4.295874444461016]
								}, {
									"case":	35,
									"scores":	[-4.295874444461016]
								}, {
									"case":	36,
									"scores":	[-4.295874444461016]
								}, {
									"case":	37,
									"scores":	[-4.295874444461016]
								}, {
									"case":	38,
									"scores":	[-4.295874444461016]
								}, {
									"case":	39,
									"scores":	[-4.295874444461016]
								}, {
									"case":	40,
									"scores":	[-4.295874444461016]
								}, {
									"case":	41,
									"scores":	[-4.295874444461016]
								}, {
									"case":	42,
									"scores":	[-4.295874444461016]
								}, {
									"case":	43,
									"scores":	[-4.295874444461016]
								}, {
									"case":	44,
									"scores":	[-4.295874444461016]
								}, {
									"case":	45,
									"scores":	[-4.295874444461016]
								}, {
									"case":	46,
									"scores":	[-4.295874444461016]
								}, {
									"case":	47,
									"scores":	[-4.295874444461016]
								}, {
									"case":	48,
									"scores":	[-4.295874444461016]
								}, {
									"case":	49,
									"scores":	[-4.295874444461016]
								}, {
									"case":	50,
									"scores":	[-4.295874444461016]
								}, {
									"case":	51,
									"scores":	[-4.295874444461016]
								}, {
									"case":	52,
									"scores":	[-4.295874444461016]
								}, {
									"case":	53,
									"scores":	[-4.295874444461016]
								}, {
									"case":	54,
									"scores":	[-4.295874444461016]
								}, {
									"case":	55,
									"scores":	[-4.295874444461016]
								}, {
									"case":	56,
									"scores":	[-4.295874444461016]
								}, {
									"case":	57,
									"scores":	[-4.295874444461016]
								}, {
									"case":	58,
									"scores":	[-4.295874444461016]
								}, {
									"case":	59,
									"scores":	[-4.295874444461016]
								}, {
									"case":	60,
									"scores":	[-4.295874444461016]
								}, {
									"case":	61,
									"scores":	[-4.295874444461016]
								}, {
									"case":	62,
									"scores":	[-4.295874444461016]
								}, {
									"case":	63,
									"scores":	[-4.295874444461016]
								}, {
									"case":	64,
									"scores":	[-4.295874444461016]
								}, {
									"case":	65,
									"scores":	[-4.295874444461016]
								}, {
									"case":	66,
									"scores":	[-4.295874444461016]
								}, {
									"case":	67,
									"scores":	[-4.295874444461016]
								}, {
									"case":	68,
									"scores":	[-4.295874444461016]
								}, {
									"case":	69,
									"scores":	[-4.295874444461016]
								}, {
									"case":	70,
									"scores":	[-4.295874444461016]
								}, {
									"case":	71,
									"scores":	[-4.295874444461016]
								}, {
									"case":	72,
									"scores":	[-4.295874444461016]
								}, {
									"case":	73,
									"scores":	[-4.295874444461016]
								}, {
									"case":	74,
									"scores":	[-4.295874444461016]
								}, {
									"case":	75,
									"scores":	[-4.295874444461016]
								}, {
									"case":	76,
									"scores":	[-4.295874444461016]
								}, {
									"case":	77,
									"scores":	[-4.295874444461016]
								}, {
									"case":	78,
									"scores":	[-4.295874444461016]
								}, {
									"case":	79,
									"scores":	[-4.295874444461016]
								}, {
									"case":	80,
									"scores":	[-4.295874444461016]
								}, {
									"case":	81,
									"scores":	[-4.295874444461016]
								}, {
									"case":	82,
									"scores":	[-4.295874444461016]
								}, {
									"case":	83,
									"scores":	[-4.295874444461016]
								}, {
									"case":	84,
									"scores":	[-4.295874444461016]
								}, {
									"case":	85,
									"scores":	[-4.295874444461016]
								}, {
									"case":	86,
									"scores":	[-4.295874444461016]
								}, {
									"case":	87,
									"scores":	[-4.295874444461016]
								}, {
									"case":	88,
									"scores":	[-4.295874444461016]
								}, {
									"case":	89,
									"scores":	[-4.295874444461016]
								}, {
									"case":	90,
									"scores":	[-4.295874444461016]
								}, {
									"case":	91,
									"scores":	[-4.295874444461016]
								}, {
									"case":	92,
									"scores":	[-4.295874444461016]
								}, {
									"case":	93,
									"scores":	[-4.295874444461016]
								}, {
									"case":	94,
									"scores":	[-4.295874444461016]
								}, {
									"case":	95,
									"scores":	[-4.295874444461016]
								}, {
									"case":	96,
									"scores":	[-4.295874444461016]
								}, {
									"case":	97,
									"scores":	[-4.295874444461016]
								}, {
									"case":	98,
									"scores":	[-4.295874444461016]
								}, {
									"case":	99,
									"scores":	[-4.295874444461016]
								}, {
									"case":	100,
									"scores":	[-4.295874444461016]
								}, {
									"case":	101,
									"scores":	[-4.295874444461016]
								}, {
									"case":	102,
									"scores":	[-4.295874444461016]
								}, {
									"case":	103,
									"scores":	[-4.295874444461016]
								}, {
									"case":	104,
									"scores":	[-4.295874444461016]
								}, {
									"case":	105,
									"scores":	[-4.295874444461016]
								}, {
									"case":	106,
									"scores":	[-4.295874444461016]
								}, {
									"case":	107,
									"scores":	[-4.295874444461016]
								}, {
									"case":	108,
									"scores":	[-4.295874444461016]
								}, {
									"case":	109,
									"scores":	[-4.295874444461016]
								}, {
									"case":	110,
									"scores":	[-4.295874444461016]
								}, {
									"case":	111,
									"scores":	[-4.295874444461016]
								}, {
									"case":	112,
									"scores":	[-4.295874444461016]
								}, {
									"case":	113,
									"scores":	[-4.295874444461016]
								}, {
									"case":	114,
									"scores":	[-4.295874444461016]
								}, {
									"case":	115,
									"scores":	[-4.295874444461016]
								}, {
									"case":	116,
									"scores":	[-4.295874444461016]
								}, {
									"case":	117,
									"scores":	[-4.295874444461016]
								}, {
									"case":	118,
									"scores":	[-4.295874444461016]
								}, {
									"case":	119,
									"scores":	[-4.295874444461016]
								}, {
									"case":	120,
									"scores":	[-4.295874444461016]
								}, {
									"case":	121,
									"scores":	[-4.295874444461016]
								}, {
									"case":	122,
									"scores":	[-4.295874444461016]
								}, {
									"case":	123,
									"scores":	[-4.295874444461016]
								}, {
									"case":	124,
									"scores":	[-4.295874444461016]
								}, {
									"case":	125,
									"scores":	[-4.295874444461016]
								}, {
									"case":	126,
									"scores":	[-4.295874444461016]
								}, {
									"case":	127,
									"scores":	[-4.295874444461016]
								}, {
									"case":	128,
									"scores":	[-4.295874444461016]
								}, {
									"case":	129,
									"scores":	[-4.295874444461016]
								}, {
									"case":	130,
									"scores":	[-4.295874444461016]
								}, {
									"case":	131,
									"scores":	[-4.295874444461016]
								}, {
									"case":	132,
									"scores":	[-4.295874444461016]
								}, {
									"case":	133,
									"scores":	[-4.295874444461016]
								}, {
									"case":	134,
									"scores":	[-4.295874444461016]
								}, {
									"case":	135,
									"scores":	[-4.295874444461016]
								}, {
									"case":	136,
									"scores":	[-4.295874444461016]
								}, {
									"case":	137,
									"scores":	[-4.295874444461016]
								}, {
									"case":	138,
									"scores":	[-4.295874444461016]
								}, {
									"case":	139,
									"scores":	[-4.295874444461016]
								}, {
									"case":	140,
									"scores":	[-4.295874444461016]
								}, {
									"case":	141,
									"scores":	[-4.295874444461016]
								}, {
									"case":	142,
									"scores":	[-4.295874444461016]
								}, {
									"case":	143,
									"scores":	[-4.295874444461016]
								}, {
									"case":	144,
									"scores":	[-4.295874444461016]
								}, {
									"case":	145,
									"scores":	[-4.295874444461016]
								}, {
									"case":	146,
									"scores":	[-4.295874444461016]
								}, {
									"case":	147,
									"scores":	[-4.295874444461016]
								}, {
									"case":	148,
									"scores":	[-4.295874444461016]
								}, {
									"case":	149,
									"scores":	[-4.295874444461016]
								}, {
									"case":	150,
									"scores":	[-4.295874444461016]
								}, {
									"case":	151,
									"scores":	[-4.295874444461016]
								}, {
									"case":	152,
									"scores":	[-4.295874444461016]
								}, {
									"case":	153,
									"scores":	[-4.295874444461016]
								}, {
									"case":	154,
									"scores":	[-4.295874444461016]
								}, {
									"case":	155,
									"scores":	[-4.295874444461016]
								}, {
									"case":	156,
									"scores":	[-4.295874444461016]
								}, {
									"case":	157,
									"scores":	[-4.295874444461016]
								}, {
									"case":	158,
									"scores":	[-4.295874444461016]
								}, {
									"case":	159,
									"scores":	[-4.295874444461016]
								}, {
									"case":	160,
									"scores":	[-4.295874444461016]
								}, {
									"case":	161,
									"scores":	[-4.295874444461016]
								}, {
									"case":	162,
									"scores":	[-4.295874444461016]
								}, {
									"case":	163,
									"scores":	[-4.295874444461016]
								}, {
									"case":	164,
									"scores":	[-4.295874444461016]
								}, {
									"case":	165,
									"scores":	[-4.295874444461016]
								}, {
									"case":	166,
									"scores":	[-4.295874444461016]
								}, {
									"case":	167,
									"scores":	[-4.295874444461016]
								}, {
									"case":	168,
									"scores":	[-4.295874444461016]
								}, {
									"case":	169,
									"scores":	[-4.295874444461016]
								}, {
									"case":	170,
									"scores":	[-4.295874444461016]
								}, {
									"case":	171,
									"scores":	[-4.295874444461016]
								}, {
									"case":	172,
									"scores":	[-4.295874444461016]
								}, {
									"case":	173,
									"scores":	[-4.295874444461016]
								}, {
									"case":	174,
									"scores":	[-4.295874444461016]
								}, {
									"case":	175,
									"scores":	[-4.295874444461016]
								}, {
									"case":	176,
									"scores":	[-4.295874444461016]
								}, {
									"case":	177,
									"scores":	[-4.295874444461016]
								}, {
									"case":	178,
									"scores":	[-4.295874444461016]
								}, {
									"case":	179,
									"scores":	[-4.295874444461016]
								}, {
									"case":	180,
									"scores":	[-4.295874444461016]
								}, {
									"case":	181,
									"scores":	[-4.295874444461016]
								}, {
									"case":	182,
									"scores":	[-4.295874444461016]
								}, {
									"case":	183,
									"scores":	[-4.295874444461016]
								}, {
									"case":	184,
									"scores":	[-4.295874444461016]
								}, {
									"case":	185,
									"scores":	[-4.295874444461016]
								}, {
									"case":	186,
									"scores":	[-4.295874444461016]
								}, {
									"case":	187,
									"scores":	[-4.295874444461016]
								}, {
									"case":	188,
									"scores":	[-4.295874444461016]
								}, {
									"case":	189,
									"scores":	[-4.295874444461016]
								}, {
									"case":	190,
									"scores":	[-4.295874444461016]
								}, {
									"case":	191,
									"scores":	[-4.295874444461016]
								}, {
									"case":	192,
									"scores":	[-4.295874444461016]
								}, {
									"case":	193,
									"scores":	[-4.295874444461016]
								}, {
									"case":	194,
									"scores":	[-4.295874444461016]
								}, {
									"case":	195,
									"scores":	[-4.295874444461016]
								}, {
									"case":	196,
									"scores":	[-4.295874444461016]
								}, {
									"case":	197,
									"scores":	[-4.295874444461016]
								}, {
									"case":	198,
									"scores":	[-4.295874444461016]
								}, {
									"case":	199,
									"scores":	[-4.295874444461016]
								}, {
									"case":	200,
									"scores":	[-4.295874444461016]
								}, {
									"case":	201,
									"scores":	[-4.295874444461016]
								}, {
									"case":	202,
									"scores":	[-4.295874444461016]
								}, {
									"case":	203,
									"scores":	[-4.295874444461016]
								}, {
									"case":	204,
									"scores":	[-4.295874444461016]
								}, {
									"case":	205,
									"scores":	[-4.295874444461016]
								}, {
									"case":	206,
									"scores":	[-4.295874444461016]
								}, {
									"case":	207,
									"scores":	[-4.295874444461016]
								}, {
									"case":	208,
									"scores":	[-4.295874444461016]
								}, {
									"case":	209,
									"scores":	[-4.295874444461016]
								}, {
									"case":	210,
									"scores":	[-4.295874444461016]
								}, {
									"case":	211,
									"scores":	[-4.295874444461016]
								}, {
									"case":	212,
									"scores":	[-4.295874444461016]
								}, {
									"case":	213,
									"scores":	[-4.295874444461016]
								}, {
									"case":	214,
									"scores":	[-4.295874444461016]
								}, {
									"case":	215,
									"scores":	[-4.295874444461016]
								}, {
									"case":	216,
									"scores":	[-4.295874444461016]
								}, {
									"case":	217,
									"scores":	[-4.295874444461016]
								}, {
									"case":	218,
									"scores":	[-4.295874444461016]
								}, {
									"case":	219,
									"scores":	[-4.295874444461016]
								}, {
									"case":	220,
									"scores":	[-4.295874444461016]
								}, {
									"case":	221,
									"scores":	[-4.295874444461016]
								}, {
									"case":	222,
									"scores":	[-4.295874444461016]
								}, {
									"case":	223,
									"scores":	[-4.295874444461016]
								}, {
									"case":	224,
									"scores":	[-4.295874444461016]
								}, {
									"case":	225,
									"scores":	[-4.295874444461016]
								}, {
									"case":	226,
									"scores":	[-4.295874444461016]
								}, {
									"case":	227,
									"scores":	[-4.295874444461016]
								}, {
									"case":	228,
									"scores":	[-4.295874444461016]
								}, {
									"case":	229,
									"scores":	[-4.295874444461016]
								}, {
									"case":	230,
									"scores":	[-4.295874444461016]
								}, {
									"case":	231,
									"scores":	[-4.295874444461016]
								}, {
									"case":	232,
									"scores":	[-4.295874444461016]
								}, {
									"case":	233,
									"scores":	[-4.295874444461016]
								}, {
									"case":	234,
									"scores":	[-4.295874444461016]
								}, {
									"case":	235,
									"scores":	[-4.295874444461016]
								}, {
									"case":	236,
									"scores":	[-4.295874444461016]
								}, {
									"case":	237,
									"scores":	[-4.295874444461016]
								}, {
									"case":	238,
									"scores":	[-4.295874444461016]
								}, {
									"case":	239,
									"scores":	[-4.295874444461016]
								}, {
									"case":	240,
									"scores":	[-4.295874444461016]
								}, {
									"case":	241,
									"scores":	[-4.295874444461016]
								}, {
									"case":	242,
									"scores":	[-4.295874444461016]
								}, {
									"case":	243,
									"scores":	[-4.295874444461016]
								}, {
									"case":	244,
									"scores":	[-4.295874444461016]
								}, {
									"case":	245,
									"scores":	[-4.295874444461016]
								}, {
									"case":	246,
									"scores":	[-4.295874444461016]
								}, {
									"case":	247,
									"scores":	[-4.295874444461016]
								}, {
									"case":	248,
									"scores":	[-4.295874444461016]
								}, {
									"case":	249,
									"scores":	[-4.295874444461016]
								}, {
									"case":	250,
									"scores":	[-4.295874444461016]
								}, {
									"case":	251,
									"scores":	[-4.295874444461016]
								}, {
									"case":	252,
									"scores":	[-4.295874444461016]
								}, {
									"case":	253,
									"scores":	[-4.295874444461016]
								}, {
									"case":	254,
									"scores":	[-4.295874444461016]
								}, {
									"case":	255,
									"scores":	[-4.295874444461016]
								}, {
									"case":	256,
									"scores":	[-4.295874444461016]
								}, {
									"case":	257,
									"scores":	[-4.295874444461016]
								}, {
									"case":	258,
									"scores":	[-4.295874444461016]
								}, {
									"case":	259,
									"scores":	[-4.295874444461016]
								}, {
									"case":	260,
									"scores":	[-4.295874444461016]
								}, {
									"case":	261,
									"scores":	[-4.295874444461016]
								}, {
									"case":	262,
									"scores":	[-4.295874444461016]
								}, {
									"case":	263,
									"scores":	[-4.295874444461016]
								}, {
									"case":	264,
									"scores":	[-4.295874444461016]
								}, {
									"case":	265,
									"scores":	[-4.295874444461016]
								}, {
									"case":	266,
									"scores":	[-4.295874444461016]
								}, {
									"case":	267,
									"scores":	[-4.295874444461016]
								}, {
									"case":	268,
									"scores":	[-4.295874444461016]
								}, {
									"case":	269,
									"scores":	[-4.295874444461016]
								}, {
									"case":	270,
									"scores":	[-4.295874444461016]
								}, {
									"case":	271,
									"scores":	[-4.295874444461016]
								}, {
									"case":	272,
									"scores":	[-4.295874444461016]
								}, {
									"case":	273,
									"scores":	[-4.295874444461016]
								}, {
									"case":	274,
									"scores":	[-4.295874444461016]
								}, {
									"case":	275,
									"scores":	[-4.295874444461016]
								}, {
									"case":	276,
									"scores":	[-4.295874444461016]
								}, {
									"case":	277,
									"scores":	[-4.295874444461016]
								}, {
									"case":	278,
									"scores":	[-4.295874444461016]
								}, {
									"case":	279,
									"scores":	[-4.295874444461016]
								}, {
									"case":	280,
									"scores":	[-4.295874444461016]
								}, {
									"case":	281,
									"scores":	[-4.295874444461016]
								}, {
									"case":	282,
									"scores":	[-4.295874444461016]
								}, {
									"case":	283,
									"scores":	[-4.295874444461016]
								}, {
									"case":	284,
									"scores":	[-4.295874444461016]
								}, {
									"case":	285,
									"scores":	[-4.295874444461016]
								}, {
									"case":	286,
									"scores":	[-4.295874444461016]
								}, {
									"case":	287,
									"scores":	[-4.295874444461016]
								}, {
									"case":	288,
									"scores":	[-4.295874444461016]
								}, {
									"case":	289,
									"scores":	[-4.295874444461016]
								}, {
									"case":	290,
									"scores":	[-4.295874444461016]
								}, {
									"case":	291,
									"scores":	[-4.295874444461016]
								}, {
									"case":	292,
									"scores":	[-4.295874444461016]
								}, {
									"case":	293,
									"scores":	[-4.295874444461016]
								}, {
									"case":	294,
									"scores":	[-4.295874444461016]
								}, {
									"case":	295,
									"scores":	[-4.295874444461016]
								}, {
									"case":	296,
									"scores":	[-4.295874444461016]
								}, {
									"case":	297,
									"scores":	[-4.295874444461016]
								}, {
									"case":	298,
									"scores":	[-4.295874444461016]
								}, {
									"case":	299,
									"scores":	[-4.295874444461016]
								}, {
									"case":	300,
									"scores":	[-4.295874444461016]
								}, {
									"case":	301,
									"scores":	[-4.295874444461016]
								}, {
									"case":	302,
									"scores":	[-4.295874444461016]
								}, {
									"case":	303,
									"scores":	[-4.295874444461016]
								}, {
									"case":	304,
									"scores":	[-4.295874444461016]
								}, {
									"case":	305,
									"scores":	[-4.295874444461016]
								}, {
									"case":	306,
									"scores":	[-4.295874444461016]
								}, {
									"case":	307,
									"scores":	[-4.295874444461016]
								}, {
									"case":	308,
									"scores":	[-4.295874444461016]
								}, {
									"case":	309,
									"scores":	[-4.295874444461016]
								}, {
									"case":	310,
									"scores":	[-4.295874444461016]
								}, {
									"case":	311,
									"scores":	[-4.295874444461016]
								}, {
									"case":	312,
									"scores":	[-4.295874444461016]
								}, {
									"case":	313,
									"scores":	[-4.295874444461016]
								}, {
									"case":	314,
									"scores":	[-4.295874444461016]
								}, {
									"case":	315,
									"scores":	[-4.295874444461016]
								}, {
									"case":	316,
									"scores":	[-4.295874444461016]
								}, {
									"case":	317,
									"scores":	[-4.295874444461016]
								}, {
									"case":	318,
									"scores":	[-4.295874444461016]
								}, {
									"case":	319,
									"scores":	[-4.295874444461016]
								}, {
									"case":	320,
									"scores":	[-4.295874444461016]
								}, {
									"case":	321,
									"scores":	[-4.295874444461016]
								}, {
									"case":	322,
									"scores":	[-4.295874444461016]
								}, {
									"case":	323,
									"scores":	[-4.295874444461016]
								}, {
									"case":	324,
									"scores":	[-4.295874444461016]
								}, {
									"case":	325,
									"scores":	[-4.295874444461016]
								}, {
									"case":	326,
									"scores":	[-4.295874444461016]
								}, {
									"case":	327,
									"scores":	[-4.295874444461016]
								}, {
									"case":	328,
									"scores":	[-4.295874444461016]
								}, {
									"case":	329,
									"scores":	[-4.295874444461016]
								}, {
									"case":	330,
									"scores":	[-4.295874444461016]
								}, {
									"case":	331,
									"scores":	[-4.295874444461016]
								}, {
									"case":	332,
									"scores":	[-4.295874444461016]
								}, {
									"case":	333,
									"scores":	[-4.295874444461016]
								}, {
									"case":	334,
									"scores":	[-4.295874444461016]
								}, {
									"case":	335,
									"scores":	[-4.295874444461016]
								}, {
									"case":	336,
									"scores":	[-4.295874444461016]
								}, {
									"case":	337,
									"scores":	[-4.295874444461016]
								}, {
									"case":	338,
									"scores":	[-4.295874444461016]
								}, {
									"case":	339,
									"scores":	[-4.295874444461016]
								}, {
									"case":	340,
									"scores":	[-4.295874444461016]
								}, {
									"case":	341,
									"scores":	[-4.295874444461016]
								}, {
									"case":	342,
									"scores":	[-4.295874444461016]
								}, {
									"case":	343,
									"scores":	[-4.295874444461016]
								}, {
									"case":	344,
									"scores":	[-4.295874444461016]
								}, {
									"case":	345,
									"scores":	[-4.295874444461016]
								}, {
									"case":	346,
									"scores":	[-4.295874444461016]
								}, {
									"case":	347,
									"scores":	[-4.295874444461016]
								}, {
									"case":	348,
									"scores":	[-4.295874444461016]
								}, {
									"case":	349,
									"scores":	[-4.295874444461016]
								}, {
									"case":	350,
									"scores":	[-4.295874444461016]
								}, {
									"case":	351,
									"scores":	[-4.295874444461016]
								}, {
									"case":	352,
									"scores":	[-4.295874444461016]
								}, {
									"case":	353,
									"scores":	[-4.295874444461016]
								}, {
									"case":	354,
									"scores":	[-4.295874444461016]
								}, {
									"case":	355,
									"scores":	[-4.295874444461016]
								}, {
									"case":	356,
									"scores":	[-4.295874444461016]
								}, {
									"case":	357,
									"scores":	[-4.295874444461016]
								}, {
									"case":	358,
									"scores":	[-4.295874444461016]
								}, {
									"case":	359,
									"scores":	[-4.295874444461016]
								}, {
									"case":	360,
									"scores":	[-4.295874444461016]
								}, {
									"case":	361,
									"scores":	[-4.295874444461016]
								}, {
									"case":	362,
									"scores":	[-4.295874444461016]
								}, {
									"case":	363,
									"scores":	[-4.295874444461016]
								}, {
									"case":	364,
									"scores":	[-4.295874444461016]
								}, {
									"case":	365,
									"scores":	[-4.295874444461016]
								}, {
									"case":	366,
									"scores":	[-4.295874444461016]
								}, {
									"case":	367,
									"scores":	[-4.295874444461016]
								}, {
									"case":	368,
									"scores":	[-4.295874444461016]
								}, {
									"case":	369,
									"scores":	[-4.295874444461016]
								}, {
									"case":	370,
									"scores":	[-4.295874444461016]
								}, {
									"case":	371,
									"scores":	[-4.295874444461016]
								}, {
									"case":	372,
									"scores":	[-4.295874444461016]
								}, {
									"case":	373,
									"scores":	[-4.295874444461016]
								}, {
									"case":	374,
									"scores":	[-4.295874444461016]
								}, {
									"case":	375,
									"scores":	[-4.295874444461016]
								}, {
									"case":	376,
									"scores":	[-4.295874444461016]
								}, {
									"case":	377,
									"scores":	[-4.295874444461016]
								}, {
									"case":	378,
									"scores":	[-4.295874444461016]
								}, {
									"case":	379,
									"scores":	[-4.295874444461016]
								}, {
									"case":	380,
									"scores":	[-4.295874444461016]
								}, {
									"case":	381,
									"scores":	[-4.295874444461016]
								}, {
									"case":	382,
									"scores":	[-4.295874444461016]
								}, {
									"case":	383,
									"scores":	[-4.295874444461016]
								}, {
									"case":	384,
									"scores":	[-4.295874444461016]
								}, {
									"case":	385,
									"scores":	[-4.295874444461016]
								}, {
									"case":	386,
									"scores":	[-4.295874444461016]
								}, {
									"case":	387,
									"scores":	[-4.295874444461016]
								}, {
									"case":	388,
									"scores":	[-4.295874444461016]
								}, {
									"case":	389,
									"scores":	[-4.295874444461016]
								}, {
									"case":	390,
									"scores":	[-4.295874444461016]
								}, {
									"case":	391,
									"scores":	[-4.295874444461016]
								}, {
									"case":	392,
									"scores":	[-4.295874444461016]
								}, {
									"case":	393,
									"scores":	[-4.295874444461016]
								}, {
									"case":	394,
									"scores":	[-4.295874444461016]
								}, {
									"case":	395,
									"scores":	[-4.295874444461016]
								}, {
									"case":	396,
									"scores":	[-4.295874444461016]
								}, {
									"case":	397,
									"scores":	[-4.295874444461016]
								}, {
									"case":	398,
									"scores":	[-4.295874444461016]
								}, {
									"case":	399,
									"scores":	[-4.295874444461016]
								}, {
									"case":	400,
									"scores":	[-4.295874444461016]
								}, {
									"case":	401,
									"scores":	[-4.295874444461016]
								}, {
									"case":	402,
									"scores":	[-4.295874444461016]
								}, {
									"case":	403,
									"scores":	[-4.295874444461016]
								}, {
									"case":	404,
									"scores":	[-4.295874444461016]
								}, {
									"case":	405,
									"scores":	[-4.295874444461016]
								}, {
									"case":	406,
									"scores":	[-4.295874444461016]
								}, {
									"case":	407,
									"scores":	[-4.295874444461016]
								}, {
									"case":	408,
									"scores":	[-4.295874444461016]
								}, {
									"case":	409,
									"scores":	[-4.295874444461016]
								}, {
									"case":	410,
									"scores":	[-4.295874444461016]
								}, {
									"case":	411,
									"scores":	[-4.295874444461016]
								}, {
									"case":	412,
									"scores":	[-4.295874444461016]
								}, {
									"case":	413,
									"scores":	[-4.295874444461016]
								}, {
									"case":	414,
									"scores":	[-4.295874444461016]
								}, {
									"case":	415,
									"scores":	[-4.295874444461016]
								}, {
									"case":	416,
									"scores":	[-4.295874444461016]
								}, {
									"case":	417,
									"scores":	[-4.295874444461016]
								}, {
									"case":	418,
									"scores":	[-4.295874444461016]
								}, {
									"case":	419,
									"scores":	[-4.295874444461016]
								}, {
									"case":	420,
									"scores":	[-4.295874444461016]
								}, {
									"case":	421,
									"scores":	[-4.295874444461016]
								}, {
									"case":	422,
									"scores":	[-4.295874444461016]
								}, {
									"case":	423,
									"scores":	[-4.295874444461016]
								}, {
									"case":	424,
									"scores":	[-4.295874444461016]
								}, {
									"case":	425,
									"scores":	[-4.295874444461016]
								}, {
									"case":	426,
									"scores":	[-4.295874444461016]
								}, {
									"case":	427,
									"scores":	[-4.295874444461016]
								}, {
									"case":	428,
									"scores":	[-4.295874444461016]
								}, {
									"case":	429,
									"scores":	[-4.295874444461016]
								}, {
									"case":	430,
									"scores":	[-4.295874444461016]
								}, {
									"case":	431,
									"scores":	[-4.295874444461016]
								}, {
									"case":	432,
									"scores":	[-4.295874444461016]
								}, {
									"case":	433,
									"scores":	[-4.295874444461016]
								}, {
									"case":	434,
									"scores":	[-4.295874444461016]
								}, {
									"case":	435,
									"scores":	[-4.295874444461016]
								}, {
									"case":	436,
									"scores":	[-4.295874444461016]
								}, {
									"case":	437,
									"scores":	[-4.295874444461016]
								}, {
									"case":	438,
									"scores":	[-4.295874444461016]
								}, {
									"case":	439,
									"scores":	[-4.295874444461016]
								}, {
									"case":	440,
									"scores":	[-4.295874444461016]
								}, {
									"case":	441,
									"scores":	[-4.295874444461016]
								}, {
									"case":	442,
									"scores":	[-4.295874444461016]
								}, {
									"case":	443,
									"scores":	[-4.295874444461016]
								}, {
									"case":	444,
									"scores":	[-4.295874444461016]
								}, {
									"case":	445,
									"scores":	[-4.295874444461016]
								}, {
									"case":	446,
									"scores":	[-4.295874444461016]
								}, {
									"case":	447,
									"scores":	[-4.295874444461016]
								}, {
									"case":	448,
									"scores":	[-4.295874444461016]
								}, {
									"case":	449,
									"scores":	[-4.295874444461016]
								}, {
									"case":	450,
									"scores":	[-4.295874444461016]
								}, {
									"case":	451,
									"scores":	[-4.295874444461016]
								}, {
									"case":	452,
									"scores":	[-4.295874444461016]
								}, {
									"case":	453,
									"scores":	[-4.295874444461016]
								}, {
									"case":	454,
									"scores":	[-4.295874444461016]
								}, {
									"case":	455,
									"scores":	[-4.295874444461016]
								}, {
									"case":	456,
									"scores":	[-4.295874444461016]
								}, {
									"case":	457,
									"scores":	[-4.295874444461016]
								}, {
									"case":	458,
									"scores":	[-4.295874444461016]
								}, {
									"case":	459,
									"scores":	[-4.295874444461016]
								}, {
									"case":	460,
									"scores":	[-4.295874444461016]
								}, {
									"case":	461,
									"scores":	[-4.295874444461016]
								}, {
									"case":	462,
									"scores":	[-4.295874444461016]
								}, {
									"case":	463,
									"scores":	[-4.295874444461016]
								}, {
									"case":	464,
									"scores":	[-4.295874444461016]
								}, {
									"case":	465,
									"scores":	[-4.295874444461016]
								}, {
									"case":	466,
									"scores":	[-4.295874444461016]
								}, {
									"case":	467,
									"scores":	[-4.295874444461016]
								}, {
									"case":	468,
									"scores":	[-4.295874444461016]
								}, {
									"case":	469,
									"scores":	[-4.295874444461016]
								}, {
									"case":	470,
									"scores":	[-4.295874444461016]
								}, {
									"case":	471,
									"scores":	[-4.295874444461016]
								}, {
									"case":	472,
									"scores":	[-4.295874444461016]
								}, {
									"case":	473,
									"scores":	[-4.295874444461016]
								}, {
									"case":	474,
									"scores":	[-4.295874444461016]
								}, {
									"case":	475,
									"scores":	[-4.295874444461016]
								}, {
									"case":	476,
									"scores":	[-4.295874444461016]
								}, {
									"case":	477,
									"scores":	[-4.295874444461016]
								}, {
									"case":	478,
									"scores":	[-4.295874444461016]
								}, {
									"case":	479,
									"scores":	[-4.295874444461016]
								}, {
									"case":	480,
									"scores":	[-4.295874444461016]
								}, {
									"case":	481,
									"scores":	[-4.295874444461016]
								}, {
									"case":	482,
									"scores":	[-4.295874444461016]
								}, {
									"case":	483,
									"scores":	[-4.295874444461016]
								}, {
									"case":	484,
									"scores":	[-4.295874444461016]
								}, {
									"case":	485,
									"scores":	[-4.295874444461016]
								}, {
									"case":	486,
									"scores":	[-4.295874444461016]
								}, {
									"case":	487,
									"scores":	[-4.295874444461016]
								}, {
									"case":	488,
									"scores":	[-4.295874444461016]
								}, {
									"case":	489,
									"scores":	[-4.295874444461016]
								}, {
									"case":	490,
									"scores":	[-4.295874444461016]
								}, {
									"case":	491,
									"scores":	[-4.295874444461016]
								}, {
									"case":	492,
									"scores":	[-4.295874444461016]
								}, {
									"case":	493,
									"scores":	[-4.295874444461016]
								}, {
									"case":	494,
									"scores":	[-4.295874444461016]
								}, {
									"case":	495,
									"scores":	[-4.295874444461016]
								}, {
									"case":	496,
									"scores":	[-4.295874444461016]
								}, {
									"case":	497,
									"scores":	[-4.295874444461016]
								}, {
									"case":	498,
									"scores":	[-4.295874444461016]
								}, {
									"case":	499,
									"scores":	[-4.295874444461016]
								}, {
									"case":	500,
									"scores":	[-4.295874444461016]
								}, {
									"case":	501,
									"scores":	[-4.295874444461016]
								}, {
									"case":	502,
									"scores":	[-4.295874444461016]
								}, {
									"case":	503,
									"scores":	[-4.295874444461016]
								}, {
									"case":	504,
									"scores":	[-4.295874444461016]
								}, {
									"case":	505,
									"scores":	[-4.295874444461016]
								}, {
									"case":	506,
									"scores":	[-4.295874444461016]
								}, {
									"case":	507,
									"scores":	[-4.295874444461016]
								}, {
									"case":	508,
									"scores":	[-4.295874444461016]
								}, {
									"case":	509,
									"scores":	[-4.295874444461016]
								}, {
									"case":	510,
									"scores":	[-4.295874444461016]
								}, {
									"case":	511,
									"scores":	[-4.295874444461016]
								}, {
									"case":	512,
									"scores":	[-4.295874444461016]
								}, {
									"case":	513,
									"scores":	[-4.295874444461016]
								}, {
									"case":	514,
									"scores":	[-4.295874444461016]
								}, {
									"case":	515,
									"scores":	[-4.295874444461016]
								}, {
									"case":	516,
									"scores":	[-4.295874444461016]
								}, {
									"case":	517,
									"scores":	[-4.295874444461016]
								}, {
									"case":	518,
									"scores":	[-4.295874444461016]
								}, {
									"case":	519,
									"scores":	[-4.295874444461016]
								}, {
									"case":	520,
									"scores":	[-4.295874444461016]
								}, {
									"case":	521,
									"scores":	[-4.295874444461016]
								}, {
									"case":	522,
									"scores":	[-4.295874444461016]
								}, {
									"case":	523,
									"scores":	[-4.295874444461016]
								}, {
									"case":	524,
									"scores":	[-4.295874444461016]
								}, {
									"case":	525,
									"scores":	[-4.295874444461016]
								}, {
									"case":	526,
									"scores":	[-4.295874444461016]
								}, {
									"case":	527,
									"scores":	[-4.295874444461016]
								}, {
									"case":	528,
									"scores":	[-4.295874444461016]
								}, {
									"case":	529,
									"scores":	[-4.295874444461016]
								}, {
									"case":	530,
									"scores":	[-4.295874444461016]
								}, {
									"case":	531,
									"scores":	[-4.295874444461016]
								}, {
									"case":	532,
									"scores":	[-4.295874444461016]
								}, {
									"case":	533,
									"scores":	[-4.295874444461016]
								}, {
									"case":	534,
									"scores":	[-4.295874444461016]
								}, {
									"case":	535,
									"scores":	[-4.295874444461016]
								}, {
									"case":	536,
									"scores":	[-4.295874444461016]
								}, {
									"case":	537,
									"scores":	[-4.295874444461016]
								}, {
									"case":	538,
									"scores":	[-4.295874444461016]
								}, {
									"case":	539,
									"scores":	[-4.295874444461016]
								}, {
									"case":	540,
									"scores":	[-4.295874444461016]
								}, {
									"case":	541,
									"scores":	[-4.295874444461016]
								}, {
									"case":	542,
									"scores":	[-5.6630817644610163, -8.3612327944610154, -8.3612327944610154, -8.5117150997050146, -8.0239047644610153, -8.5327639944610159, -7.0391076944610163, -7.0391076944610163, -8.5327639944610159, -8.5327639944610159, -8.5394656944610166, -8.5327639944610159, -8.5327639944610159, -8.5327639944610159, -8.5394656944610166, -8.5327639944610159]
								}, {
									"case":	543,
									"scores":	[-6.3502857644610167, -9.0484367944610149, -9.0484367944610149, -9.1989190997050159, -8.7111087644610166, -9.2199679944610153, -7.7263116944610157, -7.7263116944610157, -9.2199679944610153, -9.2199679944610153, -9.226669694461016, -9.2199679944610153, -9.2199679944610153, -9.2199679944610153, -9.226669694461016, -9.2199679944610153]
								}, {
									"case":	544,
									"scores":	[-8.3687317644610157, -11.066882794461016, -11.066882794461016, -11.217365099705017, -10.729554764461017, -11.238413994461016, -9.7447576944610148, -9.7447576944610148, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016]
								}, {
									"case":	545,
									"scores":	[-8.3687317644610157, -11.066882794461016, -11.066882794461016, -11.217365099705017, -10.729554764461017, -11.238413994461016, -9.7447576944610148, -9.7447576944610148, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016]
								}, {
									"case":	546,
									"scores":	[-8.3687317644610157, -11.066882794461016, -11.066882794461016, -11.217365099705017, -10.729554764461017, -11.238413994461016, -9.7447576944610148, -9.7447576944610148, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016]
								}, {
									"case":	547,
									"scores":	[-8.3687317644610157, -11.066882794461016, -11.066882794461016, -11.217365099705017, -10.729554764461017, -11.238413994461016, -9.7447576944610148, -9.7447576944610148, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016]
								}, {
									"case":	548,
									"scores":	[-8.3687317644610157, -11.066882794461016, -11.066882794461016, -11.217365099705017, -10.729554764461017, -11.238413994461016, -9.7447576944610148, -9.7447576944610148, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016]
								}, {
									"case":	549,
									"scores":	[-8.3687317644610157, -11.066882794461016, -11.066882794461016, -11.217365099705017, -10.729554764461017, -11.238413994461016, -9.7447576944610148, -9.7447576944610148, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016]
								}, {
									"case":	550,
									"scores":	[-8.3687317644610157, -11.066882794461016, -11.066882794461016, -11.217365099705017, -10.729554764461017, -11.238413994461016, -9.7447576944610148, -9.7447576944610148, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016]
								}, {
									"case":	551,
									"scores":	[-8.3687317644610157, -11.066882794461016, -11.066882794461016, -11.217365099705017, -10.729554764461017, -11.238413994461016, -9.7447576944610148, -9.7447576944610148, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016]
								}, {
									"case":	552,
									"scores":	[-8.3687317644610157, -11.066882794461016, -11.066882794461016, -11.217365099705017, -10.729554764461017, -11.238413994461016, -9.7447576944610148, -9.7447576944610148, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016]
								}, {
									"case":	553,
									"scores":	[-8.3687317644610157, -11.066882794461016, -11.066882794461016, -11.217365099705017, -10.729554764461017, -11.238413994461016, -9.7447576944610148, -9.7447576944610148, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016, -11.238413994461016, -11.238413994461016, -11.245115694461017, -11.238413994461016]
								}]
						}, {
							"switch":	9,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	929,
							"begin_column":	7,
							"end_line":	950,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L929\", 16, &(open_errno), sizeof (open_errno), &(ofd), sizeof (ofd), &(ofd), sizeof (ofd), &(name_shortened), sizeof (name_shortened), &(flags), sizeof (flags), &(remove_ofname_fd), sizeof (remove_ofname_fd), &(ifd), sizeof (ifd), &(ifd), sizeof (ifd), &(ascii), sizeof (ascii), &(decompress), sizeof (decompress), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(quiet), sizeof (quiet), &(quiet), sizeof (quiet), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code)))\n    switch (open_errno) {\n      case 36:\n        shorten_name(ofname);\n        name_shortened = 1;\n        break;\n      case 17:\n        if (check_ofname() != 0) {\n            close(ifd);\n            return 1;\n        }\n        break;\n      default:\n        progerror(ofname);\n        close(ifd);\n        return 1;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.044642969461016, -5.7721838444610167, -5.7721838444610167, -6.6212038644610161, -5.8572418644610167, -6.4082628444610163, -5.6878338444610161, -5.6878338444610161, -6.4082628444610163, -6.4082628444610163, -6.757052044461016, -6.4082628444610163, -6.4082628444610163, -6.4082628444610163, -6.757052044461016, -6.4082628444610163]
								}]
						}]
				}, {
					"line":	1635,
					"switches":	[]
				}, {
					"line":	1636,
					"switches":	[{
							"switch":	12,
							"types":	[[], [], [], [], [266, 267, 268], [], [], [], [], [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], []],
							"begin_line":	1637,
							"begin_column":	7,
							"end_line":	1637,
							"end_column":	7,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (ok)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (ok)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (ok)", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (ok)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr && !(1 << 5)--", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (ok)", "list = (0)", "list = (1)", "list = (2)", "list = (ok)", "method = (0)", "method = (1)", "method = (2)", "method = (ok)", "method = get_method(ifd && !(1 << 5))", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (ok)", "no_name = decompress && !(1 << 5)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (ok)", "no_time = decompress && !(1 << 5)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (ok)", "ok = (0)", "ok = (1)", "ok = (2)", "ok = (ok)", "part_nb && !(1 << 5)++", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (ok)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (ok)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (ok)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (ok)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (ok)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (ok)", "xunlink(ofname && !(1 << 5))", "z_len = (0)", "z_len = (1)", "z_len = (2)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "ok = yesno()", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1637\", 8, &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(force), sizeof (force), &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 0;\n", "if (__is_neg(\"\", \"L1637\", 8, &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(force), sizeof (force), &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 1;\n", "if (__is_neg(\"\", \"L1637\", 8, &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(force), sizeof (force), &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	2,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	3,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	4,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	5,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	6,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	7,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	8,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	9,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	10,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	11,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	12,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	13,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	14,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	15,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	16,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	17,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	18,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	19,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	20,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	21,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	22,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	23,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	24,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	25,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	26,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	27,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	28,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	29,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	30,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	31,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	32,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	33,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	34,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	35,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	36,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	37,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	38,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	39,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	40,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	41,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	42,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	43,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	44,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	45,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	46,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	47,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	48,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	49,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	50,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	51,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	52,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	53,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	54,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	55,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	56,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	57,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	58,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	59,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	60,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	61,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	62,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	63,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	64,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	65,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	66,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	67,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	68,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	69,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	70,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	71,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	72,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	73,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	74,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	75,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	76,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	77,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	78,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	79,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	80,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	81,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	82,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	83,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	84,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	85,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	86,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	87,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	88,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	89,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	90,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	91,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	92,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	93,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	94,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	95,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	96,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	97,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	98,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	99,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	100,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	101,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	102,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	103,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	104,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	105,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	106,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	107,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	108,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	109,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	110,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	111,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	112,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	113,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	114,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	115,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	116,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	117,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	118,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	119,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	120,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	121,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	122,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	123,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	124,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	125,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	126,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	127,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	128,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	129,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	130,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	131,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	132,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	133,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	134,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	135,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	136,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	137,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	138,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	139,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	140,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	141,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	142,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	143,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	144,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	145,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	146,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	147,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	148,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	149,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	150,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	151,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	152,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	153,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	154,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	155,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	156,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	157,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	158,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	159,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	160,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	161,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	162,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	163,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	164,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	165,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	166,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	167,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	168,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	169,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	170,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	171,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	172,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	173,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	174,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	175,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	176,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	177,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	178,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	179,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	180,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	181,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	182,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	183,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	184,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	185,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	186,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	187,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	188,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	189,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	190,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	191,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	192,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	193,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	194,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	195,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	196,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	197,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	198,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	199,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	200,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	201,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	202,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	203,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	204,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	205,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	206,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	207,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	208,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	209,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	210,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	211,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	212,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	213,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	214,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	215,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	216,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	217,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	218,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	219,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	220,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	221,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	222,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	223,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	224,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	225,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	226,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	227,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	228,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	229,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	230,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	231,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	232,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	233,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	234,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	235,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	236,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	237,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	238,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	239,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	240,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	241,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	242,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	243,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	244,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	245,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	246,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	247,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	248,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	249,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	250,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	251,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	252,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	253,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	254,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	255,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	256,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	257,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	258,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	259,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	260,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	261,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	262,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	263,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	264,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	265,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	266,
									"scores":	[-6.1093610725084577, -6.1093610725084577, -7.5963156725084575, -7.5963156725084575, -7.5963156725084575, -7.5982137895084572, -8.90480750375246, -8.90480750375246]
								}, {
									"case":	267,
									"scores":	[-8.1278070725084568, -8.1278070725084568, -9.61476167250846, -9.61476167250846, -9.61476167250846, -9.6166597895084571, -10.923253503752457, -10.923253503752457]
								}, {
									"case":	268,
									"scores":	[-8.1278070725084568, -8.1278070725084568, -9.61476167250846, -9.61476167250846, -9.61476167250846, -9.6166597895084571, -10.923253503752457, -10.923253503752457]
								}]
						}, {
							"switch":	13,
							"types":	[[], [], [1], [], [], [], [13, 14], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [], [], [], [], [], [], [], [2]],
							"begin_line":	1637,
							"begin_column":	9,
							"end_line":	1637,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L1637\", 8, &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(force), sizeof (force), &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    rpl_fprintf(stderr, \"%s: %s already exists;\", program_name, ofname);\n", "{\n}\n", "__asprintf(stderr, \"%s: %s already exists;\", program_name, ofname)", "__printf__(stderr, \"%s: %s already exists;\", program_name, ofname)", "asprintf(stderr, \"%s: %s already exists;\", program_name, ofname)", "execl(stderr, \"%s: %s already exists;\", program_name, ofname)", "execle(stderr, \"%s: %s already exists;\", program_name, ofname)", "execlp(stderr, \"%s: %s already exists;\", program_name, ofname)", "fprintf(stderr, \"%s: %s already exists;\", program_name, ofname)", "obstack_printf(stderr, \"%s: %s already exists;\", program_name, ofname)", "printf(stderr, \"%s: %s already exists;\", program_name, ofname)", "sprintf(stderr, \"%s: %s already exists;\", program_name, ofname)", "rpl_fprintf((&ok), \"%s: %s already exists;\", program_name, ofname)", "rpl_fprintf(stderr, \"%s: %s already exists; or the directory does not exist\", program_name, ofname)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7848516825084575, -5.7848516825084575, -6.1564914825084571, -6.1564914825084571, -6.1564914825084571, -5.6717251745084578, -6.9507187065084572, -6.9507187065084572]
								}, {
									"case":	2,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	3,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	4,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	5,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	6,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	7,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	8,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	9,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	10,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	11,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	12,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	13,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	14,
									"scores":	[-4.2352663225084575]
								}]
						}]
				}, {
					"line":	1638,
					"switches":	[{
							"switch":	16,
							"types":	[[], [], [], [], [266, 267, 268], [], [], [], [], [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], []],
							"begin_line":	1639,
							"begin_column":	11,
							"end_line":	1639,
							"end_column":	11,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (ok)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (ok)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (ok)", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (ok)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr && !(1 << 5)--", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (ok)", "list = (0)", "list = (1)", "list = (2)", "list = (ok)", "method = (0)", "method = (1)", "method = (2)", "method = (ok)", "method = get_method(ifd && !(1 << 5))", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (ok)", "no_name = decompress && !(1 << 5)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (ok)", "no_time = decompress && !(1 << 5)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (ok)", "ok = (0)", "ok = (1)", "ok = (2)", "ok = (ok)", "part_nb && !(1 << 5)++", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (ok)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (ok)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (ok)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (ok)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (ok)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (ok)", "xunlink(ofname && !(1 << 5))", "z_len = (0)", "z_len = (1)", "z_len = (2)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "ok = yesno()", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1639\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(ok), sizeof (ok), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 0;\n", "if (__is_neg(\"\", \"L1639\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(ok), sizeof (ok), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 1;\n", "if (__is_neg(\"\", \"L1639\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(ok), sizeof (ok), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	2,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	3,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	4,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	5,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	6,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	7,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	8,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	9,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	10,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	11,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	12,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	13,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	14,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	15,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	16,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	17,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	18,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	19,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	20,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	21,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	22,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	23,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	24,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	25,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	26,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	27,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	28,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	29,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	30,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	31,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	32,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	33,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	34,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	35,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	36,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	37,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	38,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	39,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	40,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	41,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	42,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	43,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	44,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	45,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	46,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	47,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	48,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	49,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	50,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	51,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	52,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	53,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	54,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	55,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	56,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	57,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	58,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	59,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	60,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	61,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	62,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	63,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	64,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	65,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	66,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	67,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	68,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	69,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	70,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	71,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	72,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	73,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	74,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	75,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	76,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	77,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	78,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	79,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	80,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	81,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	82,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	83,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	84,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	85,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	86,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	87,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	88,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	89,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	90,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	91,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	92,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	93,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	94,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	95,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	96,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	97,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	98,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	99,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	100,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	101,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	102,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	103,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	104,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	105,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	106,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	107,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	108,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	109,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	110,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	111,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	112,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	113,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	114,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	115,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	116,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	117,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	118,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	119,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	120,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	121,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	122,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	123,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	124,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	125,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	126,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	127,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	128,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	129,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	130,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	131,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	132,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	133,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	134,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	135,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	136,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	137,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	138,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	139,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	140,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	141,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	142,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	143,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	144,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	145,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	146,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	147,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	148,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	149,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	150,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	151,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	152,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	153,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	154,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	155,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	156,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	157,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	158,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	159,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	160,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	161,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	162,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	163,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	164,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	165,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	166,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	167,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	168,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	169,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	170,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	171,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	172,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	173,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	174,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	175,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	176,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	177,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	178,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	179,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	180,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	181,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	182,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	183,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	184,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	185,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	186,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	187,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	188,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	189,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	190,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	191,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	192,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	193,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	194,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	195,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	196,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	197,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	198,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	199,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	200,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	201,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	202,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	203,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	204,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	205,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	206,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	207,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	208,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	209,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	210,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	211,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	212,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	213,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	214,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	215,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	216,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	217,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	218,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	219,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	220,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	221,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	222,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	223,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	224,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	225,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	226,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	227,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	228,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	229,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	230,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	231,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	232,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	233,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	234,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	235,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	236,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	237,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	238,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	239,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	240,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	241,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	242,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	243,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	244,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	245,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	246,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	247,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	248,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	249,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	250,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	251,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	252,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	253,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	254,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	255,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	256,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	257,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	258,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	259,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	260,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	261,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	262,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	263,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	264,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	265,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	266,
									"scores":	[-6.6817826578734181, -6.6817826578734181, -6.6836807748734177, -6.68848435787342, -6.68848435787342, -6.6817826578734181, -6.6817826578734181, -6.6817826578734181]
								}, {
									"case":	267,
									"scores":	[-8.7002286578734171, -8.7002286578734171, -8.7021267748734168, -8.70693035787342, -8.70693035787342, -8.7002286578734171, -8.7002286578734171, -8.7002286578734171]
								}, {
									"case":	268,
									"scores":	[-8.7002286578734171, -8.7002286578734171, -8.7021267748734168, -8.70693035787342, -8.70693035787342, -8.7002286578734171, -8.7002286578734171, -8.7002286578734171]
								}]
						}, {
							"switch":	17,
							"types":	[[], [], [1], [], [], [], [130, 131], [], [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [], [], [90]],
							"begin_line":	1639,
							"begin_column":	13,
							"end_line":	1639,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L1639\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(ok), sizeof (ok), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n", "_IO_sgetn(stderr, \" do you wish to overwrite (y or n)? \", 0)", "_IO_sgetn(stderr, \" do you wish to overwrite (y or n)? \", 1)", "_IO_sgetn(stderr, \" do you wish to overwrite (y or n)? \", 2)", "_IO_sgetn(stderr, \" do you wish to overwrite (y or n)? \", z_len)", "_IO_vfprintf(stderr, \" do you wish to overwrite (y or n)? \", 0)", "__stpncpy(stderr, \" do you wish to overwrite (y or n)? \", 0)", "__stpncpy(stderr, \" do you wish to overwrite (y or n)? \", 1)", "__stpncpy(stderr, \" do you wish to overwrite (y or n)? \", 2)", "__stpncpy(stderr, \" do you wish to overwrite (y or n)? \", z_len)", "__strtok_r(stderr, \" do you wish to overwrite (y or n)? \", 0)", "freopen(stderr, \" do you wish to overwrite (y or n)? \", 0)", "freopen64(stderr, \" do you wish to overwrite (y or n)? \", 0)", "mbstowcs(stderr, \" do you wish to overwrite (y or n)? \", 0)", "mbstowcs(stderr, \" do you wish to overwrite (y or n)? \", 1)", "mbstowcs(stderr, \" do you wish to overwrite (y or n)? \", 2)", "mbstowcs(stderr, \" do you wish to overwrite (y or n)? \", z_len)", "mbtowc(stderr, \" do you wish to overwrite (y or n)? \", 0)", "mbtowc(stderr, \" do you wish to overwrite (y or n)? \", 1)", "mbtowc(stderr, \" do you wish to overwrite (y or n)? \", 2)", "mbtowc(stderr, \" do you wish to overwrite (y or n)? \", z_len)", "obstack_vprintf(stderr, \" do you wish to overwrite (y or n)? \", 0)", "rpl_vfprintf(stderr, \" do you wish to overwrite (y or n)? \", 0)", "setbuffer(stderr, \" do you wish to overwrite (y or n)? \", 0)", "setbuffer(stderr, \" do you wish to overwrite (y or n)? \", 1)", "setbuffer(stderr, \" do you wish to overwrite (y or n)? \", 2)", "setbuffer(stderr, \" do you wish to overwrite (y or n)? \", z_len)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", 0)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", 1)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", 2)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", _gl_warn_on_use)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", ascii)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", block_mode)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", decompress)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", decrypt)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", do_lzw)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", exit_code)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", exiting_signal)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", force)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", foreground)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", ifd)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", last_member)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", level)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", list)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", maxbits)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", method)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", no_name)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", no_time)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", ofd)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", ok)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", part_nb)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", quiet)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", recursive)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", remove_ofname_fd)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", save_orig_name)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", test)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", to_stdout)", "setenv(stderr, \" do you wish to overwrite (y or n)? \", verbose)", "stpncpy(stderr, \" do you wish to overwrite (y or n)? \", 0)", "stpncpy(stderr, \" do you wish to overwrite (y or n)? \", 1)", "stpncpy(stderr, \" do you wish to overwrite (y or n)? \", 2)", "stpncpy(stderr, \" do you wish to overwrite (y or n)? \", z_len)", "strcasecmp_l(stderr, \" do you wish to overwrite (y or n)? \", 0)", "strcoll_l(stderr, \" do you wish to overwrite (y or n)? \", 0)", "strncasecmp(stderr, \" do you wish to overwrite (y or n)? \", 0)", "strncasecmp(stderr, \" do you wish to overwrite (y or n)? \", 1)", "strncasecmp(stderr, \" do you wish to overwrite (y or n)? \", 2)", "strncasecmp(stderr, \" do you wish to overwrite (y or n)? \", z_len)", "strncat(stderr, \" do you wish to overwrite (y or n)? \", 0)", "strncat(stderr, \" do you wish to overwrite (y or n)? \", 1)", "strncat(stderr, \" do you wish to overwrite (y or n)? \", 2)", "strncat(stderr, \" do you wish to overwrite (y or n)? \", z_len)", "strncmp(stderr, \" do you wish to overwrite (y or n)? \", 0)", "strncmp(stderr, \" do you wish to overwrite (y or n)? \", 1)", "strncmp(stderr, \" do you wish to overwrite (y or n)? \", 2)", "strncmp(stderr, \" do you wish to overwrite (y or n)? \", z_len)", "strncpy(stderr, \" do you wish to overwrite (y or n)? \", 0)", "strncpy(stderr, \" do you wish to overwrite (y or n)? \", 1)", "strncpy(stderr, \" do you wish to overwrite (y or n)? \", 2)", "strncpy(stderr, \" do you wish to overwrite (y or n)? \", z_len)", "strptime(stderr, \" do you wish to overwrite (y or n)? \", 0)", "strtok_r(stderr, \" do you wish to overwrite (y or n)? \", 0)", "strxfrm(stderr, \" do you wish to overwrite (y or n)? \", 0)", "strxfrm(stderr, \" do you wish to overwrite (y or n)? \", 1)", "strxfrm(stderr, \" do you wish to overwrite (y or n)? \", 2)", "strxfrm(stderr, \" do you wish to overwrite (y or n)? \", z_len)", "vasprintf(stderr, \" do you wish to overwrite (y or n)? \", 0)", "vfprintf(stderr, \" do you wish to overwrite (y or n)? \", 0)", "vsprintf(stderr, \" do you wish to overwrite (y or n)? \", 0)", "{\n}\n", "__asprintf(stderr, \" do you wish to overwrite (y or n)? \")", "__printf__(stderr, \" do you wish to overwrite (y or n)? \")", "__stpcpy(stderr, \" do you wish to overwrite (y or n)? \")", "asprintf(stderr, \" do you wish to overwrite (y or n)? \")", "crypt(stderr, \" do you wish to overwrite (y or n)? \")", "execl(stderr, \" do you wish to overwrite (y or n)? \")", "execle(stderr, \" do you wish to overwrite (y or n)? \")", "execlp(stderr, \" do you wish to overwrite (y or n)? \")", "fgetpos(stderr, \" do you wish to overwrite (y or n)? \")", "fgetpos64(stderr, \" do you wish to overwrite (y or n)? \")", "fopen(stderr, \" do you wish to overwrite (y or n)? \")", "fopen64(stderr, \" do you wish to overwrite (y or n)? \")", "fprintf(stderr, \" do you wish to overwrite (y or n)? \")", "fsetpos(stderr, \" do you wish to overwrite (y or n)? \")", "fsetpos64(stderr, \" do you wish to overwrite (y or n)? \")", "link(stderr, \" do you wish to overwrite (y or n)? \")", "obstack_printf(stderr, \" do you wish to overwrite (y or n)? \")", "popen(stderr, \" do you wish to overwrite (y or n)? \")", "printf(stderr, \" do you wish to overwrite (y or n)? \")", "psiginfo(stderr, \" do you wish to overwrite (y or n)? \")", "rename(stderr, \" do you wish to overwrite (y or n)? \")", "setbuf(stderr, \" do you wish to overwrite (y or n)? \")", "sprintf(stderr, \" do you wish to overwrite (y or n)? \")", "stpcpy(stderr, \" do you wish to overwrite (y or n)? \")", "strcasecmp(stderr, \" do you wish to overwrite (y or n)? \")", "strcasestr(stderr, \" do you wish to overwrite (y or n)? \")", "strcat(stderr, \" do you wish to overwrite (y or n)? \")", "strcmp(stderr, \" do you wish to overwrite (y or n)? \")", "strcoll(stderr, \" do you wish to overwrite (y or n)? \")", "strcpy(stderr, \" do you wish to overwrite (y or n)? \")", "strcspn(stderr, \" do you wish to overwrite (y or n)? \")", "strpbrk(stderr, \" do you wish to overwrite (y or n)? \")", "strsep(stderr, \" do you wish to overwrite (y or n)? \")", "strspn(stderr, \" do you wish to overwrite (y or n)? \")", "strstr(stderr, \" do you wish to overwrite (y or n)? \")", "strtok(stderr, \" do you wish to overwrite (y or n)? \")", "strverscmp(stderr, \" do you wish to overwrite (y or n)? \")", "symlink(stderr, \" do you wish to overwrite (y or n)? \")", "tempnam(stderr, \" do you wish to overwrite (y or n)? \")", "rpl_fprintf((&ok), \" do you wish to overwrite (y or n)? \")", "rpl_fprintf(stderr, \" do you wish to overwrite (y or n)?  or the directory does not exist\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6300187278734182, -4.6300187278734182, -4.1115634198734181, -4.97880792787342, -4.97880792787342, -4.6300187278734182, -4.6300187278734182, -4.6300187278734182]
								}, {
									"case":	2,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	3,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	4,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	5,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	6,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	7,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	8,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	9,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	10,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	11,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	12,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	13,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	14,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	15,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	16,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	17,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	18,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	19,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	20,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	21,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	22,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	23,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	24,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	25,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	26,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	27,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	28,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	29,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	30,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	31,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	32,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	33,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	34,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	35,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	36,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	37,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	38,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	39,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	40,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	41,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	42,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	43,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	44,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	45,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	46,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	47,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	48,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	49,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	50,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	51,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	52,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	53,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	54,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	55,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	56,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	57,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	58,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	59,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	60,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	61,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	62,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	63,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	64,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	65,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	66,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	67,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	68,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	69,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	70,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	71,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	72,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	73,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	74,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	75,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	76,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	77,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	78,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	79,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	80,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	81,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	82,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	83,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	84,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	85,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	86,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	87,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	88,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	89,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	90,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	91,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	92,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	93,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	94,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	95,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	96,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	97,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	98,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	99,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	100,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	101,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	102,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	103,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	104,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	105,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	106,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	107,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	108,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	109,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	110,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	111,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	112,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	113,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	114,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	115,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	116,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	117,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	118,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	119,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	120,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	121,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	122,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	123,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	124,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	125,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	126,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	127,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	128,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	129,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	130,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	131,
									"scores":	[-4.1948609078734185]
								}]
						}]
				}, {
					"line":	1639,
					"switches":	[{
							"switch":	18,
							"types":	[[], [], [], [], [266, 267, 268], [], [], [], [], [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], []],
							"begin_line":	1640,
							"begin_column":	11,
							"end_line":	1640,
							"end_column":	11,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (ok)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (ok)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (ok)", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (ok)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr && !(1 << 5)--", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (ok)", "list = (0)", "list = (1)", "list = (2)", "list = (ok)", "method = (0)", "method = (1)", "method = (2)", "method = (ok)", "method = get_method(ifd && !(1 << 5))", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (ok)", "no_name = decompress && !(1 << 5)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (ok)", "no_time = decompress && !(1 << 5)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (ok)", "ok = (0)", "ok = (1)", "ok = (2)", "ok = (ok)", "part_nb && !(1 << 5)++", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (ok)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (ok)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (ok)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (ok)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (ok)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (ok)", "xunlink(ofname && !(1 << 5))", "z_len = (0)", "z_len = (1)", "z_len = (2)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "ok = yesno()", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1640\", 8, &(ok), sizeof (ok), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(exit_code), sizeof (exit_code)))\n    return 0;\n", "if (__is_neg(\"\", \"L1640\", 8, &(ok), sizeof (ok), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(exit_code), sizeof (exit_code)))\n    return 1;\n", "if (__is_neg(\"\", \"L1640\", 8, &(ok), sizeof (ok), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(exit_code), sizeof (exit_code)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1746582005559]
								}, {
									"case":	2,
									"scores":	[-4.1746582005559]
								}, {
									"case":	3,
									"scores":	[-4.1746582005559]
								}, {
									"case":	4,
									"scores":	[-4.1746582005559]
								}, {
									"case":	5,
									"scores":	[-4.1746582005559]
								}, {
									"case":	6,
									"scores":	[-4.1746582005559]
								}, {
									"case":	7,
									"scores":	[-4.1746582005559]
								}, {
									"case":	8,
									"scores":	[-4.1746582005559]
								}, {
									"case":	9,
									"scores":	[-4.1746582005559]
								}, {
									"case":	10,
									"scores":	[-4.1746582005559]
								}, {
									"case":	11,
									"scores":	[-4.1746582005559]
								}, {
									"case":	12,
									"scores":	[-4.1746582005559]
								}, {
									"case":	13,
									"scores":	[-4.1746582005559]
								}, {
									"case":	14,
									"scores":	[-4.1746582005559]
								}, {
									"case":	15,
									"scores":	[-4.1746582005559]
								}, {
									"case":	16,
									"scores":	[-4.1746582005559]
								}, {
									"case":	17,
									"scores":	[-4.1746582005559]
								}, {
									"case":	18,
									"scores":	[-4.1746582005559]
								}, {
									"case":	19,
									"scores":	[-4.1746582005559]
								}, {
									"case":	20,
									"scores":	[-4.1746582005559]
								}, {
									"case":	21,
									"scores":	[-4.1746582005559]
								}, {
									"case":	22,
									"scores":	[-4.1746582005559]
								}, {
									"case":	23,
									"scores":	[-4.1746582005559]
								}, {
									"case":	24,
									"scores":	[-4.1746582005559]
								}, {
									"case":	25,
									"scores":	[-4.1746582005559]
								}, {
									"case":	26,
									"scores":	[-4.1746582005559]
								}, {
									"case":	27,
									"scores":	[-4.1746582005559]
								}, {
									"case":	28,
									"scores":	[-4.1746582005559]
								}, {
									"case":	29,
									"scores":	[-4.1746582005559]
								}, {
									"case":	30,
									"scores":	[-4.1746582005559]
								}, {
									"case":	31,
									"scores":	[-4.1746582005559]
								}, {
									"case":	32,
									"scores":	[-4.1746582005559]
								}, {
									"case":	33,
									"scores":	[-4.1746582005559]
								}, {
									"case":	34,
									"scores":	[-4.1746582005559]
								}, {
									"case":	35,
									"scores":	[-4.1746582005559]
								}, {
									"case":	36,
									"scores":	[-4.1746582005559]
								}, {
									"case":	37,
									"scores":	[-4.1746582005559]
								}, {
									"case":	38,
									"scores":	[-4.1746582005559]
								}, {
									"case":	39,
									"scores":	[-4.1746582005559]
								}, {
									"case":	40,
									"scores":	[-4.1746582005559]
								}, {
									"case":	41,
									"scores":	[-4.1746582005559]
								}, {
									"case":	42,
									"scores":	[-4.1746582005559]
								}, {
									"case":	43,
									"scores":	[-4.1746582005559]
								}, {
									"case":	44,
									"scores":	[-4.1746582005559]
								}, {
									"case":	45,
									"scores":	[-4.1746582005559]
								}, {
									"case":	46,
									"scores":	[-4.1746582005559]
								}, {
									"case":	47,
									"scores":	[-4.1746582005559]
								}, {
									"case":	48,
									"scores":	[-4.1746582005559]
								}, {
									"case":	49,
									"scores":	[-4.1746582005559]
								}, {
									"case":	50,
									"scores":	[-4.1746582005559]
								}, {
									"case":	51,
									"scores":	[-4.1746582005559]
								}, {
									"case":	52,
									"scores":	[-4.1746582005559]
								}, {
									"case":	53,
									"scores":	[-4.1746582005559]
								}, {
									"case":	54,
									"scores":	[-4.1746582005559]
								}, {
									"case":	55,
									"scores":	[-4.1746582005559]
								}, {
									"case":	56,
									"scores":	[-4.1746582005559]
								}, {
									"case":	57,
									"scores":	[-4.1746582005559]
								}, {
									"case":	58,
									"scores":	[-4.1746582005559]
								}, {
									"case":	59,
									"scores":	[-4.1746582005559]
								}, {
									"case":	60,
									"scores":	[-4.1746582005559]
								}, {
									"case":	61,
									"scores":	[-4.1746582005559]
								}, {
									"case":	62,
									"scores":	[-4.1746582005559]
								}, {
									"case":	63,
									"scores":	[-4.1746582005559]
								}, {
									"case":	64,
									"scores":	[-4.1746582005559]
								}, {
									"case":	65,
									"scores":	[-4.1746582005559]
								}, {
									"case":	66,
									"scores":	[-4.1746582005559]
								}, {
									"case":	67,
									"scores":	[-4.1746582005559]
								}, {
									"case":	68,
									"scores":	[-4.1746582005559]
								}, {
									"case":	69,
									"scores":	[-4.1746582005559]
								}, {
									"case":	70,
									"scores":	[-4.1746582005559]
								}, {
									"case":	71,
									"scores":	[-4.1746582005559]
								}, {
									"case":	72,
									"scores":	[-4.1746582005559]
								}, {
									"case":	73,
									"scores":	[-4.1746582005559]
								}, {
									"case":	74,
									"scores":	[-4.1746582005559]
								}, {
									"case":	75,
									"scores":	[-4.1746582005559]
								}, {
									"case":	76,
									"scores":	[-4.1746582005559]
								}, {
									"case":	77,
									"scores":	[-4.1746582005559]
								}, {
									"case":	78,
									"scores":	[-4.1746582005559]
								}, {
									"case":	79,
									"scores":	[-4.1746582005559]
								}, {
									"case":	80,
									"scores":	[-4.1746582005559]
								}, {
									"case":	81,
									"scores":	[-4.1746582005559]
								}, {
									"case":	82,
									"scores":	[-4.1746582005559]
								}, {
									"case":	83,
									"scores":	[-4.1746582005559]
								}, {
									"case":	84,
									"scores":	[-4.1746582005559]
								}, {
									"case":	85,
									"scores":	[-4.1746582005559]
								}, {
									"case":	86,
									"scores":	[-4.1746582005559]
								}, {
									"case":	87,
									"scores":	[-4.1746582005559]
								}, {
									"case":	88,
									"scores":	[-4.1746582005559]
								}, {
									"case":	89,
									"scores":	[-4.1746582005559]
								}, {
									"case":	90,
									"scores":	[-4.1746582005559]
								}, {
									"case":	91,
									"scores":	[-4.1746582005559]
								}, {
									"case":	92,
									"scores":	[-4.1746582005559]
								}, {
									"case":	93,
									"scores":	[-4.1746582005559]
								}, {
									"case":	94,
									"scores":	[-4.1746582005559]
								}, {
									"case":	95,
									"scores":	[-4.1746582005559]
								}, {
									"case":	96,
									"scores":	[-4.1746582005559]
								}, {
									"case":	97,
									"scores":	[-4.1746582005559]
								}, {
									"case":	98,
									"scores":	[-4.1746582005559]
								}, {
									"case":	99,
									"scores":	[-4.1746582005559]
								}, {
									"case":	100,
									"scores":	[-4.1746582005559]
								}, {
									"case":	101,
									"scores":	[-4.1746582005559]
								}, {
									"case":	102,
									"scores":	[-4.1746582005559]
								}, {
									"case":	103,
									"scores":	[-4.1746582005559]
								}, {
									"case":	104,
									"scores":	[-4.1746582005559]
								}, {
									"case":	105,
									"scores":	[-4.1746582005559]
								}, {
									"case":	106,
									"scores":	[-4.1746582005559]
								}, {
									"case":	107,
									"scores":	[-4.1746582005559]
								}, {
									"case":	108,
									"scores":	[-4.1746582005559]
								}, {
									"case":	109,
									"scores":	[-4.1746582005559]
								}, {
									"case":	110,
									"scores":	[-4.1746582005559]
								}, {
									"case":	111,
									"scores":	[-4.1746582005559]
								}, {
									"case":	112,
									"scores":	[-4.1746582005559]
								}, {
									"case":	113,
									"scores":	[-4.1746582005559]
								}, {
									"case":	114,
									"scores":	[-4.1746582005559]
								}, {
									"case":	115,
									"scores":	[-4.1746582005559]
								}, {
									"case":	116,
									"scores":	[-4.1746582005559]
								}, {
									"case":	117,
									"scores":	[-4.1746582005559]
								}, {
									"case":	118,
									"scores":	[-4.1746582005559]
								}, {
									"case":	119,
									"scores":	[-4.1746582005559]
								}, {
									"case":	120,
									"scores":	[-4.1746582005559]
								}, {
									"case":	121,
									"scores":	[-4.1746582005559]
								}, {
									"case":	122,
									"scores":	[-4.1746582005559]
								}, {
									"case":	123,
									"scores":	[-4.1746582005559]
								}, {
									"case":	124,
									"scores":	[-4.1746582005559]
								}, {
									"case":	125,
									"scores":	[-4.1746582005559]
								}, {
									"case":	126,
									"scores":	[-4.1746582005559]
								}, {
									"case":	127,
									"scores":	[-4.1746582005559]
								}, {
									"case":	128,
									"scores":	[-4.1746582005559]
								}, {
									"case":	129,
									"scores":	[-4.1746582005559]
								}, {
									"case":	130,
									"scores":	[-4.1746582005559]
								}, {
									"case":	131,
									"scores":	[-4.1746582005559]
								}, {
									"case":	132,
									"scores":	[-4.1746582005559]
								}, {
									"case":	133,
									"scores":	[-4.1746582005559]
								}, {
									"case":	134,
									"scores":	[-4.1746582005559]
								}, {
									"case":	135,
									"scores":	[-4.1746582005559]
								}, {
									"case":	136,
									"scores":	[-4.1746582005559]
								}, {
									"case":	137,
									"scores":	[-4.1746582005559]
								}, {
									"case":	138,
									"scores":	[-4.1746582005559]
								}, {
									"case":	139,
									"scores":	[-4.1746582005559]
								}, {
									"case":	140,
									"scores":	[-4.1746582005559]
								}, {
									"case":	141,
									"scores":	[-4.1746582005559]
								}, {
									"case":	142,
									"scores":	[-4.1746582005559]
								}, {
									"case":	143,
									"scores":	[-4.1746582005559]
								}, {
									"case":	144,
									"scores":	[-4.1746582005559]
								}, {
									"case":	145,
									"scores":	[-4.1746582005559]
								}, {
									"case":	146,
									"scores":	[-4.1746582005559]
								}, {
									"case":	147,
									"scores":	[-4.1746582005559]
								}, {
									"case":	148,
									"scores":	[-4.1746582005559]
								}, {
									"case":	149,
									"scores":	[-4.1746582005559]
								}, {
									"case":	150,
									"scores":	[-4.1746582005559]
								}, {
									"case":	151,
									"scores":	[-4.1746582005559]
								}, {
									"case":	152,
									"scores":	[-4.1746582005559]
								}, {
									"case":	153,
									"scores":	[-4.1746582005559]
								}, {
									"case":	154,
									"scores":	[-4.1746582005559]
								}, {
									"case":	155,
									"scores":	[-4.1746582005559]
								}, {
									"case":	156,
									"scores":	[-4.1746582005559]
								}, {
									"case":	157,
									"scores":	[-4.1746582005559]
								}, {
									"case":	158,
									"scores":	[-4.1746582005559]
								}, {
									"case":	159,
									"scores":	[-4.1746582005559]
								}, {
									"case":	160,
									"scores":	[-4.1746582005559]
								}, {
									"case":	161,
									"scores":	[-4.1746582005559]
								}, {
									"case":	162,
									"scores":	[-4.1746582005559]
								}, {
									"case":	163,
									"scores":	[-4.1746582005559]
								}, {
									"case":	164,
									"scores":	[-4.1746582005559]
								}, {
									"case":	165,
									"scores":	[-4.1746582005559]
								}, {
									"case":	166,
									"scores":	[-4.1746582005559]
								}, {
									"case":	167,
									"scores":	[-4.1746582005559]
								}, {
									"case":	168,
									"scores":	[-4.1746582005559]
								}, {
									"case":	169,
									"scores":	[-4.1746582005559]
								}, {
									"case":	170,
									"scores":	[-4.1746582005559]
								}, {
									"case":	171,
									"scores":	[-4.1746582005559]
								}, {
									"case":	172,
									"scores":	[-4.1746582005559]
								}, {
									"case":	173,
									"scores":	[-4.1746582005559]
								}, {
									"case":	174,
									"scores":	[-4.1746582005559]
								}, {
									"case":	175,
									"scores":	[-4.1746582005559]
								}, {
									"case":	176,
									"scores":	[-4.1746582005559]
								}, {
									"case":	177,
									"scores":	[-4.1746582005559]
								}, {
									"case":	178,
									"scores":	[-4.1746582005559]
								}, {
									"case":	179,
									"scores":	[-4.1746582005559]
								}, {
									"case":	180,
									"scores":	[-4.1746582005559]
								}, {
									"case":	181,
									"scores":	[-4.1746582005559]
								}, {
									"case":	182,
									"scores":	[-4.1746582005559]
								}, {
									"case":	183,
									"scores":	[-4.1746582005559]
								}, {
									"case":	184,
									"scores":	[-4.1746582005559]
								}, {
									"case":	185,
									"scores":	[-4.1746582005559]
								}, {
									"case":	186,
									"scores":	[-4.1746582005559]
								}, {
									"case":	187,
									"scores":	[-4.1746582005559]
								}, {
									"case":	188,
									"scores":	[-4.1746582005559]
								}, {
									"case":	189,
									"scores":	[-4.1746582005559]
								}, {
									"case":	190,
									"scores":	[-4.1746582005559]
								}, {
									"case":	191,
									"scores":	[-4.1746582005559]
								}, {
									"case":	192,
									"scores":	[-4.1746582005559]
								}, {
									"case":	193,
									"scores":	[-4.1746582005559]
								}, {
									"case":	194,
									"scores":	[-4.1746582005559]
								}, {
									"case":	195,
									"scores":	[-4.1746582005559]
								}, {
									"case":	196,
									"scores":	[-4.1746582005559]
								}, {
									"case":	197,
									"scores":	[-4.1746582005559]
								}, {
									"case":	198,
									"scores":	[-4.1746582005559]
								}, {
									"case":	199,
									"scores":	[-4.1746582005559]
								}, {
									"case":	200,
									"scores":	[-4.1746582005559]
								}, {
									"case":	201,
									"scores":	[-4.1746582005559]
								}, {
									"case":	202,
									"scores":	[-4.1746582005559]
								}, {
									"case":	203,
									"scores":	[-4.1746582005559]
								}, {
									"case":	204,
									"scores":	[-4.1746582005559]
								}, {
									"case":	205,
									"scores":	[-4.1746582005559]
								}, {
									"case":	206,
									"scores":	[-4.1746582005559]
								}, {
									"case":	207,
									"scores":	[-4.1746582005559]
								}, {
									"case":	208,
									"scores":	[-4.1746582005559]
								}, {
									"case":	209,
									"scores":	[-4.1746582005559]
								}, {
									"case":	210,
									"scores":	[-4.1746582005559]
								}, {
									"case":	211,
									"scores":	[-4.1746582005559]
								}, {
									"case":	212,
									"scores":	[-4.1746582005559]
								}, {
									"case":	213,
									"scores":	[-4.1746582005559]
								}, {
									"case":	214,
									"scores":	[-4.1746582005559]
								}, {
									"case":	215,
									"scores":	[-4.1746582005559]
								}, {
									"case":	216,
									"scores":	[-4.1746582005559]
								}, {
									"case":	217,
									"scores":	[-4.1746582005559]
								}, {
									"case":	218,
									"scores":	[-4.1746582005559]
								}, {
									"case":	219,
									"scores":	[-4.1746582005559]
								}, {
									"case":	220,
									"scores":	[-4.1746582005559]
								}, {
									"case":	221,
									"scores":	[-4.1746582005559]
								}, {
									"case":	222,
									"scores":	[-4.1746582005559]
								}, {
									"case":	223,
									"scores":	[-4.1746582005559]
								}, {
									"case":	224,
									"scores":	[-4.1746582005559]
								}, {
									"case":	225,
									"scores":	[-4.1746582005559]
								}, {
									"case":	226,
									"scores":	[-4.1746582005559]
								}, {
									"case":	227,
									"scores":	[-4.1746582005559]
								}, {
									"case":	228,
									"scores":	[-4.1746582005559]
								}, {
									"case":	229,
									"scores":	[-4.1746582005559]
								}, {
									"case":	230,
									"scores":	[-4.1746582005559]
								}, {
									"case":	231,
									"scores":	[-4.1746582005559]
								}, {
									"case":	232,
									"scores":	[-4.1746582005559]
								}, {
									"case":	233,
									"scores":	[-4.1746582005559]
								}, {
									"case":	234,
									"scores":	[-4.1746582005559]
								}, {
									"case":	235,
									"scores":	[-4.1746582005559]
								}, {
									"case":	236,
									"scores":	[-4.1746582005559]
								}, {
									"case":	237,
									"scores":	[-4.1746582005559]
								}, {
									"case":	238,
									"scores":	[-4.1746582005559]
								}, {
									"case":	239,
									"scores":	[-4.1746582005559]
								}, {
									"case":	240,
									"scores":	[-4.1746582005559]
								}, {
									"case":	241,
									"scores":	[-4.1746582005559]
								}, {
									"case":	242,
									"scores":	[-4.1746582005559]
								}, {
									"case":	243,
									"scores":	[-4.1746582005559]
								}, {
									"case":	244,
									"scores":	[-4.1746582005559]
								}, {
									"case":	245,
									"scores":	[-4.1746582005559]
								}, {
									"case":	246,
									"scores":	[-4.1746582005559]
								}, {
									"case":	247,
									"scores":	[-4.1746582005559]
								}, {
									"case":	248,
									"scores":	[-4.1746582005559]
								}, {
									"case":	249,
									"scores":	[-4.1746582005559]
								}, {
									"case":	250,
									"scores":	[-4.1746582005559]
								}, {
									"case":	251,
									"scores":	[-4.1746582005559]
								}, {
									"case":	252,
									"scores":	[-4.1746582005559]
								}, {
									"case":	253,
									"scores":	[-4.1746582005559]
								}, {
									"case":	254,
									"scores":	[-4.1746582005559]
								}, {
									"case":	255,
									"scores":	[-4.1746582005559]
								}, {
									"case":	256,
									"scores":	[-4.1746582005559]
								}, {
									"case":	257,
									"scores":	[-4.1746582005559]
								}, {
									"case":	258,
									"scores":	[-4.1746582005559]
								}, {
									"case":	259,
									"scores":	[-4.1746582005559]
								}, {
									"case":	260,
									"scores":	[-4.1746582005559]
								}, {
									"case":	261,
									"scores":	[-4.1746582005559]
								}, {
									"case":	262,
									"scores":	[-4.1746582005559]
								}, {
									"case":	263,
									"scores":	[-4.1746582005559]
								}, {
									"case":	264,
									"scores":	[-4.1746582005559]
								}, {
									"case":	265,
									"scores":	[-4.1746582005559]
								}, {
									"case":	266,
									"scores":	[-6.9179790675558985, -6.9160809505559, -6.9160809505559, -6.9227826505559, -6.9227826505559, -6.9160809505559, -6.9160809505559, -6.9160809505559]
								}, {
									"case":	267,
									"scores":	[-8.9364250675559, -8.9345269505559, -8.9345269505559, -8.9412286505559, -8.9412286505559, -8.9345269505559, -8.9345269505559, -8.9345269505559]
								}, {
									"case":	268,
									"scores":	[-8.9364250675559, -8.9345269505559, -8.9345269505559, -8.9412286505559, -8.9412286505559, -8.9345269505559, -8.9345269505559, -8.9345269505559]
								}]
						}, {
							"switch":	19,
							"types":	[[], [], [1], [], [], [], [75], [], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [], [], [38]],
							"begin_line":	1640,
							"begin_column":	13,
							"end_line":	1640,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L1640\", 8, &(ok), sizeof (ok), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force), &(exit_code), sizeof (exit_code)))\n    rpl_fflush(stderr);\n", "__overflow(stderr, 0)", "__overflow(stderr, 1)", "__overflow(stderr, 2)", "__overflow(stderr, _gl_warn_on_use)", "__overflow(stderr, ascii)", "__overflow(stderr, block_mode)", "__overflow(stderr, decompress)", "__overflow(stderr, decrypt)", "__overflow(stderr, do_lzw)", "__overflow(stderr, exit_code)", "__overflow(stderr, exiting_signal)", "__overflow(stderr, force)", "__overflow(stderr, foreground)", "__overflow(stderr, ifd)", "__overflow(stderr, last_member)", "__overflow(stderr, level)", "__overflow(stderr, list)", "__overflow(stderr, maxbits)", "__overflow(stderr, method)", "__overflow(stderr, no_name)", "__overflow(stderr, no_time)", "__overflow(stderr, ofd)", "__overflow(stderr, ok)", "__overflow(stderr, part_nb)", "__overflow(stderr, quiet)", "__overflow(stderr, recursive)", "__overflow(stderr, remove_ofname_fd)", "__overflow(stderr, save_orig_name)", "__overflow(stderr, test)", "__overflow(stderr, to_stdout)", "__overflow(stderr, verbose)", "fgetpos(stderr, 0)", "fgetpos64(stderr, 0)", "fsetpos(stderr, 0)", "fsetpos64(stderr, 0)", "setbuf(stderr, 0)", "{\n}\n", "_IO_feof(stderr)", "_IO_ferror(stderr)", "_IO_flockfile(stderr)", "_IO_free_backup_area(stderr)", "_IO_ftrylockfile(stderr)", "_IO_funlockfile(stderr)", "_IO_getc(stderr)", "_IO_peekc_locked(stderr)", "__uflow(stderr)", "__underflow(stderr)", "clearerr(stderr)", "clearerr_unlocked(stderr)", "fclose(stderr)", "feof(stderr)", "feof_unlocked(stderr)", "ferror(stderr)", "ferror_unlocked(stderr)", "fflush(stderr)", "fflush_unlocked(stderr)", "fgetc(stderr)", "fgetc_unlocked(stderr)", "fileno(stderr)", "fileno_unlocked(stderr)", "flockfile(stderr)", "fpurge(stderr)", "ftell(stderr)", "ftello(stderr)", "ftello64(stderr)", "ftrylockfile(stderr)", "funlockfile(stderr)", "getc(stderr)", "getc_unlocked(stderr)", "getw(stderr)", "pclose(stderr)", "rewind(stderr)", "setlinebuf(stderr)", "rpl_fflush((&ok))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7065820525558992, -4.1913483605558985, -4.1913483605558985, -4.5401375605559, -4.5401375605559, -4.1913483605558985, -4.1913483605558985, -4.1913483605558985]
								}, {
									"case":	2,
									"scores":	[-4.1746582005559]
								}, {
									"case":	3,
									"scores":	[-4.1746582005559]
								}, {
									"case":	4,
									"scores":	[-4.1746582005559]
								}, {
									"case":	5,
									"scores":	[-4.1746582005559]
								}, {
									"case":	6,
									"scores":	[-4.1746582005559]
								}, {
									"case":	7,
									"scores":	[-4.1746582005559]
								}, {
									"case":	8,
									"scores":	[-4.1746582005559]
								}, {
									"case":	9,
									"scores":	[-4.1746582005559]
								}, {
									"case":	10,
									"scores":	[-4.1746582005559]
								}, {
									"case":	11,
									"scores":	[-4.1746582005559]
								}, {
									"case":	12,
									"scores":	[-4.1746582005559]
								}, {
									"case":	13,
									"scores":	[-4.1746582005559]
								}, {
									"case":	14,
									"scores":	[-4.1746582005559]
								}, {
									"case":	15,
									"scores":	[-4.1746582005559]
								}, {
									"case":	16,
									"scores":	[-4.1746582005559]
								}, {
									"case":	17,
									"scores":	[-4.1746582005559]
								}, {
									"case":	18,
									"scores":	[-4.1746582005559]
								}, {
									"case":	19,
									"scores":	[-4.1746582005559]
								}, {
									"case":	20,
									"scores":	[-4.1746582005559]
								}, {
									"case":	21,
									"scores":	[-4.1746582005559]
								}, {
									"case":	22,
									"scores":	[-4.1746582005559]
								}, {
									"case":	23,
									"scores":	[-4.1746582005559]
								}, {
									"case":	24,
									"scores":	[-4.1746582005559]
								}, {
									"case":	25,
									"scores":	[-4.1746582005559]
								}, {
									"case":	26,
									"scores":	[-4.1746582005559]
								}, {
									"case":	27,
									"scores":	[-4.1746582005559]
								}, {
									"case":	28,
									"scores":	[-4.1746582005559]
								}, {
									"case":	29,
									"scores":	[-4.1746582005559]
								}, {
									"case":	30,
									"scores":	[-4.1746582005559]
								}, {
									"case":	31,
									"scores":	[-4.1746582005559]
								}, {
									"case":	32,
									"scores":	[-4.1746582005559]
								}, {
									"case":	33,
									"scores":	[-4.1746582005559]
								}, {
									"case":	34,
									"scores":	[-4.1746582005559]
								}, {
									"case":	35,
									"scores":	[-4.1746582005559]
								}, {
									"case":	36,
									"scores":	[-4.1746582005559]
								}, {
									"case":	37,
									"scores":	[-4.1746582005559]
								}, {
									"case":	38,
									"scores":	[-4.1746582005559]
								}, {
									"case":	39,
									"scores":	[-4.1746582005559]
								}, {
									"case":	40,
									"scores":	[-4.1746582005559]
								}, {
									"case":	41,
									"scores":	[-4.1746582005559]
								}, {
									"case":	42,
									"scores":	[-4.1746582005559]
								}, {
									"case":	43,
									"scores":	[-4.1746582005559]
								}, {
									"case":	44,
									"scores":	[-4.1746582005559]
								}, {
									"case":	45,
									"scores":	[-4.1746582005559]
								}, {
									"case":	46,
									"scores":	[-4.1746582005559]
								}, {
									"case":	47,
									"scores":	[-4.1746582005559]
								}, {
									"case":	48,
									"scores":	[-4.1746582005559]
								}, {
									"case":	49,
									"scores":	[-4.1746582005559]
								}, {
									"case":	50,
									"scores":	[-4.1746582005559]
								}, {
									"case":	51,
									"scores":	[-4.1746582005559]
								}, {
									"case":	52,
									"scores":	[-4.1746582005559]
								}, {
									"case":	53,
									"scores":	[-4.1746582005559]
								}, {
									"case":	54,
									"scores":	[-4.1746582005559]
								}, {
									"case":	55,
									"scores":	[-4.1746582005559]
								}, {
									"case":	56,
									"scores":	[-4.1746582005559]
								}, {
									"case":	57,
									"scores":	[-4.1746582005559]
								}, {
									"case":	58,
									"scores":	[-4.1746582005559]
								}, {
									"case":	59,
									"scores":	[-4.1746582005559]
								}, {
									"case":	60,
									"scores":	[-4.1746582005559]
								}, {
									"case":	61,
									"scores":	[-4.1746582005559]
								}, {
									"case":	62,
									"scores":	[-4.1746582005559]
								}, {
									"case":	63,
									"scores":	[-4.1746582005559]
								}, {
									"case":	64,
									"scores":	[-4.1746582005559]
								}, {
									"case":	65,
									"scores":	[-4.1746582005559]
								}, {
									"case":	66,
									"scores":	[-4.1746582005559]
								}, {
									"case":	67,
									"scores":	[-4.1746582005559]
								}, {
									"case":	68,
									"scores":	[-4.1746582005559]
								}, {
									"case":	69,
									"scores":	[-4.1746582005559]
								}, {
									"case":	70,
									"scores":	[-4.1746582005559]
								}, {
									"case":	71,
									"scores":	[-4.1746582005559]
								}, {
									"case":	72,
									"scores":	[-4.1746582005559]
								}, {
									"case":	73,
									"scores":	[-4.1746582005559]
								}, {
									"case":	74,
									"scores":	[-4.1746582005559]
								}, {
									"case":	75,
									"scores":	[-4.1746582005559]
								}]
						}]
				}, {
					"line":	1640,
					"switches":	[{
							"switch":	20,
							"types":	[[], [], [], [], [266, 267, 268], [], [], [], [], [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], []],
							"begin_line":	1641,
							"begin_column":	11,
							"end_line":	1641,
							"end_column":	11,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (ok)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (ok)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (ok)", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (ok)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr && !(1 << 5)--", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (ok)", "list = (0)", "list = (1)", "list = (2)", "list = (ok)", "method = (0)", "method = (1)", "method = (2)", "method = (ok)", "method = get_method(ifd && !(1 << 5))", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (ok)", "no_name = decompress && !(1 << 5)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (ok)", "no_time = decompress && !(1 << 5)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (ok)", "ok = (0)", "ok = (1)", "ok = (2)", "ok = (ok)", "part_nb && !(1 << 5)++", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (ok)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (ok)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (ok)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (ok)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (ok)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (ok)", "xunlink(ofname && !(1 << 5))", "z_len = (0)", "z_len = (1)", "z_len = (2)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "ok = yesno()", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1641\", 8, &(ok), sizeof (ok), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force)))\n    return 0;\n", "if (__is_neg(\"\", \"L1641\", 8, &(ok), sizeof (ok), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force)))\n    return 1;\n", "if (__is_neg(\"\", \"L1641\", 8, &(ok), sizeof (ok), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.11405007860334]
								}, {
									"case":	2,
									"scores":	[-4.11405007860334]
								}, {
									"case":	3,
									"scores":	[-4.11405007860334]
								}, {
									"case":	4,
									"scores":	[-4.11405007860334]
								}, {
									"case":	5,
									"scores":	[-4.11405007860334]
								}, {
									"case":	6,
									"scores":	[-4.11405007860334]
								}, {
									"case":	7,
									"scores":	[-4.11405007860334]
								}, {
									"case":	8,
									"scores":	[-4.11405007860334]
								}, {
									"case":	9,
									"scores":	[-4.11405007860334]
								}, {
									"case":	10,
									"scores":	[-4.11405007860334]
								}, {
									"case":	11,
									"scores":	[-4.11405007860334]
								}, {
									"case":	12,
									"scores":	[-4.11405007860334]
								}, {
									"case":	13,
									"scores":	[-4.11405007860334]
								}, {
									"case":	14,
									"scores":	[-4.11405007860334]
								}, {
									"case":	15,
									"scores":	[-4.11405007860334]
								}, {
									"case":	16,
									"scores":	[-4.11405007860334]
								}, {
									"case":	17,
									"scores":	[-4.11405007860334]
								}, {
									"case":	18,
									"scores":	[-4.11405007860334]
								}, {
									"case":	19,
									"scores":	[-4.11405007860334]
								}, {
									"case":	20,
									"scores":	[-4.11405007860334]
								}, {
									"case":	21,
									"scores":	[-4.11405007860334]
								}, {
									"case":	22,
									"scores":	[-4.11405007860334]
								}, {
									"case":	23,
									"scores":	[-4.11405007860334]
								}, {
									"case":	24,
									"scores":	[-4.11405007860334]
								}, {
									"case":	25,
									"scores":	[-4.11405007860334]
								}, {
									"case":	26,
									"scores":	[-4.11405007860334]
								}, {
									"case":	27,
									"scores":	[-4.11405007860334]
								}, {
									"case":	28,
									"scores":	[-4.11405007860334]
								}, {
									"case":	29,
									"scores":	[-4.11405007860334]
								}, {
									"case":	30,
									"scores":	[-4.11405007860334]
								}, {
									"case":	31,
									"scores":	[-4.11405007860334]
								}, {
									"case":	32,
									"scores":	[-4.11405007860334]
								}, {
									"case":	33,
									"scores":	[-4.11405007860334]
								}, {
									"case":	34,
									"scores":	[-4.11405007860334]
								}, {
									"case":	35,
									"scores":	[-4.11405007860334]
								}, {
									"case":	36,
									"scores":	[-4.11405007860334]
								}, {
									"case":	37,
									"scores":	[-4.11405007860334]
								}, {
									"case":	38,
									"scores":	[-4.11405007860334]
								}, {
									"case":	39,
									"scores":	[-4.11405007860334]
								}, {
									"case":	40,
									"scores":	[-4.11405007860334]
								}, {
									"case":	41,
									"scores":	[-4.11405007860334]
								}, {
									"case":	42,
									"scores":	[-4.11405007860334]
								}, {
									"case":	43,
									"scores":	[-4.11405007860334]
								}, {
									"case":	44,
									"scores":	[-4.11405007860334]
								}, {
									"case":	45,
									"scores":	[-4.11405007860334]
								}, {
									"case":	46,
									"scores":	[-4.11405007860334]
								}, {
									"case":	47,
									"scores":	[-4.11405007860334]
								}, {
									"case":	48,
									"scores":	[-4.11405007860334]
								}, {
									"case":	49,
									"scores":	[-4.11405007860334]
								}, {
									"case":	50,
									"scores":	[-4.11405007860334]
								}, {
									"case":	51,
									"scores":	[-4.11405007860334]
								}, {
									"case":	52,
									"scores":	[-4.11405007860334]
								}, {
									"case":	53,
									"scores":	[-4.11405007860334]
								}, {
									"case":	54,
									"scores":	[-4.11405007860334]
								}, {
									"case":	55,
									"scores":	[-4.11405007860334]
								}, {
									"case":	56,
									"scores":	[-4.11405007860334]
								}, {
									"case":	57,
									"scores":	[-4.11405007860334]
								}, {
									"case":	58,
									"scores":	[-4.11405007860334]
								}, {
									"case":	59,
									"scores":	[-4.11405007860334]
								}, {
									"case":	60,
									"scores":	[-4.11405007860334]
								}, {
									"case":	61,
									"scores":	[-4.11405007860334]
								}, {
									"case":	62,
									"scores":	[-4.11405007860334]
								}, {
									"case":	63,
									"scores":	[-4.11405007860334]
								}, {
									"case":	64,
									"scores":	[-4.11405007860334]
								}, {
									"case":	65,
									"scores":	[-4.11405007860334]
								}, {
									"case":	66,
									"scores":	[-4.11405007860334]
								}, {
									"case":	67,
									"scores":	[-4.11405007860334]
								}, {
									"case":	68,
									"scores":	[-4.11405007860334]
								}, {
									"case":	69,
									"scores":	[-4.11405007860334]
								}, {
									"case":	70,
									"scores":	[-4.11405007860334]
								}, {
									"case":	71,
									"scores":	[-4.11405007860334]
								}, {
									"case":	72,
									"scores":	[-4.11405007860334]
								}, {
									"case":	73,
									"scores":	[-4.11405007860334]
								}, {
									"case":	74,
									"scores":	[-4.11405007860334]
								}, {
									"case":	75,
									"scores":	[-4.11405007860334]
								}, {
									"case":	76,
									"scores":	[-4.11405007860334]
								}, {
									"case":	77,
									"scores":	[-4.11405007860334]
								}, {
									"case":	78,
									"scores":	[-4.11405007860334]
								}, {
									"case":	79,
									"scores":	[-4.11405007860334]
								}, {
									"case":	80,
									"scores":	[-4.11405007860334]
								}, {
									"case":	81,
									"scores":	[-4.11405007860334]
								}, {
									"case":	82,
									"scores":	[-4.11405007860334]
								}, {
									"case":	83,
									"scores":	[-4.11405007860334]
								}, {
									"case":	84,
									"scores":	[-4.11405007860334]
								}, {
									"case":	85,
									"scores":	[-4.11405007860334]
								}, {
									"case":	86,
									"scores":	[-4.11405007860334]
								}, {
									"case":	87,
									"scores":	[-4.11405007860334]
								}, {
									"case":	88,
									"scores":	[-4.11405007860334]
								}, {
									"case":	89,
									"scores":	[-4.11405007860334]
								}, {
									"case":	90,
									"scores":	[-4.11405007860334]
								}, {
									"case":	91,
									"scores":	[-4.11405007860334]
								}, {
									"case":	92,
									"scores":	[-4.11405007860334]
								}, {
									"case":	93,
									"scores":	[-4.11405007860334]
								}, {
									"case":	94,
									"scores":	[-4.11405007860334]
								}, {
									"case":	95,
									"scores":	[-4.11405007860334]
								}, {
									"case":	96,
									"scores":	[-4.11405007860334]
								}, {
									"case":	97,
									"scores":	[-4.11405007860334]
								}, {
									"case":	98,
									"scores":	[-4.11405007860334]
								}, {
									"case":	99,
									"scores":	[-4.11405007860334]
								}, {
									"case":	100,
									"scores":	[-4.11405007860334]
								}, {
									"case":	101,
									"scores":	[-4.11405007860334]
								}, {
									"case":	102,
									"scores":	[-4.11405007860334]
								}, {
									"case":	103,
									"scores":	[-4.11405007860334]
								}, {
									"case":	104,
									"scores":	[-4.11405007860334]
								}, {
									"case":	105,
									"scores":	[-4.11405007860334]
								}, {
									"case":	106,
									"scores":	[-4.11405007860334]
								}, {
									"case":	107,
									"scores":	[-4.11405007860334]
								}, {
									"case":	108,
									"scores":	[-4.11405007860334]
								}, {
									"case":	109,
									"scores":	[-4.11405007860334]
								}, {
									"case":	110,
									"scores":	[-4.11405007860334]
								}, {
									"case":	111,
									"scores":	[-4.11405007860334]
								}, {
									"case":	112,
									"scores":	[-4.11405007860334]
								}, {
									"case":	113,
									"scores":	[-4.11405007860334]
								}, {
									"case":	114,
									"scores":	[-4.11405007860334]
								}, {
									"case":	115,
									"scores":	[-4.11405007860334]
								}, {
									"case":	116,
									"scores":	[-4.11405007860334]
								}, {
									"case":	117,
									"scores":	[-4.11405007860334]
								}, {
									"case":	118,
									"scores":	[-4.11405007860334]
								}, {
									"case":	119,
									"scores":	[-4.11405007860334]
								}, {
									"case":	120,
									"scores":	[-4.11405007860334]
								}, {
									"case":	121,
									"scores":	[-4.11405007860334]
								}, {
									"case":	122,
									"scores":	[-4.11405007860334]
								}, {
									"case":	123,
									"scores":	[-4.11405007860334]
								}, {
									"case":	124,
									"scores":	[-4.11405007860334]
								}, {
									"case":	125,
									"scores":	[-4.11405007860334]
								}, {
									"case":	126,
									"scores":	[-4.11405007860334]
								}, {
									"case":	127,
									"scores":	[-4.11405007860334]
								}, {
									"case":	128,
									"scores":	[-4.11405007860334]
								}, {
									"case":	129,
									"scores":	[-4.11405007860334]
								}, {
									"case":	130,
									"scores":	[-4.11405007860334]
								}, {
									"case":	131,
									"scores":	[-4.11405007860334]
								}, {
									"case":	132,
									"scores":	[-4.11405007860334]
								}, {
									"case":	133,
									"scores":	[-4.11405007860334]
								}, {
									"case":	134,
									"scores":	[-4.11405007860334]
								}, {
									"case":	135,
									"scores":	[-4.11405007860334]
								}, {
									"case":	136,
									"scores":	[-4.11405007860334]
								}, {
									"case":	137,
									"scores":	[-4.11405007860334]
								}, {
									"case":	138,
									"scores":	[-4.11405007860334]
								}, {
									"case":	139,
									"scores":	[-4.11405007860334]
								}, {
									"case":	140,
									"scores":	[-4.11405007860334]
								}, {
									"case":	141,
									"scores":	[-4.11405007860334]
								}, {
									"case":	142,
									"scores":	[-4.11405007860334]
								}, {
									"case":	143,
									"scores":	[-4.11405007860334]
								}, {
									"case":	144,
									"scores":	[-4.11405007860334]
								}, {
									"case":	145,
									"scores":	[-4.11405007860334]
								}, {
									"case":	146,
									"scores":	[-4.11405007860334]
								}, {
									"case":	147,
									"scores":	[-4.11405007860334]
								}, {
									"case":	148,
									"scores":	[-4.11405007860334]
								}, {
									"case":	149,
									"scores":	[-4.11405007860334]
								}, {
									"case":	150,
									"scores":	[-4.11405007860334]
								}, {
									"case":	151,
									"scores":	[-4.11405007860334]
								}, {
									"case":	152,
									"scores":	[-4.11405007860334]
								}, {
									"case":	153,
									"scores":	[-4.11405007860334]
								}, {
									"case":	154,
									"scores":	[-4.11405007860334]
								}, {
									"case":	155,
									"scores":	[-4.11405007860334]
								}, {
									"case":	156,
									"scores":	[-4.11405007860334]
								}, {
									"case":	157,
									"scores":	[-4.11405007860334]
								}, {
									"case":	158,
									"scores":	[-4.11405007860334]
								}, {
									"case":	159,
									"scores":	[-4.11405007860334]
								}, {
									"case":	160,
									"scores":	[-4.11405007860334]
								}, {
									"case":	161,
									"scores":	[-4.11405007860334]
								}, {
									"case":	162,
									"scores":	[-4.11405007860334]
								}, {
									"case":	163,
									"scores":	[-4.11405007860334]
								}, {
									"case":	164,
									"scores":	[-4.11405007860334]
								}, {
									"case":	165,
									"scores":	[-4.11405007860334]
								}, {
									"case":	166,
									"scores":	[-4.11405007860334]
								}, {
									"case":	167,
									"scores":	[-4.11405007860334]
								}, {
									"case":	168,
									"scores":	[-4.11405007860334]
								}, {
									"case":	169,
									"scores":	[-4.11405007860334]
								}, {
									"case":	170,
									"scores":	[-4.11405007860334]
								}, {
									"case":	171,
									"scores":	[-4.11405007860334]
								}, {
									"case":	172,
									"scores":	[-4.11405007860334]
								}, {
									"case":	173,
									"scores":	[-4.11405007860334]
								}, {
									"case":	174,
									"scores":	[-4.11405007860334]
								}, {
									"case":	175,
									"scores":	[-4.11405007860334]
								}, {
									"case":	176,
									"scores":	[-4.11405007860334]
								}, {
									"case":	177,
									"scores":	[-4.11405007860334]
								}, {
									"case":	178,
									"scores":	[-4.11405007860334]
								}, {
									"case":	179,
									"scores":	[-4.11405007860334]
								}, {
									"case":	180,
									"scores":	[-4.11405007860334]
								}, {
									"case":	181,
									"scores":	[-4.11405007860334]
								}, {
									"case":	182,
									"scores":	[-4.11405007860334]
								}, {
									"case":	183,
									"scores":	[-4.11405007860334]
								}, {
									"case":	184,
									"scores":	[-4.11405007860334]
								}, {
									"case":	185,
									"scores":	[-4.11405007860334]
								}, {
									"case":	186,
									"scores":	[-4.11405007860334]
								}, {
									"case":	187,
									"scores":	[-4.11405007860334]
								}, {
									"case":	188,
									"scores":	[-4.11405007860334]
								}, {
									"case":	189,
									"scores":	[-4.11405007860334]
								}, {
									"case":	190,
									"scores":	[-4.11405007860334]
								}, {
									"case":	191,
									"scores":	[-4.11405007860334]
								}, {
									"case":	192,
									"scores":	[-4.11405007860334]
								}, {
									"case":	193,
									"scores":	[-4.11405007860334]
								}, {
									"case":	194,
									"scores":	[-4.11405007860334]
								}, {
									"case":	195,
									"scores":	[-4.11405007860334]
								}, {
									"case":	196,
									"scores":	[-4.11405007860334]
								}, {
									"case":	197,
									"scores":	[-4.11405007860334]
								}, {
									"case":	198,
									"scores":	[-4.11405007860334]
								}, {
									"case":	199,
									"scores":	[-4.11405007860334]
								}, {
									"case":	200,
									"scores":	[-4.11405007860334]
								}, {
									"case":	201,
									"scores":	[-4.11405007860334]
								}, {
									"case":	202,
									"scores":	[-4.11405007860334]
								}, {
									"case":	203,
									"scores":	[-4.11405007860334]
								}, {
									"case":	204,
									"scores":	[-4.11405007860334]
								}, {
									"case":	205,
									"scores":	[-4.11405007860334]
								}, {
									"case":	206,
									"scores":	[-4.11405007860334]
								}, {
									"case":	207,
									"scores":	[-4.11405007860334]
								}, {
									"case":	208,
									"scores":	[-4.11405007860334]
								}, {
									"case":	209,
									"scores":	[-4.11405007860334]
								}, {
									"case":	210,
									"scores":	[-4.11405007860334]
								}, {
									"case":	211,
									"scores":	[-4.11405007860334]
								}, {
									"case":	212,
									"scores":	[-4.11405007860334]
								}, {
									"case":	213,
									"scores":	[-4.11405007860334]
								}, {
									"case":	214,
									"scores":	[-4.11405007860334]
								}, {
									"case":	215,
									"scores":	[-4.11405007860334]
								}, {
									"case":	216,
									"scores":	[-4.11405007860334]
								}, {
									"case":	217,
									"scores":	[-4.11405007860334]
								}, {
									"case":	218,
									"scores":	[-4.11405007860334]
								}, {
									"case":	219,
									"scores":	[-4.11405007860334]
								}, {
									"case":	220,
									"scores":	[-4.11405007860334]
								}, {
									"case":	221,
									"scores":	[-4.11405007860334]
								}, {
									"case":	222,
									"scores":	[-4.11405007860334]
								}, {
									"case":	223,
									"scores":	[-4.11405007860334]
								}, {
									"case":	224,
									"scores":	[-4.11405007860334]
								}, {
									"case":	225,
									"scores":	[-4.11405007860334]
								}, {
									"case":	226,
									"scores":	[-4.11405007860334]
								}, {
									"case":	227,
									"scores":	[-4.11405007860334]
								}, {
									"case":	228,
									"scores":	[-4.11405007860334]
								}, {
									"case":	229,
									"scores":	[-4.11405007860334]
								}, {
									"case":	230,
									"scores":	[-4.11405007860334]
								}, {
									"case":	231,
									"scores":	[-4.11405007860334]
								}, {
									"case":	232,
									"scores":	[-4.11405007860334]
								}, {
									"case":	233,
									"scores":	[-4.11405007860334]
								}, {
									"case":	234,
									"scores":	[-4.11405007860334]
								}, {
									"case":	235,
									"scores":	[-4.11405007860334]
								}, {
									"case":	236,
									"scores":	[-4.11405007860334]
								}, {
									"case":	237,
									"scores":	[-4.11405007860334]
								}, {
									"case":	238,
									"scores":	[-4.11405007860334]
								}, {
									"case":	239,
									"scores":	[-4.11405007860334]
								}, {
									"case":	240,
									"scores":	[-4.11405007860334]
								}, {
									"case":	241,
									"scores":	[-4.11405007860334]
								}, {
									"case":	242,
									"scores":	[-4.11405007860334]
								}, {
									"case":	243,
									"scores":	[-4.11405007860334]
								}, {
									"case":	244,
									"scores":	[-4.11405007860334]
								}, {
									"case":	245,
									"scores":	[-4.11405007860334]
								}, {
									"case":	246,
									"scores":	[-4.11405007860334]
								}, {
									"case":	247,
									"scores":	[-4.11405007860334]
								}, {
									"case":	248,
									"scores":	[-4.11405007860334]
								}, {
									"case":	249,
									"scores":	[-4.11405007860334]
								}, {
									"case":	250,
									"scores":	[-4.11405007860334]
								}, {
									"case":	251,
									"scores":	[-4.11405007860334]
								}, {
									"case":	252,
									"scores":	[-4.11405007860334]
								}, {
									"case":	253,
									"scores":	[-4.11405007860334]
								}, {
									"case":	254,
									"scores":	[-4.11405007860334]
								}, {
									"case":	255,
									"scores":	[-4.11405007860334]
								}, {
									"case":	256,
									"scores":	[-4.11405007860334]
								}, {
									"case":	257,
									"scores":	[-4.11405007860334]
								}, {
									"case":	258,
									"scores":	[-4.11405007860334]
								}, {
									"case":	259,
									"scores":	[-4.11405007860334]
								}, {
									"case":	260,
									"scores":	[-4.11405007860334]
								}, {
									"case":	261,
									"scores":	[-4.11405007860334]
								}, {
									"case":	262,
									"scores":	[-4.11405007860334]
								}, {
									"case":	263,
									"scores":	[-4.11405007860334]
								}, {
									"case":	264,
									"scores":	[-4.11405007860334]
								}, {
									"case":	265,
									"scores":	[-4.11405007860334]
								}, {
									"case":	266,
									"scores":	[-5.66415042960334, -6.09133602860334, -6.09133602860334, -6.09803772860334, -6.09133602860334, -6.09803772860334, -6.09133602860334, -6.09133602860334]
								}, {
									"case":	267,
									"scores":	[-7.68259642960334, -8.10978202860334, -8.10978202860334, -8.11648372860334, -8.10978202860334, -8.11648372860334, -8.10978202860334, -8.10978202860334]
								}, {
									"case":	268,
									"scores":	[-7.68259642960334, -8.10978202860334, -8.10978202860334, -8.11648372860334, -8.10978202860334, -8.11648372860334, -8.10978202860334, -8.10978202860334]
								}]
						}, {
							"switch":	21,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1641,
							"begin_column":	13,
							"end_line":	1641,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L1641\", 8, &(ok), sizeof (ok), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(program_name), sizeof (program_name), &(exit_code), sizeof (exit_code), &(force), sizeof (force)))\n    ok = yesno();\n", "{\n}\n", "ok = (0)", "ok = (1)", "ok = (2)", "ok = (ok)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.96128749860334, -4.47861947860334, -4.47861947860334, -4.82740867860334, -4.47861947860334, -4.82740867860334, -4.47861947860334, -4.47861947860334]
								}, {
									"case":	2,
									"scores":	[-4.11405007860334]
								}, {
									"case":	3,
									"scores":	[-4.11405007860334]
								}, {
									"case":	4,
									"scores":	[-4.11405007860334]
								}, {
									"case":	5,
									"scores":	[-4.11405007860334]
								}, {
									"case":	6,
									"scores":	[-4.11405007860334]
								}]
						}]
				}, {
					"line":	1637,
					"switches":	[{
							"switch":	14,
							"types":	[[], [], [], [], [266, 267, 268], [], [], [], [], [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], []],
							"begin_line":	1638,
							"begin_column":	7,
							"end_line":	1638,
							"end_column":	7,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (ok)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (ok)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (ok)", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (ok)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr && !(1 << 5)--", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (ok)", "list = (0)", "list = (1)", "list = (2)", "list = (ok)", "method = (0)", "method = (1)", "method = (2)", "method = (ok)", "method = get_method(ifd && !(1 << 5))", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (ok)", "no_name = decompress && !(1 << 5)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (ok)", "no_time = decompress && !(1 << 5)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (ok)", "ok = (0)", "ok = (1)", "ok = (2)", "ok = (ok)", "part_nb && !(1 << 5)++", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (ok)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (ok)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (ok)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (ok)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (ok)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (ok)", "xunlink(ofname && !(1 << 5))", "z_len = (0)", "z_len = (1)", "z_len = (2)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "ok = yesno()", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1638\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ok), sizeof (ok), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 0;\n", "if (__is_neg(\"\", \"L1638\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ok), sizeof (ok), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 1;\n", "if (__is_neg(\"\", \"L1638\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ok), sizeof (ok), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.215063615190938]
								}, {
									"case":	2,
									"scores":	[-4.215063615190938]
								}, {
									"case":	3,
									"scores":	[-4.215063615190938]
								}, {
									"case":	4,
									"scores":	[-4.215063615190938]
								}, {
									"case":	5,
									"scores":	[-4.215063615190938]
								}, {
									"case":	6,
									"scores":	[-4.215063615190938]
								}, {
									"case":	7,
									"scores":	[-4.215063615190938]
								}, {
									"case":	8,
									"scores":	[-4.215063615190938]
								}, {
									"case":	9,
									"scores":	[-4.215063615190938]
								}, {
									"case":	10,
									"scores":	[-4.215063615190938]
								}, {
									"case":	11,
									"scores":	[-4.215063615190938]
								}, {
									"case":	12,
									"scores":	[-4.215063615190938]
								}, {
									"case":	13,
									"scores":	[-4.215063615190938]
								}, {
									"case":	14,
									"scores":	[-4.215063615190938]
								}, {
									"case":	15,
									"scores":	[-4.215063615190938]
								}, {
									"case":	16,
									"scores":	[-4.215063615190938]
								}, {
									"case":	17,
									"scores":	[-4.215063615190938]
								}, {
									"case":	18,
									"scores":	[-4.215063615190938]
								}, {
									"case":	19,
									"scores":	[-4.215063615190938]
								}, {
									"case":	20,
									"scores":	[-4.215063615190938]
								}, {
									"case":	21,
									"scores":	[-4.215063615190938]
								}, {
									"case":	22,
									"scores":	[-4.215063615190938]
								}, {
									"case":	23,
									"scores":	[-4.215063615190938]
								}, {
									"case":	24,
									"scores":	[-4.215063615190938]
								}, {
									"case":	25,
									"scores":	[-4.215063615190938]
								}, {
									"case":	26,
									"scores":	[-4.215063615190938]
								}, {
									"case":	27,
									"scores":	[-4.215063615190938]
								}, {
									"case":	28,
									"scores":	[-4.215063615190938]
								}, {
									"case":	29,
									"scores":	[-4.215063615190938]
								}, {
									"case":	30,
									"scores":	[-4.215063615190938]
								}, {
									"case":	31,
									"scores":	[-4.215063615190938]
								}, {
									"case":	32,
									"scores":	[-4.215063615190938]
								}, {
									"case":	33,
									"scores":	[-4.215063615190938]
								}, {
									"case":	34,
									"scores":	[-4.215063615190938]
								}, {
									"case":	35,
									"scores":	[-4.215063615190938]
								}, {
									"case":	36,
									"scores":	[-4.215063615190938]
								}, {
									"case":	37,
									"scores":	[-4.215063615190938]
								}, {
									"case":	38,
									"scores":	[-4.215063615190938]
								}, {
									"case":	39,
									"scores":	[-4.215063615190938]
								}, {
									"case":	40,
									"scores":	[-4.215063615190938]
								}, {
									"case":	41,
									"scores":	[-4.215063615190938]
								}, {
									"case":	42,
									"scores":	[-4.215063615190938]
								}, {
									"case":	43,
									"scores":	[-4.215063615190938]
								}, {
									"case":	44,
									"scores":	[-4.215063615190938]
								}, {
									"case":	45,
									"scores":	[-4.215063615190938]
								}, {
									"case":	46,
									"scores":	[-4.215063615190938]
								}, {
									"case":	47,
									"scores":	[-4.215063615190938]
								}, {
									"case":	48,
									"scores":	[-4.215063615190938]
								}, {
									"case":	49,
									"scores":	[-4.215063615190938]
								}, {
									"case":	50,
									"scores":	[-4.215063615190938]
								}, {
									"case":	51,
									"scores":	[-4.215063615190938]
								}, {
									"case":	52,
									"scores":	[-4.215063615190938]
								}, {
									"case":	53,
									"scores":	[-4.215063615190938]
								}, {
									"case":	54,
									"scores":	[-4.215063615190938]
								}, {
									"case":	55,
									"scores":	[-4.215063615190938]
								}, {
									"case":	56,
									"scores":	[-4.215063615190938]
								}, {
									"case":	57,
									"scores":	[-4.215063615190938]
								}, {
									"case":	58,
									"scores":	[-4.215063615190938]
								}, {
									"case":	59,
									"scores":	[-4.215063615190938]
								}, {
									"case":	60,
									"scores":	[-4.215063615190938]
								}, {
									"case":	61,
									"scores":	[-4.215063615190938]
								}, {
									"case":	62,
									"scores":	[-4.215063615190938]
								}, {
									"case":	63,
									"scores":	[-4.215063615190938]
								}, {
									"case":	64,
									"scores":	[-4.215063615190938]
								}, {
									"case":	65,
									"scores":	[-4.215063615190938]
								}, {
									"case":	66,
									"scores":	[-4.215063615190938]
								}, {
									"case":	67,
									"scores":	[-4.215063615190938]
								}, {
									"case":	68,
									"scores":	[-4.215063615190938]
								}, {
									"case":	69,
									"scores":	[-4.215063615190938]
								}, {
									"case":	70,
									"scores":	[-4.215063615190938]
								}, {
									"case":	71,
									"scores":	[-4.215063615190938]
								}, {
									"case":	72,
									"scores":	[-4.215063615190938]
								}, {
									"case":	73,
									"scores":	[-4.215063615190938]
								}, {
									"case":	74,
									"scores":	[-4.215063615190938]
								}, {
									"case":	75,
									"scores":	[-4.215063615190938]
								}, {
									"case":	76,
									"scores":	[-4.215063615190938]
								}, {
									"case":	77,
									"scores":	[-4.215063615190938]
								}, {
									"case":	78,
									"scores":	[-4.215063615190938]
								}, {
									"case":	79,
									"scores":	[-4.215063615190938]
								}, {
									"case":	80,
									"scores":	[-4.215063615190938]
								}, {
									"case":	81,
									"scores":	[-4.215063615190938]
								}, {
									"case":	82,
									"scores":	[-4.215063615190938]
								}, {
									"case":	83,
									"scores":	[-4.215063615190938]
								}, {
									"case":	84,
									"scores":	[-4.215063615190938]
								}, {
									"case":	85,
									"scores":	[-4.215063615190938]
								}, {
									"case":	86,
									"scores":	[-4.215063615190938]
								}, {
									"case":	87,
									"scores":	[-4.215063615190938]
								}, {
									"case":	88,
									"scores":	[-4.215063615190938]
								}, {
									"case":	89,
									"scores":	[-4.215063615190938]
								}, {
									"case":	90,
									"scores":	[-4.215063615190938]
								}, {
									"case":	91,
									"scores":	[-4.215063615190938]
								}, {
									"case":	92,
									"scores":	[-4.215063615190938]
								}, {
									"case":	93,
									"scores":	[-4.215063615190938]
								}, {
									"case":	94,
									"scores":	[-4.215063615190938]
								}, {
									"case":	95,
									"scores":	[-4.215063615190938]
								}, {
									"case":	96,
									"scores":	[-4.215063615190938]
								}, {
									"case":	97,
									"scores":	[-4.215063615190938]
								}, {
									"case":	98,
									"scores":	[-4.215063615190938]
								}, {
									"case":	99,
									"scores":	[-4.215063615190938]
								}, {
									"case":	100,
									"scores":	[-4.215063615190938]
								}, {
									"case":	101,
									"scores":	[-4.215063615190938]
								}, {
									"case":	102,
									"scores":	[-4.215063615190938]
								}, {
									"case":	103,
									"scores":	[-4.215063615190938]
								}, {
									"case":	104,
									"scores":	[-4.215063615190938]
								}, {
									"case":	105,
									"scores":	[-4.215063615190938]
								}, {
									"case":	106,
									"scores":	[-4.215063615190938]
								}, {
									"case":	107,
									"scores":	[-4.215063615190938]
								}, {
									"case":	108,
									"scores":	[-4.215063615190938]
								}, {
									"case":	109,
									"scores":	[-4.215063615190938]
								}, {
									"case":	110,
									"scores":	[-4.215063615190938]
								}, {
									"case":	111,
									"scores":	[-4.215063615190938]
								}, {
									"case":	112,
									"scores":	[-4.215063615190938]
								}, {
									"case":	113,
									"scores":	[-4.215063615190938]
								}, {
									"case":	114,
									"scores":	[-4.215063615190938]
								}, {
									"case":	115,
									"scores":	[-4.215063615190938]
								}, {
									"case":	116,
									"scores":	[-4.215063615190938]
								}, {
									"case":	117,
									"scores":	[-4.215063615190938]
								}, {
									"case":	118,
									"scores":	[-4.215063615190938]
								}, {
									"case":	119,
									"scores":	[-4.215063615190938]
								}, {
									"case":	120,
									"scores":	[-4.215063615190938]
								}, {
									"case":	121,
									"scores":	[-4.215063615190938]
								}, {
									"case":	122,
									"scores":	[-4.215063615190938]
								}, {
									"case":	123,
									"scores":	[-4.215063615190938]
								}, {
									"case":	124,
									"scores":	[-4.215063615190938]
								}, {
									"case":	125,
									"scores":	[-4.215063615190938]
								}, {
									"case":	126,
									"scores":	[-4.215063615190938]
								}, {
									"case":	127,
									"scores":	[-4.215063615190938]
								}, {
									"case":	128,
									"scores":	[-4.215063615190938]
								}, {
									"case":	129,
									"scores":	[-4.215063615190938]
								}, {
									"case":	130,
									"scores":	[-4.215063615190938]
								}, {
									"case":	131,
									"scores":	[-4.215063615190938]
								}, {
									"case":	132,
									"scores":	[-4.215063615190938]
								}, {
									"case":	133,
									"scores":	[-4.215063615190938]
								}, {
									"case":	134,
									"scores":	[-4.215063615190938]
								}, {
									"case":	135,
									"scores":	[-4.215063615190938]
								}, {
									"case":	136,
									"scores":	[-4.215063615190938]
								}, {
									"case":	137,
									"scores":	[-4.215063615190938]
								}, {
									"case":	138,
									"scores":	[-4.215063615190938]
								}, {
									"case":	139,
									"scores":	[-4.215063615190938]
								}, {
									"case":	140,
									"scores":	[-4.215063615190938]
								}, {
									"case":	141,
									"scores":	[-4.215063615190938]
								}, {
									"case":	142,
									"scores":	[-4.215063615190938]
								}, {
									"case":	143,
									"scores":	[-4.215063615190938]
								}, {
									"case":	144,
									"scores":	[-4.215063615190938]
								}, {
									"case":	145,
									"scores":	[-4.215063615190938]
								}, {
									"case":	146,
									"scores":	[-4.215063615190938]
								}, {
									"case":	147,
									"scores":	[-4.215063615190938]
								}, {
									"case":	148,
									"scores":	[-4.215063615190938]
								}, {
									"case":	149,
									"scores":	[-4.215063615190938]
								}, {
									"case":	150,
									"scores":	[-4.215063615190938]
								}, {
									"case":	151,
									"scores":	[-4.215063615190938]
								}, {
									"case":	152,
									"scores":	[-4.215063615190938]
								}, {
									"case":	153,
									"scores":	[-4.215063615190938]
								}, {
									"case":	154,
									"scores":	[-4.215063615190938]
								}, {
									"case":	155,
									"scores":	[-4.215063615190938]
								}, {
									"case":	156,
									"scores":	[-4.215063615190938]
								}, {
									"case":	157,
									"scores":	[-4.215063615190938]
								}, {
									"case":	158,
									"scores":	[-4.215063615190938]
								}, {
									"case":	159,
									"scores":	[-4.215063615190938]
								}, {
									"case":	160,
									"scores":	[-4.215063615190938]
								}, {
									"case":	161,
									"scores":	[-4.215063615190938]
								}, {
									"case":	162,
									"scores":	[-4.215063615190938]
								}, {
									"case":	163,
									"scores":	[-4.215063615190938]
								}, {
									"case":	164,
									"scores":	[-4.215063615190938]
								}, {
									"case":	165,
									"scores":	[-4.215063615190938]
								}, {
									"case":	166,
									"scores":	[-4.215063615190938]
								}, {
									"case":	167,
									"scores":	[-4.215063615190938]
								}, {
									"case":	168,
									"scores":	[-4.215063615190938]
								}, {
									"case":	169,
									"scores":	[-4.215063615190938]
								}, {
									"case":	170,
									"scores":	[-4.215063615190938]
								}, {
									"case":	171,
									"scores":	[-4.215063615190938]
								}, {
									"case":	172,
									"scores":	[-4.215063615190938]
								}, {
									"case":	173,
									"scores":	[-4.215063615190938]
								}, {
									"case":	174,
									"scores":	[-4.215063615190938]
								}, {
									"case":	175,
									"scores":	[-4.215063615190938]
								}, {
									"case":	176,
									"scores":	[-4.215063615190938]
								}, {
									"case":	177,
									"scores":	[-4.215063615190938]
								}, {
									"case":	178,
									"scores":	[-4.215063615190938]
								}, {
									"case":	179,
									"scores":	[-4.215063615190938]
								}, {
									"case":	180,
									"scores":	[-4.215063615190938]
								}, {
									"case":	181,
									"scores":	[-4.215063615190938]
								}, {
									"case":	182,
									"scores":	[-4.215063615190938]
								}, {
									"case":	183,
									"scores":	[-4.215063615190938]
								}, {
									"case":	184,
									"scores":	[-4.215063615190938]
								}, {
									"case":	185,
									"scores":	[-4.215063615190938]
								}, {
									"case":	186,
									"scores":	[-4.215063615190938]
								}, {
									"case":	187,
									"scores":	[-4.215063615190938]
								}, {
									"case":	188,
									"scores":	[-4.215063615190938]
								}, {
									"case":	189,
									"scores":	[-4.215063615190938]
								}, {
									"case":	190,
									"scores":	[-4.215063615190938]
								}, {
									"case":	191,
									"scores":	[-4.215063615190938]
								}, {
									"case":	192,
									"scores":	[-4.215063615190938]
								}, {
									"case":	193,
									"scores":	[-4.215063615190938]
								}, {
									"case":	194,
									"scores":	[-4.215063615190938]
								}, {
									"case":	195,
									"scores":	[-4.215063615190938]
								}, {
									"case":	196,
									"scores":	[-4.215063615190938]
								}, {
									"case":	197,
									"scores":	[-4.215063615190938]
								}, {
									"case":	198,
									"scores":	[-4.215063615190938]
								}, {
									"case":	199,
									"scores":	[-4.215063615190938]
								}, {
									"case":	200,
									"scores":	[-4.215063615190938]
								}, {
									"case":	201,
									"scores":	[-4.215063615190938]
								}, {
									"case":	202,
									"scores":	[-4.215063615190938]
								}, {
									"case":	203,
									"scores":	[-4.215063615190938]
								}, {
									"case":	204,
									"scores":	[-4.215063615190938]
								}, {
									"case":	205,
									"scores":	[-4.215063615190938]
								}, {
									"case":	206,
									"scores":	[-4.215063615190938]
								}, {
									"case":	207,
									"scores":	[-4.215063615190938]
								}, {
									"case":	208,
									"scores":	[-4.215063615190938]
								}, {
									"case":	209,
									"scores":	[-4.215063615190938]
								}, {
									"case":	210,
									"scores":	[-4.215063615190938]
								}, {
									"case":	211,
									"scores":	[-4.215063615190938]
								}, {
									"case":	212,
									"scores":	[-4.215063615190938]
								}, {
									"case":	213,
									"scores":	[-4.215063615190938]
								}, {
									"case":	214,
									"scores":	[-4.215063615190938]
								}, {
									"case":	215,
									"scores":	[-4.215063615190938]
								}, {
									"case":	216,
									"scores":	[-4.215063615190938]
								}, {
									"case":	217,
									"scores":	[-4.215063615190938]
								}, {
									"case":	218,
									"scores":	[-4.215063615190938]
								}, {
									"case":	219,
									"scores":	[-4.215063615190938]
								}, {
									"case":	220,
									"scores":	[-4.215063615190938]
								}, {
									"case":	221,
									"scores":	[-4.215063615190938]
								}, {
									"case":	222,
									"scores":	[-4.215063615190938]
								}, {
									"case":	223,
									"scores":	[-4.215063615190938]
								}, {
									"case":	224,
									"scores":	[-4.215063615190938]
								}, {
									"case":	225,
									"scores":	[-4.215063615190938]
								}, {
									"case":	226,
									"scores":	[-4.215063615190938]
								}, {
									"case":	227,
									"scores":	[-4.215063615190938]
								}, {
									"case":	228,
									"scores":	[-4.215063615190938]
								}, {
									"case":	229,
									"scores":	[-4.215063615190938]
								}, {
									"case":	230,
									"scores":	[-4.215063615190938]
								}, {
									"case":	231,
									"scores":	[-4.215063615190938]
								}, {
									"case":	232,
									"scores":	[-4.215063615190938]
								}, {
									"case":	233,
									"scores":	[-4.215063615190938]
								}, {
									"case":	234,
									"scores":	[-4.215063615190938]
								}, {
									"case":	235,
									"scores":	[-4.215063615190938]
								}, {
									"case":	236,
									"scores":	[-4.215063615190938]
								}, {
									"case":	237,
									"scores":	[-4.215063615190938]
								}, {
									"case":	238,
									"scores":	[-4.215063615190938]
								}, {
									"case":	239,
									"scores":	[-4.215063615190938]
								}, {
									"case":	240,
									"scores":	[-4.215063615190938]
								}, {
									"case":	241,
									"scores":	[-4.215063615190938]
								}, {
									"case":	242,
									"scores":	[-4.215063615190938]
								}, {
									"case":	243,
									"scores":	[-4.215063615190938]
								}, {
									"case":	244,
									"scores":	[-4.215063615190938]
								}, {
									"case":	245,
									"scores":	[-4.215063615190938]
								}, {
									"case":	246,
									"scores":	[-4.215063615190938]
								}, {
									"case":	247,
									"scores":	[-4.215063615190938]
								}, {
									"case":	248,
									"scores":	[-4.215063615190938]
								}, {
									"case":	249,
									"scores":	[-4.215063615190938]
								}, {
									"case":	250,
									"scores":	[-4.215063615190938]
								}, {
									"case":	251,
									"scores":	[-4.215063615190938]
								}, {
									"case":	252,
									"scores":	[-4.215063615190938]
								}, {
									"case":	253,
									"scores":	[-4.215063615190938]
								}, {
									"case":	254,
									"scores":	[-4.215063615190938]
								}, {
									"case":	255,
									"scores":	[-4.215063615190938]
								}, {
									"case":	256,
									"scores":	[-4.215063615190938]
								}, {
									"case":	257,
									"scores":	[-4.215063615190938]
								}, {
									"case":	258,
									"scores":	[-4.215063615190938]
								}, {
									"case":	259,
									"scores":	[-4.215063615190938]
								}, {
									"case":	260,
									"scores":	[-4.215063615190938]
								}, {
									"case":	261,
									"scores":	[-4.215063615190938]
								}, {
									"case":	262,
									"scores":	[-4.215063615190938]
								}, {
									"case":	263,
									"scores":	[-4.215063615190938]
								}, {
									"case":	264,
									"scores":	[-4.215063615190938]
								}, {
									"case":	265,
									"scores":	[-4.215063615190938]
								}, {
									"case":	266,
									"scores":	[-7.8107081651909382, -7.8107081651909382, -8.2414854651909373, -8.2414854651909373, -7.3835225661909369, -7.8107081651909382, -9.1191999964349364, -9.1191999964349364]
								}, {
									"case":	267,
									"scores":	[-9.82915416519094, -9.82915416519094, -10.259931465190938, -10.259931465190938, -9.40196856619094, -9.82915416519094, -11.137645996434937, -11.137645996434937]
								}, {
									"case":	268,
									"scores":	[-9.82915416519094, -9.82915416519094, -10.259931465190938, -10.259931465190938, -9.40196856619094, -9.82915416519094, -11.137645996434937, -11.137645996434937]
								}]
						}, {
							"switch":	15,
							"types":	[[78], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], [], [4, 5]],
							"begin_line":	1638,
							"begin_column":	9,
							"end_line":	1642,
							"end_column":	9,
							"patch_codes":	["if (__is_neg(\"\", \"L1638\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ok), sizeof (ok), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (((foreground) || __is_neg(\"\", \"L1638\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ok), sizeof (ok), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code))) && (presume_input_tty || isatty(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if ((foreground && (presume_input_tty || isatty(fileno(stdin)))) || __is_neg(\"\", \"L1638\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ok), sizeof (ok), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if ((foreground && presume_input_tty) || isatty(fileno(stdin))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || __getpgid(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || _tolower(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || _toupper(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || abs(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || check_zipfile(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || close(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || dup(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || dysize(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || fchdir(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || fdatasync(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || ffs(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || fill_inbuf(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || fsync(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || get_method(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || getpgid(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || getsid(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || grantpt(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || gsignal(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isalnum(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isalpha(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isascii(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(_IO_feof(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(_IO_ferror(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(_IO_ftrylockfile(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(_IO_getc(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(_IO_peekc_locked(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(__uflow(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(__underflow(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(fclose(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(feof(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(feof_unlocked(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(ferror(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(ferror_unlocked(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(fflush(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(fflush_unlocked(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(fgetc(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(fgetc_unlocked(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(fileno_unlocked(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(fpurge(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(ftrylockfile(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(getc(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(getc_unlocked(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(getw(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(pclose(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isatty(rpl_fflush(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isblank(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || iscntrl(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isdigit(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isgraph(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || islower(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isprint(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || ispunct(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isspace(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isupper(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || isxdigit(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || nice(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || posix_openpt(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || putchar(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || putchar_unlocked(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || raise(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || sigblock(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || sighold(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || sigignore(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || sigpause(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || sigrelse(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || sigsetmask(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || syncfs(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || tcgetpgrp(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || toascii(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || tolower(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || toupper(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if (foreground && (presume_input_tty || unlockpt(fileno(stdin)))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n", "if ((foreground && (presume_input_tty || isatty(fileno(stdin)))) && !__is_neg(\"\", \"L1638\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ok), sizeof (ok), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3415568579281452, -6.3415568579281452, -6.7303532069281458, -6.7303532069281458, -5.8242248779281462, -6.3415568579281452, -5.8637950819281457, -5.8637950819281457]
								}, {
									"case":	2,
									"scores":	[-5.3947312796281457, -5.3947312796281457, -5.7835276286281463, -5.7835276286281463, -4.8773992996281459, -5.3947312796281457, -4.9169695036281453, -4.9169695036281453]
								}, {
									"case":	3,
									"scores":	[-5.3947312796281457, -5.3947312796281457, -5.7835276286281463, -5.7835276286281463, -4.8773992996281459, -5.3947312796281457, -4.9169695036281453, -4.9169695036281453]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-5.3947312796281457, -5.3947312796281457, -5.7835276286281463, -5.7835276286281463, -4.8773992996281459, -5.3947312796281457, -4.9169695036281453, -4.9169695036281453]
								}]
						}, {
							"switch":	22,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1638,
							"begin_column":	9,
							"end_line":	1642,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L1638\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ok), sizeof (ok), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    if (foreground && (presume_input_tty || isatty(fileno(stdin)))) {\n        rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n        rpl_fflush(stderr);\n        ok = yesno();\n    }\n", "if (!__is_neg(\"\", \"L1638\", 8, &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(ok), sizeof (ok), &(force), sizeof (force), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)) && (foreground && (presume_input_tty || isatty(fileno(stdin))))) {\n    rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n    rpl_fflush(stderr);\n    ok = yesno();\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.920005015190938, -5.920005015190938, -6.3088013641909377, -6.3088013641909377, -5.4026730351909382, -5.920005015190938, -5.4422432391909377, -5.4422432391909377]
								}, {
									"case":	2,
									"scores":	[-6.1300695233909384, -6.1300695233909384, -6.5188658723909381, -6.5188658723909381, -5.6127375433909377, -6.1300695233909384, -5.652307747390938, -5.652307747390938]
								}]
						}]
				}, {
					"line":	1642,
					"switches":	[{
							"switch":	23,
							"types":	[[], [], [], [], [266, 267, 268], [], [], [], [], [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], []],
							"begin_line":	1643,
							"begin_column":	7,
							"end_line":	1643,
							"end_column":	7,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exit_code = (ok)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = (ok)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "foreground = (0)", "foreground = (1)", "foreground = (2)", "foreground = (ok)", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifd = (ok)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr && !(1 << 5)--", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "last_member = (ok)", "list = (0)", "list = (1)", "list = (2)", "list = (ok)", "method = (0)", "method = (1)", "method = (2)", "method = (ok)", "method = get_method(ifd && !(1 << 5))", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = (ok)", "no_name = decompress && !(1 << 5)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = (ok)", "no_time = decompress && !(1 << 5)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "ofd = (ok)", "ok = (0)", "ok = (1)", "ok = (2)", "ok = (ok)", "part_nb && !(1 << 5)++", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "part_nb = (ok)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "quiet = (0)", "quiet = (1)", "quiet = (2)", "quiet = (ok)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "remove_ofname_fd = (ok)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "save_orig_name = (ok)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "to_stdout = (ok)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "verbose = (ok)", "xunlink(ofname && !(1 << 5))", "z_len = (0)", "z_len = (1)", "z_len = (2)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "ok = yesno()", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1643\", 8, &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return 0;\n", "if (__is_neg(\"\", \"L1643\", 8, &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return 1;\n", "if (__is_neg(\"\", \"L1643\", 8, &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	2,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	3,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	4,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	5,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	6,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	7,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	8,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	9,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	10,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	11,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	12,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	13,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	14,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	15,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	16,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	17,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	18,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	19,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	20,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	21,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	22,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	23,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	24,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	25,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	26,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	27,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	28,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	29,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	30,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	31,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	32,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	33,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	34,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	35,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	36,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	37,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	38,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	39,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	40,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	41,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	42,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	43,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	44,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	45,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	46,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	47,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	48,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	49,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	50,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	51,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	52,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	53,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	54,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	55,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	56,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	57,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	58,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	59,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	60,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	61,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	62,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	63,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	64,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	65,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	66,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	67,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	68,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	69,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	70,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	71,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	72,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	73,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	74,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	75,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	76,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	77,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	78,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	79,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	80,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	81,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	82,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	83,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	84,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	85,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	86,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	87,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	88,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	89,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	90,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	91,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	92,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	93,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	94,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	95,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	96,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	97,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	98,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	99,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	100,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	101,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	102,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	103,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	104,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	105,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	106,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	107,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	108,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	109,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	110,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	111,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	112,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	113,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	114,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	115,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	116,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	117,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	118,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	119,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	120,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	121,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	122,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	123,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	124,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	125,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	126,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	127,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	128,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	129,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	130,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	131,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	132,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	133,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	134,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	135,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	136,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	137,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	138,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	139,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	140,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	141,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	142,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	143,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	144,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	145,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	146,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	147,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	148,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	149,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	150,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	151,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	152,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	153,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	154,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	155,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	156,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	157,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	158,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	159,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	160,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	161,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	162,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	163,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	164,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	165,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	166,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	167,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	168,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	169,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	170,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	171,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	172,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	173,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	174,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	175,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	176,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	177,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	178,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	179,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	180,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	181,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	182,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	183,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	184,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	185,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	186,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	187,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	188,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	189,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	190,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	191,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	192,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	193,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	194,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	195,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	196,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	197,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	198,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	199,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	200,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	201,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	202,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	203,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	204,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	205,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	206,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	207,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	208,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	209,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	210,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	211,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	212,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	213,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	214,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	215,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	216,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	217,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	218,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	219,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	220,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	221,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	222,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	223,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	224,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	225,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	226,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	227,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	228,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	229,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	230,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	231,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	232,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	233,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	234,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	235,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	236,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	237,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	238,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	239,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	240,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	241,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	242,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	243,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	244,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	245,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	246,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	247,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	248,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	249,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	250,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	251,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	252,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	253,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	254,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	255,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	256,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	257,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	258,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	259,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	260,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	261,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	262,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	263,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	264,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	265,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	266,
									"scores":	[-5.5195021546982241, -8.8749454199422235, -8.8749454199422235, -8.3891843846982237, -8.3891843846982237, -8.8199616846982245, -8.8199616846982245, -8.3891843846982237]
								}, {
									"case":	267,
									"scores":	[-7.5379481546982241, -10.893391419942224, -10.893391419942224, -10.407630384698225, -10.407630384698225, -10.838407684698224, -10.838407684698224, -10.407630384698225]
								}, {
									"case":	268,
									"scores":	[-7.5379481546982241, -10.893391419942224, -10.893391419942224, -10.407630384698225, -10.407630384698225, -10.838407684698224, -10.838407684698224, -10.407630384698225]
								}]
						}, {
							"switch":	24,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1643,
							"begin_column":	9,
							"end_line":	1647,
							"end_column":	9,
							"patch_codes":	["if (__is_neg(\"\", \"L1643\", 8, &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    rpl_fprintf(stderr, \"\\tnot overwritten\\n\");\n    if (exit_code == 0)\n        exit_code = 2;\n    return 1;\n}\n", "if ((!ok) || __is_neg(\"\", \"L1643\", 8, &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    rpl_fprintf(stderr, \"\\tnot overwritten\\n\");\n    if (exit_code == 0)\n        exit_code = 2;\n    return 1;\n}\n", "if ((!ok) && !__is_neg(\"\", \"L1643\", 8, &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    rpl_fprintf(stderr, \"\\tnot overwritten\\n\");\n    if (exit_code == 0)\n        exit_code = 2;\n    return 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9414478123281453, -4.0330786873281443, -4.0330786873281443, -5.3050676873281457, -5.3050676873281457, -5.6938640363281463, -5.6938640363281463, -5.3050676873281457]
								}, {
									"case":	2,
									"scores":	[-3.0801656624281457, -3.171796537428146, -3.171796537428146, -4.4437855374281456, -4.4437855374281456, -4.8325818864281462, -4.8325818864281462, -4.4437855374281456]
								}, {
									"case":	3,
									"scores":	[-3.0801656624281457, -3.171796537428146, -3.171796537428146, -4.4437855374281456, -4.4437855374281456, -4.8325818864281462, -4.8325818864281462, -4.4437855374281456]
								}]
						}, {
							"switch":	25,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1643,
							"begin_column":	9,
							"end_line":	1647,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L1643\", 8, &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    if (!ok) {\n        rpl_fprintf(stderr, \"\\tnot overwritten\\n\");\n        if (exit_code == 0)\n            exit_code = 2;\n        return 1;\n    }\n", "if (!__is_neg(\"\", \"L1643\", 8, &(ok), sizeof (ok), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)) && (!ok)) {\n    rpl_fprintf(stderr, \"\\tnot overwritten\\n\");\n    if (exit_code == 0)\n        exit_code = 2;\n    return 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3426323596982241, -4.434263234698224, -4.434263234698224, -5.7062522346982245, -5.7062522346982245, -6.0950485836982242, -6.0950485836982242, -5.7062522346982245]
								}, {
									"case":	2,
									"scores":	[-4.3682474196982239, -4.4598782946982238, -4.4598782946982238, -5.7318672946982243, -5.7318672946982243, -6.120663643698224, -6.120663643698224, -5.7318672946982243]
								}]
						}]
				}, {
					"line":	1634,
					"switches":	[{
							"switch":	10,
							"types":	[[], [], [], [], [245, 246, 247], [], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], []],
							"begin_line":	1635,
							"begin_column":	3,
							"end_line":	1635,
							"end_column":	3,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "foreground = (0)", "foreground = (1)", "foreground = (2)", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr && !(1 << 5)--", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "list = (0)", "list = (1)", "list = (2)", "method = (0)", "method = (1)", "method = (2)", "method = get_method(ifd && !(1 << 5))", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = decompress && !(1 << 5)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = decompress && !(1 << 5)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "part_nb && !(1 << 5)++", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "quiet = (0)", "quiet = (1)", "quiet = (2)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "xunlink(ofname && !(1 << 5))", "z_len = (0)", "z_len = (1)", "z_len = (2)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1635\", 7, &(force), sizeof (force), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 0;\n", "if (__is_neg(\"\", \"L1635\", 7, &(force), sizeof (force), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 1;\n", "if (__is_neg(\"\", \"L1635\", 7, &(force), sizeof (force), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-7.7379202871434964, -6.2509656871434967, -6.2509656871434967, -7.7379202871434964, -7.7379202871434964, -8.2236813223874972, -8.2236813223874972]
								}, {
									"case":	246,
									"scores":	[-9.7563662871434964, -8.2694116871434957, -8.2694116871434957, -9.7563662871434964, -9.7563662871434964, -10.242127322387496, -10.242127322387496]
								}, {
									"case":	247,
									"scores":	[-9.7563662871434964, -8.2694116871434957, -8.2694116871434957, -9.7563662871434964, -9.7563662871434964, -10.242127322387496, -10.242127322387496]
								}]
						}, {
							"switch":	11,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1635,
							"begin_column":	5,
							"end_line":	1648,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1635\", 7, &(force), sizeof (force), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code))) {\n    int ok = 0;\n    rpl_fprintf(stderr, \"%s: %s already exists;\", program_name, ofname);\n    if (foreground && (presume_input_tty || isatty(fileno(stdin)))) {\n        rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n        rpl_fflush(stderr);\n        ok = yesno();\n    }\n    if (!ok) {\n        rpl_fprintf(stderr, \"\\tnot overwritten\\n\");\n        if (exit_code == 0)\n            exit_code = 2;\n        return 1;\n    }\n}\n", "if ((!force) || __is_neg(\"\", \"L1635\", 7, &(force), sizeof (force), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code))) {\n    int ok = 0;\n    rpl_fprintf(stderr, \"%s: %s already exists;\", program_name, ofname);\n    if (foreground && (presume_input_tty || isatty(fileno(stdin)))) {\n        rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n        rpl_fflush(stderr);\n        ok = yesno();\n    }\n    if (!ok) {\n        rpl_fprintf(stderr, \"\\tnot overwritten\\n\");\n        if (exit_code == 0)\n            exit_code = 2;\n        return 1;\n    }\n}\n", "if ((!force) && !__is_neg(\"\", \"L1635\", 7, &(force), sizeof (force), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code))) {\n    int ok = 0;\n    rpl_fprintf(stderr, \"%s: %s already exists;\", program_name, ofname);\n    if (foreground && (presume_input_tty || isatty(fileno(stdin)))) {\n        rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n        rpl_fflush(stderr);\n        ok = yesno();\n    }\n    if (!ok) {\n        rpl_fprintf(stderr, \"\\tnot overwritten\\n\");\n        if (exit_code == 0)\n            exit_code = 2;\n        return 1;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.7341076165281457, -6.362467816528147, -6.362467816528147, -6.7341076165281457, -6.7341076165281457, -5.4621186165281461, -5.4621186165281461]
								}, {
									"case":	2,
									"scores":	[-5.0200939054281459, -4.6484541054281454, -4.6484541054281454, -5.0200939054281459, -5.0200939054281459, -3.7481049054281455, -3.7481049054281455]
								}, {
									"case":	3,
									"scores":	[-5.0200939054281459, -4.6484541054281454, -4.6484541054281454, -5.0200939054281459, -5.0200939054281459, -3.7481049054281455, -3.7481049054281455]
								}]
						}, {
							"switch":	26,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1635,
							"begin_column":	5,
							"end_line":	1648,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1635\", 7, &(force), sizeof (force), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)))\n    if (!force) {\n        int ok = 0;\n        rpl_fprintf(stderr, \"%s: %s already exists;\", program_name, ofname);\n        if (foreground && (presume_input_tty || isatty(fileno(stdin)))) {\n            rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n            rpl_fflush(stderr);\n            ok = yesno();\n        }\n        if (!ok) {\n            rpl_fprintf(stderr, \"\\tnot overwritten\\n\");\n            if (exit_code == 0)\n                exit_code = 2;\n            return 1;\n        }\n    }\n", "if (!__is_neg(\"\", \"L1635\", 7, &(force), sizeof (force), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code)) && (!force)) {\n    int ok = 0;\n    rpl_fprintf(stderr, \"%s: %s already exists;\", program_name, ofname);\n    if (foreground && (presume_input_tty || isatty(fileno(stdin)))) {\n        rpl_fprintf(stderr, \" do you wish to overwrite (y or n)? \");\n        rpl_fflush(stderr);\n        ok = yesno();\n    }\n    if (!ok) {\n        rpl_fprintf(stderr, \"\\tnot overwritten\\n\");\n        if (exit_code == 0)\n            exit_code = 2;\n        return 1;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8307531371434962, -5.4591133371434966, -5.4591133371434966, -5.8307531371434962, -5.8307531371434962, -4.5587641371434966, -4.5587641371434966]
								}, {
									"case":	2,
									"scores":	[-5.8334388971434965, -5.461799097143496, -5.461799097143496, -5.8334388971434965, -5.8334388971434965, -4.561449897143496, -4.561449897143496]
								}]
						}]
				}, {
					"line":	1648,
					"switches":	[{
							"switch":	27,
							"types":	[[], [], [], [], [245, 246, 247], [], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], []],
							"begin_line":	1649,
							"begin_column":	3,
							"end_line":	1649,
							"end_column":	3,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "foreground = (0)", "foreground = (1)", "foreground = (2)", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr && !(1 << 5)--", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "list = (0)", "list = (1)", "list = (2)", "method = (0)", "method = (1)", "method = (2)", "method = get_method(ifd && !(1 << 5))", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = decompress && !(1 << 5)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = decompress && !(1 << 5)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "part_nb && !(1 << 5)++", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "quiet = (0)", "quiet = (1)", "quiet = (2)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "xunlink(ofname && !(1 << 5))", "z_len = (0)", "z_len = (1)", "z_len = (2)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1649\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return 0;\n", "if (__is_neg(\"\", \"L1649\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return 1;\n", "if (__is_neg(\"\", \"L1649\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	2,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	3,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	4,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	5,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	6,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	7,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	8,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	9,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	10,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	11,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	12,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	13,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	14,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	15,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	16,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	17,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	18,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	19,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	20,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	21,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	22,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	23,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	24,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	25,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	26,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	27,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	28,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	29,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	30,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	31,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	32,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	33,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	34,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	35,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	36,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	37,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	38,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	39,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	40,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	41,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	42,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	43,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	44,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	45,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	46,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	47,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	48,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	49,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	50,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	51,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	52,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	53,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	54,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	55,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	56,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	57,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	58,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	59,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	60,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	61,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	62,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	63,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	64,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	65,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	66,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	67,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	68,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	69,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	70,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	71,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	72,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	73,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	74,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	75,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	76,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	77,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	78,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	79,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	80,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	81,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	82,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	83,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	84,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	85,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	86,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	87,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	88,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	89,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	90,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	91,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	92,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	93,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	94,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	95,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	96,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	97,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	98,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	99,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	100,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	101,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	102,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	103,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	104,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	105,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	106,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	107,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	108,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	109,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	110,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	111,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	112,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	113,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	114,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	115,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	116,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	117,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	118,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	119,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	120,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	121,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	122,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	123,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	124,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	125,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	126,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	127,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	128,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	129,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	130,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	131,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	132,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	133,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	134,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	135,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	136,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	137,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	138,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	139,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	140,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	141,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	142,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	143,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	144,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	145,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	146,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	147,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	148,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	149,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	150,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	151,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	152,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	153,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	154,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	155,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	156,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	157,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	158,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	159,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	160,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	161,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	162,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	163,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	164,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	165,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	166,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	167,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	168,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	169,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	170,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	171,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	172,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	173,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	174,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	175,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	176,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	177,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	178,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	179,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	180,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	181,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	182,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	183,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	184,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	185,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	186,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	187,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	188,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	189,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	190,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	191,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	192,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	193,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	194,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	195,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	196,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	197,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	198,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	199,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	200,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	201,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	202,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	203,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	204,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	205,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	206,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	207,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	208,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	209,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	210,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	211,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	212,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	213,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	214,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	215,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	216,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	217,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	218,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	219,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	220,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	221,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	222,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	223,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	224,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	225,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	226,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	227,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	228,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	229,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	230,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	231,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	232,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	233,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	234,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	235,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	236,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	237,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	238,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	239,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	240,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	241,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	242,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	243,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	244,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	245,
									"scores":	[-6.6687403653807049, -6.6687403653807049, -8.2355856773807048, -8.2355856773807048, -8.6663629773807056, -8.6663629773807056, -8.2355856773807048]
								}, {
									"case":	246,
									"scores":	[-8.687186365380704, -8.687186365380704, -10.254031677380706, -10.254031677380706, -10.684808977380705, -10.684808977380705, -10.254031677380706]
								}, {
									"case":	247,
									"scores":	[-8.687186365380704, -8.687186365380704, -10.254031677380706, -10.254031677380706, -10.684808977380705, -10.684808977380705, -10.254031677380706]
								}]
						}, {
							"switch":	28,
							"types":	[[21], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], []],
							"begin_line":	1649,
							"begin_column":	5,
							"end_line":	1652,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L1649\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    progerror(ofname);\n    return 1;\n}\n", "if ((xunlink(ofname)) || __is_neg(\"\", \"L1649\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    progerror(ofname);\n    return 1;\n}\n", "if (ctermid(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (cuserid(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (get_suffix(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (getwd(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (gzip_base_name(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (make_simple_name(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (mkdtemp(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (mkstemp(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (mkstemp64(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (mktemp(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (putenv(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (setstate(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (shorten_name(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (strfry(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (strlwr(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (tmpnam(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (tmpnam_r(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if (treat_file(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "if ((xunlink(ofname)) && !__is_neg(\"\", \"L1649\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force))) {\n    progerror(ofname);\n    return 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6340300244281458, -4.6340300244281458, -4.2542747314281462, -4.2542747314281462, -4.6430710804281459, -4.6430710804281459, -4.2542747314281462]
								}, {
									"case":	2,
									"scores":	[-4.6340300244281458, -4.6340300244281458, -4.2542747314281462, -4.2542747314281462, -4.6430710804281459, -4.6430710804281459, -4.2542747314281462]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-4.6340300244281458, -4.6340300244281458, -4.2542747314281462, -4.2542747314281462, -4.6430710804281459, -4.6430710804281459, -4.2542747314281462]
								}]
						}, {
							"switch":	29,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1649,
							"begin_column":	5,
							"end_line":	1652,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L1649\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    if (xunlink(ofname)) {\n        progerror(ofname);\n        return 1;\n    }\n", "if (!__is_neg(\"\", \"L1649\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)) && (xunlink(ofname))) {\n    progerror(ofname);\n    return 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9388741203807047, -5.9388741203807047, -5.5591188273807042, -5.5591188273807042, -5.9479151763807048, -5.9479151763807048, -5.5591188273807042]
								}, {
									"case":	2,
									"scores":	[-5.7156940063807049, -5.7156940063807049, -5.3359387133807044, -5.3359387133807044, -5.724735062380705, -5.724735062380705, -5.3359387133807044]
								}]
						}]
				}, {
					"line":	1652,
					"switches":	[{
							"switch":	30,
							"types":	[[], [], [], [], [245, 246, 247], [], [], [], [], [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], []],
							"begin_line":	1653,
							"begin_column":	3,
							"end_line":	1653,
							"end_column":	3,
							"patch_codes":	["if (!decompress || (*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (!decompress || last_member)\n    return 1;\n", "if (!no_time || list)\n    time_stamp = get_stat_mtime(&istat);\n", "if (!recursive && (list || test))\n    return 0;\n", "if (!save_orig_name)\n    save_orig_name = !no_name;\n", "if (!to_stdout)\n    remove_output_file();\n", "if ((*__errno_location()) != 2) {\n    progerror(ifname);\n    return -1;\n}\n", "if (check_ofname() != 0) {\n    close(ifd);\n    return 1;\n}\n", "if (close(ifd) != 0)\n    read_error();\n", "if (close(ofd) != 0)\n    write_error();\n", "if (create_outfile() != 0)\n    return;\n", "if (do_lzw && !decompress)\n    work = lzw;\n", "if (exit_code == 0)\n    exit_code = 2;\n", "if (force <= 1)\n    return -1;\n", "if (ifd < 0)\n    return;\n", "if (insize != 32768 || fill_inbuf(1) == (-1))\n    return 1;\n", "if (list) {\n    do_list(ifd, method);\n    return;\n}\n", "if (make_ofname() != 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0)\n    return;\n", "if (method < 0) {\n    close(ifd);\n    return;\n}\n", "if (method < 0) {\n    do_exit(exit_code);\n}\n", "if (method >= 0)\n    return method;\n", "if (no_name < 0)\n    no_name = decompress;\n", "if (no_time < 0)\n    no_time = decompress;\n", "if (part_nb == 1) {\n    header_bytes = inptr + 2 * sizeof(long);\n}\n", "if (total_in <= 0 || total_out <= 0)\n    return;\n", "if (total_in >= 0) {\n    total_in += bytes_in;\n}\n", "if (total_out >= 0) {\n    total_out += bytes_out;\n}\n", "if (verbose) {\n    __printf__(\"                            \");\n}\n", "if (verbose) {\n    __printf__(\"method  crc     date  time  \");\n}\n", "if (xunlink(ofname)) {\n    progerror(ofname);\n    return 1;\n}\n", "__printf__(\" %s\\n\", ofname && !(1 << 5))", "__printf__(\"%s %s\\n\", program_name && !(1 << 5), \"1.0\")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name && !(1 << 5))", "bytes_in = (0)", "bytes_in = (1)", "bytes_in = (2)", "bytes_in = ifile_size && !(1 << 5)", "bytes_out && !(1 << 5)++", "bytes_out = (0)", "bytes_out = (1)", "bytes_out = (2)", "close(ifd && !(1 << 5))", "copy_stat(&istat && !(1 << 5))", "do_exit(exit_code && !(1 << 5))", "do_list(ifd && !(1 << 5), method)", "do_list(ifd, method && !(1 << 5))", "exit_code = (0)", "exit_code = (1)", "exit_code = (2)", "exiting_signal = (0)", "exiting_signal = (1)", "exiting_signal = (2)", "exiting_signal = quiet && !(1 << 5) ? 13 : 0", "foreground = (0)", "foreground = (1)", "foreground = (2)", "free(args && !(1 << 5))", "free(env && !(1 << 5))", "header_bytes = (0)", "header_bytes = (1)", "header_bytes = (2)", "header_bytes = inptr && !(1 << 5) + 2 * sizeof(long)", "ifd = (0)", "ifd = (1)", "ifd = (2)", "ifile_size = ((((istat && !(1 << 5).st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat && !(1 << 5).st_size : -1", "ifile_size = (0)", "ifile_size = (1)", "ifile_size = (2)", "inptr && !(1 << 5)--", "inptr = (0)", "inptr = (1)", "inptr = (2)", "last_member = (0)", "last_member = (1)", "last_member = (2)", "list = (0)", "list = (1)", "list = (2)", "method = (0)", "method = (1)", "method = (2)", "method = get_method(ifd && !(1 << 5))", "no_name = (0)", "no_name = (1)", "no_name = (2)", "no_name = decompress && !(1 << 5)", "no_time = (0)", "no_time = (1)", "no_time = (2)", "no_time = decompress && !(1 << 5)", "ofd = (0)", "ofd = (1)", "ofd = (2)", "part_nb && !(1 << 5)++", "part_nb = (0)", "part_nb = (1)", "part_nb = (2)", "perror(ifname && !(1 << 5))", "perror(ofname && !(1 << 5))", "progerror(ifname && !(1 << 5))", "progerror(ofname && !(1 << 5))", "quiet = (0)", "quiet = (1)", "quiet = (2)", "remove_ofname_fd = (0)", "remove_ofname_fd = (1)", "remove_ofname_fd = (2)", "save_orig_name = !no_name && !(1 << 5)", "save_orig_name = (0)", "save_orig_name = (1)", "save_orig_name = (2)", "sigemptyset(&caught_signals && !(1 << 5))", "strcat(ifname && !(1 << 5), z_suffix)", "strcat(ifname, z_suffix && !(1 << 5))", "strcat(ofname && !(1 << 5), z_suffix)", "strcat(ofname, z_suffix && !(1 << 5))", "strcpy(ifname && !(1 << 5), \"stdin\")", "strcpy(ofname && !(1 << 5), \"stdout\")", "strcpy(ofname && !(1 << 5), ifname)", "strcpy(ofname, ifname && !(1 << 5))", "time_stamp = get_stat_mtime(&istat && !(1 << 5))", "time_stamp.tv_nsec = (0)", "time_stamp.tv_nsec = (1)", "time_stamp.tv_nsec = (2)", "time_stamp.tv_sec = (0)", "time_stamp.tv_sec = (1)", "time_stamp.tv_sec = (2)", "to_stdout = (0)", "to_stdout = (1)", "to_stdout = (2)", "total_in = (0)", "total_in = (1)", "total_in = (2)", "total_out = (0)", "total_out = (1)", "total_out = (2)", "verbose = (0)", "verbose = (1)", "verbose = (2)", "xunlink(ofname && !(1 << 5))", "z_len = (0)", "z_len = (1)", "z_len = (2)", "z_len = strlen(z_suffix && !(1 << 5))", "(void)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "__printf__(\"                            \")", "__printf__(\" \")", "__printf__(\" %s\\n\", ofname)", "__printf__(\" (totals)\\n\")", "__printf__(\"%s %s\\n\", program_name, \"1.0\")", "__printf__(\"??? ?? ??:?? \")", "__printf__(\"Usage: %s [OPTION]... [FILE]...\\n\", program_name)", "__printf__(\"Written by Jean-loup Gailly.\\n\")", "__printf__(\"\\n\")", "__printf__(\"method  crc     date  time  \")", "_exit(2)", "args = ((void *)0)", "atexit(close_stdin)", "bytes_in = 0", "bytes_in = ifile_size", "bytes_out = -1L", "bytes_out = 0", "bytes_out++", "clear_bufs()", "close(ifd)", "copy_stat(&istat)", "do_exit(0)", "do_exit(1)", "do_exit(exit_code)", "do_list(-1, -1)", "do_list(ifd, method)", "env = ((void *)0)", "env = add_envopt(&argc, &argv, \"GZIP\")", "exit_code = 1", "exit_code = 2", "exiting_signal = quiet ? 13 : 0", "foreground = 1", "free(args)", "free(env)", "gzip_error(\"can't recover suffix\\n\")", "gzip_error(\"corrupted input -- file name too large\")", "gzip_error(\"internal error in shorten_name\")", "gzip_error(\"name too short\")", "header_bytes = 0", "header_bytes = inptr + 2 * sizeof(long)", "ifile_size = ((((istat.st_mode)) & 61440) == (32768)) ? istat.st_size : -1", "inptr = 0", "inptr--", "install_signal_handlers()", "last_member = 0", "last_member = 1", "license()", "list = 0", "method = (int)(inptr < insize ? inbuf[inptr++] : fill_inbuf(0))", "method = -1", "method = 0", "method = 1", "method = 2", "method = 3", "method = get_method(ifd)", "no_name = decompress", "no_time = decompress", "part_nb = 0", "part_nb++", "perror(ifname)", "perror(ofname)", "progerror(\"standard input\")", "progerror(ifname)", "progerror(ofname)", "quiet = 0", "read_error()", "remove_ofname_fd = -1", "remove_output_file()", "save_orig_name = !no_name", "save_orig_name = 0", "save_orig_name = 1", "sigemptyset(&caught_signals)", "strcat(ifname, z_suffix)", "strcat(ofname, z_suffix)", "strcpy(ifname, \"stdin\")", "strcpy(ofname, \"stdout\")", "strcpy(ofname, ifname)", "time_stamp = get_stat_mtime(&istat)", "time_stamp.tv_nsec = -1", "time_stamp.tv_nsec = 0", "to_stdout = 1", "total_in = -1L", "total_out = -1L", "treat_stdin()", "try_help()", "verbose = 0", "work = copy", "work = lzw", "work = unlzh", "work = unlzw", "work = unpack", "work = unzip", "write_error()", "xunlink(ofname)", "z_len = strlen(z_suffix)", "z_suffix = \".gz\"", "if (__is_neg(\"\", \"L1653\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return 0;\n", "if (__is_neg(\"\", \"L1653\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return 1;\n", "if (__is_neg(\"\", \"L1653\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.952428420063185]
								}, {
									"case":	2,
									"scores":	[-3.952428420063185]
								}, {
									"case":	3,
									"scores":	[-3.952428420063185]
								}, {
									"case":	4,
									"scores":	[-3.952428420063185]
								}, {
									"case":	5,
									"scores":	[-3.952428420063185]
								}, {
									"case":	6,
									"scores":	[-3.952428420063185]
								}, {
									"case":	7,
									"scores":	[-3.952428420063185]
								}, {
									"case":	8,
									"scores":	[-3.952428420063185]
								}, {
									"case":	9,
									"scores":	[-3.952428420063185]
								}, {
									"case":	10,
									"scores":	[-3.952428420063185]
								}, {
									"case":	11,
									"scores":	[-3.952428420063185]
								}, {
									"case":	12,
									"scores":	[-3.952428420063185]
								}, {
									"case":	13,
									"scores":	[-3.952428420063185]
								}, {
									"case":	14,
									"scores":	[-3.952428420063185]
								}, {
									"case":	15,
									"scores":	[-3.952428420063185]
								}, {
									"case":	16,
									"scores":	[-3.952428420063185]
								}, {
									"case":	17,
									"scores":	[-3.952428420063185]
								}, {
									"case":	18,
									"scores":	[-3.952428420063185]
								}, {
									"case":	19,
									"scores":	[-3.952428420063185]
								}, {
									"case":	20,
									"scores":	[-3.952428420063185]
								}, {
									"case":	21,
									"scores":	[-3.952428420063185]
								}, {
									"case":	22,
									"scores":	[-3.952428420063185]
								}, {
									"case":	23,
									"scores":	[-3.952428420063185]
								}, {
									"case":	24,
									"scores":	[-3.952428420063185]
								}, {
									"case":	25,
									"scores":	[-3.952428420063185]
								}, {
									"case":	26,
									"scores":	[-3.952428420063185]
								}, {
									"case":	27,
									"scores":	[-3.952428420063185]
								}, {
									"case":	28,
									"scores":	[-3.952428420063185]
								}, {
									"case":	29,
									"scores":	[-3.952428420063185]
								}, {
									"case":	30,
									"scores":	[-3.952428420063185]
								}, {
									"case":	31,
									"scores":	[-3.952428420063185]
								}, {
									"case":	32,
									"scores":	[-3.952428420063185]
								}, {
									"case":	33,
									"scores":	[-3.952428420063185]
								}, {
									"case":	34,
									"scores":	[-3.952428420063185]
								}, {
									"case":	35,
									"scores":	[-3.952428420063185]
								}, {
									"case":	36,
									"scores":	[-3.952428420063185]
								}, {
									"case":	37,
									"scores":	[-3.952428420063185]
								}, {
									"case":	38,
									"scores":	[-3.952428420063185]
								}, {
									"case":	39,
									"scores":	[-3.952428420063185]
								}, {
									"case":	40,
									"scores":	[-3.952428420063185]
								}, {
									"case":	41,
									"scores":	[-3.952428420063185]
								}, {
									"case":	42,
									"scores":	[-3.952428420063185]
								}, {
									"case":	43,
									"scores":	[-3.952428420063185]
								}, {
									"case":	44,
									"scores":	[-3.952428420063185]
								}, {
									"case":	45,
									"scores":	[-3.952428420063185]
								}, {
									"case":	46,
									"scores":	[-3.952428420063185]
								}, {
									"case":	47,
									"scores":	[-3.952428420063185]
								}, {
									"case":	48,
									"scores":	[-3.952428420063185]
								}, {
									"case":	49,
									"scores":	[-3.952428420063185]
								}, {
									"case":	50,
									"scores":	[-3.952428420063185]
								}, {
									"case":	51,
									"scores":	[-3.952428420063185]
								}, {
									"case":	52,
									"scores":	[-3.952428420063185]
								}, {
									"case":	53,
									"scores":	[-3.952428420063185]
								}, {
									"case":	54,
									"scores":	[-3.952428420063185]
								}, {
									"case":	55,
									"scores":	[-3.952428420063185]
								}, {
									"case":	56,
									"scores":	[-3.952428420063185]
								}, {
									"case":	57,
									"scores":	[-3.952428420063185]
								}, {
									"case":	58,
									"scores":	[-3.952428420063185]
								}, {
									"case":	59,
									"scores":	[-3.952428420063185]
								}, {
									"case":	60,
									"scores":	[-3.952428420063185]
								}, {
									"case":	61,
									"scores":	[-3.952428420063185]
								}, {
									"case":	62,
									"scores":	[-3.952428420063185]
								}, {
									"case":	63,
									"scores":	[-3.952428420063185]
								}, {
									"case":	64,
									"scores":	[-3.952428420063185]
								}, {
									"case":	65,
									"scores":	[-3.952428420063185]
								}, {
									"case":	66,
									"scores":	[-3.952428420063185]
								}, {
									"case":	67,
									"scores":	[-3.952428420063185]
								}, {
									"case":	68,
									"scores":	[-3.952428420063185]
								}, {
									"case":	69,
									"scores":	[-3.952428420063185]
								}, {
									"case":	70,
									"scores":	[-3.952428420063185]
								}, {
									"case":	71,
									"scores":	[-3.952428420063185]
								}, {
									"case":	72,
									"scores":	[-3.952428420063185]
								}, {
									"case":	73,
									"scores":	[-3.952428420063185]
								}, {
									"case":	74,
									"scores":	[-3.952428420063185]
								}, {
									"case":	75,
									"scores":	[-3.952428420063185]
								}, {
									"case":	76,
									"scores":	[-3.952428420063185]
								}, {
									"case":	77,
									"scores":	[-3.952428420063185]
								}, {
									"case":	78,
									"scores":	[-3.952428420063185]
								}, {
									"case":	79,
									"scores":	[-3.952428420063185]
								}, {
									"case":	80,
									"scores":	[-3.952428420063185]
								}, {
									"case":	81,
									"scores":	[-3.952428420063185]
								}, {
									"case":	82,
									"scores":	[-3.952428420063185]
								}, {
									"case":	83,
									"scores":	[-3.952428420063185]
								}, {
									"case":	84,
									"scores":	[-3.952428420063185]
								}, {
									"case":	85,
									"scores":	[-3.952428420063185]
								}, {
									"case":	86,
									"scores":	[-3.952428420063185]
								}, {
									"case":	87,
									"scores":	[-3.952428420063185]
								}, {
									"case":	88,
									"scores":	[-3.952428420063185]
								}, {
									"case":	89,
									"scores":	[-3.952428420063185]
								}, {
									"case":	90,
									"scores":	[-3.952428420063185]
								}, {
									"case":	91,
									"scores":	[-3.952428420063185]
								}, {
									"case":	92,
									"scores":	[-3.952428420063185]
								}, {
									"case":	93,
									"scores":	[-3.952428420063185]
								}, {
									"case":	94,
									"scores":	[-3.952428420063185]
								}, {
									"case":	95,
									"scores":	[-3.952428420063185]
								}, {
									"case":	96,
									"scores":	[-3.952428420063185]
								}, {
									"case":	97,
									"scores":	[-3.952428420063185]
								}, {
									"case":	98,
									"scores":	[-3.952428420063185]
								}, {
									"case":	99,
									"scores":	[-3.952428420063185]
								}, {
									"case":	100,
									"scores":	[-3.952428420063185]
								}, {
									"case":	101,
									"scores":	[-3.952428420063185]
								}, {
									"case":	102,
									"scores":	[-3.952428420063185]
								}, {
									"case":	103,
									"scores":	[-3.952428420063185]
								}, {
									"case":	104,
									"scores":	[-3.952428420063185]
								}, {
									"case":	105,
									"scores":	[-3.952428420063185]
								}, {
									"case":	106,
									"scores":	[-3.952428420063185]
								}, {
									"case":	107,
									"scores":	[-3.952428420063185]
								}, {
									"case":	108,
									"scores":	[-3.952428420063185]
								}, {
									"case":	109,
									"scores":	[-3.952428420063185]
								}, {
									"case":	110,
									"scores":	[-3.952428420063185]
								}, {
									"case":	111,
									"scores":	[-3.952428420063185]
								}, {
									"case":	112,
									"scores":	[-3.952428420063185]
								}, {
									"case":	113,
									"scores":	[-3.952428420063185]
								}, {
									"case":	114,
									"scores":	[-3.952428420063185]
								}, {
									"case":	115,
									"scores":	[-3.952428420063185]
								}, {
									"case":	116,
									"scores":	[-3.952428420063185]
								}, {
									"case":	117,
									"scores":	[-3.952428420063185]
								}, {
									"case":	118,
									"scores":	[-3.952428420063185]
								}, {
									"case":	119,
									"scores":	[-3.952428420063185]
								}, {
									"case":	120,
									"scores":	[-3.952428420063185]
								}, {
									"case":	121,
									"scores":	[-3.952428420063185]
								}, {
									"case":	122,
									"scores":	[-3.952428420063185]
								}, {
									"case":	123,
									"scores":	[-3.952428420063185]
								}, {
									"case":	124,
									"scores":	[-3.952428420063185]
								}, {
									"case":	125,
									"scores":	[-3.952428420063185]
								}, {
									"case":	126,
									"scores":	[-3.952428420063185]
								}, {
									"case":	127,
									"scores":	[-3.952428420063185]
								}, {
									"case":	128,
									"scores":	[-3.952428420063185]
								}, {
									"case":	129,
									"scores":	[-3.952428420063185]
								}, {
									"case":	130,
									"scores":	[-3.952428420063185]
								}, {
									"case":	131,
									"scores":	[-3.952428420063185]
								}, {
									"case":	132,
									"scores":	[-3.952428420063185]
								}, {
									"case":	133,
									"scores":	[-3.952428420063185]
								}, {
									"case":	134,
									"scores":	[-3.952428420063185]
								}, {
									"case":	135,
									"scores":	[-3.952428420063185]
								}, {
									"case":	136,
									"scores":	[-3.952428420063185]
								}, {
									"case":	137,
									"scores":	[-3.952428420063185]
								}, {
									"case":	138,
									"scores":	[-3.952428420063185]
								}, {
									"case":	139,
									"scores":	[-3.952428420063185]
								}, {
									"case":	140,
									"scores":	[-3.952428420063185]
								}, {
									"case":	141,
									"scores":	[-3.952428420063185]
								}, {
									"case":	142,
									"scores":	[-3.952428420063185]
								}, {
									"case":	143,
									"scores":	[-3.952428420063185]
								}, {
									"case":	144,
									"scores":	[-3.952428420063185]
								}, {
									"case":	145,
									"scores":	[-3.952428420063185]
								}, {
									"case":	146,
									"scores":	[-3.952428420063185]
								}, {
									"case":	147,
									"scores":	[-3.952428420063185]
								}, {
									"case":	148,
									"scores":	[-3.952428420063185]
								}, {
									"case":	149,
									"scores":	[-3.952428420063185]
								}, {
									"case":	150,
									"scores":	[-3.952428420063185]
								}, {
									"case":	151,
									"scores":	[-3.952428420063185]
								}, {
									"case":	152,
									"scores":	[-3.952428420063185]
								}, {
									"case":	153,
									"scores":	[-3.952428420063185]
								}, {
									"case":	154,
									"scores":	[-3.952428420063185]
								}, {
									"case":	155,
									"scores":	[-3.952428420063185]
								}, {
									"case":	156,
									"scores":	[-3.952428420063185]
								}, {
									"case":	157,
									"scores":	[-3.952428420063185]
								}, {
									"case":	158,
									"scores":	[-3.952428420063185]
								}, {
									"case":	159,
									"scores":	[-3.952428420063185]
								}, {
									"case":	160,
									"scores":	[-3.952428420063185]
								}, {
									"case":	161,
									"scores":	[-3.952428420063185]
								}, {
									"case":	162,
									"scores":	[-3.952428420063185]
								}, {
									"case":	163,
									"scores":	[-3.952428420063185]
								}, {
									"case":	164,
									"scores":	[-3.952428420063185]
								}, {
									"case":	165,
									"scores":	[-3.952428420063185]
								}, {
									"case":	166,
									"scores":	[-3.952428420063185]
								}, {
									"case":	167,
									"scores":	[-3.952428420063185]
								}, {
									"case":	168,
									"scores":	[-3.952428420063185]
								}, {
									"case":	169,
									"scores":	[-3.952428420063185]
								}, {
									"case":	170,
									"scores":	[-3.952428420063185]
								}, {
									"case":	171,
									"scores":	[-3.952428420063185]
								}, {
									"case":	172,
									"scores":	[-3.952428420063185]
								}, {
									"case":	173,
									"scores":	[-3.952428420063185]
								}, {
									"case":	174,
									"scores":	[-3.952428420063185]
								}, {
									"case":	175,
									"scores":	[-3.952428420063185]
								}, {
									"case":	176,
									"scores":	[-3.952428420063185]
								}, {
									"case":	177,
									"scores":	[-3.952428420063185]
								}, {
									"case":	178,
									"scores":	[-3.952428420063185]
								}, {
									"case":	179,
									"scores":	[-3.952428420063185]
								}, {
									"case":	180,
									"scores":	[-3.952428420063185]
								}, {
									"case":	181,
									"scores":	[-3.952428420063185]
								}, {
									"case":	182,
									"scores":	[-3.952428420063185]
								}, {
									"case":	183,
									"scores":	[-3.952428420063185]
								}, {
									"case":	184,
									"scores":	[-3.952428420063185]
								}, {
									"case":	185,
									"scores":	[-3.952428420063185]
								}, {
									"case":	186,
									"scores":	[-3.952428420063185]
								}, {
									"case":	187,
									"scores":	[-3.952428420063185]
								}, {
									"case":	188,
									"scores":	[-3.952428420063185]
								}, {
									"case":	189,
									"scores":	[-3.952428420063185]
								}, {
									"case":	190,
									"scores":	[-3.952428420063185]
								}, {
									"case":	191,
									"scores":	[-3.952428420063185]
								}, {
									"case":	192,
									"scores":	[-3.952428420063185]
								}, {
									"case":	193,
									"scores":	[-3.952428420063185]
								}, {
									"case":	194,
									"scores":	[-3.952428420063185]
								}, {
									"case":	195,
									"scores":	[-3.952428420063185]
								}, {
									"case":	196,
									"scores":	[-3.952428420063185]
								}, {
									"case":	197,
									"scores":	[-3.952428420063185]
								}, {
									"case":	198,
									"scores":	[-3.952428420063185]
								}, {
									"case":	199,
									"scores":	[-3.952428420063185]
								}, {
									"case":	200,
									"scores":	[-3.952428420063185]
								}, {
									"case":	201,
									"scores":	[-3.952428420063185]
								}, {
									"case":	202,
									"scores":	[-3.952428420063185]
								}, {
									"case":	203,
									"scores":	[-3.952428420063185]
								}, {
									"case":	204,
									"scores":	[-3.952428420063185]
								}, {
									"case":	205,
									"scores":	[-3.952428420063185]
								}, {
									"case":	206,
									"scores":	[-3.952428420063185]
								}, {
									"case":	207,
									"scores":	[-3.952428420063185]
								}, {
									"case":	208,
									"scores":	[-3.952428420063185]
								}, {
									"case":	209,
									"scores":	[-3.952428420063185]
								}, {
									"case":	210,
									"scores":	[-3.952428420063185]
								}, {
									"case":	211,
									"scores":	[-3.952428420063185]
								}, {
									"case":	212,
									"scores":	[-3.952428420063185]
								}, {
									"case":	213,
									"scores":	[-3.952428420063185]
								}, {
									"case":	214,
									"scores":	[-3.952428420063185]
								}, {
									"case":	215,
									"scores":	[-3.952428420063185]
								}, {
									"case":	216,
									"scores":	[-3.952428420063185]
								}, {
									"case":	217,
									"scores":	[-3.952428420063185]
								}, {
									"case":	218,
									"scores":	[-3.952428420063185]
								}, {
									"case":	219,
									"scores":	[-3.952428420063185]
								}, {
									"case":	220,
									"scores":	[-3.952428420063185]
								}, {
									"case":	221,
									"scores":	[-3.952428420063185]
								}, {
									"case":	222,
									"scores":	[-3.952428420063185]
								}, {
									"case":	223,
									"scores":	[-3.952428420063185]
								}, {
									"case":	224,
									"scores":	[-3.952428420063185]
								}, {
									"case":	225,
									"scores":	[-3.952428420063185]
								}, {
									"case":	226,
									"scores":	[-3.952428420063185]
								}, {
									"case":	227,
									"scores":	[-3.952428420063185]
								}, {
									"case":	228,
									"scores":	[-3.952428420063185]
								}, {
									"case":	229,
									"scores":	[-3.952428420063185]
								}, {
									"case":	230,
									"scores":	[-3.952428420063185]
								}, {
									"case":	231,
									"scores":	[-3.952428420063185]
								}, {
									"case":	232,
									"scores":	[-3.952428420063185]
								}, {
									"case":	233,
									"scores":	[-3.952428420063185]
								}, {
									"case":	234,
									"scores":	[-3.952428420063185]
								}, {
									"case":	235,
									"scores":	[-3.952428420063185]
								}, {
									"case":	236,
									"scores":	[-3.952428420063185]
								}, {
									"case":	237,
									"scores":	[-3.952428420063185]
								}, {
									"case":	238,
									"scores":	[-3.952428420063185]
								}, {
									"case":	239,
									"scores":	[-3.952428420063185]
								}, {
									"case":	240,
									"scores":	[-3.952428420063185]
								}, {
									"case":	241,
									"scores":	[-3.952428420063185]
								}, {
									"case":	242,
									"scores":	[-3.952428420063185]
								}, {
									"case":	243,
									"scores":	[-3.952428420063185]
								}, {
									"case":	244,
									"scores":	[-3.952428420063185]
								}, {
									"case":	245,
									"scores":	[-5.2408726350631856, -5.2408726350631856, -6.8077179470631854, -6.8077179470631854, -7.2384952470631845, -7.2384952470631845, -6.8077179470631854]
								}, {
									"case":	246,
									"scores":	[-7.2593186350631846, -7.2593186350631846, -8.8261639470631845, -8.8261639470631845, -9.2569412470631853, -9.2569412470631853, -8.8261639470631845]
								}, {
									"case":	247,
									"scores":	[-7.2593186350631846, -7.2593186350631846, -8.8261639470631845, -8.8261639470631845, -9.2569412470631853, -9.2569412470631853, -8.8261639470631845]
								}]
						}, {
							"switch":	31,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1653,
							"begin_column":	5,
							"end_line":	1653,
							"end_column":	12,
							"patch_codes":	["if (!__is_neg(\"\", \"L1653\", 7, &(exit_code), sizeof (exit_code), &(exit_code), sizeof (exit_code), &(presume_input_tty), sizeof (presume_input_tty), &(foreground), sizeof (foreground), &(program_name), sizeof (program_name), &(program_name), sizeof (program_name), &(force), sizeof (force)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4207874130631852, -5.4207874130631852, -5.0410321200631856, -5.0410321200631856, -5.4298284690631853, -5.4298284690631853, -5.0410321200631856]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	403,
			"size":	36
		}, {
			"switch":	0,
			"case":	404,
			"size":	36
		}, {
			"switch":	0,
			"case":	405,
			"size":	36
		}, {
			"switch":	0,
			"case":	406,
			"size":	36
		}, {
			"switch":	0,
			"case":	407,
			"size":	36
		}, {
			"switch":	0,
			"case":	408,
			"size":	36
		}, {
			"switch":	0,
			"case":	409,
			"size":	36
		}, {
			"switch":	1,
			"case":	403,
			"size":	36
		}, {
			"switch":	1,
			"case":	404,
			"size":	36
		}, {
			"switch":	1,
			"case":	405,
			"size":	36
		}, {
			"switch":	1,
			"case":	406,
			"size":	36
		}, {
			"switch":	1,
			"case":	407,
			"size":	36
		}, {
			"switch":	1,
			"case":	408,
			"size":	36
		}, {
			"switch":	1,
			"case":	409,
			"size":	36
		}, {
			"switch":	2,
			"case":	1,
			"size":	36
		}, {
			"switch":	3,
			"case":	403,
			"size":	36
		}, {
			"switch":	3,
			"case":	404,
			"size":	36
		}, {
			"switch":	3,
			"case":	405,
			"size":	36
		}, {
			"switch":	3,
			"case":	406,
			"size":	36
		}, {
			"switch":	3,
			"case":	407,
			"size":	36
		}, {
			"switch":	3,
			"case":	408,
			"size":	36
		}, {
			"switch":	3,
			"case":	409,
			"size":	36
		}, {
			"switch":	4,
			"case":	403,
			"size":	36
		}, {
			"switch":	4,
			"case":	404,
			"size":	36
		}, {
			"switch":	4,
			"case":	405,
			"size":	36
		}, {
			"switch":	4,
			"case":	406,
			"size":	36
		}, {
			"switch":	4,
			"case":	407,
			"size":	36
		}, {
			"switch":	4,
			"case":	408,
			"size":	36
		}, {
			"switch":	5,
			"case":	1,
			"size":	36
		}, {
			"switch":	5,
			"case":	2,
			"size":	36
		}, {
			"switch":	5,
			"case":	5,
			"size":	36
		}, {
			"switch":	6,
			"case":	1,
			"size":	36
		}, {
			"switch":	6,
			"case":	2,
			"size":	36
		}, {
			"switch":	7,
			"case":	542,
			"size":	16
		}, {
			"switch":	7,
			"case":	543,
			"size":	16
		}, {
			"switch":	7,
			"case":	544,
			"size":	16
		}, {
			"switch":	7,
			"case":	545,
			"size":	16
		}, {
			"switch":	7,
			"case":	546,
			"size":	16
		}, {
			"switch":	7,
			"case":	547,
			"size":	16
		}, {
			"switch":	7,
			"case":	548,
			"size":	16
		}, {
			"switch":	7,
			"case":	549,
			"size":	16
		}, {
			"switch":	7,
			"case":	550,
			"size":	16
		}, {
			"switch":	7,
			"case":	551,
			"size":	16
		}, {
			"switch":	7,
			"case":	552,
			"size":	16
		}, {
			"switch":	7,
			"case":	553,
			"size":	16
		}, {
			"switch":	8,
			"case":	542,
			"size":	16
		}, {
			"switch":	8,
			"case":	543,
			"size":	16
		}, {
			"switch":	8,
			"case":	544,
			"size":	16
		}, {
			"switch":	8,
			"case":	545,
			"size":	16
		}, {
			"switch":	8,
			"case":	546,
			"size":	16
		}, {
			"switch":	8,
			"case":	547,
			"size":	16
		}, {
			"switch":	8,
			"case":	548,
			"size":	16
		}, {
			"switch":	8,
			"case":	549,
			"size":	16
		}, {
			"switch":	8,
			"case":	550,
			"size":	16
		}, {
			"switch":	8,
			"case":	551,
			"size":	16
		}, {
			"switch":	8,
			"case":	552,
			"size":	16
		}, {
			"switch":	8,
			"case":	553,
			"size":	16
		}, {
			"switch":	9,
			"case":	1,
			"size":	16
		}, {
			"switch":	10,
			"case":	245,
			"size":	7
		}, {
			"switch":	10,
			"case":	246,
			"size":	7
		}, {
			"switch":	10,
			"case":	247,
			"size":	7
		}, {
			"switch":	11,
			"case":	1,
			"size":	7
		}, {
			"switch":	11,
			"case":	2,
			"size":	7
		}, {
			"switch":	11,
			"case":	3,
			"size":	7
		}, {
			"switch":	12,
			"case":	266,
			"size":	8
		}, {
			"switch":	12,
			"case":	267,
			"size":	8
		}, {
			"switch":	12,
			"case":	268,
			"size":	8
		}, {
			"switch":	13,
			"case":	1,
			"size":	8
		}, {
			"switch":	14,
			"case":	266,
			"size":	8
		}, {
			"switch":	14,
			"case":	267,
			"size":	8
		}, {
			"switch":	14,
			"case":	268,
			"size":	8
		}, {
			"switch":	15,
			"case":	1,
			"size":	8
		}, {
			"switch":	15,
			"case":	2,
			"size":	8
		}, {
			"switch":	15,
			"case":	3,
			"size":	8
		}, {
			"switch":	15,
			"case":	78,
			"size":	8
		}, {
			"switch":	16,
			"case":	266,
			"size":	8
		}, {
			"switch":	16,
			"case":	267,
			"size":	8
		}, {
			"switch":	16,
			"case":	268,
			"size":	8
		}, {
			"switch":	17,
			"case":	1,
			"size":	8
		}, {
			"switch":	18,
			"case":	266,
			"size":	8
		}, {
			"switch":	18,
			"case":	267,
			"size":	8
		}, {
			"switch":	18,
			"case":	268,
			"size":	8
		}, {
			"switch":	19,
			"case":	1,
			"size":	8
		}, {
			"switch":	20,
			"case":	266,
			"size":	8
		}, {
			"switch":	20,
			"case":	267,
			"size":	8
		}, {
			"switch":	20,
			"case":	268,
			"size":	8
		}, {
			"switch":	21,
			"case":	1,
			"size":	8
		}, {
			"switch":	22,
			"case":	1,
			"size":	8
		}, {
			"switch":	22,
			"case":	2,
			"size":	8
		}, {
			"switch":	23,
			"case":	266,
			"size":	8
		}, {
			"switch":	23,
			"case":	267,
			"size":	8
		}, {
			"switch":	23,
			"case":	268,
			"size":	8
		}, {
			"switch":	24,
			"case":	1,
			"size":	8
		}, {
			"switch":	24,
			"case":	2,
			"size":	8
		}, {
			"switch":	24,
			"case":	3,
			"size":	8
		}, {
			"switch":	25,
			"case":	1,
			"size":	8
		}, {
			"switch":	25,
			"case":	2,
			"size":	8
		}, {
			"switch":	26,
			"case":	1,
			"size":	7
		}, {
			"switch":	26,
			"case":	2,
			"size":	7
		}, {
			"switch":	27,
			"case":	245,
			"size":	7
		}, {
			"switch":	27,
			"case":	246,
			"size":	7
		}, {
			"switch":	27,
			"case":	247,
			"size":	7
		}, {
			"switch":	28,
			"case":	1,
			"size":	7
		}, {
			"switch":	28,
			"case":	2,
			"size":	7
		}, {
			"switch":	28,
			"case":	21,
			"size":	7
		}, {
			"switch":	29,
			"case":	1,
			"size":	7
		}, {
			"switch":	29,
			"case":	2,
			"size":	7
		}, {
			"switch":	30,
			"case":	245,
			"size":	7
		}, {
			"switch":	30,
			"case":	246,
			"size":	7
		}, {
			"switch":	30,
			"case":	247,
			"size":	7
		}, {
			"switch":	31,
			"case":	1,
			"size":	7
		}],
	"func_locations":	[{
			"file":	"gzip.c",
			"functions":	[{
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"abort_gzip",
					"begin":	1881,
					"end":	1886
				}, {
					"function":	"abort_gzip_signal",
					"begin":	1891,
					"end":	1902
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"check_ofname",
					"begin":	1632,
					"end":	1654
				}, {
					"function":	"copy_stat",
					"begin":	1661,
					"end":	1717
				}, {
					"function":	"create_outfile",
					"begin":	910,
					"end":	961
				}, {
					"function":	"do_exit",
					"begin":	1834,
					"end":	1856
				}, {
					"function":	"do_list",
					"begin":	1460,
					"end":	1562
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstat64",
					"begin":	511,
					"end":	515
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"fstatat64",
					"begin":	518,
					"end":	523
				}, {
					"function":	"get_method",
					"begin":	1255,
					"end":	1453
				}, {
					"function":	"get_stat_atime",
					"begin":	103,
					"end":	114
				}, {
					"function":	"get_stat_atime_ns",
					"begin":	49,
					"end":	59
				}, {
					"function":	"get_stat_birthtime",
					"begin":	146,
					"end":	185
				}, {
					"function":	"get_stat_birthtime_ns",
					"begin":	88,
					"end":	100
				}, {
					"function":	"get_stat_ctime",
					"begin":	117,
					"end":	128
				}, {
					"function":	"get_stat_ctime_ns",
					"begin":	62,
					"end":	72
				}, {
					"function":	"get_stat_mtime",
					"begin":	131,
					"end":	142
				}, {
					"function":	"get_stat_mtime_ns",
					"begin":	75,
					"end":	85
				}, {
					"function":	"get_suffix",
					"begin":	975,
					"end":	1015
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"getline",
					"begin":	114,
					"end":	118
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"help",
					"begin":	332,
					"end":	379
				}, {
					"function":	"ignore_ptr",
					"begin":	36,
					"end":	36
				}, {
					"function":	"ignore_value",
					"begin":	35,
					"end":	35
				}, {
					"function":	"input_eof",
					"begin":	588,
					"end":	604
				}, {
					"function":	"install_signal_handlers",
					"begin":	1791,
					"end":	1829
				}, {
					"function":	"license",
					"begin":	382,
					"end":	388
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"lstat64",
					"begin":	504,
					"end":	508
				}, {
					"function":	"main",
					"begin":	408,
					"end":	585
				}, {
					"function":	"make_ofname",
					"begin":	1166,
					"end":	1241
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"open_and_stat",
					"begin":	1021,
					"end":	1054
				}, {
					"function":	"open_input_file",
					"begin":	1064,
					"end":	1160
				}, {
					"function":	"progerror",
					"begin":	398,
					"end":	405
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"remove_output_file",
					"begin":	1861,
					"end":	1876
				}, {
					"function":	"rpl_fseek",
					"begin":	282,
					"end":	286
				}, {
					"function":	"shorten_name",
					"begin":	1573,
					"end":	1626
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"stat64",
					"begin":	497,
					"end":	501
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"treat_dir",
					"begin":	1724,
					"end":	1786
				}, {
					"function":	"treat_file",
					"begin":	702,
					"end":	899
				}, {
					"function":	"treat_stdin",
					"begin":	609,
					"end":	697
				}, {
					"function":	"try_help",
					"begin":	323,
					"end":	329
				}, {
					"function":	"version",
					"begin":	391,
					"end":	396
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}]
		}]
}
